// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xds/type/matcher/v3/domain.proto

package com.github.xds.type.matcher.v3;

/**
 * <pre>
 * Matches a fully qualified server name against a set of domain
 * names with optional wildcards.
 * </pre>
 *
 * Protobuf type {@code xds.type.matcher.v3.ServerNameMatcher}
 */
public final class ServerNameMatcher extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:xds.type.matcher.v3.ServerNameMatcher)
    ServerNameMatcherOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ServerNameMatcher.newBuilder() to construct.
  private ServerNameMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ServerNameMatcher() {
    domainMatchers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ServerNameMatcher();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ServerNameMatcher(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              domainMatchers_ = new java.util.ArrayList<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher>();
              mutable_bitField0_ |= 0x00000001;
            }
            domainMatchers_.add(
                input.readMessage(com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        domainMatchers_ = java.util.Collections.unmodifiableList(domainMatchers_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.xds.type.matcher.v3.ServerNameMatcher.class, com.github.xds.type.matcher.v3.ServerNameMatcher.Builder.class);
  }

  public interface DomainMatcherOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @return A list containing the domains.
     */
    java.util.List<java.lang.String>
        getDomainsList();
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @return The count of domains.
     */
    int getDomainsCount();
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @param index The index of the element to return.
     * @return The domains at the given index.
     */
    java.lang.String getDomains(int index);
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the domains at the given index.
     */
    com.google.protobuf.ByteString
        getDomainsBytes(int index);

    /**
     * <pre>
     * Match action to apply when the server name matches any of the domain
     * names in the matcher.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return Whether the onMatch field is set.
     */
    boolean hasOnMatch();
    /**
     * <pre>
     * Match action to apply when the server name matches any of the domain
     * names in the matcher.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return The onMatch.
     */
    com.github.xds.type.matcher.v3.Matcher.OnMatch getOnMatch();
    /**
     * <pre>
     * Match action to apply when the server name matches any of the domain
     * names in the matcher.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     */
    com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder getOnMatchOrBuilder();
  }
  /**
   * <pre>
   * Specifies a set of exact and wildcard domains and a match action. The
   * wildcard symbol ``*`` must appear at most once as the left-most part of
   * the domain on a dot border. The wildcard matches one or more non-empty
   * domain parts.
   * </pre>
   *
   * Protobuf type {@code xds.type.matcher.v3.ServerNameMatcher.DomainMatcher}
   */
  public static final class DomainMatcher extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)
      DomainMatcherOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DomainMatcher.newBuilder() to construct.
    private DomainMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DomainMatcher() {
      domains_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DomainMatcher();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DomainMatcher(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                domains_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              domains_.add(s);
              break;
            }
            case 18: {
              com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder subBuilder = null;
              if (onMatch_ != null) {
                subBuilder = onMatch_.toBuilder();
              }
              onMatch_ = input.readMessage(com.github.xds.type.matcher.v3.Matcher.OnMatch.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(onMatch_);
                onMatch_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          domains_ = domains_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_DomainMatcher_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_DomainMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.class, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder.class);
    }

    public static final int DOMAINS_FIELD_NUMBER = 1;
    private com.google.protobuf.LazyStringList domains_;
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @return A list containing the domains.
     */
    public com.google.protobuf.ProtocolStringList
        getDomainsList() {
      return domains_;
    }
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @return The count of domains.
     */
    public int getDomainsCount() {
      return domains_.size();
    }
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @param index The index of the element to return.
     * @return The domains at the given index.
     */
    public java.lang.String getDomains(int index) {
      return domains_.get(index);
    }
    /**
     * <pre>
     * A non-empty set of domain names with optional wildcards, e.g.
     * ``www.example.com``, ``*.com``, or ``*``.
     * </pre>
     *
     * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the domains at the given index.
     */
    public com.google.protobuf.ByteString
        getDomainsBytes(int index) {
      return domains_.getByteString(index);
    }

    public static final int ON_MATCH_FIELD_NUMBER = 2;
    private com.github.xds.type.matcher.v3.Matcher.OnMatch onMatch_;
    /**
     * <pre>
     * Match action to apply when the server name matches any of the domain
     * names in the matcher.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return Whether the onMatch field is set.
     */
    @java.lang.Override
    public boolean hasOnMatch() {
      return onMatch_ != null;
    }
    /**
     * <pre>
     * Match action to apply when the server name matches any of the domain
     * names in the matcher.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return The onMatch.
     */
    @java.lang.Override
    public com.github.xds.type.matcher.v3.Matcher.OnMatch getOnMatch() {
      return onMatch_ == null ? com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
    }
    /**
     * <pre>
     * Match action to apply when the server name matches any of the domain
     * names in the matcher.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     */
    @java.lang.Override
    public com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder getOnMatchOrBuilder() {
      return getOnMatch();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < domains_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, domains_.getRaw(i));
      }
      if (onMatch_ != null) {
        output.writeMessage(2, getOnMatch());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < domains_.size(); i++) {
          dataSize += computeStringSizeNoTag(domains_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDomainsList().size();
      }
      if (onMatch_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOnMatch());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)) {
        return super.equals(obj);
      }
      com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher other = (com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher) obj;

      if (!getDomainsList()
          .equals(other.getDomainsList())) return false;
      if (hasOnMatch() != other.hasOnMatch()) return false;
      if (hasOnMatch()) {
        if (!getOnMatch()
            .equals(other.getOnMatch())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDomainsCount() > 0) {
        hash = (37 * hash) + DOMAINS_FIELD_NUMBER;
        hash = (53 * hash) + getDomainsList().hashCode();
      }
      if (hasOnMatch()) {
        hash = (37 * hash) + ON_MATCH_FIELD_NUMBER;
        hash = (53 * hash) + getOnMatch().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a set of exact and wildcard domains and a match action. The
     * wildcard symbol ``*`` must appear at most once as the left-most part of
     * the domain on a dot border. The wildcard matches one or more non-empty
     * domain parts.
     * </pre>
     *
     * Protobuf type {@code xds.type.matcher.v3.ServerNameMatcher.DomainMatcher}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_DomainMatcher_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_DomainMatcher_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.class, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder.class);
      }

      // Construct using com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        domains_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (onMatchBuilder_ == null) {
          onMatch_ = null;
        } else {
          onMatch_ = null;
          onMatchBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_DomainMatcher_descriptor;
      }

      @java.lang.Override
      public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher getDefaultInstanceForType() {
        return com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.getDefaultInstance();
      }

      @java.lang.Override
      public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher build() {
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher buildPartial() {
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher result = new com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          domains_ = domains_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.domains_ = domains_;
        if (onMatchBuilder_ == null) {
          result.onMatch_ = onMatch_;
        } else {
          result.onMatch_ = onMatchBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher) {
          return mergeFrom((com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher other) {
        if (other == com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.getDefaultInstance()) return this;
        if (!other.domains_.isEmpty()) {
          if (domains_.isEmpty()) {
            domains_ = other.domains_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDomainsIsMutable();
            domains_.addAll(other.domains_);
          }
          onChanged();
        }
        if (other.hasOnMatch()) {
          mergeOnMatch(other.getOnMatch());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList domains_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDomainsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          domains_ = new com.google.protobuf.LazyStringArrayList(domains_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @return A list containing the domains.
       */
      public com.google.protobuf.ProtocolStringList
          getDomainsList() {
        return domains_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @return The count of domains.
       */
      public int getDomainsCount() {
        return domains_.size();
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @param index The index of the element to return.
       * @return The domains at the given index.
       */
      public java.lang.String getDomains(int index) {
        return domains_.get(index);
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @param index The index of the value to return.
       * @return The bytes of the domains at the given index.
       */
      public com.google.protobuf.ByteString
          getDomainsBytes(int index) {
        return domains_.getByteString(index);
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @param index The index to set the value at.
       * @param value The domains to set.
       * @return This builder for chaining.
       */
      public Builder setDomains(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDomainsIsMutable();
        domains_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @param value The domains to add.
       * @return This builder for chaining.
       */
      public Builder addDomains(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDomainsIsMutable();
        domains_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @param values The domains to add.
       * @return This builder for chaining.
       */
      public Builder addAllDomains(
          java.lang.Iterable<java.lang.String> values) {
        ensureDomainsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, domains_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearDomains() {
        domains_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A non-empty set of domain names with optional wildcards, e.g.
       * ``www.example.com``, ``*.com``, or ``*``.
       * </pre>
       *
       * <code>repeated string domains = 1 [(.validate.rules) = { ... }</code>
       * @param value The bytes of the domains to add.
       * @return This builder for chaining.
       */
      public Builder addDomainsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureDomainsIsMutable();
        domains_.add(value);
        onChanged();
        return this;
      }

      private com.github.xds.type.matcher.v3.Matcher.OnMatch onMatch_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.xds.type.matcher.v3.Matcher.OnMatch, com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder, com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder> onMatchBuilder_;
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       * @return Whether the onMatch field is set.
       */
      public boolean hasOnMatch() {
        return onMatchBuilder_ != null || onMatch_ != null;
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       * @return The onMatch.
       */
      public com.github.xds.type.matcher.v3.Matcher.OnMatch getOnMatch() {
        if (onMatchBuilder_ == null) {
          return onMatch_ == null ? com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
        } else {
          return onMatchBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder setOnMatch(com.github.xds.type.matcher.v3.Matcher.OnMatch value) {
        if (onMatchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          onMatch_ = value;
          onChanged();
        } else {
          onMatchBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder setOnMatch(
          com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder builderForValue) {
        if (onMatchBuilder_ == null) {
          onMatch_ = builderForValue.build();
          onChanged();
        } else {
          onMatchBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder mergeOnMatch(com.github.xds.type.matcher.v3.Matcher.OnMatch value) {
        if (onMatchBuilder_ == null) {
          if (onMatch_ != null) {
            onMatch_ =
              com.github.xds.type.matcher.v3.Matcher.OnMatch.newBuilder(onMatch_).mergeFrom(value).buildPartial();
          } else {
            onMatch_ = value;
          }
          onChanged();
        } else {
          onMatchBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder clearOnMatch() {
        if (onMatchBuilder_ == null) {
          onMatch_ = null;
          onChanged();
        } else {
          onMatch_ = null;
          onMatchBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder getOnMatchBuilder() {
        
        onChanged();
        return getOnMatchFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder getOnMatchOrBuilder() {
        if (onMatchBuilder_ != null) {
          return onMatchBuilder_.getMessageOrBuilder();
        } else {
          return onMatch_ == null ?
              com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
        }
      }
      /**
       * <pre>
       * Match action to apply when the server name matches any of the domain
       * names in the matcher.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.xds.type.matcher.v3.Matcher.OnMatch, com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder, com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder> 
          getOnMatchFieldBuilder() {
        if (onMatchBuilder_ == null) {
          onMatchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.github.xds.type.matcher.v3.Matcher.OnMatch, com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder, com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder>(
                  getOnMatch(),
                  getParentForChildren(),
                  isClean());
          onMatch_ = null;
        }
        return onMatchBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)
    }

    // @@protoc_insertion_point(class_scope:xds.type.matcher.v3.ServerNameMatcher.DomainMatcher)
    private static final com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher();
    }

    public static com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DomainMatcher>
        PARSER = new com.google.protobuf.AbstractParser<DomainMatcher>() {
      @java.lang.Override
      public DomainMatcher parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DomainMatcher(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DomainMatcher> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DomainMatcher> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int DOMAIN_MATCHERS_FIELD_NUMBER = 1;
  private java.util.List<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher> domainMatchers_;
  /**
   * <pre>
   * Match a server name by multiple domain matchers. Each domain, exact or
   * wildcard, must appear at most once across all the domain matchers.
   * The server name will be matched against all wildcard domains starting from
   * the longest suffix, i.e. ``www.example.com`` input will be first matched
   * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
   * ``*``, until the associated matcher action accepts the input. Note that
   * wildcards must be on a dot border, and values like ``*w.example.com`` are
   * invalid.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher> getDomainMatchersList() {
    return domainMatchers_;
  }
  /**
   * <pre>
   * Match a server name by multiple domain matchers. Each domain, exact or
   * wildcard, must appear at most once across all the domain matchers.
   * The server name will be matched against all wildcard domains starting from
   * the longest suffix, i.e. ``www.example.com`` input will be first matched
   * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
   * ``*``, until the associated matcher action accepts the input. Note that
   * wildcards must be on a dot border, and values like ``*w.example.com`` are
   * invalid.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder> 
      getDomainMatchersOrBuilderList() {
    return domainMatchers_;
  }
  /**
   * <pre>
   * Match a server name by multiple domain matchers. Each domain, exact or
   * wildcard, must appear at most once across all the domain matchers.
   * The server name will be matched against all wildcard domains starting from
   * the longest suffix, i.e. ``www.example.com`` input will be first matched
   * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
   * ``*``, until the associated matcher action accepts the input. Note that
   * wildcards must be on a dot border, and values like ``*w.example.com`` are
   * invalid.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
   */
  @java.lang.Override
  public int getDomainMatchersCount() {
    return domainMatchers_.size();
  }
  /**
   * <pre>
   * Match a server name by multiple domain matchers. Each domain, exact or
   * wildcard, must appear at most once across all the domain matchers.
   * The server name will be matched against all wildcard domains starting from
   * the longest suffix, i.e. ``www.example.com`` input will be first matched
   * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
   * ``*``, until the associated matcher action accepts the input. Note that
   * wildcards must be on a dot border, and values like ``*w.example.com`` are
   * invalid.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher getDomainMatchers(int index) {
    return domainMatchers_.get(index);
  }
  /**
   * <pre>
   * Match a server name by multiple domain matchers. Each domain, exact or
   * wildcard, must appear at most once across all the domain matchers.
   * The server name will be matched against all wildcard domains starting from
   * the longest suffix, i.e. ``www.example.com`` input will be first matched
   * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
   * ``*``, until the associated matcher action accepts the input. Note that
   * wildcards must be on a dot border, and values like ``*w.example.com`` are
   * invalid.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder getDomainMatchersOrBuilder(
      int index) {
    return domainMatchers_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < domainMatchers_.size(); i++) {
      output.writeMessage(1, domainMatchers_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < domainMatchers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, domainMatchers_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.xds.type.matcher.v3.ServerNameMatcher)) {
      return super.equals(obj);
    }
    com.github.xds.type.matcher.v3.ServerNameMatcher other = (com.github.xds.type.matcher.v3.ServerNameMatcher) obj;

    if (!getDomainMatchersList()
        .equals(other.getDomainMatchersList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getDomainMatchersCount() > 0) {
      hash = (37 * hash) + DOMAIN_MATCHERS_FIELD_NUMBER;
      hash = (53 * hash) + getDomainMatchersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.xds.type.matcher.v3.ServerNameMatcher parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.xds.type.matcher.v3.ServerNameMatcher prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Matches a fully qualified server name against a set of domain
   * names with optional wildcards.
   * </pre>
   *
   * Protobuf type {@code xds.type.matcher.v3.ServerNameMatcher}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:xds.type.matcher.v3.ServerNameMatcher)
      com.github.xds.type.matcher.v3.ServerNameMatcherOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.xds.type.matcher.v3.ServerNameMatcher.class, com.github.xds.type.matcher.v3.ServerNameMatcher.Builder.class);
    }

    // Construct using com.github.xds.type.matcher.v3.ServerNameMatcher.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getDomainMatchersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (domainMatchersBuilder_ == null) {
        domainMatchers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        domainMatchersBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.xds.type.matcher.v3.ServerNameMatcherProto.internal_static_xds_type_matcher_v3_ServerNameMatcher_descriptor;
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.ServerNameMatcher getDefaultInstanceForType() {
      return com.github.xds.type.matcher.v3.ServerNameMatcher.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.ServerNameMatcher build() {
      com.github.xds.type.matcher.v3.ServerNameMatcher result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.ServerNameMatcher buildPartial() {
      com.github.xds.type.matcher.v3.ServerNameMatcher result = new com.github.xds.type.matcher.v3.ServerNameMatcher(this);
      int from_bitField0_ = bitField0_;
      if (domainMatchersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          domainMatchers_ = java.util.Collections.unmodifiableList(domainMatchers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.domainMatchers_ = domainMatchers_;
      } else {
        result.domainMatchers_ = domainMatchersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.xds.type.matcher.v3.ServerNameMatcher) {
        return mergeFrom((com.github.xds.type.matcher.v3.ServerNameMatcher)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.xds.type.matcher.v3.ServerNameMatcher other) {
      if (other == com.github.xds.type.matcher.v3.ServerNameMatcher.getDefaultInstance()) return this;
      if (domainMatchersBuilder_ == null) {
        if (!other.domainMatchers_.isEmpty()) {
          if (domainMatchers_.isEmpty()) {
            domainMatchers_ = other.domainMatchers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDomainMatchersIsMutable();
            domainMatchers_.addAll(other.domainMatchers_);
          }
          onChanged();
        }
      } else {
        if (!other.domainMatchers_.isEmpty()) {
          if (domainMatchersBuilder_.isEmpty()) {
            domainMatchersBuilder_.dispose();
            domainMatchersBuilder_ = null;
            domainMatchers_ = other.domainMatchers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            domainMatchersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDomainMatchersFieldBuilder() : null;
          } else {
            domainMatchersBuilder_.addAllMessages(other.domainMatchers_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.github.xds.type.matcher.v3.ServerNameMatcher parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.github.xds.type.matcher.v3.ServerNameMatcher) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher> domainMatchers_ =
      java.util.Collections.emptyList();
    private void ensureDomainMatchersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        domainMatchers_ = new java.util.ArrayList<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher>(domainMatchers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder> domainMatchersBuilder_;

    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public java.util.List<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher> getDomainMatchersList() {
      if (domainMatchersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(domainMatchers_);
      } else {
        return domainMatchersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public int getDomainMatchersCount() {
      if (domainMatchersBuilder_ == null) {
        return domainMatchers_.size();
      } else {
        return domainMatchersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher getDomainMatchers(int index) {
      if (domainMatchersBuilder_ == null) {
        return domainMatchers_.get(index);
      } else {
        return domainMatchersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder setDomainMatchers(
        int index, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher value) {
      if (domainMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDomainMatchersIsMutable();
        domainMatchers_.set(index, value);
        onChanged();
      } else {
        domainMatchersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder setDomainMatchers(
        int index, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder builderForValue) {
      if (domainMatchersBuilder_ == null) {
        ensureDomainMatchersIsMutable();
        domainMatchers_.set(index, builderForValue.build());
        onChanged();
      } else {
        domainMatchersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder addDomainMatchers(com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher value) {
      if (domainMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDomainMatchersIsMutable();
        domainMatchers_.add(value);
        onChanged();
      } else {
        domainMatchersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder addDomainMatchers(
        int index, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher value) {
      if (domainMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDomainMatchersIsMutable();
        domainMatchers_.add(index, value);
        onChanged();
      } else {
        domainMatchersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder addDomainMatchers(
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder builderForValue) {
      if (domainMatchersBuilder_ == null) {
        ensureDomainMatchersIsMutable();
        domainMatchers_.add(builderForValue.build());
        onChanged();
      } else {
        domainMatchersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder addDomainMatchers(
        int index, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder builderForValue) {
      if (domainMatchersBuilder_ == null) {
        ensureDomainMatchersIsMutable();
        domainMatchers_.add(index, builderForValue.build());
        onChanged();
      } else {
        domainMatchersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder addAllDomainMatchers(
        java.lang.Iterable<? extends com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher> values) {
      if (domainMatchersBuilder_ == null) {
        ensureDomainMatchersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, domainMatchers_);
        onChanged();
      } else {
        domainMatchersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder clearDomainMatchers() {
      if (domainMatchersBuilder_ == null) {
        domainMatchers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        domainMatchersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public Builder removeDomainMatchers(int index) {
      if (domainMatchersBuilder_ == null) {
        ensureDomainMatchersIsMutable();
        domainMatchers_.remove(index);
        onChanged();
      } else {
        domainMatchersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder getDomainMatchersBuilder(
        int index) {
      return getDomainMatchersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder getDomainMatchersOrBuilder(
        int index) {
      if (domainMatchersBuilder_ == null) {
        return domainMatchers_.get(index);  } else {
        return domainMatchersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public java.util.List<? extends com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder> 
         getDomainMatchersOrBuilderList() {
      if (domainMatchersBuilder_ != null) {
        return domainMatchersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(domainMatchers_);
      }
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder addDomainMatchersBuilder() {
      return getDomainMatchersFieldBuilder().addBuilder(
          com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder addDomainMatchersBuilder(
        int index) {
      return getDomainMatchersFieldBuilder().addBuilder(
          index, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Match a server name by multiple domain matchers. Each domain, exact or
     * wildcard, must appear at most once across all the domain matchers.
     * The server name will be matched against all wildcard domains starting from
     * the longest suffix, i.e. ``www.example.com`` input will be first matched
     * against ``www.example.com``, then ``*.example.com``, then ``*.com``, then
     * ``*``, until the associated matcher action accepts the input. Note that
     * wildcards must be on a dot border, and values like ``*w.example.com`` are
     * invalid.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.ServerNameMatcher.DomainMatcher domain_matchers = 1;</code>
     */
    public java.util.List<com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder> 
         getDomainMatchersBuilderList() {
      return getDomainMatchersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder> 
        getDomainMatchersFieldBuilder() {
      if (domainMatchersBuilder_ == null) {
        domainMatchersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcher.Builder, com.github.xds.type.matcher.v3.ServerNameMatcher.DomainMatcherOrBuilder>(
                domainMatchers_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        domainMatchers_ = null;
      }
      return domainMatchersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:xds.type.matcher.v3.ServerNameMatcher)
  }

  // @@protoc_insertion_point(class_scope:xds.type.matcher.v3.ServerNameMatcher)
  private static final com.github.xds.type.matcher.v3.ServerNameMatcher DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.xds.type.matcher.v3.ServerNameMatcher();
  }

  public static com.github.xds.type.matcher.v3.ServerNameMatcher getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ServerNameMatcher>
      PARSER = new com.google.protobuf.AbstractParser<ServerNameMatcher>() {
    @java.lang.Override
    public ServerNameMatcher parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ServerNameMatcher(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ServerNameMatcher> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ServerNameMatcher> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.xds.type.matcher.v3.ServerNameMatcher getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

