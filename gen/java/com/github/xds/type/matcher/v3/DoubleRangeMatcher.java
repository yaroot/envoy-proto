// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xds/type/matcher/v3/range.proto

package com.github.xds.type.matcher.v3;

/**
 * <pre>
 * Specifies a set of ranges for matching a double number and the associated
 * match actions.
 * </pre>
 *
 * Protobuf type {@code xds.type.matcher.v3.DoubleRangeMatcher}
 */
public final class DoubleRangeMatcher extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:xds.type.matcher.v3.DoubleRangeMatcher)
    DoubleRangeMatcherOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DoubleRangeMatcher.newBuilder() to construct.
  private DoubleRangeMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DoubleRangeMatcher() {
    rangeMatchers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DoubleRangeMatcher();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.xds.type.matcher.v3.DoubleRangeMatcher.class, com.github.xds.type.matcher.v3.DoubleRangeMatcher.Builder.class);
  }

  public interface RangeMatcherOrBuilder extends
      // @@protoc_insertion_point(interface_extends:xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    java.util.List<com.github.xds.type.v3.DoubleRange> 
        getRangesList();
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    com.github.xds.type.v3.DoubleRange getRanges(int index);
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    int getRangesCount();
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    java.util.List<? extends com.github.xds.type.v3.DoubleRangeOrBuilder> 
        getRangesOrBuilderList();
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    com.github.xds.type.v3.DoubleRangeOrBuilder getRangesOrBuilder(
        int index);

    /**
     * <pre>
     * Match action to apply when the input number is within one of the ranges.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return Whether the onMatch field is set.
     */
    boolean hasOnMatch();
    /**
     * <pre>
     * Match action to apply when the input number is within one of the ranges.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return The onMatch.
     */
    com.github.xds.type.matcher.v3.Matcher.OnMatch getOnMatch();
    /**
     * <pre>
     * Match action to apply when the input number is within one of the ranges.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     */
    com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder getOnMatchOrBuilder();
  }
  /**
   * <pre>
   * Specifies a list of number ranges and a match action.
   * </pre>
   *
   * Protobuf type {@code xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher}
   */
  public static final class RangeMatcher extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)
      RangeMatcherOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RangeMatcher.newBuilder() to construct.
    private RangeMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RangeMatcher() {
      ranges_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RangeMatcher();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_RangeMatcher_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_RangeMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.class, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder.class);
    }

    public static final int RANGES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.github.xds.type.v3.DoubleRange> ranges_;
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<com.github.xds.type.v3.DoubleRange> getRangesList() {
      return ranges_;
    }
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.github.xds.type.v3.DoubleRangeOrBuilder> 
        getRangesOrBuilderList() {
      return ranges_;
    }
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public int getRangesCount() {
      return ranges_.size();
    }
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.github.xds.type.v3.DoubleRange getRanges(int index) {
      return ranges_.get(index);
    }
    /**
     * <pre>
     * A non-empty set of double ranges.
     * </pre>
     *
     * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.github.xds.type.v3.DoubleRangeOrBuilder getRangesOrBuilder(
        int index) {
      return ranges_.get(index);
    }

    public static final int ON_MATCH_FIELD_NUMBER = 2;
    private com.github.xds.type.matcher.v3.Matcher.OnMatch onMatch_;
    /**
     * <pre>
     * Match action to apply when the input number is within one of the ranges.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return Whether the onMatch field is set.
     */
    @java.lang.Override
    public boolean hasOnMatch() {
      return onMatch_ != null;
    }
    /**
     * <pre>
     * Match action to apply when the input number is within one of the ranges.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     * @return The onMatch.
     */
    @java.lang.Override
    public com.github.xds.type.matcher.v3.Matcher.OnMatch getOnMatch() {
      return onMatch_ == null ? com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
    }
    /**
     * <pre>
     * Match action to apply when the input number is within one of the ranges.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
     */
    @java.lang.Override
    public com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder getOnMatchOrBuilder() {
      return onMatch_ == null ? com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < ranges_.size(); i++) {
        output.writeMessage(1, ranges_.get(i));
      }
      if (onMatch_ != null) {
        output.writeMessage(2, getOnMatch());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < ranges_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, ranges_.get(i));
      }
      if (onMatch_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOnMatch());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)) {
        return super.equals(obj);
      }
      com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher other = (com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher) obj;

      if (!getRangesList()
          .equals(other.getRangesList())) return false;
      if (hasOnMatch() != other.hasOnMatch()) return false;
      if (hasOnMatch()) {
        if (!getOnMatch()
            .equals(other.getOnMatch())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRangesCount() > 0) {
        hash = (37 * hash) + RANGES_FIELD_NUMBER;
        hash = (53 * hash) + getRangesList().hashCode();
      }
      if (hasOnMatch()) {
        hash = (37 * hash) + ON_MATCH_FIELD_NUMBER;
        hash = (53 * hash) + getOnMatch().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a list of number ranges and a match action.
     * </pre>
     *
     * Protobuf type {@code xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)
        com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_RangeMatcher_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_RangeMatcher_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.class, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder.class);
      }

      // Construct using com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (rangesBuilder_ == null) {
          ranges_ = java.util.Collections.emptyList();
        } else {
          ranges_ = null;
          rangesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        onMatch_ = null;
        if (onMatchBuilder_ != null) {
          onMatchBuilder_.dispose();
          onMatchBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_RangeMatcher_descriptor;
      }

      @java.lang.Override
      public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher getDefaultInstanceForType() {
        return com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.getDefaultInstance();
      }

      @java.lang.Override
      public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher build() {
        com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher buildPartial() {
        com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher result = new com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher result) {
        if (rangesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            ranges_ = java.util.Collections.unmodifiableList(ranges_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.ranges_ = ranges_;
        } else {
          result.ranges_ = rangesBuilder_.build();
        }
      }

      private void buildPartial0(com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.onMatch_ = onMatchBuilder_ == null
              ? onMatch_
              : onMatchBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher) {
          return mergeFrom((com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher other) {
        if (other == com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.getDefaultInstance()) return this;
        if (rangesBuilder_ == null) {
          if (!other.ranges_.isEmpty()) {
            if (ranges_.isEmpty()) {
              ranges_ = other.ranges_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRangesIsMutable();
              ranges_.addAll(other.ranges_);
            }
            onChanged();
          }
        } else {
          if (!other.ranges_.isEmpty()) {
            if (rangesBuilder_.isEmpty()) {
              rangesBuilder_.dispose();
              rangesBuilder_ = null;
              ranges_ = other.ranges_;
              bitField0_ = (bitField0_ & ~0x00000001);
              rangesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRangesFieldBuilder() : null;
            } else {
              rangesBuilder_.addAllMessages(other.ranges_);
            }
          }
        }
        if (other.hasOnMatch()) {
          mergeOnMatch(other.getOnMatch());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.github.xds.type.v3.DoubleRange m =
                    input.readMessage(
                        com.github.xds.type.v3.DoubleRange.parser(),
                        extensionRegistry);
                if (rangesBuilder_ == null) {
                  ensureRangesIsMutable();
                  ranges_.add(m);
                } else {
                  rangesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getOnMatchFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.github.xds.type.v3.DoubleRange> ranges_ =
        java.util.Collections.emptyList();
      private void ensureRangesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          ranges_ = new java.util.ArrayList<com.github.xds.type.v3.DoubleRange>(ranges_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.github.xds.type.v3.DoubleRange, com.github.xds.type.v3.DoubleRange.Builder, com.github.xds.type.v3.DoubleRangeOrBuilder> rangesBuilder_;

      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public java.util.List<com.github.xds.type.v3.DoubleRange> getRangesList() {
        if (rangesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ranges_);
        } else {
          return rangesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public int getRangesCount() {
        if (rangesBuilder_ == null) {
          return ranges_.size();
        } else {
          return rangesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public com.github.xds.type.v3.DoubleRange getRanges(int index) {
        if (rangesBuilder_ == null) {
          return ranges_.get(index);
        } else {
          return rangesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setRanges(
          int index, com.github.xds.type.v3.DoubleRange value) {
        if (rangesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRangesIsMutable();
          ranges_.set(index, value);
          onChanged();
        } else {
          rangesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setRanges(
          int index, com.github.xds.type.v3.DoubleRange.Builder builderForValue) {
        if (rangesBuilder_ == null) {
          ensureRangesIsMutable();
          ranges_.set(index, builderForValue.build());
          onChanged();
        } else {
          rangesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder addRanges(com.github.xds.type.v3.DoubleRange value) {
        if (rangesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRangesIsMutable();
          ranges_.add(value);
          onChanged();
        } else {
          rangesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder addRanges(
          int index, com.github.xds.type.v3.DoubleRange value) {
        if (rangesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRangesIsMutable();
          ranges_.add(index, value);
          onChanged();
        } else {
          rangesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder addRanges(
          com.github.xds.type.v3.DoubleRange.Builder builderForValue) {
        if (rangesBuilder_ == null) {
          ensureRangesIsMutable();
          ranges_.add(builderForValue.build());
          onChanged();
        } else {
          rangesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder addRanges(
          int index, com.github.xds.type.v3.DoubleRange.Builder builderForValue) {
        if (rangesBuilder_ == null) {
          ensureRangesIsMutable();
          ranges_.add(index, builderForValue.build());
          onChanged();
        } else {
          rangesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder addAllRanges(
          java.lang.Iterable<? extends com.github.xds.type.v3.DoubleRange> values) {
        if (rangesBuilder_ == null) {
          ensureRangesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ranges_);
          onChanged();
        } else {
          rangesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder clearRanges() {
        if (rangesBuilder_ == null) {
          ranges_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          rangesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder removeRanges(int index) {
        if (rangesBuilder_ == null) {
          ensureRangesIsMutable();
          ranges_.remove(index);
          onChanged();
        } else {
          rangesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public com.github.xds.type.v3.DoubleRange.Builder getRangesBuilder(
          int index) {
        return getRangesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public com.github.xds.type.v3.DoubleRangeOrBuilder getRangesOrBuilder(
          int index) {
        if (rangesBuilder_ == null) {
          return ranges_.get(index);  } else {
          return rangesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public java.util.List<? extends com.github.xds.type.v3.DoubleRangeOrBuilder> 
           getRangesOrBuilderList() {
        if (rangesBuilder_ != null) {
          return rangesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ranges_);
        }
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public com.github.xds.type.v3.DoubleRange.Builder addRangesBuilder() {
        return getRangesFieldBuilder().addBuilder(
            com.github.xds.type.v3.DoubleRange.getDefaultInstance());
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public com.github.xds.type.v3.DoubleRange.Builder addRangesBuilder(
          int index) {
        return getRangesFieldBuilder().addBuilder(
            index, com.github.xds.type.v3.DoubleRange.getDefaultInstance());
      }
      /**
       * <pre>
       * A non-empty set of double ranges.
       * </pre>
       *
       * <code>repeated .xds.type.v3.DoubleRange ranges = 1 [(.validate.rules) = { ... }</code>
       */
      public java.util.List<com.github.xds.type.v3.DoubleRange.Builder> 
           getRangesBuilderList() {
        return getRangesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.github.xds.type.v3.DoubleRange, com.github.xds.type.v3.DoubleRange.Builder, com.github.xds.type.v3.DoubleRangeOrBuilder> 
          getRangesFieldBuilder() {
        if (rangesBuilder_ == null) {
          rangesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.github.xds.type.v3.DoubleRange, com.github.xds.type.v3.DoubleRange.Builder, com.github.xds.type.v3.DoubleRangeOrBuilder>(
                  ranges_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          ranges_ = null;
        }
        return rangesBuilder_;
      }

      private com.github.xds.type.matcher.v3.Matcher.OnMatch onMatch_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.xds.type.matcher.v3.Matcher.OnMatch, com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder, com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder> onMatchBuilder_;
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       * @return Whether the onMatch field is set.
       */
      public boolean hasOnMatch() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       * @return The onMatch.
       */
      public com.github.xds.type.matcher.v3.Matcher.OnMatch getOnMatch() {
        if (onMatchBuilder_ == null) {
          return onMatch_ == null ? com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
        } else {
          return onMatchBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder setOnMatch(com.github.xds.type.matcher.v3.Matcher.OnMatch value) {
        if (onMatchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          onMatch_ = value;
        } else {
          onMatchBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder setOnMatch(
          com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder builderForValue) {
        if (onMatchBuilder_ == null) {
          onMatch_ = builderForValue.build();
        } else {
          onMatchBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder mergeOnMatch(com.github.xds.type.matcher.v3.Matcher.OnMatch value) {
        if (onMatchBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            onMatch_ != null &&
            onMatch_ != com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance()) {
            getOnMatchBuilder().mergeFrom(value);
          } else {
            onMatch_ = value;
          }
        } else {
          onMatchBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public Builder clearOnMatch() {
        bitField0_ = (bitField0_ & ~0x00000002);
        onMatch_ = null;
        if (onMatchBuilder_ != null) {
          onMatchBuilder_.dispose();
          onMatchBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder getOnMatchBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOnMatchFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      public com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder getOnMatchOrBuilder() {
        if (onMatchBuilder_ != null) {
          return onMatchBuilder_.getMessageOrBuilder();
        } else {
          return onMatch_ == null ?
              com.github.xds.type.matcher.v3.Matcher.OnMatch.getDefaultInstance() : onMatch_;
        }
      }
      /**
       * <pre>
       * Match action to apply when the input number is within one of the ranges.
       * </pre>
       *
       * <code>.xds.type.matcher.v3.Matcher.OnMatch on_match = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.github.xds.type.matcher.v3.Matcher.OnMatch, com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder, com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder> 
          getOnMatchFieldBuilder() {
        if (onMatchBuilder_ == null) {
          onMatchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.github.xds.type.matcher.v3.Matcher.OnMatch, com.github.xds.type.matcher.v3.Matcher.OnMatch.Builder, com.github.xds.type.matcher.v3.Matcher.OnMatchOrBuilder>(
                  getOnMatch(),
                  getParentForChildren(),
                  isClean());
          onMatch_ = null;
        }
        return onMatchBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)
    }

    // @@protoc_insertion_point(class_scope:xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher)
    private static final com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher();
    }

    public static com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RangeMatcher>
        PARSER = new com.google.protobuf.AbstractParser<RangeMatcher>() {
      @java.lang.Override
      public RangeMatcher parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RangeMatcher> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RangeMatcher> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int RANGE_MATCHERS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher> rangeMatchers_;
  /**
   * <pre>
   * Match a number by a list of number ranges. If multiple ranges contain the
   * input number, then the first action in this list is taken.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher> getRangeMatchersList() {
    return rangeMatchers_;
  }
  /**
   * <pre>
   * Match a number by a list of number ranges. If multiple ranges contain the
   * input number, then the first action in this list is taken.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder> 
      getRangeMatchersOrBuilderList() {
    return rangeMatchers_;
  }
  /**
   * <pre>
   * Match a number by a list of number ranges. If multiple ranges contain the
   * input number, then the first action in this list is taken.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
   */
  @java.lang.Override
  public int getRangeMatchersCount() {
    return rangeMatchers_.size();
  }
  /**
   * <pre>
   * Match a number by a list of number ranges. If multiple ranges contain the
   * input number, then the first action in this list is taken.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher getRangeMatchers(int index) {
    return rangeMatchers_.get(index);
  }
  /**
   * <pre>
   * Match a number by a list of number ranges. If multiple ranges contain the
   * input number, then the first action in this list is taken.
   * </pre>
   *
   * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder getRangeMatchersOrBuilder(
      int index) {
    return rangeMatchers_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < rangeMatchers_.size(); i++) {
      output.writeMessage(1, rangeMatchers_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < rangeMatchers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, rangeMatchers_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.xds.type.matcher.v3.DoubleRangeMatcher)) {
      return super.equals(obj);
    }
    com.github.xds.type.matcher.v3.DoubleRangeMatcher other = (com.github.xds.type.matcher.v3.DoubleRangeMatcher) obj;

    if (!getRangeMatchersList()
        .equals(other.getRangeMatchersList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getRangeMatchersCount() > 0) {
      hash = (37 * hash) + RANGE_MATCHERS_FIELD_NUMBER;
      hash = (53 * hash) + getRangeMatchersList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.xds.type.matcher.v3.DoubleRangeMatcher prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies a set of ranges for matching a double number and the associated
   * match actions.
   * </pre>
   *
   * Protobuf type {@code xds.type.matcher.v3.DoubleRangeMatcher}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:xds.type.matcher.v3.DoubleRangeMatcher)
      com.github.xds.type.matcher.v3.DoubleRangeMatcherOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.xds.type.matcher.v3.DoubleRangeMatcher.class, com.github.xds.type.matcher.v3.DoubleRangeMatcher.Builder.class);
    }

    // Construct using com.github.xds.type.matcher.v3.DoubleRangeMatcher.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (rangeMatchersBuilder_ == null) {
        rangeMatchers_ = java.util.Collections.emptyList();
      } else {
        rangeMatchers_ = null;
        rangeMatchersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.xds.type.matcher.v3.RangeProto.internal_static_xds_type_matcher_v3_DoubleRangeMatcher_descriptor;
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher getDefaultInstanceForType() {
      return com.github.xds.type.matcher.v3.DoubleRangeMatcher.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher build() {
      com.github.xds.type.matcher.v3.DoubleRangeMatcher result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher buildPartial() {
      com.github.xds.type.matcher.v3.DoubleRangeMatcher result = new com.github.xds.type.matcher.v3.DoubleRangeMatcher(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.github.xds.type.matcher.v3.DoubleRangeMatcher result) {
      if (rangeMatchersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          rangeMatchers_ = java.util.Collections.unmodifiableList(rangeMatchers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.rangeMatchers_ = rangeMatchers_;
      } else {
        result.rangeMatchers_ = rangeMatchersBuilder_.build();
      }
    }

    private void buildPartial0(com.github.xds.type.matcher.v3.DoubleRangeMatcher result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.xds.type.matcher.v3.DoubleRangeMatcher) {
        return mergeFrom((com.github.xds.type.matcher.v3.DoubleRangeMatcher)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.xds.type.matcher.v3.DoubleRangeMatcher other) {
      if (other == com.github.xds.type.matcher.v3.DoubleRangeMatcher.getDefaultInstance()) return this;
      if (rangeMatchersBuilder_ == null) {
        if (!other.rangeMatchers_.isEmpty()) {
          if (rangeMatchers_.isEmpty()) {
            rangeMatchers_ = other.rangeMatchers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRangeMatchersIsMutable();
            rangeMatchers_.addAll(other.rangeMatchers_);
          }
          onChanged();
        }
      } else {
        if (!other.rangeMatchers_.isEmpty()) {
          if (rangeMatchersBuilder_.isEmpty()) {
            rangeMatchersBuilder_.dispose();
            rangeMatchersBuilder_ = null;
            rangeMatchers_ = other.rangeMatchers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            rangeMatchersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRangeMatchersFieldBuilder() : null;
          } else {
            rangeMatchersBuilder_.addAllMessages(other.rangeMatchers_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher m =
                  input.readMessage(
                      com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.parser(),
                      extensionRegistry);
              if (rangeMatchersBuilder_ == null) {
                ensureRangeMatchersIsMutable();
                rangeMatchers_.add(m);
              } else {
                rangeMatchersBuilder_.addMessage(m);
              }
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher> rangeMatchers_ =
      java.util.Collections.emptyList();
    private void ensureRangeMatchersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        rangeMatchers_ = new java.util.ArrayList<com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher>(rangeMatchers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder> rangeMatchersBuilder_;

    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public java.util.List<com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher> getRangeMatchersList() {
      if (rangeMatchersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(rangeMatchers_);
      } else {
        return rangeMatchersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public int getRangeMatchersCount() {
      if (rangeMatchersBuilder_ == null) {
        return rangeMatchers_.size();
      } else {
        return rangeMatchersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher getRangeMatchers(int index) {
      if (rangeMatchersBuilder_ == null) {
        return rangeMatchers_.get(index);
      } else {
        return rangeMatchersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder setRangeMatchers(
        int index, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher value) {
      if (rangeMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRangeMatchersIsMutable();
        rangeMatchers_.set(index, value);
        onChanged();
      } else {
        rangeMatchersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder setRangeMatchers(
        int index, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder builderForValue) {
      if (rangeMatchersBuilder_ == null) {
        ensureRangeMatchersIsMutable();
        rangeMatchers_.set(index, builderForValue.build());
        onChanged();
      } else {
        rangeMatchersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder addRangeMatchers(com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher value) {
      if (rangeMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRangeMatchersIsMutable();
        rangeMatchers_.add(value);
        onChanged();
      } else {
        rangeMatchersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder addRangeMatchers(
        int index, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher value) {
      if (rangeMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRangeMatchersIsMutable();
        rangeMatchers_.add(index, value);
        onChanged();
      } else {
        rangeMatchersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder addRangeMatchers(
        com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder builderForValue) {
      if (rangeMatchersBuilder_ == null) {
        ensureRangeMatchersIsMutable();
        rangeMatchers_.add(builderForValue.build());
        onChanged();
      } else {
        rangeMatchersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder addRangeMatchers(
        int index, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder builderForValue) {
      if (rangeMatchersBuilder_ == null) {
        ensureRangeMatchersIsMutable();
        rangeMatchers_.add(index, builderForValue.build());
        onChanged();
      } else {
        rangeMatchersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder addAllRangeMatchers(
        java.lang.Iterable<? extends com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher> values) {
      if (rangeMatchersBuilder_ == null) {
        ensureRangeMatchersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rangeMatchers_);
        onChanged();
      } else {
        rangeMatchersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder clearRangeMatchers() {
      if (rangeMatchersBuilder_ == null) {
        rangeMatchers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        rangeMatchersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public Builder removeRangeMatchers(int index) {
      if (rangeMatchersBuilder_ == null) {
        ensureRangeMatchersIsMutable();
        rangeMatchers_.remove(index);
        onChanged();
      } else {
        rangeMatchersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder getRangeMatchersBuilder(
        int index) {
      return getRangeMatchersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder getRangeMatchersOrBuilder(
        int index) {
      if (rangeMatchersBuilder_ == null) {
        return rangeMatchers_.get(index);  } else {
        return rangeMatchersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public java.util.List<? extends com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder> 
         getRangeMatchersOrBuilderList() {
      if (rangeMatchersBuilder_ != null) {
        return rangeMatchersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(rangeMatchers_);
      }
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder addRangeMatchersBuilder() {
      return getRangeMatchersFieldBuilder().addBuilder(
          com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder addRangeMatchersBuilder(
        int index) {
      return getRangeMatchersFieldBuilder().addBuilder(
          index, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Match a number by a list of number ranges. If multiple ranges contain the
     * input number, then the first action in this list is taken.
     * </pre>
     *
     * <code>repeated .xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher range_matchers = 1;</code>
     */
    public java.util.List<com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder> 
         getRangeMatchersBuilderList() {
      return getRangeMatchersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder> 
        getRangeMatchersFieldBuilder() {
      if (rangeMatchersBuilder_ == null) {
        rangeMatchersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcher.Builder, com.github.xds.type.matcher.v3.DoubleRangeMatcher.RangeMatcherOrBuilder>(
                rangeMatchers_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        rangeMatchers_ = null;
      }
      return rangeMatchersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:xds.type.matcher.v3.DoubleRangeMatcher)
  }

  // @@protoc_insertion_point(class_scope:xds.type.matcher.v3.DoubleRangeMatcher)
  private static final com.github.xds.type.matcher.v3.DoubleRangeMatcher DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.xds.type.matcher.v3.DoubleRangeMatcher();
  }

  public static com.github.xds.type.matcher.v3.DoubleRangeMatcher getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DoubleRangeMatcher>
      PARSER = new com.google.protobuf.AbstractParser<DoubleRangeMatcher>() {
    @java.lang.Override
    public DoubleRangeMatcher parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DoubleRangeMatcher> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DoubleRangeMatcher> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.xds.type.matcher.v3.DoubleRangeMatcher getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

