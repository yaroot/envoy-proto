// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/chromeos/uidetection/v1/ui_detection.proto

package com.google.chromeos.uidetection.v1;

public interface TextBlockDetectionRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.chromeos.uidetection.v1.TextBlockDetectionRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The text block consisting a list of words to locate in the image.
   * </pre>
   *
   * <code>repeated string words = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return A list containing the words.
   */
  java.util.List<java.lang.String>
      getWordsList();
  /**
   * <pre>
   * Required. The text block consisting a list of words to locate in the image.
   * </pre>
   *
   * <code>repeated string words = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The count of words.
   */
  int getWordsCount();
  /**
   * <pre>
   * Required. The text block consisting a list of words to locate in the image.
   * </pre>
   *
   * <code>repeated string words = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @param index The index of the element to return.
   * @return The words at the given index.
   */
  java.lang.String getWords(int index);
  /**
   * <pre>
   * Required. The text block consisting a list of words to locate in the image.
   * </pre>
   *
   * <code>repeated string words = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @param index The index of the value to return.
   * @return The bytes of the words at the given index.
   */
  com.google.protobuf.ByteString
      getWordsBytes(int index);

  /**
   * <pre>
   * Indicating whether the query string is a regex or not.
   * </pre>
   *
   * <code>bool regex_mode = 2;</code>
   * @return The regexMode.
   */
  boolean getRegexMode();

  /**
   * <pre>
   * Indicating whether the detection is an approximate match.
   * </pre>
   *
   * <code>bool disable_approx_match = 3;</code>
   * @return The disableApproxMatch.
   */
  boolean getDisableApproxMatch();

  /**
   * <pre>
   * Levenshtein distance threshold.
   * Applicable only if regex_mode is False.
   * </pre>
   *
   * <code>optional int32 max_edit_distance = 4;</code>
   * @return Whether the maxEditDistance field is set.
   */
  boolean hasMaxEditDistance();
  /**
   * <pre>
   * Levenshtein distance threshold.
   * Applicable only if regex_mode is False.
   * </pre>
   *
   * <code>optional int32 max_edit_distance = 4;</code>
   * @return The maxEditDistance.
   */
  int getMaxEditDistance();
}
