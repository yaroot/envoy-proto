// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/drive/labels/v2/common.proto

package com.google.apps.drive.labels.v2;

/**
 * <pre>
 * The color derived from BadgeConfig and changed to the closest recommended
 * supported color.
 * </pre>
 *
 * Protobuf type {@code google.apps.drive.labels.v2.BadgeColors}
 */
public final class BadgeColors extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.apps.drive.labels.v2.BadgeColors)
    BadgeColorsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BadgeColors.newBuilder() to construct.
  private BadgeColors(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BadgeColors() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new BadgeColors();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.apps.drive.labels.v2.CommonProto.internal_static_google_apps_drive_labels_v2_BadgeColors_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.apps.drive.labels.v2.CommonProto.internal_static_google_apps_drive_labels_v2_BadgeColors_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.apps.drive.labels.v2.BadgeColors.class, com.google.apps.drive.labels.v2.BadgeColors.Builder.class);
  }

  public static final int BACKGROUND_COLOR_FIELD_NUMBER = 1;
  private com.google.type.Color backgroundColor_;
  /**
   * <pre>
   * Output only. Badge background that pairs with the foreground.
   * </pre>
   *
   * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   * @return Whether the backgroundColor field is set.
   */
  @java.lang.Override
  public boolean hasBackgroundColor() {
    return backgroundColor_ != null;
  }
  /**
   * <pre>
   * Output only. Badge background that pairs with the foreground.
   * </pre>
   *
   * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   * @return The backgroundColor.
   */
  @java.lang.Override
  public com.google.type.Color getBackgroundColor() {
    return backgroundColor_ == null ? com.google.type.Color.getDefaultInstance() : backgroundColor_;
  }
  /**
   * <pre>
   * Output only. Badge background that pairs with the foreground.
   * </pre>
   *
   * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   */
  @java.lang.Override
  public com.google.type.ColorOrBuilder getBackgroundColorOrBuilder() {
    return backgroundColor_ == null ? com.google.type.Color.getDefaultInstance() : backgroundColor_;
  }

  public static final int FOREGROUND_COLOR_FIELD_NUMBER = 2;
  private com.google.type.Color foregroundColor_;
  /**
   * <pre>
   * Output only. Badge foreground that pairs with the background.
   * </pre>
   *
   * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   * @return Whether the foregroundColor field is set.
   */
  @java.lang.Override
  public boolean hasForegroundColor() {
    return foregroundColor_ != null;
  }
  /**
   * <pre>
   * Output only. Badge foreground that pairs with the background.
   * </pre>
   *
   * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   * @return The foregroundColor.
   */
  @java.lang.Override
  public com.google.type.Color getForegroundColor() {
    return foregroundColor_ == null ? com.google.type.Color.getDefaultInstance() : foregroundColor_;
  }
  /**
   * <pre>
   * Output only. Badge foreground that pairs with the background.
   * </pre>
   *
   * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   */
  @java.lang.Override
  public com.google.type.ColorOrBuilder getForegroundColorOrBuilder() {
    return foregroundColor_ == null ? com.google.type.Color.getDefaultInstance() : foregroundColor_;
  }

  public static final int SOLO_COLOR_FIELD_NUMBER = 3;
  private com.google.type.Color soloColor_;
  /**
   * <pre>
   * Output only. Color that can be used for text without a background.
   * </pre>
   *
   * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   * @return Whether the soloColor field is set.
   */
  @java.lang.Override
  public boolean hasSoloColor() {
    return soloColor_ != null;
  }
  /**
   * <pre>
   * Output only. Color that can be used for text without a background.
   * </pre>
   *
   * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   * @return The soloColor.
   */
  @java.lang.Override
  public com.google.type.Color getSoloColor() {
    return soloColor_ == null ? com.google.type.Color.getDefaultInstance() : soloColor_;
  }
  /**
   * <pre>
   * Output only. Color that can be used for text without a background.
   * </pre>
   *
   * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
   */
  @java.lang.Override
  public com.google.type.ColorOrBuilder getSoloColorOrBuilder() {
    return soloColor_ == null ? com.google.type.Color.getDefaultInstance() : soloColor_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (backgroundColor_ != null) {
      output.writeMessage(1, getBackgroundColor());
    }
    if (foregroundColor_ != null) {
      output.writeMessage(2, getForegroundColor());
    }
    if (soloColor_ != null) {
      output.writeMessage(3, getSoloColor());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (backgroundColor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getBackgroundColor());
    }
    if (foregroundColor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getForegroundColor());
    }
    if (soloColor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getSoloColor());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.apps.drive.labels.v2.BadgeColors)) {
      return super.equals(obj);
    }
    com.google.apps.drive.labels.v2.BadgeColors other = (com.google.apps.drive.labels.v2.BadgeColors) obj;

    if (hasBackgroundColor() != other.hasBackgroundColor()) return false;
    if (hasBackgroundColor()) {
      if (!getBackgroundColor()
          .equals(other.getBackgroundColor())) return false;
    }
    if (hasForegroundColor() != other.hasForegroundColor()) return false;
    if (hasForegroundColor()) {
      if (!getForegroundColor()
          .equals(other.getForegroundColor())) return false;
    }
    if (hasSoloColor() != other.hasSoloColor()) return false;
    if (hasSoloColor()) {
      if (!getSoloColor()
          .equals(other.getSoloColor())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasBackgroundColor()) {
      hash = (37 * hash) + BACKGROUND_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getBackgroundColor().hashCode();
    }
    if (hasForegroundColor()) {
      hash = (37 * hash) + FOREGROUND_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getForegroundColor().hashCode();
    }
    if (hasSoloColor()) {
      hash = (37 * hash) + SOLO_COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getSoloColor().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.apps.drive.labels.v2.BadgeColors parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.apps.drive.labels.v2.BadgeColors prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The color derived from BadgeConfig and changed to the closest recommended
   * supported color.
   * </pre>
   *
   * Protobuf type {@code google.apps.drive.labels.v2.BadgeColors}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.apps.drive.labels.v2.BadgeColors)
      com.google.apps.drive.labels.v2.BadgeColorsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.apps.drive.labels.v2.CommonProto.internal_static_google_apps_drive_labels_v2_BadgeColors_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.apps.drive.labels.v2.CommonProto.internal_static_google_apps_drive_labels_v2_BadgeColors_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.apps.drive.labels.v2.BadgeColors.class, com.google.apps.drive.labels.v2.BadgeColors.Builder.class);
    }

    // Construct using com.google.apps.drive.labels.v2.BadgeColors.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      backgroundColor_ = null;
      if (backgroundColorBuilder_ != null) {
        backgroundColorBuilder_.dispose();
        backgroundColorBuilder_ = null;
      }
      foregroundColor_ = null;
      if (foregroundColorBuilder_ != null) {
        foregroundColorBuilder_.dispose();
        foregroundColorBuilder_ = null;
      }
      soloColor_ = null;
      if (soloColorBuilder_ != null) {
        soloColorBuilder_.dispose();
        soloColorBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.apps.drive.labels.v2.CommonProto.internal_static_google_apps_drive_labels_v2_BadgeColors_descriptor;
    }

    @java.lang.Override
    public com.google.apps.drive.labels.v2.BadgeColors getDefaultInstanceForType() {
      return com.google.apps.drive.labels.v2.BadgeColors.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.apps.drive.labels.v2.BadgeColors build() {
      com.google.apps.drive.labels.v2.BadgeColors result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.apps.drive.labels.v2.BadgeColors buildPartial() {
      com.google.apps.drive.labels.v2.BadgeColors result = new com.google.apps.drive.labels.v2.BadgeColors(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.apps.drive.labels.v2.BadgeColors result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.backgroundColor_ = backgroundColorBuilder_ == null
            ? backgroundColor_
            : backgroundColorBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.foregroundColor_ = foregroundColorBuilder_ == null
            ? foregroundColor_
            : foregroundColorBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.soloColor_ = soloColorBuilder_ == null
            ? soloColor_
            : soloColorBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.apps.drive.labels.v2.BadgeColors) {
        return mergeFrom((com.google.apps.drive.labels.v2.BadgeColors)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.apps.drive.labels.v2.BadgeColors other) {
      if (other == com.google.apps.drive.labels.v2.BadgeColors.getDefaultInstance()) return this;
      if (other.hasBackgroundColor()) {
        mergeBackgroundColor(other.getBackgroundColor());
      }
      if (other.hasForegroundColor()) {
        mergeForegroundColor(other.getForegroundColor());
      }
      if (other.hasSoloColor()) {
        mergeSoloColor(other.getSoloColor());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getBackgroundColorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getForegroundColorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getSoloColorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.type.Color backgroundColor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder> backgroundColorBuilder_;
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return Whether the backgroundColor field is set.
     */
    public boolean hasBackgroundColor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return The backgroundColor.
     */
    public com.google.type.Color getBackgroundColor() {
      if (backgroundColorBuilder_ == null) {
        return backgroundColor_ == null ? com.google.type.Color.getDefaultInstance() : backgroundColor_;
      } else {
        return backgroundColorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder setBackgroundColor(com.google.type.Color value) {
      if (backgroundColorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        backgroundColor_ = value;
      } else {
        backgroundColorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder setBackgroundColor(
        com.google.type.Color.Builder builderForValue) {
      if (backgroundColorBuilder_ == null) {
        backgroundColor_ = builderForValue.build();
      } else {
        backgroundColorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder mergeBackgroundColor(com.google.type.Color value) {
      if (backgroundColorBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          backgroundColor_ != null &&
          backgroundColor_ != com.google.type.Color.getDefaultInstance()) {
          getBackgroundColorBuilder().mergeFrom(value);
        } else {
          backgroundColor_ = value;
        }
      } else {
        backgroundColorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder clearBackgroundColor() {
      bitField0_ = (bitField0_ & ~0x00000001);
      backgroundColor_ = null;
      if (backgroundColorBuilder_ != null) {
        backgroundColorBuilder_.dispose();
        backgroundColorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public com.google.type.Color.Builder getBackgroundColorBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getBackgroundColorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public com.google.type.ColorOrBuilder getBackgroundColorOrBuilder() {
      if (backgroundColorBuilder_ != null) {
        return backgroundColorBuilder_.getMessageOrBuilder();
      } else {
        return backgroundColor_ == null ?
            com.google.type.Color.getDefaultInstance() : backgroundColor_;
      }
    }
    /**
     * <pre>
     * Output only. Badge background that pairs with the foreground.
     * </pre>
     *
     * <code>.google.type.Color background_color = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder> 
        getBackgroundColorFieldBuilder() {
      if (backgroundColorBuilder_ == null) {
        backgroundColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder>(
                getBackgroundColor(),
                getParentForChildren(),
                isClean());
        backgroundColor_ = null;
      }
      return backgroundColorBuilder_;
    }

    private com.google.type.Color foregroundColor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder> foregroundColorBuilder_;
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return Whether the foregroundColor field is set.
     */
    public boolean hasForegroundColor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return The foregroundColor.
     */
    public com.google.type.Color getForegroundColor() {
      if (foregroundColorBuilder_ == null) {
        return foregroundColor_ == null ? com.google.type.Color.getDefaultInstance() : foregroundColor_;
      } else {
        return foregroundColorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder setForegroundColor(com.google.type.Color value) {
      if (foregroundColorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        foregroundColor_ = value;
      } else {
        foregroundColorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder setForegroundColor(
        com.google.type.Color.Builder builderForValue) {
      if (foregroundColorBuilder_ == null) {
        foregroundColor_ = builderForValue.build();
      } else {
        foregroundColorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder mergeForegroundColor(com.google.type.Color value) {
      if (foregroundColorBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          foregroundColor_ != null &&
          foregroundColor_ != com.google.type.Color.getDefaultInstance()) {
          getForegroundColorBuilder().mergeFrom(value);
        } else {
          foregroundColor_ = value;
        }
      } else {
        foregroundColorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder clearForegroundColor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      foregroundColor_ = null;
      if (foregroundColorBuilder_ != null) {
        foregroundColorBuilder_.dispose();
        foregroundColorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public com.google.type.Color.Builder getForegroundColorBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getForegroundColorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public com.google.type.ColorOrBuilder getForegroundColorOrBuilder() {
      if (foregroundColorBuilder_ != null) {
        return foregroundColorBuilder_.getMessageOrBuilder();
      } else {
        return foregroundColor_ == null ?
            com.google.type.Color.getDefaultInstance() : foregroundColor_;
      }
    }
    /**
     * <pre>
     * Output only. Badge foreground that pairs with the background.
     * </pre>
     *
     * <code>.google.type.Color foreground_color = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder> 
        getForegroundColorFieldBuilder() {
      if (foregroundColorBuilder_ == null) {
        foregroundColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder>(
                getForegroundColor(),
                getParentForChildren(),
                isClean());
        foregroundColor_ = null;
      }
      return foregroundColorBuilder_;
    }

    private com.google.type.Color soloColor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder> soloColorBuilder_;
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return Whether the soloColor field is set.
     */
    public boolean hasSoloColor() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     * @return The soloColor.
     */
    public com.google.type.Color getSoloColor() {
      if (soloColorBuilder_ == null) {
        return soloColor_ == null ? com.google.type.Color.getDefaultInstance() : soloColor_;
      } else {
        return soloColorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder setSoloColor(com.google.type.Color value) {
      if (soloColorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        soloColor_ = value;
      } else {
        soloColorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder setSoloColor(
        com.google.type.Color.Builder builderForValue) {
      if (soloColorBuilder_ == null) {
        soloColor_ = builderForValue.build();
      } else {
        soloColorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder mergeSoloColor(com.google.type.Color value) {
      if (soloColorBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          soloColor_ != null &&
          soloColor_ != com.google.type.Color.getDefaultInstance()) {
          getSoloColorBuilder().mergeFrom(value);
        } else {
          soloColor_ = value;
        }
      } else {
        soloColorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public Builder clearSoloColor() {
      bitField0_ = (bitField0_ & ~0x00000004);
      soloColor_ = null;
      if (soloColorBuilder_ != null) {
        soloColorBuilder_.dispose();
        soloColorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public com.google.type.Color.Builder getSoloColorBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getSoloColorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    public com.google.type.ColorOrBuilder getSoloColorOrBuilder() {
      if (soloColorBuilder_ != null) {
        return soloColorBuilder_.getMessageOrBuilder();
      } else {
        return soloColor_ == null ?
            com.google.type.Color.getDefaultInstance() : soloColor_;
      }
    }
    /**
     * <pre>
     * Output only. Color that can be used for text without a background.
     * </pre>
     *
     * <code>.google.type.Color solo_color = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder> 
        getSoloColorFieldBuilder() {
      if (soloColorBuilder_ == null) {
        soloColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.type.Color, com.google.type.Color.Builder, com.google.type.ColorOrBuilder>(
                getSoloColor(),
                getParentForChildren(),
                isClean());
        soloColor_ = null;
      }
      return soloColorBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.apps.drive.labels.v2.BadgeColors)
  }

  // @@protoc_insertion_point(class_scope:google.apps.drive.labels.v2.BadgeColors)
  private static final com.google.apps.drive.labels.v2.BadgeColors DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.apps.drive.labels.v2.BadgeColors();
  }

  public static com.google.apps.drive.labels.v2.BadgeColors getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BadgeColors>
      PARSER = new com.google.protobuf.AbstractParser<BadgeColors>() {
    @java.lang.Override
    public BadgeColors parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BadgeColors> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BadgeColors> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.apps.drive.labels.v2.BadgeColors getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

