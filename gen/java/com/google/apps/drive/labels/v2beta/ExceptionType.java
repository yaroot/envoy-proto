// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/drive/labels/v2beta/exception_detail.proto

package com.google.apps.drive.labels.v2beta;

/**
 * <pre>
 * Every ExceptionType maps to one and only one Exception class. This allows
 * internal clients to identify the exact server exception that caused the
 * error for debugging and logging purposes.
 * Add new ExceptionTypes to EXCEPTION_TYPE_TO_ERROR_CODE_MAP in
 * j/c/g/apps/boq/metadata/model/service/exceptions/CategoryExceptionHelper
 * </pre>
 *
 * Protobuf enum {@code google.apps.drive.labels.v2beta.ExceptionType}
 */
public enum ExceptionType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unknown ExceptionType.
   * </pre>
   *
   * <code>EXCEPTION_TYPE_UNSPECIFIED = 0;</code>
   */
  EXCEPTION_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * The required field is missing.
   * </pre>
   *
   * <code>FIELD_REQUIRED = 1;</code>
   */
  FIELD_REQUIRED(1),
  /**
   * <pre>
   * Unable to create a metamodel with the given ID because it already exists.
   * </pre>
   *
   * <code>METAMODEL_ALREADY_EXISTS = 2;</code>
   */
  METAMODEL_ALREADY_EXISTS(2),
  /**
   * <pre>
   * Metamodel was not found
   * </pre>
   *
   * <code>METAMODEL_NOT_FOUND = 3;</code>
   */
  METAMODEL_NOT_FOUND(3),
  /**
   * <pre>
   * Metamodel state transition isn't allowed.
   * </pre>
   *
   * <code>ILLEGAL_METAMODEL_STATE_TRANSITION = 4;</code>
   */
  ILLEGAL_METAMODEL_STATE_TRANSITION(4),
  /**
   * <pre>
   * Metamodel deprecation policy is invalid.
   * </pre>
   *
   * <code>INVALID_METAMODEL_DEPRECATION_POLICY = 5;</code>
   */
  INVALID_METAMODEL_DEPRECATION_POLICY(5),
  /**
   * <pre>
   * Cannot delete a metamodel due to the pending deprecation policy.
   * </pre>
   *
   * <code>METAMODEL_DELETION_DENIED_UNTIL = 6;</code>
   */
  METAMODEL_DELETION_DENIED_UNTIL(6),
  /**
   * <pre>
   * A Field value is invalid.
   * </pre>
   *
   * <code>INVALID_FIELD = 7;</code>
   */
  INVALID_FIELD(7),
  /**
   * <pre>
   * Precondition failed when updating a metamodel
   * </pre>
   *
   * <code>METAMODEL_PRECONDITION_FAILED = 8;</code>
   */
  METAMODEL_PRECONDITION_FAILED(8),
  /**
   * <pre>
   * Multiple fields had the same key.
   * </pre>
   *
   * <code>DUPLICATE_FIELD_KEY = 9;</code>
   */
  DUPLICATE_FIELD_KEY(9),
  /**
   * <pre>
   * Removing a field from a Metamodel (e.g. a published Metamodel) is not
   * permitted.
   * </pre>
   *
   * <code>ILLEGAL_FIELD_REMOVAL = 10;</code>
   */
  ILLEGAL_FIELD_REMOVAL(10),
  /**
   * <pre>
   * Cannot specify field options for a different field type.
   * </pre>
   *
   * <code>ILLEGAL_FIELD_OPTIONS_FOR_FIELD = 11;</code>
   */
  ILLEGAL_FIELD_OPTIONS_FOR_FIELD(11),
  /**
   * <pre>
   * Some changes are not supported
   * </pre>
   *
   * <code>UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL = 12;</code>
   */
  UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL(12),
  /**
   * <pre>
   * Cannot change the metamodel state in an update
   * </pre>
   *
   * <code>ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE = 13;</code>
   */
  ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE(13),
  /**
   * <pre>
   * The page token is expired
   * </pre>
   *
   * <code>PAGE_TOKEN_EXPIRED = 14;</code>
   */
  PAGE_TOKEN_EXPIRED(14),
  /**
   * <pre>
   * The user is not authorized to make the request.
   * </pre>
   *
   * <code>NOT_AUTHORIZED = 15;</code>
   */
  NOT_AUTHORIZED(15),
  /**
   * <pre>
   * Illegal field state transition
   * </pre>
   *
   * <code>ILLEGAL_FIELD_STATE_TRANSITION = 16;</code>
   */
  ILLEGAL_FIELD_STATE_TRANSITION(16),
  /**
   * <pre>
   * Illegal choice set option state transition
   * </pre>
   *
   * <code>ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION = 17;</code>
   */
  ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION(17),
  /**
   * <pre>
   * Invalid choice set options
   * </pre>
   *
   * <code>INVALID_CHOICE_SET_OPTIONS = 18;</code>
   */
  INVALID_CHOICE_SET_OPTIONS(18),
  /**
   * <pre>
   * Invalid field key
   * </pre>
   *
   * <code>INVALID_FIELD_KEY = 19;</code>
   */
  INVALID_FIELD_KEY(19),
  /**
   * <pre>
   * A specified property on a field is outside the allowed range.
   * </pre>
   *
   * <code>INVALID_FIELD_PROPERTY_RANGE = 20;</code>
   */
  INVALID_FIELD_PROPERTY_RANGE(20),
  /**
   * <pre>
   * A localized string wasn't valid. This may be because the locale is invalid,
   * its missing a default value, or the translation is empty for a set locale.
   * </pre>
   *
   * <code>INVALID_LOCALIZED_STRING = 21;</code>
   */
  INVALID_LOCALIZED_STRING(21),
  /**
   * <pre>
   * cannot change a property on a published field
   * </pre>
   *
   * <code>ILLEGAL_CHANGE_TO_PUBLISHED_FIELD = 22;</code>
   */
  ILLEGAL_CHANGE_TO_PUBLISHED_FIELD(22),
  /**
   * <pre>
   * A field update is not inclusive of the previous value
   * </pre>
   *
   * <code>INVALID_FIELD_UPDATE_NOT_INCLUSIVE = 23;</code>
   */
  INVALID_FIELD_UPDATE_NOT_INCLUSIVE(23),
  /**
   * <pre>
   * A field update is not inclusive of the previous value
   * </pre>
   *
   * <code>INVALID_CHOICE_SET_STATE = 24;</code>
   */
  INVALID_CHOICE_SET_STATE(24),
  /**
   * <pre>
   * An unknown error occurred
   * </pre>
   *
   * <code>INTERNAL_SERVER_ERROR = 500;</code>
   */
  INTERNAL_SERVER_ERROR(500),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unknown ExceptionType.
   * </pre>
   *
   * <code>EXCEPTION_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int EXCEPTION_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The required field is missing.
   * </pre>
   *
   * <code>FIELD_REQUIRED = 1;</code>
   */
  public static final int FIELD_REQUIRED_VALUE = 1;
  /**
   * <pre>
   * Unable to create a metamodel with the given ID because it already exists.
   * </pre>
   *
   * <code>METAMODEL_ALREADY_EXISTS = 2;</code>
   */
  public static final int METAMODEL_ALREADY_EXISTS_VALUE = 2;
  /**
   * <pre>
   * Metamodel was not found
   * </pre>
   *
   * <code>METAMODEL_NOT_FOUND = 3;</code>
   */
  public static final int METAMODEL_NOT_FOUND_VALUE = 3;
  /**
   * <pre>
   * Metamodel state transition isn't allowed.
   * </pre>
   *
   * <code>ILLEGAL_METAMODEL_STATE_TRANSITION = 4;</code>
   */
  public static final int ILLEGAL_METAMODEL_STATE_TRANSITION_VALUE = 4;
  /**
   * <pre>
   * Metamodel deprecation policy is invalid.
   * </pre>
   *
   * <code>INVALID_METAMODEL_DEPRECATION_POLICY = 5;</code>
   */
  public static final int INVALID_METAMODEL_DEPRECATION_POLICY_VALUE = 5;
  /**
   * <pre>
   * Cannot delete a metamodel due to the pending deprecation policy.
   * </pre>
   *
   * <code>METAMODEL_DELETION_DENIED_UNTIL = 6;</code>
   */
  public static final int METAMODEL_DELETION_DENIED_UNTIL_VALUE = 6;
  /**
   * <pre>
   * A Field value is invalid.
   * </pre>
   *
   * <code>INVALID_FIELD = 7;</code>
   */
  public static final int INVALID_FIELD_VALUE = 7;
  /**
   * <pre>
   * Precondition failed when updating a metamodel
   * </pre>
   *
   * <code>METAMODEL_PRECONDITION_FAILED = 8;</code>
   */
  public static final int METAMODEL_PRECONDITION_FAILED_VALUE = 8;
  /**
   * <pre>
   * Multiple fields had the same key.
   * </pre>
   *
   * <code>DUPLICATE_FIELD_KEY = 9;</code>
   */
  public static final int DUPLICATE_FIELD_KEY_VALUE = 9;
  /**
   * <pre>
   * Removing a field from a Metamodel (e.g. a published Metamodel) is not
   * permitted.
   * </pre>
   *
   * <code>ILLEGAL_FIELD_REMOVAL = 10;</code>
   */
  public static final int ILLEGAL_FIELD_REMOVAL_VALUE = 10;
  /**
   * <pre>
   * Cannot specify field options for a different field type.
   * </pre>
   *
   * <code>ILLEGAL_FIELD_OPTIONS_FOR_FIELD = 11;</code>
   */
  public static final int ILLEGAL_FIELD_OPTIONS_FOR_FIELD_VALUE = 11;
  /**
   * <pre>
   * Some changes are not supported
   * </pre>
   *
   * <code>UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL = 12;</code>
   */
  public static final int UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL_VALUE = 12;
  /**
   * <pre>
   * Cannot change the metamodel state in an update
   * </pre>
   *
   * <code>ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE = 13;</code>
   */
  public static final int ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE_VALUE = 13;
  /**
   * <pre>
   * The page token is expired
   * </pre>
   *
   * <code>PAGE_TOKEN_EXPIRED = 14;</code>
   */
  public static final int PAGE_TOKEN_EXPIRED_VALUE = 14;
  /**
   * <pre>
   * The user is not authorized to make the request.
   * </pre>
   *
   * <code>NOT_AUTHORIZED = 15;</code>
   */
  public static final int NOT_AUTHORIZED_VALUE = 15;
  /**
   * <pre>
   * Illegal field state transition
   * </pre>
   *
   * <code>ILLEGAL_FIELD_STATE_TRANSITION = 16;</code>
   */
  public static final int ILLEGAL_FIELD_STATE_TRANSITION_VALUE = 16;
  /**
   * <pre>
   * Illegal choice set option state transition
   * </pre>
   *
   * <code>ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION = 17;</code>
   */
  public static final int ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION_VALUE = 17;
  /**
   * <pre>
   * Invalid choice set options
   * </pre>
   *
   * <code>INVALID_CHOICE_SET_OPTIONS = 18;</code>
   */
  public static final int INVALID_CHOICE_SET_OPTIONS_VALUE = 18;
  /**
   * <pre>
   * Invalid field key
   * </pre>
   *
   * <code>INVALID_FIELD_KEY = 19;</code>
   */
  public static final int INVALID_FIELD_KEY_VALUE = 19;
  /**
   * <pre>
   * A specified property on a field is outside the allowed range.
   * </pre>
   *
   * <code>INVALID_FIELD_PROPERTY_RANGE = 20;</code>
   */
  public static final int INVALID_FIELD_PROPERTY_RANGE_VALUE = 20;
  /**
   * <pre>
   * A localized string wasn't valid. This may be because the locale is invalid,
   * its missing a default value, or the translation is empty for a set locale.
   * </pre>
   *
   * <code>INVALID_LOCALIZED_STRING = 21;</code>
   */
  public static final int INVALID_LOCALIZED_STRING_VALUE = 21;
  /**
   * <pre>
   * cannot change a property on a published field
   * </pre>
   *
   * <code>ILLEGAL_CHANGE_TO_PUBLISHED_FIELD = 22;</code>
   */
  public static final int ILLEGAL_CHANGE_TO_PUBLISHED_FIELD_VALUE = 22;
  /**
   * <pre>
   * A field update is not inclusive of the previous value
   * </pre>
   *
   * <code>INVALID_FIELD_UPDATE_NOT_INCLUSIVE = 23;</code>
   */
  public static final int INVALID_FIELD_UPDATE_NOT_INCLUSIVE_VALUE = 23;
  /**
   * <pre>
   * A field update is not inclusive of the previous value
   * </pre>
   *
   * <code>INVALID_CHOICE_SET_STATE = 24;</code>
   */
  public static final int INVALID_CHOICE_SET_STATE_VALUE = 24;
  /**
   * <pre>
   * An unknown error occurred
   * </pre>
   *
   * <code>INTERNAL_SERVER_ERROR = 500;</code>
   */
  public static final int INTERNAL_SERVER_ERROR_VALUE = 500;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ExceptionType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ExceptionType forNumber(int value) {
    switch (value) {
      case 0: return EXCEPTION_TYPE_UNSPECIFIED;
      case 1: return FIELD_REQUIRED;
      case 2: return METAMODEL_ALREADY_EXISTS;
      case 3: return METAMODEL_NOT_FOUND;
      case 4: return ILLEGAL_METAMODEL_STATE_TRANSITION;
      case 5: return INVALID_METAMODEL_DEPRECATION_POLICY;
      case 6: return METAMODEL_DELETION_DENIED_UNTIL;
      case 7: return INVALID_FIELD;
      case 8: return METAMODEL_PRECONDITION_FAILED;
      case 9: return DUPLICATE_FIELD_KEY;
      case 10: return ILLEGAL_FIELD_REMOVAL;
      case 11: return ILLEGAL_FIELD_OPTIONS_FOR_FIELD;
      case 12: return UNSUPPORTED_CHANGE_TO_PUBLISHED_METAMODEL;
      case 13: return ILLEGAL_METAMODEL_STATE_TRANSITION_IN_UPDATE;
      case 14: return PAGE_TOKEN_EXPIRED;
      case 15: return NOT_AUTHORIZED;
      case 16: return ILLEGAL_FIELD_STATE_TRANSITION;
      case 17: return ILLEGAL_CHOICE_SET_OPTION_STATE_TRANSITION;
      case 18: return INVALID_CHOICE_SET_OPTIONS;
      case 19: return INVALID_FIELD_KEY;
      case 20: return INVALID_FIELD_PROPERTY_RANGE;
      case 21: return INVALID_LOCALIZED_STRING;
      case 22: return ILLEGAL_CHANGE_TO_PUBLISHED_FIELD;
      case 23: return INVALID_FIELD_UPDATE_NOT_INCLUSIVE;
      case 24: return INVALID_CHOICE_SET_STATE;
      case 500: return INTERNAL_SERVER_ERROR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ExceptionType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ExceptionType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ExceptionType>() {
          public ExceptionType findValueByNumber(int number) {
            return ExceptionType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.apps.drive.labels.v2beta.ExceptionDetailProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ExceptionType[] VALUES = values();

  public static ExceptionType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ExceptionType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.apps.drive.labels.v2beta.ExceptionType)
}

