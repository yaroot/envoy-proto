// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/alertcenter/v1beta1/alertcenter.proto

package com.google.apps.alertcenter.v1beta1;

public interface AlertMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.apps.alertcenter.v1beta1.AlertMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Output only. The unique identifier of the Google account of the customer.
   * </pre>
   *
   * <code>string customer_id = 1;</code>
   * @return The customerId.
   */
  java.lang.String getCustomerId();
  /**
   * <pre>
   * Output only. The unique identifier of the Google account of the customer.
   * </pre>
   *
   * <code>string customer_id = 1;</code>
   * @return The bytes for customerId.
   */
  com.google.protobuf.ByteString
      getCustomerIdBytes();

  /**
   * <pre>
   * Output only. The alert identifier.
   * </pre>
   *
   * <code>string alert_id = 2;</code>
   * @return The alertId.
   */
  java.lang.String getAlertId();
  /**
   * <pre>
   * Output only. The alert identifier.
   * </pre>
   *
   * <code>string alert_id = 2;</code>
   * @return The bytes for alertId.
   */
  com.google.protobuf.ByteString
      getAlertIdBytes();

  /**
   * <pre>
   * The current status of the alert.
   * The supported values are the following:
   * * NOT_STARTED
   * * IN_PROGRESS
   * * CLOSED
   * </pre>
   *
   * <code>string status = 4;</code>
   * @return The status.
   */
  java.lang.String getStatus();
  /**
   * <pre>
   * The current status of the alert.
   * The supported values are the following:
   * * NOT_STARTED
   * * IN_PROGRESS
   * * CLOSED
   * </pre>
   *
   * <code>string status = 4;</code>
   * @return The bytes for status.
   */
  com.google.protobuf.ByteString
      getStatusBytes();

  /**
   * <pre>
   * The email address of the user assigned to the alert.
   * </pre>
   *
   * <code>string assignee = 5;</code>
   * @return The assignee.
   */
  java.lang.String getAssignee();
  /**
   * <pre>
   * The email address of the user assigned to the alert.
   * </pre>
   *
   * <code>string assignee = 5;</code>
   * @return The bytes for assignee.
   */
  com.google.protobuf.ByteString
      getAssigneeBytes();

  /**
   * <pre>
   * Output only. The time this metadata was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6;</code>
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();
  /**
   * <pre>
   * Output only. The time this metadata was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6;</code>
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();
  /**
   * <pre>
   * Output only. The time this metadata was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 6;</code>
   */
  com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder();

  /**
   * <pre>
   * The severity value of the alert. Alert Center will set this field at alert
   * creation time, default's to an empty string when it could not be
   * determined.
   * The supported values for update actions on this field are the following:
   * * HIGH
   * * MEDIUM
   * * LOW
   * </pre>
   *
   * <code>string severity = 7;</code>
   * @return The severity.
   */
  java.lang.String getSeverity();
  /**
   * <pre>
   * The severity value of the alert. Alert Center will set this field at alert
   * creation time, default's to an empty string when it could not be
   * determined.
   * The supported values for update actions on this field are the following:
   * * HIGH
   * * MEDIUM
   * * LOW
   * </pre>
   *
   * <code>string severity = 7;</code>
   * @return The bytes for severity.
   */
  com.google.protobuf.ByteString
      getSeverityBytes();

  /**
   * <pre>
   * Optional. `etag` is used for optimistic concurrency control as a way to
   * help prevent simultaneous updates of an alert metadata from overwriting
   * each other. It is strongly suggested that systems make use of the `etag` in
   * the read-modify-write cycle to perform metatdata updates in order to avoid
   * race conditions: An `etag` is returned in the response which contains alert
   * metadata, and systems are expected to put that etag in the request to
   * update alert metadata to ensure that their change will be applied to the
   * same version of the alert metadata.
   * If no `etag` is provided in the call to update alert metadata, then the
   * existing alert metadata is overwritten blindly.
   * </pre>
   *
   * <code>string etag = 8;</code>
   * @return The etag.
   */
  java.lang.String getEtag();
  /**
   * <pre>
   * Optional. `etag` is used for optimistic concurrency control as a way to
   * help prevent simultaneous updates of an alert metadata from overwriting
   * each other. It is strongly suggested that systems make use of the `etag` in
   * the read-modify-write cycle to perform metatdata updates in order to avoid
   * race conditions: An `etag` is returned in the response which contains alert
   * metadata, and systems are expected to put that etag in the request to
   * update alert metadata to ensure that their change will be applied to the
   * same version of the alert metadata.
   * If no `etag` is provided in the call to update alert metadata, then the
   * existing alert metadata is overwritten blindly.
   * </pre>
   *
   * <code>string etag = 8;</code>
   * @return The bytes for etag.
   */
  com.google.protobuf.ByteString
      getEtagBytes();
}
