// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/sql/v1beta4/cloud_sql_resources.proto

package com.google.cloud.sql.v1beta4;

public interface ExportContextOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.sql.v1beta4.ExportContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The path to the file in Google Cloud Storage where the export will be
   * stored. The URI is in the form `gs://bucketName/fileName`. If the file
   * already exists, the request succeeds, but the operation fails. If
   * `fileType` is `SQL` and the filename ends with .gz,
   * the contents are compressed.
   * </pre>
   *
   * <code>string uri = 1;</code>
   * @return The uri.
   */
  java.lang.String getUri();
  /**
   * <pre>
   * The path to the file in Google Cloud Storage where the export will be
   * stored. The URI is in the form `gs://bucketName/fileName`. If the file
   * already exists, the request succeeds, but the operation fails. If
   * `fileType` is `SQL` and the filename ends with .gz,
   * the contents are compressed.
   * </pre>
   *
   * <code>string uri = 1;</code>
   * @return The bytes for uri.
   */
  com.google.protobuf.ByteString
      getUriBytes();

  /**
   * <pre>
   * Databases to be exported. &lt;br /&gt; `MySQL instances:` If
   * `fileType` is `SQL` and no database is specified, all
   * databases are exported, except for the `mysql` system database.
   * If `fileType` is `CSV`, you can specify one database,
   * either by using this property or by using the
   * `csvExportOptions.selectQuery` property, which takes precedence
   * over this property. &lt;br /&gt; `PostgreSQL instances:` You must specify
   * one database to be exported. If `fileType` is `CSV`,
   * this database must match the one specified in the
   * `csvExportOptions.selectQuery` property. &lt;br /&gt; `SQL Server
   * instances:` You must specify one database to be exported, and the
   * `fileType` must be `BAK`.
   * </pre>
   *
   * <code>repeated string databases = 2;</code>
   * @return A list containing the databases.
   */
  java.util.List<java.lang.String>
      getDatabasesList();
  /**
   * <pre>
   * Databases to be exported. &lt;br /&gt; `MySQL instances:` If
   * `fileType` is `SQL` and no database is specified, all
   * databases are exported, except for the `mysql` system database.
   * If `fileType` is `CSV`, you can specify one database,
   * either by using this property or by using the
   * `csvExportOptions.selectQuery` property, which takes precedence
   * over this property. &lt;br /&gt; `PostgreSQL instances:` You must specify
   * one database to be exported. If `fileType` is `CSV`,
   * this database must match the one specified in the
   * `csvExportOptions.selectQuery` property. &lt;br /&gt; `SQL Server
   * instances:` You must specify one database to be exported, and the
   * `fileType` must be `BAK`.
   * </pre>
   *
   * <code>repeated string databases = 2;</code>
   * @return The count of databases.
   */
  int getDatabasesCount();
  /**
   * <pre>
   * Databases to be exported. &lt;br /&gt; `MySQL instances:` If
   * `fileType` is `SQL` and no database is specified, all
   * databases are exported, except for the `mysql` system database.
   * If `fileType` is `CSV`, you can specify one database,
   * either by using this property or by using the
   * `csvExportOptions.selectQuery` property, which takes precedence
   * over this property. &lt;br /&gt; `PostgreSQL instances:` You must specify
   * one database to be exported. If `fileType` is `CSV`,
   * this database must match the one specified in the
   * `csvExportOptions.selectQuery` property. &lt;br /&gt; `SQL Server
   * instances:` You must specify one database to be exported, and the
   * `fileType` must be `BAK`.
   * </pre>
   *
   * <code>repeated string databases = 2;</code>
   * @param index The index of the element to return.
   * @return The databases at the given index.
   */
  java.lang.String getDatabases(int index);
  /**
   * <pre>
   * Databases to be exported. &lt;br /&gt; `MySQL instances:` If
   * `fileType` is `SQL` and no database is specified, all
   * databases are exported, except for the `mysql` system database.
   * If `fileType` is `CSV`, you can specify one database,
   * either by using this property or by using the
   * `csvExportOptions.selectQuery` property, which takes precedence
   * over this property. &lt;br /&gt; `PostgreSQL instances:` You must specify
   * one database to be exported. If `fileType` is `CSV`,
   * this database must match the one specified in the
   * `csvExportOptions.selectQuery` property. &lt;br /&gt; `SQL Server
   * instances:` You must specify one database to be exported, and the
   * `fileType` must be `BAK`.
   * </pre>
   *
   * <code>repeated string databases = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the databases at the given index.
   */
  com.google.protobuf.ByteString
      getDatabasesBytes(int index);

  /**
   * <pre>
   * This is always `sql#exportContext`.
   * </pre>
   *
   * <code>string kind = 3;</code>
   * @return The kind.
   */
  java.lang.String getKind();
  /**
   * <pre>
   * This is always `sql#exportContext`.
   * </pre>
   *
   * <code>string kind = 3;</code>
   * @return The bytes for kind.
   */
  com.google.protobuf.ByteString
      getKindBytes();

  /**
   * <pre>
   * Options for exporting data as SQL statements.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.ExportContext.SqlExportOptions sql_export_options = 4;</code>
   * @return Whether the sqlExportOptions field is set.
   */
  boolean hasSqlExportOptions();
  /**
   * <pre>
   * Options for exporting data as SQL statements.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.ExportContext.SqlExportOptions sql_export_options = 4;</code>
   * @return The sqlExportOptions.
   */
  com.google.cloud.sql.v1beta4.ExportContext.SqlExportOptions getSqlExportOptions();
  /**
   * <pre>
   * Options for exporting data as SQL statements.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.ExportContext.SqlExportOptions sql_export_options = 4;</code>
   */
  com.google.cloud.sql.v1beta4.ExportContext.SqlExportOptionsOrBuilder getSqlExportOptionsOrBuilder();

  /**
   * <pre>
   * Options for exporting data as CSV. `MySQL` and `PostgreSQL`
   * instances only.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.ExportContext.SqlCsvExportOptions csv_export_options = 5;</code>
   * @return Whether the csvExportOptions field is set.
   */
  boolean hasCsvExportOptions();
  /**
   * <pre>
   * Options for exporting data as CSV. `MySQL` and `PostgreSQL`
   * instances only.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.ExportContext.SqlCsvExportOptions csv_export_options = 5;</code>
   * @return The csvExportOptions.
   */
  com.google.cloud.sql.v1beta4.ExportContext.SqlCsvExportOptions getCsvExportOptions();
  /**
   * <pre>
   * Options for exporting data as CSV. `MySQL` and `PostgreSQL`
   * instances only.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.ExportContext.SqlCsvExportOptions csv_export_options = 5;</code>
   */
  com.google.cloud.sql.v1beta4.ExportContext.SqlCsvExportOptionsOrBuilder getCsvExportOptionsOrBuilder();

  /**
   * <pre>
   * The file type for the specified uri.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.SqlFileType file_type = 6;</code>
   * @return The enum numeric value on the wire for fileType.
   */
  int getFileTypeValue();
  /**
   * <pre>
   * The file type for the specified uri.
   * </pre>
   *
   * <code>.google.cloud.sql.v1beta4.SqlFileType file_type = 6;</code>
   * @return The fileType.
   */
  com.google.cloud.sql.v1beta4.SqlFileType getFileType();

  /**
   * <pre>
   * Option for export offload.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue offload = 8;</code>
   * @return Whether the offload field is set.
   */
  boolean hasOffload();
  /**
   * <pre>
   * Option for export offload.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue offload = 8;</code>
   * @return The offload.
   */
  com.google.protobuf.BoolValue getOffload();
  /**
   * <pre>
   * Option for export offload.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue offload = 8;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getOffloadOrBuilder();
}
