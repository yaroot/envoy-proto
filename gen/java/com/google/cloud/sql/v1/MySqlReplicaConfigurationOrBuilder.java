// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/sql/v1/cloud_sql_resources.proto

package com.google.cloud.sql.v1;

public interface MySqlReplicaConfigurationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.sql.v1.MySqlReplicaConfiguration)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Path to a SQL dump file in Google Cloud Storage from which the replica
   * instance is to be created. The URI is in the form gs://bucketName/fileName.
   * Compressed gzip files (.gz) are also supported.
   * Dumps have the binlog co-ordinates from which replication
   * begins. This can be accomplished by setting --master-data to 1 when using
   * mysqldump.
   * </pre>
   *
   * <code>string dump_file_path = 1;</code>
   * @return The dumpFilePath.
   */
  java.lang.String getDumpFilePath();
  /**
   * <pre>
   * Path to a SQL dump file in Google Cloud Storage from which the replica
   * instance is to be created. The URI is in the form gs://bucketName/fileName.
   * Compressed gzip files (.gz) are also supported.
   * Dumps have the binlog co-ordinates from which replication
   * begins. This can be accomplished by setting --master-data to 1 when using
   * mysqldump.
   * </pre>
   *
   * <code>string dump_file_path = 1;</code>
   * @return The bytes for dumpFilePath.
   */
  com.google.protobuf.ByteString
      getDumpFilePathBytes();

  /**
   * <pre>
   * The username for the replication connection.
   * </pre>
   *
   * <code>string username = 2;</code>
   * @return The username.
   */
  java.lang.String getUsername();
  /**
   * <pre>
   * The username for the replication connection.
   * </pre>
   *
   * <code>string username = 2;</code>
   * @return The bytes for username.
   */
  com.google.protobuf.ByteString
      getUsernameBytes();

  /**
   * <pre>
   * The password for the replication connection.
   * </pre>
   *
   * <code>string password = 3;</code>
   * @return The password.
   */
  java.lang.String getPassword();
  /**
   * <pre>
   * The password for the replication connection.
   * </pre>
   *
   * <code>string password = 3;</code>
   * @return The bytes for password.
   */
  com.google.protobuf.ByteString
      getPasswordBytes();

  /**
   * <pre>
   * Seconds to wait between connect retries. MySQL's default is 60 seconds.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value connect_retry_interval = 4;</code>
   * @return Whether the connectRetryInterval field is set.
   */
  boolean hasConnectRetryInterval();
  /**
   * <pre>
   * Seconds to wait between connect retries. MySQL's default is 60 seconds.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value connect_retry_interval = 4;</code>
   * @return The connectRetryInterval.
   */
  com.google.protobuf.Int32Value getConnectRetryInterval();
  /**
   * <pre>
   * Seconds to wait between connect retries. MySQL's default is 60 seconds.
   * </pre>
   *
   * <code>.google.protobuf.Int32Value connect_retry_interval = 4;</code>
   */
  com.google.protobuf.Int32ValueOrBuilder getConnectRetryIntervalOrBuilder();

  /**
   * <pre>
   * Interval in milliseconds between replication heartbeats.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value master_heartbeat_period = 5;</code>
   * @return Whether the masterHeartbeatPeriod field is set.
   */
  boolean hasMasterHeartbeatPeriod();
  /**
   * <pre>
   * Interval in milliseconds between replication heartbeats.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value master_heartbeat_period = 5;</code>
   * @return The masterHeartbeatPeriod.
   */
  com.google.protobuf.Int64Value getMasterHeartbeatPeriod();
  /**
   * <pre>
   * Interval in milliseconds between replication heartbeats.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value master_heartbeat_period = 5;</code>
   */
  com.google.protobuf.Int64ValueOrBuilder getMasterHeartbeatPeriodOrBuilder();

  /**
   * <pre>
   * PEM representation of the trusted CA's x509 certificate.
   * </pre>
   *
   * <code>string ca_certificate = 6;</code>
   * @return The caCertificate.
   */
  java.lang.String getCaCertificate();
  /**
   * <pre>
   * PEM representation of the trusted CA's x509 certificate.
   * </pre>
   *
   * <code>string ca_certificate = 6;</code>
   * @return The bytes for caCertificate.
   */
  com.google.protobuf.ByteString
      getCaCertificateBytes();

  /**
   * <pre>
   * PEM representation of the replica's x509 certificate.
   * </pre>
   *
   * <code>string client_certificate = 7;</code>
   * @return The clientCertificate.
   */
  java.lang.String getClientCertificate();
  /**
   * <pre>
   * PEM representation of the replica's x509 certificate.
   * </pre>
   *
   * <code>string client_certificate = 7;</code>
   * @return The bytes for clientCertificate.
   */
  com.google.protobuf.ByteString
      getClientCertificateBytes();

  /**
   * <pre>
   * PEM representation of the replica's private key. The corresponsing public
   * key is encoded in the client's certificate.
   * </pre>
   *
   * <code>string client_key = 8;</code>
   * @return The clientKey.
   */
  java.lang.String getClientKey();
  /**
   * <pre>
   * PEM representation of the replica's private key. The corresponsing public
   * key is encoded in the client's certificate.
   * </pre>
   *
   * <code>string client_key = 8;</code>
   * @return The bytes for clientKey.
   */
  com.google.protobuf.ByteString
      getClientKeyBytes();

  /**
   * <pre>
   * A list of permissible ciphers to use for SSL encryption.
   * </pre>
   *
   * <code>string ssl_cipher = 9;</code>
   * @return The sslCipher.
   */
  java.lang.String getSslCipher();
  /**
   * <pre>
   * A list of permissible ciphers to use for SSL encryption.
   * </pre>
   *
   * <code>string ssl_cipher = 9;</code>
   * @return The bytes for sslCipher.
   */
  com.google.protobuf.ByteString
      getSslCipherBytes();

  /**
   * <pre>
   * Whether or not to check the primary instance's Common Name value in the
   * certificate that it sends during the SSL handshake.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue verify_server_certificate = 10;</code>
   * @return Whether the verifyServerCertificate field is set.
   */
  boolean hasVerifyServerCertificate();
  /**
   * <pre>
   * Whether or not to check the primary instance's Common Name value in the
   * certificate that it sends during the SSL handshake.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue verify_server_certificate = 10;</code>
   * @return The verifyServerCertificate.
   */
  com.google.protobuf.BoolValue getVerifyServerCertificate();
  /**
   * <pre>
   * Whether or not to check the primary instance's Common Name value in the
   * certificate that it sends during the SSL handshake.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue verify_server_certificate = 10;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getVerifyServerCertificateOrBuilder();

  /**
   * <pre>
   * This is always **sql#mysqlReplicaConfiguration**.
   * </pre>
   *
   * <code>string kind = 11;</code>
   * @return The kind.
   */
  java.lang.String getKind();
  /**
   * <pre>
   * This is always **sql#mysqlReplicaConfiguration**.
   * </pre>
   *
   * <code>string kind = 11;</code>
   * @return The bytes for kind.
   */
  com.google.protobuf.ByteString
      getKindBytes();
}
