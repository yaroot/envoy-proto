// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/sql/v1/cloud_sql_flags.proto

package com.google.cloud.sql.v1;

/**
 * Protobuf enum {@code google.cloud.sql.v1.SqlFlagType}
 */
public enum SqlFlagType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * This is an unknown flag type.
   * </pre>
   *
   * <code>SQL_FLAG_TYPE_UNSPECIFIED = 0;</code>
   */
  SQL_FLAG_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Boolean type flag.
   * </pre>
   *
   * <code>BOOLEAN = 1;</code>
   */
  BOOLEAN(1),
  /**
   * <pre>
   * String type flag.
   * </pre>
   *
   * <code>STRING = 2;</code>
   */
  STRING(2),
  /**
   * <pre>
   * Integer type flag.
   * </pre>
   *
   * <code>INTEGER = 3;</code>
   */
  INTEGER(3),
  /**
   * <pre>
   * Flag type used for a server startup option.
   * </pre>
   *
   * <code>NONE = 4;</code>
   */
  NONE(4),
  /**
   * <pre>
   * Type introduced specially for MySQL TimeZone offset. Accept a string value
   * with the format [-12:59, 13:00].
   * </pre>
   *
   * <code>MYSQL_TIMEZONE_OFFSET = 5;</code>
   */
  MYSQL_TIMEZONE_OFFSET(5),
  /**
   * <pre>
   * Float type flag.
   * </pre>
   *
   * <code>FLOAT = 6;</code>
   */
  FLOAT(6),
  /**
   * <pre>
   * Comma-separated list of the strings in a SqlFlagType enum.
   * </pre>
   *
   * <code>REPEATED_STRING = 7;</code>
   */
  REPEATED_STRING(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * This is an unknown flag type.
   * </pre>
   *
   * <code>SQL_FLAG_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int SQL_FLAG_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Boolean type flag.
   * </pre>
   *
   * <code>BOOLEAN = 1;</code>
   */
  public static final int BOOLEAN_VALUE = 1;
  /**
   * <pre>
   * String type flag.
   * </pre>
   *
   * <code>STRING = 2;</code>
   */
  public static final int STRING_VALUE = 2;
  /**
   * <pre>
   * Integer type flag.
   * </pre>
   *
   * <code>INTEGER = 3;</code>
   */
  public static final int INTEGER_VALUE = 3;
  /**
   * <pre>
   * Flag type used for a server startup option.
   * </pre>
   *
   * <code>NONE = 4;</code>
   */
  public static final int NONE_VALUE = 4;
  /**
   * <pre>
   * Type introduced specially for MySQL TimeZone offset. Accept a string value
   * with the format [-12:59, 13:00].
   * </pre>
   *
   * <code>MYSQL_TIMEZONE_OFFSET = 5;</code>
   */
  public static final int MYSQL_TIMEZONE_OFFSET_VALUE = 5;
  /**
   * <pre>
   * Float type flag.
   * </pre>
   *
   * <code>FLOAT = 6;</code>
   */
  public static final int FLOAT_VALUE = 6;
  /**
   * <pre>
   * Comma-separated list of the strings in a SqlFlagType enum.
   * </pre>
   *
   * <code>REPEATED_STRING = 7;</code>
   */
  public static final int REPEATED_STRING_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SqlFlagType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SqlFlagType forNumber(int value) {
    switch (value) {
      case 0: return SQL_FLAG_TYPE_UNSPECIFIED;
      case 1: return BOOLEAN;
      case 2: return STRING;
      case 3: return INTEGER;
      case 4: return NONE;
      case 5: return MYSQL_TIMEZONE_OFFSET;
      case 6: return FLOAT;
      case 7: return REPEATED_STRING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SqlFlagType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SqlFlagType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SqlFlagType>() {
          public SqlFlagType findValueByNumber(int number) {
            return SqlFlagType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.sql.v1.CloudSqlFlagsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final SqlFlagType[] VALUES = values();

  public static SqlFlagType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SqlFlagType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.sql.v1.SqlFlagType)
}

