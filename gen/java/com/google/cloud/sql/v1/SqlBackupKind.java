// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/sql/v1/cloud_sql_backup_runs.proto

package com.google.cloud.sql.v1;

/**
 * <pre>
 * Defines the supported backup kinds.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.sql.v1.SqlBackupKind}
 */
public enum SqlBackupKind
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * This is an unknown BackupKind.
   * </pre>
   *
   * <code>SQL_BACKUP_KIND_UNSPECIFIED = 0;</code>
   */
  SQL_BACKUP_KIND_UNSPECIFIED(0),
  /**
   * <pre>
   * The snapshot based backups
   * </pre>
   *
   * <code>SNAPSHOT = 1;</code>
   */
  SNAPSHOT(1),
  /**
   * <pre>
   * Physical backups
   * </pre>
   *
   * <code>PHYSICAL = 2;</code>
   */
  PHYSICAL(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * This is an unknown BackupKind.
   * </pre>
   *
   * <code>SQL_BACKUP_KIND_UNSPECIFIED = 0;</code>
   */
  public static final int SQL_BACKUP_KIND_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The snapshot based backups
   * </pre>
   *
   * <code>SNAPSHOT = 1;</code>
   */
  public static final int SNAPSHOT_VALUE = 1;
  /**
   * <pre>
   * Physical backups
   * </pre>
   *
   * <code>PHYSICAL = 2;</code>
   */
  public static final int PHYSICAL_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SqlBackupKind valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SqlBackupKind forNumber(int value) {
    switch (value) {
      case 0: return SQL_BACKUP_KIND_UNSPECIFIED;
      case 1: return SNAPSHOT;
      case 2: return PHYSICAL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SqlBackupKind>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SqlBackupKind> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SqlBackupKind>() {
          public SqlBackupKind findValueByNumber(int number) {
            return SqlBackupKind.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.sql.v1.CloudSqlBackupRunsProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final SqlBackupKind[] VALUES = values();

  public static SqlBackupKind valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SqlBackupKind(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.sql.v1.SqlBackupKind)
}

