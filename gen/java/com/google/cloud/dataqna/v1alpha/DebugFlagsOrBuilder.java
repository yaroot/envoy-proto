// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataqna/v1alpha/question.proto

package com.google.cloud.dataqna.v1alpha;

public interface DebugFlagsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.dataqna.v1alpha.DebugFlags)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Whether to include the original VAQuery.
   * </pre>
   *
   * <code>bool include_va_query = 1;</code>
   * @return The includeVaQuery.
   */
  boolean getIncludeVaQuery();

  /**
   * <pre>
   * Whether to include the original nested VAQuery.
   * </pre>
   *
   * <code>bool include_nested_va_query = 2;</code>
   * @return The includeNestedVaQuery.
   */
  boolean getIncludeNestedVaQuery();

  /**
   * <pre>
   * Whether to include the original human interpretation strings generated
   * by Analyza.
   * </pre>
   *
   * <code>bool include_human_interpretation = 3;</code>
   * @return The includeHumanInterpretation.
   */
  boolean getIncludeHumanInterpretation();

  /**
   * <pre>
   * Whether to include the Aqua debug response.
   * </pre>
   *
   * <code>bool include_aqua_debug_response = 4;</code>
   * @return The includeAquaDebugResponse.
   */
  boolean getIncludeAquaDebugResponse();

  /**
   * <pre>
   * The time in milliseconds from Unix epoch to be used
   * to process the query. This is useful for testing
   * the queries at different time period.
   * If not set or time_override &lt;= 0, then the current
   * time is used.
   * </pre>
   *
   * <code>int64 time_override = 5;</code>
   * @return The timeOverride.
   */
  long getTimeOverride();

  /**
   * <pre>
   * Set to true if request is initiated by an internal Google user.
   * </pre>
   *
   * <code>bool is_internal_google_user = 6;</code>
   * @return The isInternalGoogleUser.
   */
  boolean getIsInternalGoogleUser();

  /**
   * <pre>
   * Determines whether cache needs to be ignored. If set to
   * true, cache won't be queried and updated.
   * </pre>
   *
   * <code>bool ignore_cache = 7;</code>
   * @return The ignoreCache.
   */
  boolean getIgnoreCache();

  /**
   * <pre>
   * Whether to include the request/response pair from the call to the
   * EntityIndex for SearchEntities.
   * </pre>
   *
   * <code>bool include_search_entities_rpc = 8;</code>
   * @return The includeSearchEntitiesRpc.
   */
  boolean getIncludeSearchEntitiesRpc();

  /**
   * <pre>
   * Whether to include the request/response pair from the call to the
   * Annotations service for ListColumnAnnotations.
   * </pre>
   *
   * <code>bool include_list_column_annotations_rpc = 9;</code>
   * @return The includeListColumnAnnotationsRpc.
   */
  boolean getIncludeListColumnAnnotationsRpc();

  /**
   * <pre>
   * Whether to include the entity list passed to Analyza.
   * </pre>
   *
   * <code>bool include_virtual_analyst_entities = 10;</code>
   * @return The includeVirtualAnalystEntities.
   */
  boolean getIncludeVirtualAnalystEntities();

  /**
   * <pre>
   * Whether to include the table list.
   * </pre>
   *
   * <code>bool include_table_list = 11;</code>
   * @return The includeTableList.
   */
  boolean getIncludeTableList();

  /**
   * <pre>
   * Whether to include the domain list.
   * </pre>
   *
   * <code>bool include_domain_list = 12;</code>
   * @return The includeDomainList.
   */
  boolean getIncludeDomainList();
}
