// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/timeseriesinsights/v1/timeseries_insights.proto

package com.google.cloud.timeseriesinsights.v1;

public interface EvaluatedSliceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.timeseriesinsights.v1.EvaluatedSlice)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Values for all categorical dimensions that uniquely identify this slice.
   * </pre>
   *
   * <code>repeated .google.cloud.timeseriesinsights.v1.PinnedDimension dimensions = 1;</code>
   */
  java.util.List<com.google.cloud.timeseriesinsights.v1.PinnedDimension> 
      getDimensionsList();
  /**
   * <pre>
   * Values for all categorical dimensions that uniquely identify this slice.
   * </pre>
   *
   * <code>repeated .google.cloud.timeseriesinsights.v1.PinnedDimension dimensions = 1;</code>
   */
  com.google.cloud.timeseriesinsights.v1.PinnedDimension getDimensions(int index);
  /**
   * <pre>
   * Values for all categorical dimensions that uniquely identify this slice.
   * </pre>
   *
   * <code>repeated .google.cloud.timeseriesinsights.v1.PinnedDimension dimensions = 1;</code>
   */
  int getDimensionsCount();
  /**
   * <pre>
   * Values for all categorical dimensions that uniquely identify this slice.
   * </pre>
   *
   * <code>repeated .google.cloud.timeseriesinsights.v1.PinnedDimension dimensions = 1;</code>
   */
  java.util.List<? extends com.google.cloud.timeseriesinsights.v1.PinnedDimensionOrBuilder> 
      getDimensionsOrBuilderList();
  /**
   * <pre>
   * Values for all categorical dimensions that uniquely identify this slice.
   * </pre>
   *
   * <code>repeated .google.cloud.timeseriesinsights.v1.PinnedDimension dimensions = 1;</code>
   */
  com.google.cloud.timeseriesinsights.v1.PinnedDimensionOrBuilder getDimensionsOrBuilder(
      int index);

  /**
   * <pre>
   * The actual value at the detection time (see
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time]).
   * **NOTE**: This value can be an estimate, so it should not be used as a
   * source of truth.
   * </pre>
   *
   * <code>optional double detection_point_actual = 11;</code>
   * @return Whether the detectionPointActual field is set.
   */
  boolean hasDetectionPointActual();
  /**
   * <pre>
   * The actual value at the detection time (see
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time]).
   * **NOTE**: This value can be an estimate, so it should not be used as a
   * source of truth.
   * </pre>
   *
   * <code>optional double detection_point_actual = 11;</code>
   * @return The detectionPointActual.
   */
  double getDetectionPointActual();

  /**
   * <pre>
   * The expected value at the detection time, which is obtained by forecasting
   * on the historical time series.
   * </pre>
   *
   * <code>optional double detection_point_forecast = 12;</code>
   * @return Whether the detectionPointForecast field is set.
   */
  boolean hasDetectionPointForecast();
  /**
   * <pre>
   * The expected value at the detection time, which is obtained by forecasting
   * on the historical time series.
   * </pre>
   *
   * <code>optional double detection_point_forecast = 12;</code>
   * @return The detectionPointForecast.
   */
  double getDetectionPointForecast();

  /**
   * <pre>
   * How much our forecast model expects the detection point actual will
   * deviate from its forecasted value based on how well it fit the input time
   * series.
   * In general, we expect the `detectionPointActual` to
   * be in the `[detectionPointForecast - expectedDeviation,
   * detectionPointForecast + expectedDeviation]` range. The more the actual
   * value is outside this range, the more statistically significant the
   * anomaly is.
   * The expected deviation is always positive.
   * </pre>
   *
   * <code>optional double expected_deviation = 16;</code>
   * @return Whether the expectedDeviation field is set.
   */
  boolean hasExpectedDeviation();
  /**
   * <pre>
   * How much our forecast model expects the detection point actual will
   * deviate from its forecasted value based on how well it fit the input time
   * series.
   * In general, we expect the `detectionPointActual` to
   * be in the `[detectionPointForecast - expectedDeviation,
   * detectionPointForecast + expectedDeviation]` range. The more the actual
   * value is outside this range, the more statistically significant the
   * anomaly is.
   * The expected deviation is always positive.
   * </pre>
   *
   * <code>optional double expected_deviation = 16;</code>
   * @return The expectedDeviation.
   */
  double getExpectedDeviation();

  /**
   * <pre>
   * Summarizes how significant the change between the actual and forecasted
   * detection points are compared with the historical patterns observed on the
   * [history][google.cloud.timeseriesinsights.v1.EvaluatedSlice.history] time series.
   * Defined as *|a - f| / (e + nt)*, where:
   * - *a* is the [detectionPointActual][google.cloud.timeseriesinsights.v1.EvaluatedSlice.detection_point_actual].
   * - *f* is the [detectionPointForecast][google.cloud.timeseriesinsights.v1.EvaluatedSlice.detection_point_forecast].
   * - *e* is the [expectedDeviation][google.cloud.timeseriesinsights.v1.EvaluatedSlice.expected_deviation].
   * - *nt` is the [noiseThreshold][google.cloud.timeseriesinsights.v1.ForecastParams.noise_threshold].
   * Anomaly scores between different requests and datasets are comparable. As
   * a guideline, the risk of a slice being an anomaly based on the anomaly
   * score is:
   * - **Very High** if `anomalyScore` &gt; 5.
   * - **High** if the `anomalyScore` is in the [2, 5] range.
   * - **Medium** if the `anomalyScore` is in the [1, 2) range.
   * - **Low** if the `anomalyScore` is &lt; 1.
   * If there were issues evaluating this slice, then the anomaly score will be
   * set to -1.0 and the [status][google.cloud.timeseriesinsights.v1.EvaluatedSlice.status] field will contain details on what
   * went wrong.
   * </pre>
   *
   * <code>optional double anomaly_score = 17;</code>
   * @return Whether the anomalyScore field is set.
   */
  boolean hasAnomalyScore();
  /**
   * <pre>
   * Summarizes how significant the change between the actual and forecasted
   * detection points are compared with the historical patterns observed on the
   * [history][google.cloud.timeseriesinsights.v1.EvaluatedSlice.history] time series.
   * Defined as *|a - f| / (e + nt)*, where:
   * - *a* is the [detectionPointActual][google.cloud.timeseriesinsights.v1.EvaluatedSlice.detection_point_actual].
   * - *f* is the [detectionPointForecast][google.cloud.timeseriesinsights.v1.EvaluatedSlice.detection_point_forecast].
   * - *e* is the [expectedDeviation][google.cloud.timeseriesinsights.v1.EvaluatedSlice.expected_deviation].
   * - *nt` is the [noiseThreshold][google.cloud.timeseriesinsights.v1.ForecastParams.noise_threshold].
   * Anomaly scores between different requests and datasets are comparable. As
   * a guideline, the risk of a slice being an anomaly based on the anomaly
   * score is:
   * - **Very High** if `anomalyScore` &gt; 5.
   * - **High** if the `anomalyScore` is in the [2, 5] range.
   * - **Medium** if the `anomalyScore` is in the [1, 2) range.
   * - **Low** if the `anomalyScore` is &lt; 1.
   * If there were issues evaluating this slice, then the anomaly score will be
   * set to -1.0 and the [status][google.cloud.timeseriesinsights.v1.EvaluatedSlice.status] field will contain details on what
   * went wrong.
   * </pre>
   *
   * <code>optional double anomaly_score = 17;</code>
   * @return The anomalyScore.
   */
  double getAnomalyScore();

  /**
   * <pre>
   * The actual values in the `[`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `-`
   * [forecastHistory][google.cloud.timeseriesinsights.v1.TimeseriesParams.forecast_history]`,`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `]` time
   * range.
   * **NOTE**: This field is only populated if
   * [returnTimeseries][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.return_timeseries] is true.
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.Timeseries history = 5;</code>
   * @return Whether the history field is set.
   */
  boolean hasHistory();
  /**
   * <pre>
   * The actual values in the `[`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `-`
   * [forecastHistory][google.cloud.timeseriesinsights.v1.TimeseriesParams.forecast_history]`,`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `]` time
   * range.
   * **NOTE**: This field is only populated if
   * [returnTimeseries][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.return_timeseries] is true.
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.Timeseries history = 5;</code>
   * @return The history.
   */
  com.google.cloud.timeseriesinsights.v1.Timeseries getHistory();
  /**
   * <pre>
   * The actual values in the `[`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `-`
   * [forecastHistory][google.cloud.timeseriesinsights.v1.TimeseriesParams.forecast_history]`,`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `]` time
   * range.
   * **NOTE**: This field is only populated if
   * [returnTimeseries][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.return_timeseries] is true.
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.Timeseries history = 5;</code>
   */
  com.google.cloud.timeseriesinsights.v1.TimeseriesOrBuilder getHistoryOrBuilder();

  /**
   * <pre>
   * The forecasted values in the `[`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `+`
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity]`,`
   * [forecastParams.horizonTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.forecast_params] `]` time
   * range.
   * **NOTE**: This field is only populated if
   * [returnTimeseries][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.return_timeseries] is true.
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.Timeseries forecast = 10;</code>
   * @return Whether the forecast field is set.
   */
  boolean hasForecast();
  /**
   * <pre>
   * The forecasted values in the `[`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `+`
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity]`,`
   * [forecastParams.horizonTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.forecast_params] `]` time
   * range.
   * **NOTE**: This field is only populated if
   * [returnTimeseries][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.return_timeseries] is true.
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.Timeseries forecast = 10;</code>
   * @return The forecast.
   */
  com.google.cloud.timeseriesinsights.v1.Timeseries getForecast();
  /**
   * <pre>
   * The forecasted values in the `[`
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time] `+`
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity]`,`
   * [forecastParams.horizonTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.forecast_params] `]` time
   * range.
   * **NOTE**: This field is only populated if
   * [returnTimeseries][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.return_timeseries] is true.
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.Timeseries forecast = 10;</code>
   */
  com.google.cloud.timeseriesinsights.v1.TimeseriesOrBuilder getForecastOrBuilder();

  /**
   * <pre>
   * Evaluation status. Contains an error message if the `anomalyScore` is &lt; 0.
   * Possible error messages:
   * - **"Time series too sparse"**: The returned time series for this slice did
   * not contain enough data points (we require a minimum of 10).
   * - **"Not enough recent time series points"**: The time series contains the
   * minimum of 10 points, but there are not enough close in time to the
   * detection point.
   * - **"Missing detection point data"**: There were not events to be
   * aggregated within the `[detectionTime, detectionTime + granularity]` time
   * interval, so we don't have an actual value with which we can compare our
   * prediction.
   * - **"Data retrieval error"**: We failed to retrieve the time series data
   * for this slice and could not evaluate it successfully. Should be a
   * transient error.
   * - **"Internal server error"**: Internal unexpected error.
   * </pre>
   *
   * <code>.google.rpc.Status status = 18;</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * Evaluation status. Contains an error message if the `anomalyScore` is &lt; 0.
   * Possible error messages:
   * - **"Time series too sparse"**: The returned time series for this slice did
   * not contain enough data points (we require a minimum of 10).
   * - **"Not enough recent time series points"**: The time series contains the
   * minimum of 10 points, but there are not enough close in time to the
   * detection point.
   * - **"Missing detection point data"**: There were not events to be
   * aggregated within the `[detectionTime, detectionTime + granularity]` time
   * interval, so we don't have an actual value with which we can compare our
   * prediction.
   * - **"Data retrieval error"**: We failed to retrieve the time series data
   * for this slice and could not evaluate it successfully. Should be a
   * transient error.
   * - **"Internal server error"**: Internal unexpected error.
   * </pre>
   *
   * <code>.google.rpc.Status status = 18;</code>
   * @return The status.
   */
  com.google.rpc.Status getStatus();
  /**
   * <pre>
   * Evaluation status. Contains an error message if the `anomalyScore` is &lt; 0.
   * Possible error messages:
   * - **"Time series too sparse"**: The returned time series for this slice did
   * not contain enough data points (we require a minimum of 10).
   * - **"Not enough recent time series points"**: The time series contains the
   * minimum of 10 points, but there are not enough close in time to the
   * detection point.
   * - **"Missing detection point data"**: There were not events to be
   * aggregated within the `[detectionTime, detectionTime + granularity]` time
   * interval, so we don't have an actual value with which we can compare our
   * prediction.
   * - **"Data retrieval error"**: We failed to retrieve the time series data
   * for this slice and could not evaluate it successfully. Should be a
   * transient error.
   * - **"Internal server error"**: Internal unexpected error.
   * </pre>
   *
   * <code>.google.rpc.Status status = 18;</code>
   */
  com.google.rpc.StatusOrBuilder getStatusOrBuilder();
}
