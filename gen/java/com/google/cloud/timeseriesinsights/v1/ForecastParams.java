// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/timeseriesinsights/v1/timeseries_insights.proto

package com.google.cloud.timeseriesinsights.v1;

/**
 * <pre>
 * Parameters that control the sensitivity and other options for the time series
 * forecast.
 * </pre>
 *
 * Protobuf type {@code google.cloud.timeseriesinsights.v1.ForecastParams}
 */
public final class ForecastParams extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.timeseriesinsights.v1.ForecastParams)
    ForecastParamsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ForecastParams.newBuilder() to construct.
  private ForecastParams(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ForecastParams() {
    seasonalityHint_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ForecastParams();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.timeseriesinsights.v1.TimeseriesInsightsProto.internal_static_google_cloud_timeseriesinsights_v1_ForecastParams_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.timeseriesinsights.v1.TimeseriesInsightsProto.internal_static_google_cloud_timeseriesinsights_v1_ForecastParams_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.timeseriesinsights.v1.ForecastParams.class, com.google.cloud.timeseriesinsights.v1.ForecastParams.Builder.class);
  }

  /**
   * <pre>
   * A time period of a fixed interval.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.timeseriesinsights.v1.ForecastParams.Period}
   */
  public enum Period
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unknown or simply not given.
     * </pre>
     *
     * <code>PERIOD_UNSPECIFIED = 0;</code>
     */
    PERIOD_UNSPECIFIED(0),
    /**
     * <pre>
     * 1 hour
     * </pre>
     *
     * <code>HOURLY = 5;</code>
     */
    HOURLY(5),
    /**
     * <pre>
     * 24 hours
     * </pre>
     *
     * <code>DAILY = 1;</code>
     */
    DAILY(1),
    /**
     * <pre>
     * 7 days
     * </pre>
     *
     * <code>WEEKLY = 2;</code>
     */
    WEEKLY(2),
    /**
     * <pre>
     * 30 days
     * </pre>
     *
     * <code>MONTHLY = 3;</code>
     */
    MONTHLY(3),
    /**
     * <pre>
     * 365 days
     * </pre>
     *
     * <code>YEARLY = 4;</code>
     */
    YEARLY(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unknown or simply not given.
     * </pre>
     *
     * <code>PERIOD_UNSPECIFIED = 0;</code>
     */
    public static final int PERIOD_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * 1 hour
     * </pre>
     *
     * <code>HOURLY = 5;</code>
     */
    public static final int HOURLY_VALUE = 5;
    /**
     * <pre>
     * 24 hours
     * </pre>
     *
     * <code>DAILY = 1;</code>
     */
    public static final int DAILY_VALUE = 1;
    /**
     * <pre>
     * 7 days
     * </pre>
     *
     * <code>WEEKLY = 2;</code>
     */
    public static final int WEEKLY_VALUE = 2;
    /**
     * <pre>
     * 30 days
     * </pre>
     *
     * <code>MONTHLY = 3;</code>
     */
    public static final int MONTHLY_VALUE = 3;
    /**
     * <pre>
     * 365 days
     * </pre>
     *
     * <code>YEARLY = 4;</code>
     */
    public static final int YEARLY_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Period valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Period forNumber(int value) {
      switch (value) {
        case 0: return PERIOD_UNSPECIFIED;
        case 5: return HOURLY;
        case 1: return DAILY;
        case 2: return WEEKLY;
        case 3: return MONTHLY;
        case 4: return YEARLY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Period>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Period> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Period>() {
            public Period findValueByNumber(int number) {
              return Period.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.timeseriesinsights.v1.ForecastParams.getDescriptor().getEnumTypes().get(0);
    }

    private static final Period[] VALUES = values();

    public static Period valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Period(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.timeseriesinsights.v1.ForecastParams.Period)
  }

  private int bitField0_;
  public static final int NOISE_THRESHOLD_FIELD_NUMBER = 12;
  private double noiseThreshold_ = 0D;
  /**
   * <pre>
   * Optional. Penalize variations between the actual and forecasted values smaller than
   * this. For more information about how this parameter affects the score, see
   * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
   * Intuitively, anomaly scores summarize how statistically significant the
   * change between the actual and forecasted value is compared with what we
   * expect the change to be (see
   * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
   * practice, depending on the application, changes smaller than certain
   * absolute values, while statistically significant, may not be important.
   * This parameter allows us to penalize such low absolute value changes.
   * Must be in the (0.0, inf) range.
   * If unspecified, it defaults to 0.000001.
   * </pre>
   *
   * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the noiseThreshold field is set.
   */
  @java.lang.Override
  public boolean hasNoiseThreshold() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Optional. Penalize variations between the actual and forecasted values smaller than
   * this. For more information about how this parameter affects the score, see
   * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
   * Intuitively, anomaly scores summarize how statistically significant the
   * change between the actual and forecasted value is compared with what we
   * expect the change to be (see
   * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
   * practice, depending on the application, changes smaller than certain
   * absolute values, while statistically significant, may not be important.
   * This parameter allows us to penalize such low absolute value changes.
   * Must be in the (0.0, inf) range.
   * If unspecified, it defaults to 0.000001.
   * </pre>
   *
   * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The noiseThreshold.
   */
  @java.lang.Override
  public double getNoiseThreshold() {
    return noiseThreshold_;
  }

  public static final int SEASONALITY_HINT_FIELD_NUMBER = 10;
  private int seasonalityHint_ = 0;
  /**
   * <pre>
   * Optional. Specifying any known seasonality/periodicity in the time series
   * for the slices we will analyze can improve the quality of the results.
   * If unsure, simply leave it unspecified by not setting a value for this
   * field.
   * If your time series has multiple seasonal patterns, then set it to the most
   * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The enum numeric value on the wire for seasonalityHint.
   */
  @java.lang.Override public int getSeasonalityHintValue() {
    return seasonalityHint_;
  }
  /**
   * <pre>
   * Optional. Specifying any known seasonality/periodicity in the time series
   * for the slices we will analyze can improve the quality of the results.
   * If unsure, simply leave it unspecified by not setting a value for this
   * field.
   * If your time series has multiple seasonal patterns, then set it to the most
   * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The seasonalityHint.
   */
  @java.lang.Override public com.google.cloud.timeseriesinsights.v1.ForecastParams.Period getSeasonalityHint() {
    com.google.cloud.timeseriesinsights.v1.ForecastParams.Period result = com.google.cloud.timeseriesinsights.v1.ForecastParams.Period.forNumber(seasonalityHint_);
    return result == null ? com.google.cloud.timeseriesinsights.v1.ForecastParams.Period.UNRECOGNIZED : result;
  }

  public static final int HORIZON_DURATION_FIELD_NUMBER = 13;
  private com.google.protobuf.Duration horizonDuration_;
  /**
   * <pre>
   * Optional. The length of the returned [forecasted
   * timeseries][EvaluatedSlice.forecast].
   * This duration is currently capped at 100 x
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
   * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
   * horizon_duration to "10800s", then we will generate 3 time
   * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
   * which we will return their forecasted values.
   * Note: The horizon time is only used for forecasting not for anormaly
   * detection. To detect anomalies for multiple points of time,
   * simply send multiple queries with those as
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
   * </pre>
   *
   * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the horizonDuration field is set.
   */
  @java.lang.Override
  public boolean hasHorizonDuration() {
    return horizonDuration_ != null;
  }
  /**
   * <pre>
   * Optional. The length of the returned [forecasted
   * timeseries][EvaluatedSlice.forecast].
   * This duration is currently capped at 100 x
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
   * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
   * horizon_duration to "10800s", then we will generate 3 time
   * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
   * which we will return their forecasted values.
   * Note: The horizon time is only used for forecasting not for anormaly
   * detection. To detect anomalies for multiple points of time,
   * simply send multiple queries with those as
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
   * </pre>
   *
   * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The horizonDuration.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getHorizonDuration() {
    return horizonDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : horizonDuration_;
  }
  /**
   * <pre>
   * Optional. The length of the returned [forecasted
   * timeseries][EvaluatedSlice.forecast].
   * This duration is currently capped at 100 x
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
   * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
   * horizon_duration to "10800s", then we will generate 3 time
   * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
   * which we will return their forecasted values.
   * Note: The horizon time is only used for forecasting not for anormaly
   * detection. To detect anomalies for multiple points of time,
   * simply send multiple queries with those as
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
   * </pre>
   *
   * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getHorizonDurationOrBuilder() {
    return horizonDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : horizonDuration_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (seasonalityHint_ != com.google.cloud.timeseriesinsights.v1.ForecastParams.Period.PERIOD_UNSPECIFIED.getNumber()) {
      output.writeEnum(10, seasonalityHint_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeDouble(12, noiseThreshold_);
    }
    if (horizonDuration_ != null) {
      output.writeMessage(13, getHorizonDuration());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (seasonalityHint_ != com.google.cloud.timeseriesinsights.v1.ForecastParams.Period.PERIOD_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(10, seasonalityHint_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(12, noiseThreshold_);
    }
    if (horizonDuration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getHorizonDuration());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.timeseriesinsights.v1.ForecastParams)) {
      return super.equals(obj);
    }
    com.google.cloud.timeseriesinsights.v1.ForecastParams other = (com.google.cloud.timeseriesinsights.v1.ForecastParams) obj;

    if (hasNoiseThreshold() != other.hasNoiseThreshold()) return false;
    if (hasNoiseThreshold()) {
      if (java.lang.Double.doubleToLongBits(getNoiseThreshold())
          != java.lang.Double.doubleToLongBits(
              other.getNoiseThreshold())) return false;
    }
    if (seasonalityHint_ != other.seasonalityHint_) return false;
    if (hasHorizonDuration() != other.hasHorizonDuration()) return false;
    if (hasHorizonDuration()) {
      if (!getHorizonDuration()
          .equals(other.getHorizonDuration())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNoiseThreshold()) {
      hash = (37 * hash) + NOISE_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNoiseThreshold()));
    }
    hash = (37 * hash) + SEASONALITY_HINT_FIELD_NUMBER;
    hash = (53 * hash) + seasonalityHint_;
    if (hasHorizonDuration()) {
      hash = (37 * hash) + HORIZON_DURATION_FIELD_NUMBER;
      hash = (53 * hash) + getHorizonDuration().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.timeseriesinsights.v1.ForecastParams parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.timeseriesinsights.v1.ForecastParams prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Parameters that control the sensitivity and other options for the time series
   * forecast.
   * </pre>
   *
   * Protobuf type {@code google.cloud.timeseriesinsights.v1.ForecastParams}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.timeseriesinsights.v1.ForecastParams)
      com.google.cloud.timeseriesinsights.v1.ForecastParamsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.timeseriesinsights.v1.TimeseriesInsightsProto.internal_static_google_cloud_timeseriesinsights_v1_ForecastParams_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.timeseriesinsights.v1.TimeseriesInsightsProto.internal_static_google_cloud_timeseriesinsights_v1_ForecastParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.timeseriesinsights.v1.ForecastParams.class, com.google.cloud.timeseriesinsights.v1.ForecastParams.Builder.class);
    }

    // Construct using com.google.cloud.timeseriesinsights.v1.ForecastParams.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      noiseThreshold_ = 0D;
      seasonalityHint_ = 0;
      horizonDuration_ = null;
      if (horizonDurationBuilder_ != null) {
        horizonDurationBuilder_.dispose();
        horizonDurationBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.timeseriesinsights.v1.TimeseriesInsightsProto.internal_static_google_cloud_timeseriesinsights_v1_ForecastParams_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.timeseriesinsights.v1.ForecastParams getDefaultInstanceForType() {
      return com.google.cloud.timeseriesinsights.v1.ForecastParams.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.timeseriesinsights.v1.ForecastParams build() {
      com.google.cloud.timeseriesinsights.v1.ForecastParams result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.timeseriesinsights.v1.ForecastParams buildPartial() {
      com.google.cloud.timeseriesinsights.v1.ForecastParams result = new com.google.cloud.timeseriesinsights.v1.ForecastParams(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.timeseriesinsights.v1.ForecastParams result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.noiseThreshold_ = noiseThreshold_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.seasonalityHint_ = seasonalityHint_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.horizonDuration_ = horizonDurationBuilder_ == null
            ? horizonDuration_
            : horizonDurationBuilder_.build();
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.timeseriesinsights.v1.ForecastParams) {
        return mergeFrom((com.google.cloud.timeseriesinsights.v1.ForecastParams)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.timeseriesinsights.v1.ForecastParams other) {
      if (other == com.google.cloud.timeseriesinsights.v1.ForecastParams.getDefaultInstance()) return this;
      if (other.hasNoiseThreshold()) {
        setNoiseThreshold(other.getNoiseThreshold());
      }
      if (other.seasonalityHint_ != 0) {
        setSeasonalityHintValue(other.getSeasonalityHintValue());
      }
      if (other.hasHorizonDuration()) {
        mergeHorizonDuration(other.getHorizonDuration());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 80: {
              seasonalityHint_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 80
            case 97: {
              noiseThreshold_ = input.readDouble();
              bitField0_ |= 0x00000001;
              break;
            } // case 97
            case 106: {
              input.readMessage(
                  getHorizonDurationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 106
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private double noiseThreshold_ ;
    /**
     * <pre>
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     * </pre>
     *
     * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return Whether the noiseThreshold field is set.
     */
    @java.lang.Override
    public boolean hasNoiseThreshold() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     * </pre>
     *
     * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The noiseThreshold.
     */
    @java.lang.Override
    public double getNoiseThreshold() {
      return noiseThreshold_;
    }
    /**
     * <pre>
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     * </pre>
     *
     * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param value The noiseThreshold to set.
     * @return This builder for chaining.
     */
    public Builder setNoiseThreshold(double value) {
      
      noiseThreshold_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. Penalize variations between the actual and forecasted values smaller than
     * this. For more information about how this parameter affects the score, see
     * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
     * Intuitively, anomaly scores summarize how statistically significant the
     * change between the actual and forecasted value is compared with what we
     * expect the change to be (see
     * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
     * practice, depending on the application, changes smaller than certain
     * absolute values, while statistically significant, may not be important.
     * This parameter allows us to penalize such low absolute value changes.
     * Must be in the (0.0, inf) range.
     * If unspecified, it defaults to 0.000001.
     * </pre>
     *
     * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return This builder for chaining.
     */
    public Builder clearNoiseThreshold() {
      bitField0_ = (bitField0_ & ~0x00000001);
      noiseThreshold_ = 0D;
      onChanged();
      return this;
    }

    private int seasonalityHint_ = 0;
    /**
     * <pre>
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     * </pre>
     *
     * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The enum numeric value on the wire for seasonalityHint.
     */
    @java.lang.Override public int getSeasonalityHintValue() {
      return seasonalityHint_;
    }
    /**
     * <pre>
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     * </pre>
     *
     * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param value The enum numeric value on the wire for seasonalityHint to set.
     * @return This builder for chaining.
     */
    public Builder setSeasonalityHintValue(int value) {
      seasonalityHint_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     * </pre>
     *
     * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The seasonalityHint.
     */
    @java.lang.Override
    public com.google.cloud.timeseriesinsights.v1.ForecastParams.Period getSeasonalityHint() {
      com.google.cloud.timeseriesinsights.v1.ForecastParams.Period result = com.google.cloud.timeseriesinsights.v1.ForecastParams.Period.forNumber(seasonalityHint_);
      return result == null ? com.google.cloud.timeseriesinsights.v1.ForecastParams.Period.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     * </pre>
     *
     * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @param value The seasonalityHint to set.
     * @return This builder for chaining.
     */
    public Builder setSeasonalityHint(com.google.cloud.timeseriesinsights.v1.ForecastParams.Period value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      seasonalityHint_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. Specifying any known seasonality/periodicity in the time series
     * for the slices we will analyze can improve the quality of the results.
     * If unsure, simply leave it unspecified by not setting a value for this
     * field.
     * If your time series has multiple seasonal patterns, then set it to the most
     * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
     * </pre>
     *
     * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return This builder for chaining.
     */
    public Builder clearSeasonalityHint() {
      bitField0_ = (bitField0_ & ~0x00000002);
      seasonalityHint_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Duration horizonDuration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> horizonDurationBuilder_;
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return Whether the horizonDuration field is set.
     */
    public boolean hasHorizonDuration() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     * @return The horizonDuration.
     */
    public com.google.protobuf.Duration getHorizonDuration() {
      if (horizonDurationBuilder_ == null) {
        return horizonDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : horizonDuration_;
      } else {
        return horizonDurationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder setHorizonDuration(com.google.protobuf.Duration value) {
      if (horizonDurationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        horizonDuration_ = value;
      } else {
        horizonDurationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder setHorizonDuration(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (horizonDurationBuilder_ == null) {
        horizonDuration_ = builderForValue.build();
      } else {
        horizonDurationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder mergeHorizonDuration(com.google.protobuf.Duration value) {
      if (horizonDurationBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          horizonDuration_ != null &&
          horizonDuration_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getHorizonDurationBuilder().mergeFrom(value);
        } else {
          horizonDuration_ = value;
        }
      } else {
        horizonDurationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public Builder clearHorizonDuration() {
      bitField0_ = (bitField0_ & ~0x00000004);
      horizonDuration_ = null;
      if (horizonDurationBuilder_ != null) {
        horizonDurationBuilder_.dispose();
        horizonDurationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public com.google.protobuf.Duration.Builder getHorizonDurationBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getHorizonDurationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    public com.google.protobuf.DurationOrBuilder getHorizonDurationOrBuilder() {
      if (horizonDurationBuilder_ != null) {
        return horizonDurationBuilder_.getMessageOrBuilder();
      } else {
        return horizonDuration_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : horizonDuration_;
      }
    }
    /**
     * <pre>
     * Optional. The length of the returned [forecasted
     * timeseries][EvaluatedSlice.forecast].
     * This duration is currently capped at 100 x
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
     * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
     * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
     * horizon_duration to "10800s", then we will generate 3 time
     * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
     * which we will return their forecasted values.
     * Note: The horizon time is only used for forecasting not for anormaly
     * detection. To detect anomalies for multiple points of time,
     * simply send multiple queries with those as
     * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
     * </pre>
     *
     * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getHorizonDurationFieldBuilder() {
      if (horizonDurationBuilder_ == null) {
        horizonDurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getHorizonDuration(),
                getParentForChildren(),
                isClean());
        horizonDuration_ = null;
      }
      return horizonDurationBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.timeseriesinsights.v1.ForecastParams)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.timeseriesinsights.v1.ForecastParams)
  private static final com.google.cloud.timeseriesinsights.v1.ForecastParams DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.timeseriesinsights.v1.ForecastParams();
  }

  public static com.google.cloud.timeseriesinsights.v1.ForecastParams getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ForecastParams>
      PARSER = new com.google.protobuf.AbstractParser<ForecastParams>() {
    @java.lang.Override
    public ForecastParams parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ForecastParams> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ForecastParams> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.timeseriesinsights.v1.ForecastParams getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

