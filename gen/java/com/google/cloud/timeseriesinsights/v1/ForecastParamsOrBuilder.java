// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/timeseriesinsights/v1/timeseries_insights.proto

package com.google.cloud.timeseriesinsights.v1;

public interface ForecastParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.timeseriesinsights.v1.ForecastParams)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Optional. Penalize variations between the actual and forecasted values smaller than
   * this. For more information about how this parameter affects the score, see
   * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
   * Intuitively, anomaly scores summarize how statistically significant the
   * change between the actual and forecasted value is compared with what we
   * expect the change to be (see
   * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
   * practice, depending on the application, changes smaller than certain
   * absolute values, while statistically significant, may not be important.
   * This parameter allows us to penalize such low absolute value changes.
   * Must be in the (0.0, inf) range.
   * If unspecified, it defaults to 0.000001.
   * </pre>
   *
   * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the noiseThreshold field is set.
   */
  boolean hasNoiseThreshold();
  /**
   * <pre>
   * Optional. Penalize variations between the actual and forecasted values smaller than
   * this. For more information about how this parameter affects the score, see
   * the [anomalyScore](EvaluatedSlice.anomaly_score) formula.
   * Intuitively, anomaly scores summarize how statistically significant the
   * change between the actual and forecasted value is compared with what we
   * expect the change to be (see
   * [expectedDeviation](EvaluatedSlice.expected_deviation)). However, in
   * practice, depending on the application, changes smaller than certain
   * absolute values, while statistically significant, may not be important.
   * This parameter allows us to penalize such low absolute value changes.
   * Must be in the (0.0, inf) range.
   * If unspecified, it defaults to 0.000001.
   * </pre>
   *
   * <code>optional double noise_threshold = 12 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The noiseThreshold.
   */
  double getNoiseThreshold();

  /**
   * <pre>
   * Optional. Specifying any known seasonality/periodicity in the time series
   * for the slices we will analyze can improve the quality of the results.
   * If unsure, simply leave it unspecified by not setting a value for this
   * field.
   * If your time series has multiple seasonal patterns, then set it to the most
   * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The enum numeric value on the wire for seasonalityHint.
   */
  int getSeasonalityHintValue();
  /**
   * <pre>
   * Optional. Specifying any known seasonality/periodicity in the time series
   * for the slices we will analyze can improve the quality of the results.
   * If unsure, simply leave it unspecified by not setting a value for this
   * field.
   * If your time series has multiple seasonal patterns, then set it to the most
   * granular one (e.g. if it has daily and weekly patterns, set this to DAILY).
   * </pre>
   *
   * <code>.google.cloud.timeseriesinsights.v1.ForecastParams.Period seasonality_hint = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The seasonalityHint.
   */
  com.google.cloud.timeseriesinsights.v1.ForecastParams.Period getSeasonalityHint();

  /**
   * <pre>
   * Optional. The length of the returned [forecasted
   * timeseries][EvaluatedSlice.forecast].
   * This duration is currently capped at 100 x
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
   * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
   * horizon_duration to "10800s", then we will generate 3 time
   * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
   * which we will return their forecasted values.
   * Note: The horizon time is only used for forecasting not for anormaly
   * detection. To detect anomalies for multiple points of time,
   * simply send multiple queries with those as
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
   * </pre>
   *
   * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the horizonDuration field is set.
   */
  boolean hasHorizonDuration();
  /**
   * <pre>
   * Optional. The length of the returned [forecasted
   * timeseries][EvaluatedSlice.forecast].
   * This duration is currently capped at 100 x
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
   * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
   * horizon_duration to "10800s", then we will generate 3 time
   * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
   * which we will return their forecasted values.
   * Note: The horizon time is only used for forecasting not for anormaly
   * detection. To detect anomalies for multiple points of time,
   * simply send multiple queries with those as
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
   * </pre>
   *
   * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The horizonDuration.
   */
  com.google.protobuf.Duration getHorizonDuration();
  /**
   * <pre>
   * Optional. The length of the returned [forecasted
   * timeseries][EvaluatedSlice.forecast].
   * This duration is currently capped at 100 x
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity].
   * Example: If the detection point is set to "2020-12-27T00:00:00Z", the
   * [granularity][google.cloud.timeseriesinsights.v1.TimeseriesParams.granularity] to "3600s" and the
   * horizon_duration to "10800s", then we will generate 3 time
   * series points (from "2020-12-27T01:00:00Z" to "2020-12-27T04:00:00Z"), for
   * which we will return their forecasted values.
   * Note: The horizon time is only used for forecasting not for anormaly
   * detection. To detect anomalies for multiple points of time,
   * simply send multiple queries with those as
   * [detectionTime][google.cloud.timeseriesinsights.v1.QueryDataSetRequest.detection_time].
   * </pre>
   *
   * <code>.google.protobuf.Duration horizon_duration = 13 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  com.google.protobuf.DurationOrBuilder getHorizonDurationOrBuilder();
}
