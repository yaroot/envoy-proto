// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/stream/logging/v1/logging.proto

package com.google.cloud.stream.logging.v1;

/**
 * <pre>
 * SessionEventType is the enum value for the state of session.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.stream.logging.v1.SessionEventType}
 */
public enum SessionEventType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified session event type.
   * </pre>
   *
   * <code>SESSION_EVENT_TYPE_UNSPECIFIED = 0;</code>
   */
  SESSION_EVENT_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Session in streamer shutting down state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN = 1;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN(1),
  /**
   * <pre>
   * Session in streamer ready state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_READY = 2;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_READY(2),
  /**
   * <pre>
   * Session in streamer binary started state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED = 3;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED(3),
  /**
   * <pre>
   * Session in streamer read pod image names state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES = 4;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES(4),
  /**
   * <pre>
   * Session in streamer connected to game state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME = 5;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME(5),
  /**
   * <pre>
   * Session in streamer connected to client state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT = 6;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT(6),
  /**
   * <pre>
   * Session in streamer disconnected from client state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT = 7;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT(7),
  /**
   * <pre>
   * Session in streamer received create session request state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST = 8;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST(8),
  /**
   * <pre>
   * Session in streamer game message to stream closed state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED = 9;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED(9),
  /**
   * <pre>
   * Session in streamer game frame stream closed state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED = 10;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED(10),
  /**
   * <pre>
   * Session in streamer game message stream error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR = 11;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR(11),
  /**
   * <pre>
   * Session in streamer game audio stream error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR = 12;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR(12),
  /**
   * <pre>
   * Session in streamer game audio stream closed state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED = 13;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED(13),
  /**
   * <pre>
   * Session in streamer game frame stream error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR = 14;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR(14),
  /**
   * <pre>
   * Session in game disconnecting after paused too long state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG = 15;</code>
   */
  SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG(15),
  /**
   * <pre>
   * Session in streamer received experiment configuration state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION = 16;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION(16),
  /**
   * <pre>
   * Session in game connected to logging service state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE = 17;</code>
   */
  SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE(17),
  /**
   * <pre>
   * Session in streamer determined session options state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS = 18;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS(18),
  /**
   * <pre>
   * Session in streamer killed in middle of session state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION = 19;</code>
   */
  SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION(19),
  /**
   * <pre>
   * Session in game updated frame pipeline state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE = 20;</code>
   */
  SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE(20),
  /**
   * <pre>
   * Session in server error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_ERROR = 21;</code>
   */
  SESSION_EVENT_SERVER_ERROR(21),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unspecified session event type.
   * </pre>
   *
   * <code>SESSION_EVENT_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int SESSION_EVENT_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Session in streamer shutting down state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN = 1;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN_VALUE = 1;
  /**
   * <pre>
   * Session in streamer ready state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_READY = 2;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_READY_VALUE = 2;
  /**
   * <pre>
   * Session in streamer binary started state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED = 3;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED_VALUE = 3;
  /**
   * <pre>
   * Session in streamer read pod image names state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES = 4;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES_VALUE = 4;
  /**
   * <pre>
   * Session in streamer connected to game state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME = 5;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME_VALUE = 5;
  /**
   * <pre>
   * Session in streamer connected to client state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT = 6;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT_VALUE = 6;
  /**
   * <pre>
   * Session in streamer disconnected from client state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT = 7;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT_VALUE = 7;
  /**
   * <pre>
   * Session in streamer received create session request state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST = 8;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST_VALUE = 8;
  /**
   * <pre>
   * Session in streamer game message to stream closed state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED = 9;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED_VALUE = 9;
  /**
   * <pre>
   * Session in streamer game frame stream closed state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED = 10;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED_VALUE = 10;
  /**
   * <pre>
   * Session in streamer game message stream error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR = 11;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR_VALUE = 11;
  /**
   * <pre>
   * Session in streamer game audio stream error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR = 12;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR_VALUE = 12;
  /**
   * <pre>
   * Session in streamer game audio stream closed state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED = 13;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED_VALUE = 13;
  /**
   * <pre>
   * Session in streamer game frame stream error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR = 14;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR_VALUE = 14;
  /**
   * <pre>
   * Session in game disconnecting after paused too long state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG = 15;</code>
   */
  public static final int SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG_VALUE = 15;
  /**
   * <pre>
   * Session in streamer received experiment configuration state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION = 16;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION_VALUE = 16;
  /**
   * <pre>
   * Session in game connected to logging service state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE = 17;</code>
   */
  public static final int SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE_VALUE = 17;
  /**
   * <pre>
   * Session in streamer determined session options state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS = 18;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS_VALUE = 18;
  /**
   * <pre>
   * Session in streamer killed in middle of session state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION = 19;</code>
   */
  public static final int SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION_VALUE = 19;
  /**
   * <pre>
   * Session in game updated frame pipeline state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE = 20;</code>
   */
  public static final int SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE_VALUE = 20;
  /**
   * <pre>
   * Session in server error state.
   * </pre>
   *
   * <code>SESSION_EVENT_SERVER_ERROR = 21;</code>
   */
  public static final int SESSION_EVENT_SERVER_ERROR_VALUE = 21;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SessionEventType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SessionEventType forNumber(int value) {
    switch (value) {
      case 0: return SESSION_EVENT_TYPE_UNSPECIFIED;
      case 1: return SESSION_EVENT_SERVER_STREAMER_SHUTTING_DOWN;
      case 2: return SESSION_EVENT_SERVER_STREAMER_READY;
      case 3: return SESSION_EVENT_SERVER_STREAMER_BINARY_STARTED;
      case 4: return SESSION_EVENT_SERVER_STREAMER_READ_POD_IMAGE_NAMES;
      case 5: return SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_GAME;
      case 6: return SESSION_EVENT_SERVER_STREAMER_CONNECTED_TO_CLIENT;
      case 7: return SESSION_EVENT_SERVER_STREAMER_DISCONNECTED_FROM_CLIENT;
      case 8: return SESSION_EVENT_SERVER_STREAMER_RECEIVED_CREATE_SESSION_REQUEST;
      case 9: return SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_CLOSED;
      case 10: return SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_CLOSED;
      case 11: return SESSION_EVENT_SERVER_STREAMER_GAME_MESSAGE_STREAM_ERROR;
      case 12: return SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_ERROR;
      case 13: return SESSION_EVENT_SERVER_STREAMER_GAME_AUDIO_STREAM_CLOSED;
      case 14: return SESSION_EVENT_SERVER_STREAMER_GAME_FRAME_STREAM_ERROR;
      case 15: return SESSION_EVENT_SERVER_GAME_DISCONNECTING_AFTER_PAUSED_TOO_LONG;
      case 16: return SESSION_EVENT_SERVER_STREAMER_RECEIVED_EXPERIMENT_CONFIGURATION;
      case 17: return SESSION_EVENT_SERVER_GAME_CONNECTED_TO_LOGGING_SERVICE;
      case 18: return SESSION_EVENT_SERVER_STREAMER_DETERMINED_SESSION_OPTIONS;
      case 19: return SESSION_EVENT_SERVER_STREAMER_KILLED_IN_MIDDLE_OF_SESSION;
      case 20: return SESSION_EVENT_SERVER_GAME_UPDATED_FRAME_PIPELINE;
      case 21: return SESSION_EVENT_SERVER_ERROR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SessionEventType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SessionEventType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SessionEventType>() {
          public SessionEventType findValueByNumber(int number) {
            return SessionEventType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.stream.logging.v1.LoggingProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final SessionEventType[] VALUES = values();

  public static SessionEventType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SessionEventType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.stream.logging.v1.SessionEventType)
}

