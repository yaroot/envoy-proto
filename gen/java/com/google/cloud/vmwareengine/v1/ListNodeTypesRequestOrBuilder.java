// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/vmwareengine/v1/vmwareengine.proto

package com.google.cloud.vmwareengine.v1;

public interface ListNodeTypesRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.vmwareengine.v1.ListNodeTypesRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The resource name of the location to be queried for node types.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-west1-a`
   * </pre>
   *
   * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The parent.
   */
  java.lang.String getParent();
  /**
   * <pre>
   * Required. The resource name of the location to be queried for node types.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-west1-a`
   * </pre>
   *
   * <code>string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = { ... }</code>
   * @return The bytes for parent.
   */
  com.google.protobuf.ByteString
      getParentBytes();

  /**
   * <pre>
   * The maximum number of node types to return in one page.
   * The service may return fewer than this value.
   * The maximum value is coerced to 1000.
   * The default value of this field is 500.
   * </pre>
   *
   * <code>int32 page_size = 2;</code>
   * @return The pageSize.
   */
  int getPageSize();

  /**
   * <pre>
   * A page token, received from a previous `ListNodeTypes` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to
   * `ListNodeTypes` must match the call that provided the page token.
   * </pre>
   *
   * <code>string page_token = 3;</code>
   * @return The pageToken.
   */
  java.lang.String getPageToken();
  /**
   * <pre>
   * A page token, received from a previous `ListNodeTypes` call.
   * Provide this to retrieve the subsequent page.
   * When paginating, all other parameters provided to
   * `ListNodeTypes` must match the call that provided the page token.
   * </pre>
   *
   * <code>string page_token = 3;</code>
   * @return The bytes for pageToken.
   */
  com.google.protobuf.ByteString
      getPageTokenBytes();

  /**
   * <pre>
   * A filter expression that matches resources returned in the response.
   * The expression must specify the field name, a comparison
   * operator, and the value that you want to use for filtering. The value
   * must be a string, a number, or a boolean. The comparison operator
   * must be `=`, `!=`, `&gt;`, or `&lt;`.
   * For example, if you are filtering a list of node types, you can
   * exclude the ones named `standard-72` by specifying
   * `name != "standard-72"`.
   * To filter on multiple expressions, provide each separate expression within
   * parentheses. For example:
   * ```
   * (name = "standard-72")
   * (virtual_cpu_count &gt; 2)
   * ```
   * By default, each expression is an `AND` expression. However, you
   * can include `AND` and `OR` expressions explicitly.
   * For example:
   * ```
   * (name = "standard-96") AND
   * (virtual_cpu_count &gt; 2) OR
   * (name = "standard-72")
   * ```
   * </pre>
   *
   * <code>string filter = 4;</code>
   * @return The filter.
   */
  java.lang.String getFilter();
  /**
   * <pre>
   * A filter expression that matches resources returned in the response.
   * The expression must specify the field name, a comparison
   * operator, and the value that you want to use for filtering. The value
   * must be a string, a number, or a boolean. The comparison operator
   * must be `=`, `!=`, `&gt;`, or `&lt;`.
   * For example, if you are filtering a list of node types, you can
   * exclude the ones named `standard-72` by specifying
   * `name != "standard-72"`.
   * To filter on multiple expressions, provide each separate expression within
   * parentheses. For example:
   * ```
   * (name = "standard-72")
   * (virtual_cpu_count &gt; 2)
   * ```
   * By default, each expression is an `AND` expression. However, you
   * can include `AND` and `OR` expressions explicitly.
   * For example:
   * ```
   * (name = "standard-96") AND
   * (virtual_cpu_count &gt; 2) OR
   * (name = "standard-72")
   * ```
   * </pre>
   *
   * <code>string filter = 4;</code>
   * @return The bytes for filter.
   */
  com.google.protobuf.ByteString
      getFilterBytes();
}
