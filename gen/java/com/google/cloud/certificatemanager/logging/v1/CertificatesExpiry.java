// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/certificatemanager/logging/v1/logs.proto

package com.google.cloud.certificatemanager.logging.v1;

/**
 * <pre>
 * Log message which notifies about expired or close to
 * expiry certificates.
 * </pre>
 *
 * Protobuf type {@code google.cloud.certificatemanager.logging.v1.CertificatesExpiry}
 */
public final class CertificatesExpiry extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.certificatemanager.logging.v1.CertificatesExpiry)
    CertificatesExpiryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CertificatesExpiry.newBuilder() to construct.
  private CertificatesExpiry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CertificatesExpiry() {
    certificates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    state_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CertificatesExpiry();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.certificatemanager.logging.v1.LogsProto.internal_static_google_cloud_certificatemanager_logging_v1_CertificatesExpiry_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.certificatemanager.logging.v1.LogsProto.internal_static_google_cloud_certificatemanager_logging_v1_CertificatesExpiry_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.class, com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.Builder.class);
  }

  /**
   * <pre>
   * Expiration state of the certificate.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State}
   */
  public enum State
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified state, should never be reported.
     * </pre>
     *
     * <code>STATE_UNSPECIFIED = 0;</code>
     */
    STATE_UNSPECIFIED(0),
    /**
     * <pre>
     * Certificate will expire soon.
     * </pre>
     *
     * <code>CLOSE_TO_EXPIRY = 1;</code>
     */
    CLOSE_TO_EXPIRY(1),
    /**
     * <pre>
     * Certificate is expired.
     * </pre>
     *
     * <code>EXPIRED = 2;</code>
     */
    EXPIRED(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified state, should never be reported.
     * </pre>
     *
     * <code>STATE_UNSPECIFIED = 0;</code>
     */
    public static final int STATE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Certificate will expire soon.
     * </pre>
     *
     * <code>CLOSE_TO_EXPIRY = 1;</code>
     */
    public static final int CLOSE_TO_EXPIRY_VALUE = 1;
    /**
     * <pre>
     * Certificate is expired.
     * </pre>
     *
     * <code>EXPIRED = 2;</code>
     */
    public static final int EXPIRED_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static State valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static State forNumber(int value) {
      switch (value) {
        case 0: return STATE_UNSPECIFIED;
        case 1: return CLOSE_TO_EXPIRY;
        case 2: return EXPIRED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<State>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        State> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<State>() {
            public State findValueByNumber(int number) {
              return State.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.getDescriptor().getEnumTypes().get(0);
    }

    private static final State[] VALUES = values();

    public static State valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private State(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State)
  }

  public static final int COUNT_FIELD_NUMBER = 1;
  private long count_ = 0L;
  /**
   * <pre>
   * Number of reported certificates.
   * </pre>
   *
   * <code>int64 count = 1;</code>
   * @return The count.
   */
  @java.lang.Override
  public long getCount() {
    return count_;
  }

  public static final int CERTIFICATES_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList certificates_;
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @return A list containing the certificates.
   */
  public com.google.protobuf.ProtocolStringList
      getCertificatesList() {
    return certificates_;
  }
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @return The count of certificates.
   */
  public int getCertificatesCount() {
    return certificates_.size();
  }
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @param index The index of the element to return.
   * @return The certificates at the given index.
   */
  public java.lang.String getCertificates(int index) {
    return certificates_.get(index);
  }
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the certificates at the given index.
   */
  public com.google.protobuf.ByteString
      getCertificatesBytes(int index) {
    return certificates_.getByteString(index);
  }

  public static final int STATE_FIELD_NUMBER = 3;
  private int state_ = 0;
  /**
   * <pre>
   * State of reported certificates.
   * </pre>
   *
   * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
   * @return The enum numeric value on the wire for state.
   */
  @java.lang.Override public int getStateValue() {
    return state_;
  }
  /**
   * <pre>
   * State of reported certificates.
   * </pre>
   *
   * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
   * @return The state.
   */
  @java.lang.Override public com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State getState() {
    com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State result = com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State.forNumber(state_);
    return result == null ? com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State.UNRECOGNIZED : result;
  }

  public static final int EXPIRE_TIME_FIELD_NUMBER = 4;
  private com.google.protobuf.Timestamp expireTime_;
  /**
   * <pre>
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 4;</code>
   * @return Whether the expireTime field is set.
   */
  @java.lang.Override
  public boolean hasExpireTime() {
    return expireTime_ != null;
  }
  /**
   * <pre>
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 4;</code>
   * @return The expireTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getExpireTime() {
    return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
  }
  /**
   * <pre>
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder() {
    return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (count_ != 0L) {
      output.writeInt64(1, count_);
    }
    for (int i = 0; i < certificates_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, certificates_.getRaw(i));
    }
    if (state_ != com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State.STATE_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, state_);
    }
    if (expireTime_ != null) {
      output.writeMessage(4, getExpireTime());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (count_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, count_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < certificates_.size(); i++) {
        dataSize += computeStringSizeNoTag(certificates_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCertificatesList().size();
    }
    if (state_ != com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State.STATE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, state_);
    }
    if (expireTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getExpireTime());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry)) {
      return super.equals(obj);
    }
    com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry other = (com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry) obj;

    if (getCount()
        != other.getCount()) return false;
    if (!getCertificatesList()
        .equals(other.getCertificatesList())) return false;
    if (state_ != other.state_) return false;
    if (hasExpireTime() != other.hasExpireTime()) return false;
    if (hasExpireTime()) {
      if (!getExpireTime()
          .equals(other.getExpireTime())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCount());
    if (getCertificatesCount() > 0) {
      hash = (37 * hash) + CERTIFICATES_FIELD_NUMBER;
      hash = (53 * hash) + getCertificatesList().hashCode();
    }
    hash = (37 * hash) + STATE_FIELD_NUMBER;
    hash = (53 * hash) + state_;
    if (hasExpireTime()) {
      hash = (37 * hash) + EXPIRE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getExpireTime().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Log message which notifies about expired or close to
   * expiry certificates.
   * </pre>
   *
   * Protobuf type {@code google.cloud.certificatemanager.logging.v1.CertificatesExpiry}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.certificatemanager.logging.v1.CertificatesExpiry)
      com.google.cloud.certificatemanager.logging.v1.CertificatesExpiryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.certificatemanager.logging.v1.LogsProto.internal_static_google_cloud_certificatemanager_logging_v1_CertificatesExpiry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.certificatemanager.logging.v1.LogsProto.internal_static_google_cloud_certificatemanager_logging_v1_CertificatesExpiry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.class, com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.Builder.class);
    }

    // Construct using com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      count_ = 0L;
      certificates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      state_ = 0;
      expireTime_ = null;
      if (expireTimeBuilder_ != null) {
        expireTimeBuilder_.dispose();
        expireTimeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.certificatemanager.logging.v1.LogsProto.internal_static_google_cloud_certificatemanager_logging_v1_CertificatesExpiry_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry getDefaultInstanceForType() {
      return com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry build() {
      com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry buildPartial() {
      com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry result = new com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry result) {
      if (((bitField0_ & 0x00000002) != 0)) {
        certificates_ = certificates_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.certificates_ = certificates_;
    }

    private void buildPartial0(com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.count_ = count_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.state_ = state_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.expireTime_ = expireTimeBuilder_ == null
            ? expireTime_
            : expireTimeBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry) {
        return mergeFrom((com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry other) {
      if (other == com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.getDefaultInstance()) return this;
      if (other.getCount() != 0L) {
        setCount(other.getCount());
      }
      if (!other.certificates_.isEmpty()) {
        if (certificates_.isEmpty()) {
          certificates_ = other.certificates_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureCertificatesIsMutable();
          certificates_.addAll(other.certificates_);
        }
        onChanged();
      }
      if (other.state_ != 0) {
        setStateValue(other.getStateValue());
      }
      if (other.hasExpireTime()) {
        mergeExpireTime(other.getExpireTime());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              count_ = input.readInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureCertificatesIsMutable();
              certificates_.add(s);
              break;
            } // case 18
            case 24: {
              state_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              input.readMessage(
                  getExpireTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long count_ ;
    /**
     * <pre>
     * Number of reported certificates.
     * </pre>
     *
     * <code>int64 count = 1;</code>
     * @return The count.
     */
    @java.lang.Override
    public long getCount() {
      return count_;
    }
    /**
     * <pre>
     * Number of reported certificates.
     * </pre>
     *
     * <code>int64 count = 1;</code>
     * @param value The count to set.
     * @return This builder for chaining.
     */
    public Builder setCount(long value) {
      
      count_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Number of reported certificates.
     * </pre>
     *
     * <code>int64 count = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearCount() {
      bitField0_ = (bitField0_ & ~0x00000001);
      count_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList certificates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCertificatesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        certificates_ = new com.google.protobuf.LazyStringArrayList(certificates_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @return A list containing the certificates.
     */
    public com.google.protobuf.ProtocolStringList
        getCertificatesList() {
      return certificates_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @return The count of certificates.
     */
    public int getCertificatesCount() {
      return certificates_.size();
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @param index The index of the element to return.
     * @return The certificates at the given index.
     */
    public java.lang.String getCertificates(int index) {
      return certificates_.get(index);
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the certificates at the given index.
     */
    public com.google.protobuf.ByteString
        getCertificatesBytes(int index) {
      return certificates_.getByteString(index);
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @param index The index to set the value at.
     * @param value The certificates to set.
     * @return This builder for chaining.
     */
    public Builder setCertificates(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureCertificatesIsMutable();
      certificates_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @param value The certificates to add.
     * @return This builder for chaining.
     */
    public Builder addCertificates(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureCertificatesIsMutable();
      certificates_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @param values The certificates to add.
     * @return This builder for chaining.
     */
    public Builder addAllCertificates(
        java.lang.Iterable<java.lang.String> values) {
      ensureCertificatesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, certificates_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCertificates() {
      certificates_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of reported certificates. If there are too many, the list is sampled.
     * </pre>
     *
     * <code>repeated string certificates = 2;</code>
     * @param value The bytes of the certificates to add.
     * @return This builder for chaining.
     */
    public Builder addCertificatesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureCertificatesIsMutable();
      certificates_.add(value);
      onChanged();
      return this;
    }

    private int state_ = 0;
    /**
     * <pre>
     * State of reported certificates.
     * </pre>
     *
     * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
     * @return The enum numeric value on the wire for state.
     */
    @java.lang.Override public int getStateValue() {
      return state_;
    }
    /**
     * <pre>
     * State of reported certificates.
     * </pre>
     *
     * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
     * @param value The enum numeric value on the wire for state to set.
     * @return This builder for chaining.
     */
    public Builder setStateValue(int value) {
      state_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * State of reported certificates.
     * </pre>
     *
     * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
     * @return The state.
     */
    @java.lang.Override
    public com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State getState() {
      com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State result = com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State.forNumber(state_);
      return result == null ? com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * State of reported certificates.
     * </pre>
     *
     * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
     * @param value The state to set.
     * @return This builder for chaining.
     */
    public Builder setState(com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      state_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * State of reported certificates.
     * </pre>
     *
     * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearState() {
      bitField0_ = (bitField0_ & ~0x00000004);
      state_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp expireTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> expireTimeBuilder_;
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     * @return Whether the expireTime field is set.
     */
    public boolean hasExpireTime() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     * @return The expireTime.
     */
    public com.google.protobuf.Timestamp getExpireTime() {
      if (expireTimeBuilder_ == null) {
        return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
      } else {
        return expireTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    public Builder setExpireTime(com.google.protobuf.Timestamp value) {
      if (expireTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expireTime_ = value;
      } else {
        expireTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    public Builder setExpireTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (expireTimeBuilder_ == null) {
        expireTime_ = builderForValue.build();
      } else {
        expireTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    public Builder mergeExpireTime(com.google.protobuf.Timestamp value) {
      if (expireTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          expireTime_ != null &&
          expireTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getExpireTimeBuilder().mergeFrom(value);
        } else {
          expireTime_ = value;
        }
      } else {
        expireTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    public Builder clearExpireTime() {
      bitField0_ = (bitField0_ & ~0x00000008);
      expireTime_ = null;
      if (expireTimeBuilder_ != null) {
        expireTimeBuilder_.dispose();
        expireTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    public com.google.protobuf.Timestamp.Builder getExpireTimeBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getExpireTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder() {
      if (expireTimeBuilder_ != null) {
        return expireTimeBuilder_.getMessageOrBuilder();
      } else {
        return expireTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
      }
    }
    /**
     * <pre>
     * Approximated expire time of reported certificates.
     * Multiple certificates with close expire time are batched together in a
     * single log, so the timestamp is not precise.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getExpireTimeFieldBuilder() {
      if (expireTimeBuilder_ == null) {
        expireTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getExpireTime(),
                getParentForChildren(),
                isClean());
        expireTime_ = null;
      }
      return expireTimeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.certificatemanager.logging.v1.CertificatesExpiry)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.certificatemanager.logging.v1.CertificatesExpiry)
  private static final com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry();
  }

  public static com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CertificatesExpiry>
      PARSER = new com.google.protobuf.AbstractParser<CertificatesExpiry>() {
    @java.lang.Override
    public CertificatesExpiry parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CertificatesExpiry> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CertificatesExpiry> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

