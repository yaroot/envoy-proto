// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/certificatemanager/logging/v1/logs.proto

package com.google.cloud.certificatemanager.logging.v1;

public interface CertificatesExpiryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.certificatemanager.logging.v1.CertificatesExpiry)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Number of reported certificates.
   * </pre>
   *
   * <code>int64 count = 1;</code>
   * @return The count.
   */
  long getCount();

  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @return A list containing the certificates.
   */
  java.util.List<java.lang.String>
      getCertificatesList();
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @return The count of certificates.
   */
  int getCertificatesCount();
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @param index The index of the element to return.
   * @return The certificates at the given index.
   */
  java.lang.String getCertificates(int index);
  /**
   * <pre>
   * Names of reported certificates. If there are too many, the list is sampled.
   * </pre>
   *
   * <code>repeated string certificates = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the certificates at the given index.
   */
  com.google.protobuf.ByteString
      getCertificatesBytes(int index);

  /**
   * <pre>
   * State of reported certificates.
   * </pre>
   *
   * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();
  /**
   * <pre>
   * State of reported certificates.
   * </pre>
   *
   * <code>.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State state = 3;</code>
   * @return The state.
   */
  com.google.cloud.certificatemanager.logging.v1.CertificatesExpiry.State getState();

  /**
   * <pre>
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 4;</code>
   * @return Whether the expireTime field is set.
   */
  boolean hasExpireTime();
  /**
   * <pre>
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 4;</code>
   * @return The expireTime.
   */
  com.google.protobuf.Timestamp getExpireTime();
  /**
   * <pre>
   * Approximated expire time of reported certificates.
   * Multiple certificates with close expire time are batched together in a
   * single log, so the timestamp is not precise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 4;</code>
   */
  com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder();
}
