// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/paymentgateway/issuerswitch/v1/resolutions.proto

package com.google.cloud.paymentgateway.issuerswitch.v1;

/**
 * <pre>
 * The adjusment flag and reason code for resolving the dispute.
 * </pre>
 *
 * Protobuf type {@code google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment}
 */
public final class ResolveDisputeAdjustment extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment)
    ResolveDisputeAdjustmentOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ResolveDisputeAdjustment.newBuilder() to construct.
  private ResolveDisputeAdjustment(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ResolveDisputeAdjustment() {
    adjustmentFlag_ = 0;
    adjustmentCode_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ResolveDisputeAdjustment();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.cloud.paymentgateway.issuerswitch.v1.ResolutionsProto.internal_static_google_cloud_paymentgateway_issuerswitch_v1_ResolveDisputeAdjustment_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.paymentgateway.issuerswitch.v1.ResolutionsProto.internal_static_google_cloud_paymentgateway_issuerswitch_v1_ResolveDisputeAdjustment_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.class, com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.Builder.class);
  }

  /**
   * <pre>
   * The adjusment flag for resolving the dispute.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag}
   */
  public enum AdjustmentFlag
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified adjustment flag.
     * </pre>
     *
     * <code>ADJUSTMENT_FLAG_UNSPECIFIED = 0;</code>
     */
    ADJUSTMENT_FLAG_UNSPECIFIED(0),
    /**
     * <pre>
     * Re-presentment Raise. This flag maps to the `R` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE = 1;</code>
     */
    RE_PRESENTMENT_RAISE(1),
    /**
     * <pre>
     * Deferred Re-presentment Raise. This flag maps to the `FR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_RE_PRESENTMENT_RAISE = 2;</code>
     */
    DEFERRED_RE_PRESENTMENT_RAISE(2),
    /**
     * <pre>
     * Chargeback Acceptance. This flag maps to the `A` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CHARGEBACK_ACCEPTANCE = 3;</code>
     */
    CHARGEBACK_ACCEPTANCE(3),
    /**
     * <pre>
     * Deferred Chargeback Acceptance. This flag maps to the `FA` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_CHARGEBACK_ACCEPTANCE = 4;</code>
     */
    DEFERRED_CHARGEBACK_ACCEPTANCE(4),
    /**
     * <pre>
     * Pre-Arbitration Acceptance. This flag maps to the `AP` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_ACCEPTANCE = 5;</code>
     */
    PRE_ARBITRATION_ACCEPTANCE(5),
    /**
     * <pre>
     * Deferred Pre-Arbitration Acceptance. This flag maps to the `FAP`
     * adjustment flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_ACCEPTANCE = 6;</code>
     */
    DEFERRED_PRE_ARBITRATION_ACCEPTANCE(6),
    /**
     * <pre>
     * Pre-Arbitration Declined. This flag maps to the `PR` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED = 7;</code>
     */
    PRE_ARBITRATION_DECLINED(7),
    /**
     * <pre>
     * Deferred Pre-Arbitration Declined. This flag maps to the `FPR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_DECLINED = 8;</code>
     */
    DEFERRED_PRE_ARBITRATION_DECLINED(8),
    /**
     * <pre>
     * Arbitration Acceptance. This flag maps to the `ACA` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_ACCEPTANCE = 9;</code>
     */
    ARBITRATION_ACCEPTANCE(9),
    /**
     * <pre>
     * Arbitration Continuation. This flag maps to the `ACC` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_CONTINUATION = 10;</code>
     */
    ARBITRATION_CONTINUATION(10),
    /**
     * <pre>
     * Arbitration Withdrawn. This flag maps to the `ACW` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_WITHDRAWN = 11;</code>
     */
    ARBITRATION_WITHDRAWN(11),
    /**
     * <pre>
     * Arbitration Verdict. This flag maps to the `ACV` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_VERDICT = 12;</code>
     */
    ARBITRATION_VERDICT(12),
    /**
     * <pre>
     * Credit Adjustment. This flag maps to the `C` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT = 13;</code>
     */
    CREDIT_ADJUSTMENT(13),
    /**
     * <pre>
     * Fraud Chargeback Representment. This flag maps to the `FCR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT = 14;</code>
     */
    FRAUD_CHARGEBACK_REPRESENTMENT(14),
    /**
     * <pre>
     * Fraud Chargeback Accept. This flag maps to the `FCA` adjustment flag
     * as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_ACCEPT = 15;</code>
     */
    FRAUD_CHARGEBACK_ACCEPT(15),
    /**
     * <pre>
     * Wrong Credit Representment. This flag maps to the `WR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT = 16;</code>
     */
    WRONG_CREDIT_REPRESENTMENT(16),
    /**
     * <pre>
     * Wrong Credit Chargeback Acceptance. This flag maps to the `WA` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_CHARGEBACK_ACCEPTANCE = 17;</code>
     */
    WRONG_CREDIT_CHARGEBACK_ACCEPTANCE(17),
    /**
     * <pre>
     * Manual Adjustment. This flag maps to the `MA` adjustment flag as defined
     * in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>MANUAL_ADJUSTMENT = 18;</code>
     */
    MANUAL_ADJUSTMENT(18),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified adjustment flag.
     * </pre>
     *
     * <code>ADJUSTMENT_FLAG_UNSPECIFIED = 0;</code>
     */
    public static final int ADJUSTMENT_FLAG_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Re-presentment Raise. This flag maps to the `R` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE = 1;</code>
     */
    public static final int RE_PRESENTMENT_RAISE_VALUE = 1;
    /**
     * <pre>
     * Deferred Re-presentment Raise. This flag maps to the `FR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_RE_PRESENTMENT_RAISE = 2;</code>
     */
    public static final int DEFERRED_RE_PRESENTMENT_RAISE_VALUE = 2;
    /**
     * <pre>
     * Chargeback Acceptance. This flag maps to the `A` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CHARGEBACK_ACCEPTANCE = 3;</code>
     */
    public static final int CHARGEBACK_ACCEPTANCE_VALUE = 3;
    /**
     * <pre>
     * Deferred Chargeback Acceptance. This flag maps to the `FA` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_CHARGEBACK_ACCEPTANCE = 4;</code>
     */
    public static final int DEFERRED_CHARGEBACK_ACCEPTANCE_VALUE = 4;
    /**
     * <pre>
     * Pre-Arbitration Acceptance. This flag maps to the `AP` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_ACCEPTANCE = 5;</code>
     */
    public static final int PRE_ARBITRATION_ACCEPTANCE_VALUE = 5;
    /**
     * <pre>
     * Deferred Pre-Arbitration Acceptance. This flag maps to the `FAP`
     * adjustment flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_ACCEPTANCE = 6;</code>
     */
    public static final int DEFERRED_PRE_ARBITRATION_ACCEPTANCE_VALUE = 6;
    /**
     * <pre>
     * Pre-Arbitration Declined. This flag maps to the `PR` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED = 7;</code>
     */
    public static final int PRE_ARBITRATION_DECLINED_VALUE = 7;
    /**
     * <pre>
     * Deferred Pre-Arbitration Declined. This flag maps to the `FPR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_DECLINED = 8;</code>
     */
    public static final int DEFERRED_PRE_ARBITRATION_DECLINED_VALUE = 8;
    /**
     * <pre>
     * Arbitration Acceptance. This flag maps to the `ACA` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_ACCEPTANCE = 9;</code>
     */
    public static final int ARBITRATION_ACCEPTANCE_VALUE = 9;
    /**
     * <pre>
     * Arbitration Continuation. This flag maps to the `ACC` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_CONTINUATION = 10;</code>
     */
    public static final int ARBITRATION_CONTINUATION_VALUE = 10;
    /**
     * <pre>
     * Arbitration Withdrawn. This flag maps to the `ACW` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_WITHDRAWN = 11;</code>
     */
    public static final int ARBITRATION_WITHDRAWN_VALUE = 11;
    /**
     * <pre>
     * Arbitration Verdict. This flag maps to the `ACV` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_VERDICT = 12;</code>
     */
    public static final int ARBITRATION_VERDICT_VALUE = 12;
    /**
     * <pre>
     * Credit Adjustment. This flag maps to the `C` adjustment flag as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT = 13;</code>
     */
    public static final int CREDIT_ADJUSTMENT_VALUE = 13;
    /**
     * <pre>
     * Fraud Chargeback Representment. This flag maps to the `FCR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT = 14;</code>
     */
    public static final int FRAUD_CHARGEBACK_REPRESENTMENT_VALUE = 14;
    /**
     * <pre>
     * Fraud Chargeback Accept. This flag maps to the `FCA` adjustment flag
     * as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_ACCEPT = 15;</code>
     */
    public static final int FRAUD_CHARGEBACK_ACCEPT_VALUE = 15;
    /**
     * <pre>
     * Wrong Credit Representment. This flag maps to the `WR` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT = 16;</code>
     */
    public static final int WRONG_CREDIT_REPRESENTMENT_VALUE = 16;
    /**
     * <pre>
     * Wrong Credit Chargeback Acceptance. This flag maps to the `WA` adjustment
     * flag as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_CHARGEBACK_ACCEPTANCE = 17;</code>
     */
    public static final int WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_VALUE = 17;
    /**
     * <pre>
     * Manual Adjustment. This flag maps to the `MA` adjustment flag as defined
     * in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>MANUAL_ADJUSTMENT = 18;</code>
     */
    public static final int MANUAL_ADJUSTMENT_VALUE = 18;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AdjustmentFlag valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AdjustmentFlag forNumber(int value) {
      switch (value) {
        case 0: return ADJUSTMENT_FLAG_UNSPECIFIED;
        case 1: return RE_PRESENTMENT_RAISE;
        case 2: return DEFERRED_RE_PRESENTMENT_RAISE;
        case 3: return CHARGEBACK_ACCEPTANCE;
        case 4: return DEFERRED_CHARGEBACK_ACCEPTANCE;
        case 5: return PRE_ARBITRATION_ACCEPTANCE;
        case 6: return DEFERRED_PRE_ARBITRATION_ACCEPTANCE;
        case 7: return PRE_ARBITRATION_DECLINED;
        case 8: return DEFERRED_PRE_ARBITRATION_DECLINED;
        case 9: return ARBITRATION_ACCEPTANCE;
        case 10: return ARBITRATION_CONTINUATION;
        case 11: return ARBITRATION_WITHDRAWN;
        case 12: return ARBITRATION_VERDICT;
        case 13: return CREDIT_ADJUSTMENT;
        case 14: return FRAUD_CHARGEBACK_REPRESENTMENT;
        case 15: return FRAUD_CHARGEBACK_ACCEPT;
        case 16: return WRONG_CREDIT_REPRESENTMENT;
        case 17: return WRONG_CREDIT_CHARGEBACK_ACCEPTANCE;
        case 18: return MANUAL_ADJUSTMENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AdjustmentFlag>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AdjustmentFlag> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AdjustmentFlag>() {
            public AdjustmentFlag findValueByNumber(int number) {
              return AdjustmentFlag.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.getDescriptor().getEnumTypes().get(0);
    }

    private static final AdjustmentFlag[] VALUES = values();

    public static AdjustmentFlag valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AdjustmentFlag(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag)
  }

  /**
   * <pre>
   * The dispute resolution reason code.
   * </pre>
   *
   * Protobuf enum {@code google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode}
   */
  public enum ReasonCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified reason code.
     * </pre>
     *
     * <code>REASON_CODE_UNSPECIFIED = 0;</code>
     */
    REASON_CODE_UNSPECIFIED(0),
    /**
     * <pre>
     * Beneficiary bank unable to credit their customer account for Chargeback
     * Acceptance dispute or duplicate processing for Pre Arbitration Acceptance
     * dispute. This reason code maps to the `111` reason code as defined in
     * NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS = 1;</code>
     */
    CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS(1),
    /**
     * <pre>
     * Beneficiary account has been credited online. This reason code maps to
     * the `112` reason code for Pre-arbitration declined dispute as defined in
     * NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE = 3;</code>
     */
    PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE(3),
    /**
     * <pre>
     * Beneficiary account has been credited manually post reconciliation. This
     * reason code maps to the `113` reason code for Pre-arbitration declined
     * dispute as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY = 4;</code>
     */
    PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY(4),
    /**
     * <pre>
     * Customer account is not credited, TCC raised inadvertently. This reason
     * code maps to the `122` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED = 5;</code>
     */
    DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED(5),
    /**
     * <pre>
     * Customer account is credited successfully and TCC raised accordingly.
     * This reason code maps to the `123` reason code as defined in NPCI's
     * `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED = 6;</code>
     */
    DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED(6),
    /**
     * <pre>
     * Customer account is not credited, TCC and Re-Presentment raised
     * inadvertently. This reason code maps to the `125` reason code as defined
     * in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED = 7;</code>
     */
    DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED(7),
    /**
     * <pre>
     * Customer account is credited successfully and TCC and Re-Presentment
     * raised accordingly. This reason code maps to the `126` reason code as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED = 8;</code>
     */
    DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED(8),
    /**
     * <pre>
     * Amount has been recovered successfully from the fraudulent customer
     * account. This reason code maps to the `129` reason code as defined
     * in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT = 9;</code>
     */
    FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT(9),
    /**
     * <pre>
     * Lien marked however, customer account is not having sufficient balance to
     * debit. This reason code maps to the `130` reason code for
     * Fraud chargeback representment dispute as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 10;</code>
     */
    FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE(10),
    /**
     * <pre>
     * FIR Copy not provided for the disputed transaction. This reason code maps
     * to the `131` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED = 11;</code>
     */
    FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED(11),
    /**
     * <pre>
     * Other reason for Fraud chargeback representment dispute. This reason code
     * maps to the `132` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS = 12;</code>
     */
    FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS(12),
    /**
     * <pre>
     * Beneficiary account credited online. This reason code maps to the `208`
     * reason code for Re-presentment raise dispute as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE = 13;</code>
     */
    RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE(13),
    /**
     * <pre>
     * Beneficiary account credited manually post reconciliation. This reason
     * code maps to the `209` reason code for Re-presentment raise dispute as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY = 14;</code>
     */
    RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY(14),
    /**
     * <pre>
     * Credit not processed for cancelled or returned goods and services. This
     * reason code maps to the `1061` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED = 15;</code>
     */
    CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED(15),
    /**
     * <pre>
     * Goods and Services not as described / defective. This reason code maps to
     * the `1062` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE = 16;</code>
     */
    CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE(16),
    /**
     * <pre>
     * Paid by alternate means. This reason code maps to the `1063` reason code
     * as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS = 17;</code>
     */
    CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS(17),
    /**
     * <pre>
     * Goods or Services Not Provided / Not Received. This reason code maps to
     * the `1064` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED = 18;</code>
     */
    CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED(18),
    /**
     * <pre>
     * Account debited but transaction confirmation not received at merchant
     * location. This reason code maps to the `1065` reason code for Credit
     * adjustment as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION = 19;</code>
     */
    CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION(19),
    /**
     * <pre>
     * Duplicate /Multiple Transaction. This reason code maps to the `1084`
     * reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION = 20;</code>
     */
    CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION(20),
    /**
     * <pre>
     * Other reason for Credit adjustment. This reason code maps to the `1090`
     * reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_REASON_OTHERS = 21;</code>
     */
    CREDIT_ADJUSTMENT_REASON_OTHERS(21),
    /**
     * <pre>
     * Non Matching account number. This reason code maps to the `1091`
     * reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER = 22;</code>
     */
    CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER(22),
    /**
     * <pre>
     * Card holder was charged more than the transaction amount.
     * This reason code maps to the `1092` reason code as defined in NPCI's
     * `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE = 23;</code>
     */
    CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE(23),
    /**
     * <pre>
     * Credit not Processed. This reason code maps to the `1093` reason code as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED = 24;</code>
     */
    CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED(24),
    /**
     * <pre>
     * Beneficiary bank unable to credit their customer account. This reason
     * code maps to the `1094` reason code for Credit Adjustment dispute as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT = 25;</code>
     */
    CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT(25),
    /**
     * <pre>
     * Merchant was unable to provide the service. This reason code maps to the
     * `1095` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE = 26;</code>
     */
    CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE(26),
    /**
     * <pre>
     * Services/Goods provided see the supporting document. This reason code
     * maps to the `1096` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED = 27;</code>
     */
    RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED(27),
    /**
     * <pre>
     * Services provided later see supporting documents. This reason code maps
     * to the `1098` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER = 28;</code>
     */
    PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER(28),
    /**
     * <pre>
     * Services not provided by the merchant. This reason code maps to the
     * `1099` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT = 29;</code>
     */
    PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT(29),
    /**
     * <pre>
     * Illegible Fulfilment. This reason code maps to the `1101` reason code for
     * arbitration acceptance dispute as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT = 30;</code>
     */
    ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT(30),
    /**
     * <pre>
     * Customer has still not received the service. This reason code maps to the
     * `1102` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE = 31;</code>
     */
    ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE(31),
    /**
     * <pre>
     * Customer has received the service later. This reason code maps to the
     * `1103` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER = 32;</code>
     */
    ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER(32),
    /**
     * <pre>
     * Panel will give the verdict. This reason code maps to the `1104` reason
     * code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_VERDICT_PANEL_VERDICT = 33;</code>
     */
    ARBITRATION_VERDICT_PANEL_VERDICT(33),
    /**
     * <pre>
     * Manual adjustment. This reason code maps to the `2001` reason code as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>MANUAL_ADJUSTMENT_REASON = 34;</code>
     */
    MANUAL_ADJUSTMENT_REASON(34),
    /**
     * <pre>
     * Attributing to the Customer. This reason code maps to the `AC` reason
     * code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ATTRIBUTING_CUSTOMER = 35;</code>
     */
    ATTRIBUTING_CUSTOMER(35),
    /**
     * <pre>
     * Attributing to the Technical issue at bank/aggregator/merchant. This
     * reason code maps to the `AT` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>ATTRIBUTING_TECHNICAL_ISSUE = 36;</code>
     */
    ATTRIBUTING_TECHNICAL_ISSUE(36),
    /**
     * <pre>
     * Amount has been recovered successfully from the unintended customer
     * account. This reason code maps to the `WC2` reason code as defined in
     * NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED = 37;</code>
     */
    WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED(37),
    /**
     * <pre>
     * Lien marked however customer account is not having sufficient balance to
     * debit the customer account. This reason code maps to the `WC3` reason
     * code for Wrong credit representment dispute as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 38;</code>
     */
    WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE(38),
    /**
     * <pre>
     * Customer is not accessible for obtaining debit confirmation. This reason
     * code maps to the `WC4` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE = 39;</code>
     */
    WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE(39),
    /**
     * <pre>
     * Other reason for Wrong credit representment. This reason code maps to the
     * `WC5` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS = 40;</code>
     */
    WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS(40),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified reason code.
     * </pre>
     *
     * <code>REASON_CODE_UNSPECIFIED = 0;</code>
     */
    public static final int REASON_CODE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Beneficiary bank unable to credit their customer account for Chargeback
     * Acceptance dispute or duplicate processing for Pre Arbitration Acceptance
     * dispute. This reason code maps to the `111` reason code as defined in
     * NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS = 1;</code>
     */
    public static final int CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS_VALUE = 1;
    /**
     * <pre>
     * Beneficiary account has been credited online. This reason code maps to
     * the `112` reason code for Pre-arbitration declined dispute as defined in
     * NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE = 3;</code>
     */
    public static final int PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE_VALUE = 3;
    /**
     * <pre>
     * Beneficiary account has been credited manually post reconciliation. This
     * reason code maps to the `113` reason code for Pre-arbitration declined
     * dispute as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY = 4;</code>
     */
    public static final int PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY_VALUE = 4;
    /**
     * <pre>
     * Customer account is not credited, TCC raised inadvertently. This reason
     * code maps to the `122` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED = 5;</code>
     */
    public static final int DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED_VALUE = 5;
    /**
     * <pre>
     * Customer account is credited successfully and TCC raised accordingly.
     * This reason code maps to the `123` reason code as defined in NPCI's
     * `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED = 6;</code>
     */
    public static final int DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED_VALUE = 6;
    /**
     * <pre>
     * Customer account is not credited, TCC and Re-Presentment raised
     * inadvertently. This reason code maps to the `125` reason code as defined
     * in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED = 7;</code>
     */
    public static final int DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED_VALUE = 7;
    /**
     * <pre>
     * Customer account is credited successfully and TCC and Re-Presentment
     * raised accordingly. This reason code maps to the `126` reason code as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED = 8;</code>
     */
    public static final int DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED_VALUE = 8;
    /**
     * <pre>
     * Amount has been recovered successfully from the fraudulent customer
     * account. This reason code maps to the `129` reason code as defined
     * in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT = 9;</code>
     */
    public static final int FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT_VALUE = 9;
    /**
     * <pre>
     * Lien marked however, customer account is not having sufficient balance to
     * debit. This reason code maps to the `130` reason code for
     * Fraud chargeback representment dispute as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 10;</code>
     */
    public static final int FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE_VALUE = 10;
    /**
     * <pre>
     * FIR Copy not provided for the disputed transaction. This reason code maps
     * to the `131` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED = 11;</code>
     */
    public static final int FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED_VALUE = 11;
    /**
     * <pre>
     * Other reason for Fraud chargeback representment dispute. This reason code
     * maps to the `132` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS = 12;</code>
     */
    public static final int FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS_VALUE = 12;
    /**
     * <pre>
     * Beneficiary account credited online. This reason code maps to the `208`
     * reason code for Re-presentment raise dispute as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE = 13;</code>
     */
    public static final int RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE_VALUE = 13;
    /**
     * <pre>
     * Beneficiary account credited manually post reconciliation. This reason
     * code maps to the `209` reason code for Re-presentment raise dispute as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY = 14;</code>
     */
    public static final int RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY_VALUE = 14;
    /**
     * <pre>
     * Credit not processed for cancelled or returned goods and services. This
     * reason code maps to the `1061` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED = 15;</code>
     */
    public static final int CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED_VALUE = 15;
    /**
     * <pre>
     * Goods and Services not as described / defective. This reason code maps to
     * the `1062` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE = 16;</code>
     */
    public static final int CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE_VALUE = 16;
    /**
     * <pre>
     * Paid by alternate means. This reason code maps to the `1063` reason code
     * as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS = 17;</code>
     */
    public static final int CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS_VALUE = 17;
    /**
     * <pre>
     * Goods or Services Not Provided / Not Received. This reason code maps to
     * the `1064` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED = 18;</code>
     */
    public static final int CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED_VALUE = 18;
    /**
     * <pre>
     * Account debited but transaction confirmation not received at merchant
     * location. This reason code maps to the `1065` reason code for Credit
     * adjustment as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION = 19;</code>
     */
    public static final int CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION_VALUE = 19;
    /**
     * <pre>
     * Duplicate /Multiple Transaction. This reason code maps to the `1084`
     * reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION = 20;</code>
     */
    public static final int CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION_VALUE = 20;
    /**
     * <pre>
     * Other reason for Credit adjustment. This reason code maps to the `1090`
     * reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_REASON_OTHERS = 21;</code>
     */
    public static final int CREDIT_ADJUSTMENT_REASON_OTHERS_VALUE = 21;
    /**
     * <pre>
     * Non Matching account number. This reason code maps to the `1091`
     * reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER = 22;</code>
     */
    public static final int CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER_VALUE = 22;
    /**
     * <pre>
     * Card holder was charged more than the transaction amount.
     * This reason code maps to the `1092` reason code as defined in NPCI's
     * `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE = 23;</code>
     */
    public static final int CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE_VALUE = 23;
    /**
     * <pre>
     * Credit not Processed. This reason code maps to the `1093` reason code as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED = 24;</code>
     */
    public static final int CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED_VALUE = 24;
    /**
     * <pre>
     * Beneficiary bank unable to credit their customer account. This reason
     * code maps to the `1094` reason code for Credit Adjustment dispute as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT = 25;</code>
     */
    public static final int CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT_VALUE = 25;
    /**
     * <pre>
     * Merchant was unable to provide the service. This reason code maps to the
     * `1095` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE = 26;</code>
     */
    public static final int CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE_VALUE = 26;
    /**
     * <pre>
     * Services/Goods provided see the supporting document. This reason code
     * maps to the `1096` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED = 27;</code>
     */
    public static final int RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED_VALUE = 27;
    /**
     * <pre>
     * Services provided later see supporting documents. This reason code maps
     * to the `1098` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER = 28;</code>
     */
    public static final int PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER_VALUE = 28;
    /**
     * <pre>
     * Services not provided by the merchant. This reason code maps to the
     * `1099` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT = 29;</code>
     */
    public static final int PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT_VALUE = 29;
    /**
     * <pre>
     * Illegible Fulfilment. This reason code maps to the `1101` reason code for
     * arbitration acceptance dispute as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT = 30;</code>
     */
    public static final int ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT_VALUE = 30;
    /**
     * <pre>
     * Customer has still not received the service. This reason code maps to the
     * `1102` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE = 31;</code>
     */
    public static final int ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE_VALUE = 31;
    /**
     * <pre>
     * Customer has received the service later. This reason code maps to the
     * `1103` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER = 32;</code>
     */
    public static final int ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER_VALUE = 32;
    /**
     * <pre>
     * Panel will give the verdict. This reason code maps to the `1104` reason
     * code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ARBITRATION_VERDICT_PANEL_VERDICT = 33;</code>
     */
    public static final int ARBITRATION_VERDICT_PANEL_VERDICT_VALUE = 33;
    /**
     * <pre>
     * Manual adjustment. This reason code maps to the `2001` reason code as
     * defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>MANUAL_ADJUSTMENT_REASON = 34;</code>
     */
    public static final int MANUAL_ADJUSTMENT_REASON_VALUE = 34;
    /**
     * <pre>
     * Attributing to the Customer. This reason code maps to the `AC` reason
     * code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>ATTRIBUTING_CUSTOMER = 35;</code>
     */
    public static final int ATTRIBUTING_CUSTOMER_VALUE = 35;
    /**
     * <pre>
     * Attributing to the Technical issue at bank/aggregator/merchant. This
     * reason code maps to the `AT` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>ATTRIBUTING_TECHNICAL_ISSUE = 36;</code>
     */
    public static final int ATTRIBUTING_TECHNICAL_ISSUE_VALUE = 36;
    /**
     * <pre>
     * Amount has been recovered successfully from the unintended customer
     * account. This reason code maps to the `WC2` reason code as defined in
     * NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED = 37;</code>
     */
    public static final int WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED_VALUE = 37;
    /**
     * <pre>
     * Lien marked however customer account is not having sufficient balance to
     * debit the customer account. This reason code maps to the `WC3` reason
     * code for Wrong credit representment dispute as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 38;</code>
     */
    public static final int WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE_VALUE = 38;
    /**
     * <pre>
     * Customer is not accessible for obtaining debit confirmation. This reason
     * code maps to the `WC4` reason code as defined in NPCI's `UDIR`
     * specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE = 39;</code>
     */
    public static final int WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE_VALUE = 39;
    /**
     * <pre>
     * Other reason for Wrong credit representment. This reason code maps to the
     * `WC5` reason code as defined in NPCI's `UDIR` specification.
     * </pre>
     *
     * <code>WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS = 40;</code>
     */
    public static final int WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS_VALUE = 40;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ReasonCode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ReasonCode forNumber(int value) {
      switch (value) {
        case 0: return REASON_CODE_UNSPECIFIED;
        case 1: return CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS;
        case 3: return PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE;
        case 4: return PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY;
        case 5: return DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED;
        case 6: return DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED;
        case 7: return DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED;
        case 8: return DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED;
        case 9: return FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT;
        case 10: return FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE;
        case 11: return FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED;
        case 12: return FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS;
        case 13: return RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE;
        case 14: return RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY;
        case 15: return CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED;
        case 16: return CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE;
        case 17: return CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS;
        case 18: return CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED;
        case 19: return CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION;
        case 20: return CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION;
        case 21: return CREDIT_ADJUSTMENT_REASON_OTHERS;
        case 22: return CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER;
        case 23: return CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE;
        case 24: return CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED;
        case 25: return CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT;
        case 26: return CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE;
        case 27: return RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED;
        case 28: return PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER;
        case 29: return PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT;
        case 30: return ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT;
        case 31: return ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE;
        case 32: return ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER;
        case 33: return ARBITRATION_VERDICT_PANEL_VERDICT;
        case 34: return MANUAL_ADJUSTMENT_REASON;
        case 35: return ATTRIBUTING_CUSTOMER;
        case 36: return ATTRIBUTING_TECHNICAL_ISSUE;
        case 37: return WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED;
        case 38: return WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE;
        case 39: return WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE;
        case 40: return WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ReasonCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ReasonCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ReasonCode>() {
            public ReasonCode findValueByNumber(int number) {
              return ReasonCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.getDescriptor().getEnumTypes().get(1);
    }

    private static final ReasonCode[] VALUES = values();

    public static ReasonCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ReasonCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode)
  }

  public static final int ADJUSTMENT_FLAG_FIELD_NUMBER = 1;
  private int adjustmentFlag_ = 0;
  /**
   * <pre>
   * Required. The adjustment flag in URCS for the complaint transaction. This maps to
   * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
   * </pre>
   *
   * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for adjustmentFlag.
   */
  @java.lang.Override public int getAdjustmentFlagValue() {
    return adjustmentFlag_;
  }
  /**
   * <pre>
   * Required. The adjustment flag in URCS for the complaint transaction. This maps to
   * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
   * </pre>
   *
   * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The adjustmentFlag.
   */
  @java.lang.Override public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag getAdjustmentFlag() {
    com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag result = com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.forNumber(adjustmentFlag_);
    return result == null ? com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.UNRECOGNIZED : result;
  }

  public static final int ADJUSTMENT_CODE_FIELD_NUMBER = 2;
  private int adjustmentCode_ = 0;
  /**
   * <pre>
   * Required. The adjustment code in URCS for the complaint transaction. This maps to
   * `reqAdjCode` in dispute request.
   * </pre>
   *
   * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for adjustmentCode.
   */
  @java.lang.Override public int getAdjustmentCodeValue() {
    return adjustmentCode_;
  }
  /**
   * <pre>
   * Required. The adjustment code in URCS for the complaint transaction. This maps to
   * `reqAdjCode` in dispute request.
   * </pre>
   *
   * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The adjustmentCode.
   */
  @java.lang.Override public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode getAdjustmentCode() {
    com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode result = com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.forNumber(adjustmentCode_);
    return result == null ? com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (adjustmentFlag_ != com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, adjustmentFlag_);
    }
    if (adjustmentCode_ != com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.REASON_CODE_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, adjustmentCode_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (adjustmentFlag_ != com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.ADJUSTMENT_FLAG_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, adjustmentFlag_);
    }
    if (adjustmentCode_ != com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.REASON_CODE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, adjustmentCode_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment)) {
      return super.equals(obj);
    }
    com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment other = (com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment) obj;

    if (adjustmentFlag_ != other.adjustmentFlag_) return false;
    if (adjustmentCode_ != other.adjustmentCode_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ADJUSTMENT_FLAG_FIELD_NUMBER;
    hash = (53 * hash) + adjustmentFlag_;
    hash = (37 * hash) + ADJUSTMENT_CODE_FIELD_NUMBER;
    hash = (53 * hash) + adjustmentCode_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The adjusment flag and reason code for resolving the dispute.
   * </pre>
   *
   * Protobuf type {@code google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment)
      com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustmentOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.paymentgateway.issuerswitch.v1.ResolutionsProto.internal_static_google_cloud_paymentgateway_issuerswitch_v1_ResolveDisputeAdjustment_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.paymentgateway.issuerswitch.v1.ResolutionsProto.internal_static_google_cloud_paymentgateway_issuerswitch_v1_ResolveDisputeAdjustment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.class, com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.Builder.class);
    }

    // Construct using com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      adjustmentFlag_ = 0;
      adjustmentCode_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.cloud.paymentgateway.issuerswitch.v1.ResolutionsProto.internal_static_google_cloud_paymentgateway_issuerswitch_v1_ResolveDisputeAdjustment_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment getDefaultInstanceForType() {
      return com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment build() {
      com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment buildPartial() {
      com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment result = new com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.adjustmentFlag_ = adjustmentFlag_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.adjustmentCode_ = adjustmentCode_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment) {
        return mergeFrom((com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment other) {
      if (other == com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.getDefaultInstance()) return this;
      if (other.adjustmentFlag_ != 0) {
        setAdjustmentFlagValue(other.getAdjustmentFlagValue());
      }
      if (other.adjustmentCode_ != 0) {
        setAdjustmentCodeValue(other.getAdjustmentCodeValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              adjustmentFlag_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              adjustmentCode_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int adjustmentFlag_ = 0;
    /**
     * <pre>
     * Required. The adjustment flag in URCS for the complaint transaction. This maps to
     * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The enum numeric value on the wire for adjustmentFlag.
     */
    @java.lang.Override public int getAdjustmentFlagValue() {
      return adjustmentFlag_;
    }
    /**
     * <pre>
     * Required. The adjustment flag in URCS for the complaint transaction. This maps to
     * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The enum numeric value on the wire for adjustmentFlag to set.
     * @return This builder for chaining.
     */
    public Builder setAdjustmentFlagValue(int value) {
      adjustmentFlag_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The adjustment flag in URCS for the complaint transaction. This maps to
     * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The adjustmentFlag.
     */
    @java.lang.Override
    public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag getAdjustmentFlag() {
      com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag result = com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.forNumber(adjustmentFlag_);
      return result == null ? com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Required. The adjustment flag in URCS for the complaint transaction. This maps to
     * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The adjustmentFlag to set.
     * @return This builder for chaining.
     */
    public Builder setAdjustmentFlag(com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      adjustmentFlag_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The adjustment flag in URCS for the complaint transaction. This maps to
     * `reqAdjFlag` in dispute request and `respAdjFlag` in dispute response.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearAdjustmentFlag() {
      bitField0_ = (bitField0_ & ~0x00000001);
      adjustmentFlag_ = 0;
      onChanged();
      return this;
    }

    private int adjustmentCode_ = 0;
    /**
     * <pre>
     * Required. The adjustment code in URCS for the complaint transaction. This maps to
     * `reqAdjCode` in dispute request.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The enum numeric value on the wire for adjustmentCode.
     */
    @java.lang.Override public int getAdjustmentCodeValue() {
      return adjustmentCode_;
    }
    /**
     * <pre>
     * Required. The adjustment code in URCS for the complaint transaction. This maps to
     * `reqAdjCode` in dispute request.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The enum numeric value on the wire for adjustmentCode to set.
     * @return This builder for chaining.
     */
    public Builder setAdjustmentCodeValue(int value) {
      adjustmentCode_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The adjustment code in URCS for the complaint transaction. This maps to
     * `reqAdjCode` in dispute request.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The adjustmentCode.
     */
    @java.lang.Override
    public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode getAdjustmentCode() {
      com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode result = com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.forNumber(adjustmentCode_);
      return result == null ? com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Required. The adjustment code in URCS for the complaint transaction. This maps to
     * `reqAdjCode` in dispute request.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The adjustmentCode to set.
     * @return This builder for chaining.
     */
    public Builder setAdjustmentCode(com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      adjustmentCode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The adjustment code in URCS for the complaint transaction. This maps to
     * `reqAdjCode` in dispute request.
     * </pre>
     *
     * <code>.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearAdjustmentCode() {
      bitField0_ = (bitField0_ & ~0x00000002);
      adjustmentCode_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment)
  private static final com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment();
  }

  public static com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ResolveDisputeAdjustment>
      PARSER = new com.google.protobuf.AbstractParser<ResolveDisputeAdjustment>() {
    @java.lang.Override
    public ResolveDisputeAdjustment parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ResolveDisputeAdjustment> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ResolveDisputeAdjustment> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

