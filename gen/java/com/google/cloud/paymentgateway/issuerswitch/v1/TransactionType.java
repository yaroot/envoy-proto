// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/paymentgateway/issuerswitch/v1/common_fields.proto

package com.google.cloud.paymentgateway.issuerswitch.v1;

/**
 * <pre>
 * The type of a transaction. Every transaction processed by the issuer switch
 * will be one of these transaction types. Transaction types are associated with
 * a particular API type. This associated is documented with each value.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.paymentgateway.issuerswitch.v1.TransactionType}
 */
public enum TransactionType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified transaction type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UNSPECIFIED = 0;</code>
   */
  TRANSACTION_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Autoupdate transaction type. This is associated with the `CHECK_STATUS`
   * API type. Maps to UPI's `AUTOUPDATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_AUTOUPDATE = 1;</code>
   */
  TRANSACTION_TYPE_AUTOUPDATE(1),
  /**
   * <pre>
   * Balance check transaction type. This is associated with the
   * `BALANCE_ENQUIRY` API type. Maps to UPI's `BalChk` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_BALANCE_CHECK = 2;</code>
   */
  TRANSACTION_TYPE_BALANCE_CHECK(2),
  /**
   * <pre>
   * Balance enquiry transaction type. This is associated with the
   * `BALANCE_ENQUIRY` API type. Maps to UPI's `BalEnq` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_BALANCE_ENQUIRY = 3;</code>
   */
  TRANSACTION_TYPE_BALANCE_ENQUIRY(3),
  /**
   * <pre>
   * Check status transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `CHECKSTATUS` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CHECK_STATUS = 4;</code>
   */
  TRANSACTION_TYPE_CHECK_STATUS(4),
  /**
   * <pre>
   * Check transaction type. This is associated with the `CHECK_STATUS` API
   * type. Maps to UPI's `ChkTxn` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CHECK_TRANSACTION = 5;</code>
   */
  TRANSACTION_TYPE_CHECK_TRANSACTION(5),
  /**
   * <pre>
   * Complaint transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `COMPLAINT` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_COMPLAINT = 6;</code>
   */
  TRANSACTION_TYPE_COMPLAINT(6),
  /**
   * <pre>
   * Create transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `CREATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CREATE = 7;</code>
   */
  TRANSACTION_TYPE_CREATE(7),
  /**
   * <pre>
   * Credit transaction type. This is associated with the `SETTLE_PAYMENT` API
   * type. Maps to UPI's `CREDIT` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CREDIT = 8;</code>
   */
  TRANSACTION_TYPE_CREDIT(8),
  /**
   * <pre>
   * Debit transaction type. This is associated with the `SETTLE_PAYMENT` API
   * type. Maps to UPI's `DEBIT` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_DEBIT = 9;</code>
   */
  TRANSACTION_TYPE_DEBIT(9),
  /**
   * <pre>
   * Dispute transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `DISPUTE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_DISPUTE = 10;</code>
   */
  TRANSACTION_TYPE_DISPUTE(10),
  /**
   * <pre>
   * Heart beat transaction type. This is associated with `HEART_BEAT` API type.
   * Maps to UPI's `Hbt` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_HEART_BEAT = 11;</code>
   */
  TRANSACTION_TYPE_HEART_BEAT(11),
  /**
   * <pre>
   * List accounts transaction type. This is associated with `LIST_ACCOUNTS` API
   * type. Maps to UPI's `ListAccount` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_LIST_ACCOUNTS = 12;</code>
   */
  TRANSACTION_TYPE_LIST_ACCOUNTS(12),
  /**
   * <pre>
   * Mandate notification transaction type. This is associated with the
   * `VALIDATE_CUSTOMER` API type. Maps to UPI's `MandateNotification` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_MANDATE_NOTIFICATION = 13;</code>
   */
  TRANSACTION_TYPE_MANDATE_NOTIFICATION(13),
  /**
   * <pre>
   * OTP transaction type. This is associated with the `INITIATE_REGISTRATION`
   * API type. Maps to UPI's `Otp` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_OTP = 14;</code>
   */
  TRANSACTION_TYPE_OTP(14),
  /**
   * <pre>
   * Pause transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `PAUSE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_PAUSE = 15;</code>
   */
  TRANSACTION_TYPE_PAUSE(15),
  /**
   * <pre>
   * Redeem transaction type. This is associated with the `VOUCHER_CONFIRMATION`
   * API type. Maps to UPI's `REDEEM` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REDEEM = 16;</code>
   */
  TRANSACTION_TYPE_REDEEM(16),
  /**
   * <pre>
   * Refund transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `REFUND` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REFUND = 17;</code>
   */
  TRANSACTION_TYPE_REFUND(17),
  /**
   * <pre>
   * Register mobile transaction type. This is associated with the
   * `VALIDATE_REGISTRATION` API type. Maps to UPI's `RegMob` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REGISTER_MOBILE = 18;</code>
   */
  TRANSACTION_TYPE_REGISTER_MOBILE(18),
  /**
   * <pre>
   * Reversal transaction type. This is associated with the `SETTLE_PAYMENT` and
   * `COMPLAINT` API types. Maps to UPI's `REVERSAL` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REVERSAL = 19;</code>
   */
  TRANSACTION_TYPE_REVERSAL(19),
  /**
   * <pre>
   * Revoke transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `REVOKE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REVOKE = 20;</code>
   */
  TRANSACTION_TYPE_REVOKE(20),
  /**
   * <pre>
   * Status update transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `STATUSUPDATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_STATUS_UPDATE = 21;</code>
   */
  TRANSACTION_TYPE_STATUS_UPDATE(21),
  /**
   * <pre>
   * Update transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `UNPAUSE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UNPAUSE = 22;</code>
   */
  TRANSACTION_TYPE_UNPAUSE(22),
  /**
   * <pre>
   * Update transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `UPDATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UPDATE = 23;</code>
   */
  TRANSACTION_TYPE_UPDATE(23),
  /**
   * <pre>
   * Update credentials transaction type. This is associated with
   * `UPDATE_CREDENTIALS` API type. Maps to UPI's `SetCre` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UPDATE_CREDENTIALS = 24;</code>
   */
  TRANSACTION_TYPE_UPDATE_CREDENTIALS(24),
  /**
   * <pre>
   * Validate customer transaction type. This is associated with
   * `VALIDATE_CUSTOMER` API type. Maps to UPI's `ValCust` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_VALIDATE_CUSTOMER = 25;</code>
   */
  TRANSACTION_TYPE_VALIDATE_CUSTOMER(25),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unspecified transaction type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int TRANSACTION_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Autoupdate transaction type. This is associated with the `CHECK_STATUS`
   * API type. Maps to UPI's `AUTOUPDATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_AUTOUPDATE = 1;</code>
   */
  public static final int TRANSACTION_TYPE_AUTOUPDATE_VALUE = 1;
  /**
   * <pre>
   * Balance check transaction type. This is associated with the
   * `BALANCE_ENQUIRY` API type. Maps to UPI's `BalChk` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_BALANCE_CHECK = 2;</code>
   */
  public static final int TRANSACTION_TYPE_BALANCE_CHECK_VALUE = 2;
  /**
   * <pre>
   * Balance enquiry transaction type. This is associated with the
   * `BALANCE_ENQUIRY` API type. Maps to UPI's `BalEnq` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_BALANCE_ENQUIRY = 3;</code>
   */
  public static final int TRANSACTION_TYPE_BALANCE_ENQUIRY_VALUE = 3;
  /**
   * <pre>
   * Check status transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `CHECKSTATUS` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CHECK_STATUS = 4;</code>
   */
  public static final int TRANSACTION_TYPE_CHECK_STATUS_VALUE = 4;
  /**
   * <pre>
   * Check transaction type. This is associated with the `CHECK_STATUS` API
   * type. Maps to UPI's `ChkTxn` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CHECK_TRANSACTION = 5;</code>
   */
  public static final int TRANSACTION_TYPE_CHECK_TRANSACTION_VALUE = 5;
  /**
   * <pre>
   * Complaint transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `COMPLAINT` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_COMPLAINT = 6;</code>
   */
  public static final int TRANSACTION_TYPE_COMPLAINT_VALUE = 6;
  /**
   * <pre>
   * Create transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `CREATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CREATE = 7;</code>
   */
  public static final int TRANSACTION_TYPE_CREATE_VALUE = 7;
  /**
   * <pre>
   * Credit transaction type. This is associated with the `SETTLE_PAYMENT` API
   * type. Maps to UPI's `CREDIT` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_CREDIT = 8;</code>
   */
  public static final int TRANSACTION_TYPE_CREDIT_VALUE = 8;
  /**
   * <pre>
   * Debit transaction type. This is associated with the `SETTLE_PAYMENT` API
   * type. Maps to UPI's `DEBIT` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_DEBIT = 9;</code>
   */
  public static final int TRANSACTION_TYPE_DEBIT_VALUE = 9;
  /**
   * <pre>
   * Dispute transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `DISPUTE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_DISPUTE = 10;</code>
   */
  public static final int TRANSACTION_TYPE_DISPUTE_VALUE = 10;
  /**
   * <pre>
   * Heart beat transaction type. This is associated with `HEART_BEAT` API type.
   * Maps to UPI's `Hbt` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_HEART_BEAT = 11;</code>
   */
  public static final int TRANSACTION_TYPE_HEART_BEAT_VALUE = 11;
  /**
   * <pre>
   * List accounts transaction type. This is associated with `LIST_ACCOUNTS` API
   * type. Maps to UPI's `ListAccount` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_LIST_ACCOUNTS = 12;</code>
   */
  public static final int TRANSACTION_TYPE_LIST_ACCOUNTS_VALUE = 12;
  /**
   * <pre>
   * Mandate notification transaction type. This is associated with the
   * `VALIDATE_CUSTOMER` API type. Maps to UPI's `MandateNotification` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_MANDATE_NOTIFICATION = 13;</code>
   */
  public static final int TRANSACTION_TYPE_MANDATE_NOTIFICATION_VALUE = 13;
  /**
   * <pre>
   * OTP transaction type. This is associated with the `INITIATE_REGISTRATION`
   * API type. Maps to UPI's `Otp` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_OTP = 14;</code>
   */
  public static final int TRANSACTION_TYPE_OTP_VALUE = 14;
  /**
   * <pre>
   * Pause transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `PAUSE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_PAUSE = 15;</code>
   */
  public static final int TRANSACTION_TYPE_PAUSE_VALUE = 15;
  /**
   * <pre>
   * Redeem transaction type. This is associated with the `VOUCHER_CONFIRMATION`
   * API type. Maps to UPI's `REDEEM` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REDEEM = 16;</code>
   */
  public static final int TRANSACTION_TYPE_REDEEM_VALUE = 16;
  /**
   * <pre>
   * Refund transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `REFUND` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REFUND = 17;</code>
   */
  public static final int TRANSACTION_TYPE_REFUND_VALUE = 17;
  /**
   * <pre>
   * Register mobile transaction type. This is associated with the
   * `VALIDATE_REGISTRATION` API type. Maps to UPI's `RegMob` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REGISTER_MOBILE = 18;</code>
   */
  public static final int TRANSACTION_TYPE_REGISTER_MOBILE_VALUE = 18;
  /**
   * <pre>
   * Reversal transaction type. This is associated with the `SETTLE_PAYMENT` and
   * `COMPLAINT` API types. Maps to UPI's `REVERSAL` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REVERSAL = 19;</code>
   */
  public static final int TRANSACTION_TYPE_REVERSAL_VALUE = 19;
  /**
   * <pre>
   * Revoke transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `REVOKE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_REVOKE = 20;</code>
   */
  public static final int TRANSACTION_TYPE_REVOKE_VALUE = 20;
  /**
   * <pre>
   * Status update transaction type. This is associated with the `COMPLAINT` API
   * type. Maps to UPI's `STATUSUPDATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_STATUS_UPDATE = 21;</code>
   */
  public static final int TRANSACTION_TYPE_STATUS_UPDATE_VALUE = 21;
  /**
   * <pre>
   * Update transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `UNPAUSE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UNPAUSE = 22;</code>
   */
  public static final int TRANSACTION_TYPE_UNPAUSE_VALUE = 22;
  /**
   * <pre>
   * Update transaction type. This is associated with the `MANDATE` API type.
   * Maps to UPI's `UPDATE` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UPDATE = 23;</code>
   */
  public static final int TRANSACTION_TYPE_UPDATE_VALUE = 23;
  /**
   * <pre>
   * Update credentials transaction type. This is associated with
   * `UPDATE_CREDENTIALS` API type. Maps to UPI's `SetCre` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_UPDATE_CREDENTIALS = 24;</code>
   */
  public static final int TRANSACTION_TYPE_UPDATE_CREDENTIALS_VALUE = 24;
  /**
   * <pre>
   * Validate customer transaction type. This is associated with
   * `VALIDATE_CUSTOMER` API type. Maps to UPI's `ValCust` type.
   * </pre>
   *
   * <code>TRANSACTION_TYPE_VALIDATE_CUSTOMER = 25;</code>
   */
  public static final int TRANSACTION_TYPE_VALIDATE_CUSTOMER_VALUE = 25;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TransactionType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TransactionType forNumber(int value) {
    switch (value) {
      case 0: return TRANSACTION_TYPE_UNSPECIFIED;
      case 1: return TRANSACTION_TYPE_AUTOUPDATE;
      case 2: return TRANSACTION_TYPE_BALANCE_CHECK;
      case 3: return TRANSACTION_TYPE_BALANCE_ENQUIRY;
      case 4: return TRANSACTION_TYPE_CHECK_STATUS;
      case 5: return TRANSACTION_TYPE_CHECK_TRANSACTION;
      case 6: return TRANSACTION_TYPE_COMPLAINT;
      case 7: return TRANSACTION_TYPE_CREATE;
      case 8: return TRANSACTION_TYPE_CREDIT;
      case 9: return TRANSACTION_TYPE_DEBIT;
      case 10: return TRANSACTION_TYPE_DISPUTE;
      case 11: return TRANSACTION_TYPE_HEART_BEAT;
      case 12: return TRANSACTION_TYPE_LIST_ACCOUNTS;
      case 13: return TRANSACTION_TYPE_MANDATE_NOTIFICATION;
      case 14: return TRANSACTION_TYPE_OTP;
      case 15: return TRANSACTION_TYPE_PAUSE;
      case 16: return TRANSACTION_TYPE_REDEEM;
      case 17: return TRANSACTION_TYPE_REFUND;
      case 18: return TRANSACTION_TYPE_REGISTER_MOBILE;
      case 19: return TRANSACTION_TYPE_REVERSAL;
      case 20: return TRANSACTION_TYPE_REVOKE;
      case 21: return TRANSACTION_TYPE_STATUS_UPDATE;
      case 22: return TRANSACTION_TYPE_UNPAUSE;
      case 23: return TRANSACTION_TYPE_UPDATE;
      case 24: return TRANSACTION_TYPE_UPDATE_CREDENTIALS;
      case 25: return TRANSACTION_TYPE_VALIDATE_CUSTOMER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TransactionType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TransactionType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TransactionType>() {
          public TransactionType findValueByNumber(int number) {
            return TransactionType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.paymentgateway.issuerswitch.v1.CommonFieldsProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final TransactionType[] VALUES = values();

  public static TransactionType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TransactionType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.paymentgateway.issuerswitch.v1.TransactionType)
}

