// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/contentwarehouse/v1/histogram.proto

package com.google.cloud.contentwarehouse.v1;

public interface HistogramQueryResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.contentwarehouse.v1.HistogramQueryResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Requested histogram expression.
   * </pre>
   *
   * <code>string histogram_query = 1;</code>
   * @return The histogramQuery.
   */
  java.lang.String getHistogramQuery();
  /**
   * <pre>
   * Requested histogram expression.
   * </pre>
   *
   * <code>string histogram_query = 1;</code>
   * @return The bytes for histogramQuery.
   */
  com.google.protobuf.ByteString
      getHistogramQueryBytes();

  /**
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   * The key format is:
   * * (for string histogram) string values stored in the field.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  int getHistogramCount();
  /**
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   * The key format is:
   * * (for string histogram) string values stored in the field.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  boolean containsHistogram(
      java.lang.String key);
  /**
   * Use {@link #getHistogramMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Long>
  getHistogram();
  /**
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   * The key format is:
   * * (for string histogram) string values stored in the field.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.Long>
  getHistogramMap();
  /**
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   * The key format is:
   * * (for string histogram) string values stored in the field.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  long getHistogramOrDefault(
      java.lang.String key,
      long defaultValue);
  /**
   * <pre>
   * A map from the values of the facet associated with distinct values to the
   * number of matching entries with corresponding value.
   * The key format is:
   * * (for string histogram) string values stored in the field.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; histogram = 2;</code>
   */
  long getHistogramOrThrow(
      java.lang.String key);
}
