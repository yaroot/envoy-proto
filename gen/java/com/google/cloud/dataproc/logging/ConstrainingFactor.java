// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/dataproc/logging/autoscaler_log.proto

package com.google.cloud.dataproc.logging;

/**
 * Protobuf enum {@code google.cloud.dataproc.logging.ConstrainingFactor}
 */
public enum ConstrainingFactor
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>CONSTRAINING_FACTOR_UNSPECIFIED = 0;</code>
   */
  CONSTRAINING_FACTOR_UNSPECIFIED(0),
  /**
   * <pre>
   * The project does not have sufficient regional, global, and or preemptible
   * quota to allocate a new VM.
   * </pre>
   *
   * <code>SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA = 1;</code>
   */
  SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA(1),
  /**
   * <pre>
   * All worker groups have reached maximum size. This message will not be
   * issued if one group reached maximum size, but workers were able to be
   * allocated to another group.
   * </pre>
   *
   * <code>REACHED_MAXIMUM_CLUSTER_SIZE = 2;</code>
   */
  REACHED_MAXIMUM_CLUSTER_SIZE(2),
  /**
   * <pre>
   * All worker groups have reached minimum size. This message will not be
   * issued if workers were able to be removed from another group that had not
   * reached minimum size.
   * </pre>
   *
   * <code>REACHED_MINIMUM_CLUSTER_SIZE = 3;</code>
   */
  REACHED_MINIMUM_CLUSTER_SIZE(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>CONSTRAINING_FACTOR_UNSPECIFIED = 0;</code>
   */
  public static final int CONSTRAINING_FACTOR_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The project does not have sufficient regional, global, and or preemptible
   * quota to allocate a new VM.
   * </pre>
   *
   * <code>SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA = 1;</code>
   */
  public static final int SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA_VALUE = 1;
  /**
   * <pre>
   * All worker groups have reached maximum size. This message will not be
   * issued if one group reached maximum size, but workers were able to be
   * allocated to another group.
   * </pre>
   *
   * <code>REACHED_MAXIMUM_CLUSTER_SIZE = 2;</code>
   */
  public static final int REACHED_MAXIMUM_CLUSTER_SIZE_VALUE = 2;
  /**
   * <pre>
   * All worker groups have reached minimum size. This message will not be
   * issued if workers were able to be removed from another group that had not
   * reached minimum size.
   * </pre>
   *
   * <code>REACHED_MINIMUM_CLUSTER_SIZE = 3;</code>
   */
  public static final int REACHED_MINIMUM_CLUSTER_SIZE_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ConstrainingFactor valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ConstrainingFactor forNumber(int value) {
    switch (value) {
      case 0: return CONSTRAINING_FACTOR_UNSPECIFIED;
      case 1: return SCALING_CAPPED_DUE_TO_LACK_OF_QUOTA;
      case 2: return REACHED_MAXIMUM_CLUSTER_SIZE;
      case 3: return REACHED_MINIMUM_CLUSTER_SIZE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ConstrainingFactor>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ConstrainingFactor> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ConstrainingFactor>() {
          public ConstrainingFactor findValueByNumber(int number) {
            return ConstrainingFactor.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.dataproc.logging.AutoscalerLogOuterClass.getDescriptor().getEnumTypes().get(2);
  }

  private static final ConstrainingFactor[] VALUES = values();

  public static ConstrainingFactor valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ConstrainingFactor(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.dataproc.logging.ConstrainingFactor)
}

