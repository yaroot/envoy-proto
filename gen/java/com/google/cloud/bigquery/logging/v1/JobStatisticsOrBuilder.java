// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/bigquery/logging/v1/audit_data.proto

package com.google.cloud.bigquery.logging.v1;

public interface JobStatisticsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.bigquery.logging.v1.JobStatistics)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Time when the job was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 1;</code>
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();
  /**
   * <pre>
   * Time when the job was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 1;</code>
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();
  /**
   * <pre>
   * Time when the job was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 1;</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   * <pre>
   * Time when the job started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 2;</code>
   * @return Whether the startTime field is set.
   */
  boolean hasStartTime();
  /**
   * <pre>
   * Time when the job started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 2;</code>
   * @return The startTime.
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * Time when the job started.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * Time when the job ended.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 3;</code>
   * @return Whether the endTime field is set.
   */
  boolean hasEndTime();
  /**
   * <pre>
   * Time when the job ended.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 3;</code>
   * @return The endTime.
   */
  com.google.protobuf.Timestamp getEndTime();
  /**
   * <pre>
   * Time when the job ended.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 3;</code>
   */
  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * Total bytes processed for a job.
   * </pre>
   *
   * <code>int64 total_processed_bytes = 4;</code>
   * @return The totalProcessedBytes.
   */
  long getTotalProcessedBytes();

  /**
   * <pre>
   * Processed bytes, adjusted by the job's CPU usage.
   * </pre>
   *
   * <code>int64 total_billed_bytes = 5;</code>
   * @return The totalBilledBytes.
   */
  long getTotalBilledBytes();

  /**
   * <pre>
   * The tier assigned by CPU-based billing.
   * </pre>
   *
   * <code>int32 billing_tier = 7;</code>
   * @return The billingTier.
   */
  int getBillingTier();

  /**
   * <pre>
   * The total number of slot-ms consumed by the query job.
   * </pre>
   *
   * <code>int64 total_slot_ms = 8;</code>
   * @return The totalSlotMs.
   */
  long getTotalSlotMs();

  /**
   * <pre>
   * Reservation usage.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;</code>
   */
  java.util.List<com.google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage> 
      getReservationUsageList();
  /**
   * <pre>
   * Reservation usage.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;</code>
   */
  com.google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage getReservationUsage(int index);
  /**
   * <pre>
   * Reservation usage.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;</code>
   */
  int getReservationUsageCount();
  /**
   * <pre>
   * Reservation usage.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;</code>
   */
  java.util.List<? extends com.google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsageOrBuilder> 
      getReservationUsageOrBuilderList();
  /**
   * <pre>
   * Reservation usage.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14;</code>
   */
  com.google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsageOrBuilder getReservationUsageOrBuilder(
      int index);

  /**
   * <pre>
   * The first N tables accessed by the query job. Older queries that
   * reference a large number of tables may not have all of their
   * tables in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;</code>
   */
  java.util.List<com.google.cloud.bigquery.logging.v1.TableName> 
      getReferencedTablesList();
  /**
   * <pre>
   * The first N tables accessed by the query job. Older queries that
   * reference a large number of tables may not have all of their
   * tables in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;</code>
   */
  com.google.cloud.bigquery.logging.v1.TableName getReferencedTables(int index);
  /**
   * <pre>
   * The first N tables accessed by the query job. Older queries that
   * reference a large number of tables may not have all of their
   * tables in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;</code>
   */
  int getReferencedTablesCount();
  /**
   * <pre>
   * The first N tables accessed by the query job. Older queries that
   * reference a large number of tables may not have all of their
   * tables in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;</code>
   */
  java.util.List<? extends com.google.cloud.bigquery.logging.v1.TableNameOrBuilder> 
      getReferencedTablesOrBuilderList();
  /**
   * <pre>
   * The first N tables accessed by the query job. Older queries that
   * reference a large number of tables may not have all of their
   * tables in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;</code>
   */
  com.google.cloud.bigquery.logging.v1.TableNameOrBuilder getReferencedTablesOrBuilder(
      int index);

  /**
   * <pre>
   * Total number of unique tables referenced in the query.
   * </pre>
   *
   * <code>int32 total_tables_processed = 10;</code>
   * @return The totalTablesProcessed.
   */
  int getTotalTablesProcessed();

  /**
   * <pre>
   * The first N views accessed by the query job. Older queries that
   * reference a large number of views may not have all of their
   * views in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;</code>
   */
  java.util.List<com.google.cloud.bigquery.logging.v1.TableName> 
      getReferencedViewsList();
  /**
   * <pre>
   * The first N views accessed by the query job. Older queries that
   * reference a large number of views may not have all of their
   * views in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;</code>
   */
  com.google.cloud.bigquery.logging.v1.TableName getReferencedViews(int index);
  /**
   * <pre>
   * The first N views accessed by the query job. Older queries that
   * reference a large number of views may not have all of their
   * views in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;</code>
   */
  int getReferencedViewsCount();
  /**
   * <pre>
   * The first N views accessed by the query job. Older queries that
   * reference a large number of views may not have all of their
   * views in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;</code>
   */
  java.util.List<? extends com.google.cloud.bigquery.logging.v1.TableNameOrBuilder> 
      getReferencedViewsOrBuilderList();
  /**
   * <pre>
   * The first N views accessed by the query job. Older queries that
   * reference a large number of views may not have all of their
   * views in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   * </pre>
   *
   * <code>repeated .google.cloud.bigquery.logging.v1.TableName referenced_views = 11;</code>
   */
  com.google.cloud.bigquery.logging.v1.TableNameOrBuilder getReferencedViewsOrBuilder(
      int index);

  /**
   * <pre>
   * Total number of unique views referenced in the query.
   * </pre>
   *
   * <code>int32 total_views_processed = 12;</code>
   * @return The totalViewsProcessed.
   */
  int getTotalViewsProcessed();

  /**
   * <pre>
   * Number of output rows produced by the query job.
   * </pre>
   *
   * <code>int64 query_output_row_count = 15;</code>
   * @return The queryOutputRowCount.
   */
  long getQueryOutputRowCount();

  /**
   * <pre>
   * Total bytes loaded for an import job.
   * </pre>
   *
   * <code>int64 total_load_output_bytes = 13;</code>
   * @return The totalLoadOutputBytes.
   */
  long getTotalLoadOutputBytes();
}
