// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/networkanalyzer/logging/v1/analyzer_log.proto

package com.google.cloud.networkanalyzer.logging.v1;

/**
 * Protobuf enum {@code google.cloud.networkanalyzer.logging.v1.ReportCauseCode}
 */
public enum ReportCauseCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>REPORT_CAUSE_CODE_UNSPECIFIED = 0;</code>
   */
  REPORT_CAUSE_CODE_UNSPECIFIED(0),
  /**
   * <pre>
   * VPC Basics
   * </pre>
   *
   * <code>ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED = 1;</code>
   */
  ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED(1),
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_VM_DELETED = 2;</code>
   */
  ROUTE_INVALID_NEXT_HOP_VM_DELETED(2),
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_VM_STOPPED = 3;</code>
   */
  ROUTE_INVALID_NEXT_HOP_VM_STOPPED(3),
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED = 4;</code>
   */
  ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED(4),
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED = 5;</code>
   */
  ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED(5),
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED = 6;</code>
   */
  ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED(6),
  /**
   * <code>IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH = 20;</code>
   */
  IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH(20),
  /**
   * <pre>
   * Kubernetes Engine
   * </pre>
   *
   * <code>GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE = 201;</code>
   */
  GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE(201),
  /**
   * <code>GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL = 202;</code>
   */
  GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL(202),
  /**
   * <code>GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL = 203;</code>
   */
  GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL(203),
  /**
   * <code>GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE = 211;</code>
   */
  GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE(211),
  /**
   * <code>GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE = 212;</code>
   */
  GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE(212),
  /**
   * <code>GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH = 221;</code>
   */
  GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH(221),
  /**
   * <code>GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING = 222;</code>
   */
  GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING(222),
  /**
   * <pre>
   * Managed Services
   * </pre>
   *
   * <code>CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL = 601;</code>
   */
  CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL(601),
  /**
   * <code>CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE = 602;</code>
   */
  CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE(602),
  /**
   * <code>CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING = 603;</code>
   */
  CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING(603),
  /**
   * <pre>
   * Hybrid Connectivity
   * </pre>
   *
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE = 801;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE(801),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE = 802;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE(802),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE = 803;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE(803),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE = 804;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE(804),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE = 805;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE(805),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE = 806;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE(806),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE = 807;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE(807),
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE = 808;</code>
   */
  DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE(808),
  /**
   * <pre>
   * Network Services
   * </pre>
   *
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED = 1001;</code>
   */
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED(1001),
  /**
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED = 1002;</code>
   */
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED(1002),
  /**
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT = 1003;</code>
   */
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT(1003),
  /**
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED = 1004;</code>
   */
  LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED(1004),
  /**
   * <code>LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY = 1021;</code>
   */
  LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY(1021),
  /**
   * <code>LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH = 1024;</code>
   */
  LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH(1024),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>REPORT_CAUSE_CODE_UNSPECIFIED = 0;</code>
   */
  public static final int REPORT_CAUSE_CODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * VPC Basics
   * </pre>
   *
   * <code>ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED = 1;</code>
   */
  public static final int ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED_VALUE = 1;
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_VM_DELETED = 2;</code>
   */
  public static final int ROUTE_INVALID_NEXT_HOP_VM_DELETED_VALUE = 2;
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_VM_STOPPED = 3;</code>
   */
  public static final int ROUTE_INVALID_NEXT_HOP_VM_STOPPED_VALUE = 3;
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED = 4;</code>
   */
  public static final int ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED_VALUE = 4;
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED = 5;</code>
   */
  public static final int ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED_VALUE = 5;
  /**
   * <code>ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED = 6;</code>
   */
  public static final int ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED_VALUE = 6;
  /**
   * <code>IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH = 20;</code>
   */
  public static final int IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH_VALUE = 20;
  /**
   * <pre>
   * Kubernetes Engine
   * </pre>
   *
   * <code>GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE = 201;</code>
   */
  public static final int GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE_VALUE = 201;
  /**
   * <code>GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL = 202;</code>
   */
  public static final int GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL_VALUE = 202;
  /**
   * <code>GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL = 203;</code>
   */
  public static final int GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL_VALUE = 203;
  /**
   * <code>GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE = 211;</code>
   */
  public static final int GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE_VALUE = 211;
  /**
   * <code>GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE = 212;</code>
   */
  public static final int GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE_VALUE = 212;
  /**
   * <code>GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH = 221;</code>
   */
  public static final int GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH_VALUE = 221;
  /**
   * <code>GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING = 222;</code>
   */
  public static final int GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING_VALUE = 222;
  /**
   * <pre>
   * Managed Services
   * </pre>
   *
   * <code>CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL = 601;</code>
   */
  public static final int CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL_VALUE = 601;
  /**
   * <code>CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE = 602;</code>
   */
  public static final int CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE_VALUE = 602;
  /**
   * <code>CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING = 603;</code>
   */
  public static final int CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING_VALUE = 603;
  /**
   * <pre>
   * Hybrid Connectivity
   * </pre>
   *
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE = 801;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE_VALUE = 801;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE = 802;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE_VALUE = 802;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE = 803;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE_VALUE = 803;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE = 804;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE_VALUE = 804;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE = 805;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE_VALUE = 805;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE = 806;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE_VALUE = 806;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE = 807;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE_VALUE = 807;
  /**
   * <code>DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE = 808;</code>
   */
  public static final int DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE_VALUE = 808;
  /**
   * <pre>
   * Network Services
   * </pre>
   *
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED = 1001;</code>
   */
  public static final int LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED_VALUE = 1001;
  /**
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED = 1002;</code>
   */
  public static final int LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED_VALUE = 1002;
  /**
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT = 1003;</code>
   */
  public static final int LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT_VALUE = 1003;
  /**
   * <code>LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED = 1004;</code>
   */
  public static final int LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED_VALUE = 1004;
  /**
   * <code>LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY = 1021;</code>
   */
  public static final int LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY_VALUE = 1021;
  /**
   * <code>LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH = 1024;</code>
   */
  public static final int LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH_VALUE = 1024;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ReportCauseCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ReportCauseCode forNumber(int value) {
    switch (value) {
      case 0: return REPORT_CAUSE_CODE_UNSPECIFIED;
      case 1: return ROUTE_INVALID_NEXT_HOP_VM_IP_FORWARDING_DISABLED;
      case 2: return ROUTE_INVALID_NEXT_HOP_VM_DELETED;
      case 3: return ROUTE_INVALID_NEXT_HOP_VM_STOPPED;
      case 4: return ROUTE_INVALID_NEXT_HOP_ILB_MISCONFIGURED;
      case 5: return ROUTE_INVALID_NEXT_HOP_VPN_TUNNEL_DELETED;
      case 6: return ROUTE_INVALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING_DISABLED;
      case 20: return IP_UTILIZATION_IP_ALLOCATION_RATIO_HIGH;
      case 201: return GKE_NODE_TO_CONTROL_PLANE_BLOCKED_BY_ROUTING_ISSUE;
      case 202: return GKE_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL;
      case 203: return GKE_NODE_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCKED_BY_EGRESS_FIREWALL;
      case 211: return GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE;
      case 212: return GKE_CONTROL_PLANE_TO_NODE_BLOCKED_BY_INGRESS_FIREWALL_ON_NODE;
      case 221: return GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_HIGH;
      case 222: return GKE_IP_UTILIZATION_POD_RANGES_ALLOCATION_LIMITES_AUTOSCALING;
      case 601: return CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL;
      case 602: return CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_ROUTING_ISSUE;
      case 603: return CLOUD_SQL_PRIVATE_IP_INSTANCE_NOT_RUNNING;
      case 801: return DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE;
      case 802: return DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_SUBNET_ROUTE;
      case 803: return DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATIC_ROUTE;
      case 804: return DYNAMIC_ROUTE_SHADOWED_FULLY_SHADOWED_BY_PEERING_STATIC_ROUTE;
      case 805: return DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_SUBNET_ROUTE;
      case 806: return DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_SUBNET_ROUTE;
      case 807: return DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_STATIC_ROUTE;
      case 808: return DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_STATIC_ROUTE;
      case 1001: return LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_FIREWALL_NOT_CONFIGURED;
      case 1002: return LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_BLOCKED;
      case 1003: return LOAD_BALANCER_HEALTH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONSISTENT;
      case 1004: return LOAD_BALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BLOCKED;
      case 1021: return LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_BALANCING_MODE_BREAKS_SESSION_AFFINITY;
      case 1024: return LOAD_BALANCER_BEST_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_PORT_MISMATCH;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ReportCauseCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ReportCauseCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ReportCauseCode>() {
          public ReportCauseCode findValueByNumber(int number) {
            return ReportCauseCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.networkanalyzer.logging.v1.AnalyzerLogProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ReportCauseCode[] VALUES = values();

  public static ReportCauseCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ReportCauseCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.networkanalyzer.logging.v1.ReportCauseCode)
}

