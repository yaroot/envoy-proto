// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/networkanalyzer/logging/v1/analyzer_log.proto

package com.google.cloud.networkanalyzer.logging.v1;

public final class AnalyzerLogProto {
  private AnalyzerLogProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_SubnetIpUtilization_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_SubnetIpUtilization_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_google_cloud_networkanalyzer_logging_v1_Report_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_google_cloud_networkanalyzer_logging_v1_Report_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:google/cloud/networkanalyzer/logging/v" +
      "1/analyzer_log.proto\022\'google.cloud.netwo" +
      "rkanalyzer.logging.v1\032\037google/protobuf/t" +
      "imestamp.proto\"\206\002\n\021IpUtilizationInfo\022m\n\025" +
      "subnet_ip_utilization\030\001 \003(\0132N.google.clo" +
      "ud.networkanalyzer.logging.v1.IpUtilizat" +
      "ionInfo.SubnetIpUtilization\032\201\001\n\023SubnetIp" +
      "Utilization\022\022\n\nsubnet_uri\030\001 \001(\t\022\034\n\024secon" +
      "dary_range_name\030\002 \001(\t\022\036\n\026total_usable_ad" +
      "dresses\030\003 \001(\004\022\030\n\020allocation_ratio\030\004 \001(\001\"" +
      "\202\010\n\006Report\022\n\n\002id\030\001 \001(\t\022J\n\010priority\030\002 \001(\016" +
      "28.google.cloud.networkanalyzer.logging." +
      "v1.Report.Priority\022B\n\004type\030\003 \001(\01624.googl" +
      "e.cloud.networkanalyzer.logging.v1.Repor" +
      "t.Type\022L\n\006status\030\004 \001(\0162<.google.cloud.ne" +
      "tworkanalyzer.logging.v1.Report.ReportSt" +
      "atus\0225\n\021first_report_time\030\t \001(\0132\032.google" +
      ".protobuf.Timestamp\022L\n\ncause_code\030\014 \001(\0162" +
      "8.google.cloud.networkanalyzer.logging.v" +
      "1.ReportCauseCode\022\025\n\rresource_name\030\017 \001(\t" +
      "\022\020\n\010location\030\020 \001(\t\022 \n\030report_documentati" +
      "on_uri\030\021 \001(\t\022R\n\rreport_groups\030\022 \003(\0162;.go" +
      "ogle.cloud.networkanalyzer.logging.v1.Re" +
      "port.ReportGroup\022Y\n\023ip_utilization_info\030" +
      "\023 \001(\0132:.google.cloud.networkanalyzer.log" +
      "ging.v1.IpUtilizationInfoH\000\"Q\n\010Priority\022" +
      "\030\n\024SEVERITY_UNSPECIFIED\020\000\022\014\n\010CRITICAL\020\001\022" +
      "\010\n\004HIGH\020\002\022\n\n\006MEDIUM\020\003\022\007\n\003LOW\020\004\"E\n\004Type\022\033" +
      "\n\027REPORT_TYPE_UNSPECIFIED\020\000\022\010\n\004INFO\020\001\022\013\n" +
      "\007WARNING\020\002\022\t\n\005ERROR\020\003\"S\n\014ReportStatus\022\035\n" +
      "\031REPORT_STATUS_UNSPECIFIED\020\000\022\n\n\006ACTIVE\020\001" +
      "\022\t\n\005FIXED\020\002\022\r\n\tDISMISSED\020\003\"\224\001\n\013ReportGro" +
      "up\022\030\n\024CATEGORY_UNSPECIFIED\020\000\022\017\n\013VPC_NETW" +
      "ORK\020\001\022\024\n\020NETWORK_SERVICES\020\002\022\025\n\021KUBERNETE" +
      "S_ENGINE\020\003\022\027\n\023HYBRID_CONNECTIVITY\020\004\022\024\n\020M" +
      "ANAGED_SERVICES\020\005B\t\n\007content*\301\017\n\017ReportC" +
      "auseCode\022!\n\035REPORT_CAUSE_CODE_UNSPECIFIE" +
      "D\020\000\0224\n0ROUTE_INVALID_NEXT_HOP_VM_IP_FORW" +
      "ARDING_DISABLED\020\001\022%\n!ROUTE_INVALID_NEXT_" +
      "HOP_VM_DELETED\020\002\022%\n!ROUTE_INVALID_NEXT_H" +
      "OP_VM_STOPPED\020\003\022,\n(ROUTE_INVALID_NEXT_HO" +
      "P_ILB_MISCONFIGURED\020\004\022-\n)ROUTE_INVALID_N" +
      "EXT_HOP_VPN_TUNNEL_DELETED\020\005\022=\n9ROUTE_IN" +
      "VALID_NEXT_HOP_ILB_BACKEND_IP_FORWARDING" +
      "_DISABLED\020\006\022+\n\'IP_UTILIZATION_IP_ALLOCAT" +
      "ION_RATIO_HIGH\020\024\0227\n2GKE_NODE_TO_CONTROL_" +
      "PLANE_BLOCKED_BY_ROUTING_ISSUE\020\311\001\022I\nDGKE" +
      "_NODE_TO_CONTROL_PLANE_PUBLIC_ENDPOINT_B" +
      "LOCKED_BY_EGRESS_FIREWALL\020\312\001\022J\nEGKE_NODE" +
      "_TO_CONTROL_PLANE_PRIVATE_ENDPOINT_BLOCK" +
      "ED_BY_EGRESS_FIREWALL\020\313\001\0227\n2GKE_CONTROL_" +
      "PLANE_TO_NODE_BLOCKED_BY_ROUTING_ISSUE\020\323" +
      "\001\022B\n=GKE_CONTROL_PLANE_TO_NODE_BLOCKED_B" +
      "Y_INGRESS_FIREWALL_ON_NODE\020\324\001\0222\n-GKE_IP_" +
      "UTILIZATION_POD_RANGES_ALLOCATION_HIGH\020\335" +
      "\001\022A\n<GKE_IP_UTILIZATION_POD_RANGES_ALLOC" +
      "ATION_LIMITES_AUTOSCALING\020\336\001\0224\n/CLOUD_SQ" +
      "L_PRIVATE_IP_BLOCKED_BY_EGRESS_FIREWALL\020" +
      "\331\004\0222\n-CLOUD_SQL_PRIVATE_IP_BLOCKED_BY_RO" +
      "UTING_ISSUE\020\332\004\022.\n)CLOUD_SQL_PRIVATE_IP_I" +
      "NSTANCE_NOT_RUNNING\020\333\004\022:\n5DYNAMIC_ROUTE_" +
      "SHADOWED_FULLY_SHADOWED_BY_SUBNET_ROUTE\020" +
      "\241\006\022B\n=DYNAMIC_ROUTE_SHADOWED_FULLY_SHADO" +
      "WED_BY_PEERING_SUBNET_ROUTE\020\242\006\022:\n5DYNAMI" +
      "C_ROUTE_SHADOWED_FULLY_SHADOWED_BY_STATI" +
      "C_ROUTE\020\243\006\022B\n=DYNAMIC_ROUTE_SHADOWED_FUL" +
      "LY_SHADOWED_BY_PEERING_STATIC_ROUTE\020\244\006\022>" +
      "\n9DYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADO" +
      "WED_BY_SUBNET_ROUTE\020\245\006\022F\nADYNAMIC_ROUTE_" +
      "SHADOWED_PARTIALLY_SHADOWED_BY_PEERING_S" +
      "UBNET_ROUTE\020\246\006\022>\n9DYNAMIC_ROUTE_SHADOWED" +
      "_PARTIALLY_SHADOWED_BY_STATIC_ROUTE\020\247\006\022F" +
      "\nADYNAMIC_ROUTE_SHADOWED_PARTIALLY_SHADO" +
      "WED_BY_PEERING_STATIC_ROUTE\020\250\006\022M\nHLOAD_B" +
      "ALANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHE" +
      "CK_FIREWALL_NOT_CONFIGURED\020\351\007\022C\n>LOAD_BA" +
      "LANCER_HEALTH_CHECK_FIREWALL_HEALTH_CHEC" +
      "K_RANGE_BLOCKED\020\352\007\022E\n@LOAD_BALANCER_HEAL" +
      "TH_CHECK_FIREWALL_FIREWALL_CONFIG_INCONS" +
      "ISTENT\020\353\007\022M\nHLOAD_BALANCER_HEALTH_CHECK_" +
      "FIREWALL_HEALTH_CHECK_RANGE_PARTIALLY_BL" +
      "OCKED\020\354\007\022X\nSLOAD_BALANCER_BEST_PRACTICES" +
      "_BACKEND_SERVICE_BALANCING_MODE_BREAKS_S" +
      "ESSION_AFFINITY\020\375\007\022L\nGLOAD_BALANCER_BEST" +
      "_PRACTICES_BACKEND_SERVICE_HEALTH_CHECK_" +
      "PORT_MISMATCH\020\200\010B\223\002\n+com.google.cloud.ne" +
      "tworkanalyzer.logging.v1B\020AnalyzerLogPro" +
      "toP\001ZNgoogle.golang.org/genproto/googlea" +
      "pis/cloud/networkanalyzer/logging/v1;log" +
      "ging\252\002\'Google.Cloud.NetworkAnalyzer.Logg" +
      "ing.V1\312\002\'Google\\Cloud\\NetworkAnalyzer\\Lo" +
      "gging\\V1\352\002+Google::Cloud::NetworkAnalyze" +
      "r::Logging::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_descriptor,
        new java.lang.String[] { "SubnetIpUtilization", });
    internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_SubnetIpUtilization_descriptor =
      internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_descriptor.getNestedTypes().get(0);
    internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_SubnetIpUtilization_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_google_cloud_networkanalyzer_logging_v1_IpUtilizationInfo_SubnetIpUtilization_descriptor,
        new java.lang.String[] { "SubnetUri", "SecondaryRangeName", "TotalUsableAddresses", "AllocationRatio", });
    internal_static_google_cloud_networkanalyzer_logging_v1_Report_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_google_cloud_networkanalyzer_logging_v1_Report_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_google_cloud_networkanalyzer_logging_v1_Report_descriptor,
        new java.lang.String[] { "Id", "Priority", "Type", "Status", "FirstReportTime", "CauseCode", "ResourceName", "Location", "ReportDocumentationUri", "ReportGroups", "IpUtilizationInfo", "Content", });
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
