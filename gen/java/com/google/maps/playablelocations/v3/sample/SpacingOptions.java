// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/playablelocations/v3/sample/resources.proto

package com.google.maps.playablelocations.v3.sample;

/**
 * <pre>
 * A set of options that specifies the separation between playable locations.
 * </pre>
 *
 * Protobuf type {@code google.maps.playablelocations.v3.sample.SpacingOptions}
 */
public final class SpacingOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.maps.playablelocations.v3.sample.SpacingOptions)
    SpacingOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SpacingOptions.newBuilder() to construct.
  private SpacingOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SpacingOptions() {
    pointType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SpacingOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_SpacingOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_SpacingOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.playablelocations.v3.sample.SpacingOptions.class, com.google.maps.playablelocations.v3.sample.SpacingOptions.Builder.class);
  }

  /**
   * <pre>
   * Specifies whether the playable location's geographic coordinates (latitude
   * and longitude) correspond to its center-point, or to its location snapped
   * to the sidewalk of the nearest road.
   * </pre>
   *
   * Protobuf enum {@code google.maps.playablelocations.v3.sample.SpacingOptions.PointType}
   */
  public enum PointType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified point type. Do not use this value.
     * </pre>
     *
     * <code>POINT_TYPE_UNSPECIFIED = 0;</code>
     */
    POINT_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * The geographic coordinates correspond to the center of the location.
     * </pre>
     *
     * <code>CENTER_POINT = 1;</code>
     */
    CENTER_POINT(1),
    /**
     * <pre>
     * The geographic coordinates correspond to the location snapped to the
     * sidewalk of the nearest road (when a nearby road exists).
     * </pre>
     *
     * <code>SNAPPED_POINT = 2;</code>
     */
    SNAPPED_POINT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified point type. Do not use this value.
     * </pre>
     *
     * <code>POINT_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int POINT_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The geographic coordinates correspond to the center of the location.
     * </pre>
     *
     * <code>CENTER_POINT = 1;</code>
     */
    public static final int CENTER_POINT_VALUE = 1;
    /**
     * <pre>
     * The geographic coordinates correspond to the location snapped to the
     * sidewalk of the nearest road (when a nearby road exists).
     * </pre>
     *
     * <code>SNAPPED_POINT = 2;</code>
     */
    public static final int SNAPPED_POINT_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PointType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PointType forNumber(int value) {
      switch (value) {
        case 0: return POINT_TYPE_UNSPECIFIED;
        case 1: return CENTER_POINT;
        case 2: return SNAPPED_POINT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PointType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PointType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PointType>() {
            public PointType findValueByNumber(int number) {
              return PointType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.maps.playablelocations.v3.sample.SpacingOptions.getDescriptor().getEnumTypes().get(0);
    }

    private static final PointType[] VALUES = values();

    public static PointType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PointType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.maps.playablelocations.v3.sample.SpacingOptions.PointType)
  }

  public static final int MIN_SPACING_METERS_FIELD_NUMBER = 1;
  private double minSpacingMeters_ = 0D;
  /**
   * <pre>
   * Required. The minimum spacing between any two playable locations, measured
   * in meters. The minimum value is 30. The maximum value is 1000.
   * Inputs will be rounded up to the next 10 meter interval.
   * The default value is 200m.
   * Set this field to remove tight clusters of playable locations.
   * Note:
   * The spacing is a greedy algorithm. It optimizes for selecting the highest
   * ranking locations first, not to maximize the number of locations selected.
   * Consider the following scenario:
   *   * Rank: A: 2, B: 1, C: 3.
   *   * Distance: A--200m--B--200m--C
   * If spacing=250, it will pick the highest ranked location [B], not [A, C].
   * Note:
   * Spacing works within the game object type itself, as well as the previous
   * ones.
   * Suppose three game object types, each with the following spacing:
   *   * X: 400m, Y: undefined, Z: 200m.
   * 1. Add locations for X, within 400m of each other.
   * 2. Add locations for Y, without any spacing.
   * 3. Finally, add locations for Z within 200m of each other as well X and Y.
   * The distance diagram between those locations end up as:
   *   * From-&gt;To.
   *   * X-&gt;X: 400m
   *   * Y-&gt;X, Y-&gt;Y: unspecified.
   *   * Z-&gt;X, Z-&gt;Y, Z-&gt;Z: 200m.
   * </pre>
   *
   * <code>double min_spacing_meters = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The minSpacingMeters.
   */
  @java.lang.Override
  public double getMinSpacingMeters() {
    return minSpacingMeters_;
  }

  public static final int POINT_TYPE_FIELD_NUMBER = 2;
  private int pointType_ = 0;
  /**
   * <pre>
   * Specifies whether the minimum spacing constraint applies to the
   * center-point or to the snapped point of playable locations. The default
   * value is `CENTER_POINT`.
   * If a snapped point is not available for a playable location, its
   * center-point is used instead.
   * Set this to the point type used in your game.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
   * @return The enum numeric value on the wire for pointType.
   */
  @java.lang.Override public int getPointTypeValue() {
    return pointType_;
  }
  /**
   * <pre>
   * Specifies whether the minimum spacing constraint applies to the
   * center-point or to the snapped point of playable locations. The default
   * value is `CENTER_POINT`.
   * If a snapped point is not available for a playable location, its
   * center-point is used instead.
   * Set this to the point type used in your game.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
   * @return The pointType.
   */
  @java.lang.Override public com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType getPointType() {
    com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType result = com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType.forNumber(pointType_);
    return result == null ? com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (java.lang.Double.doubleToRawLongBits(minSpacingMeters_) != 0) {
      output.writeDouble(1, minSpacingMeters_);
    }
    if (pointType_ != com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType.POINT_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, pointType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (java.lang.Double.doubleToRawLongBits(minSpacingMeters_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, minSpacingMeters_);
    }
    if (pointType_ != com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType.POINT_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, pointType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.maps.playablelocations.v3.sample.SpacingOptions)) {
      return super.equals(obj);
    }
    com.google.maps.playablelocations.v3.sample.SpacingOptions other = (com.google.maps.playablelocations.v3.sample.SpacingOptions) obj;

    if (java.lang.Double.doubleToLongBits(getMinSpacingMeters())
        != java.lang.Double.doubleToLongBits(
            other.getMinSpacingMeters())) return false;
    if (pointType_ != other.pointType_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MIN_SPACING_METERS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getMinSpacingMeters()));
    hash = (37 * hash) + POINT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + pointType_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.sample.SpacingOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.maps.playablelocations.v3.sample.SpacingOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A set of options that specifies the separation between playable locations.
   * </pre>
   *
   * Protobuf type {@code google.maps.playablelocations.v3.sample.SpacingOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.maps.playablelocations.v3.sample.SpacingOptions)
      com.google.maps.playablelocations.v3.sample.SpacingOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_SpacingOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_SpacingOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.playablelocations.v3.sample.SpacingOptions.class, com.google.maps.playablelocations.v3.sample.SpacingOptions.Builder.class);
    }

    // Construct using com.google.maps.playablelocations.v3.sample.SpacingOptions.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      minSpacingMeters_ = 0D;
      pointType_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_SpacingOptions_descriptor;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.SpacingOptions getDefaultInstanceForType() {
      return com.google.maps.playablelocations.v3.sample.SpacingOptions.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.SpacingOptions build() {
      com.google.maps.playablelocations.v3.sample.SpacingOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.SpacingOptions buildPartial() {
      com.google.maps.playablelocations.v3.sample.SpacingOptions result = new com.google.maps.playablelocations.v3.sample.SpacingOptions(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.playablelocations.v3.sample.SpacingOptions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.minSpacingMeters_ = minSpacingMeters_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.pointType_ = pointType_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.playablelocations.v3.sample.SpacingOptions) {
        return mergeFrom((com.google.maps.playablelocations.v3.sample.SpacingOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.playablelocations.v3.sample.SpacingOptions other) {
      if (other == com.google.maps.playablelocations.v3.sample.SpacingOptions.getDefaultInstance()) return this;
      if (other.getMinSpacingMeters() != 0D) {
        setMinSpacingMeters(other.getMinSpacingMeters());
      }
      if (other.pointType_ != 0) {
        setPointTypeValue(other.getPointTypeValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              minSpacingMeters_ = input.readDouble();
              bitField0_ |= 0x00000001;
              break;
            } // case 9
            case 16: {
              pointType_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private double minSpacingMeters_ ;
    /**
     * <pre>
     * Required. The minimum spacing between any two playable locations, measured
     * in meters. The minimum value is 30. The maximum value is 1000.
     * Inputs will be rounded up to the next 10 meter interval.
     * The default value is 200m.
     * Set this field to remove tight clusters of playable locations.
     * Note:
     * The spacing is a greedy algorithm. It optimizes for selecting the highest
     * ranking locations first, not to maximize the number of locations selected.
     * Consider the following scenario:
     *   * Rank: A: 2, B: 1, C: 3.
     *   * Distance: A--200m--B--200m--C
     * If spacing=250, it will pick the highest ranked location [B], not [A, C].
     * Note:
     * Spacing works within the game object type itself, as well as the previous
     * ones.
     * Suppose three game object types, each with the following spacing:
     *   * X: 400m, Y: undefined, Z: 200m.
     * 1. Add locations for X, within 400m of each other.
     * 2. Add locations for Y, without any spacing.
     * 3. Finally, add locations for Z within 200m of each other as well X and Y.
     * The distance diagram between those locations end up as:
     *   * From-&gt;To.
     *   * X-&gt;X: 400m
     *   * Y-&gt;X, Y-&gt;Y: unspecified.
     *   * Z-&gt;X, Z-&gt;Y, Z-&gt;Z: 200m.
     * </pre>
     *
     * <code>double min_spacing_meters = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The minSpacingMeters.
     */
    @java.lang.Override
    public double getMinSpacingMeters() {
      return minSpacingMeters_;
    }
    /**
     * <pre>
     * Required. The minimum spacing between any two playable locations, measured
     * in meters. The minimum value is 30. The maximum value is 1000.
     * Inputs will be rounded up to the next 10 meter interval.
     * The default value is 200m.
     * Set this field to remove tight clusters of playable locations.
     * Note:
     * The spacing is a greedy algorithm. It optimizes for selecting the highest
     * ranking locations first, not to maximize the number of locations selected.
     * Consider the following scenario:
     *   * Rank: A: 2, B: 1, C: 3.
     *   * Distance: A--200m--B--200m--C
     * If spacing=250, it will pick the highest ranked location [B], not [A, C].
     * Note:
     * Spacing works within the game object type itself, as well as the previous
     * ones.
     * Suppose three game object types, each with the following spacing:
     *   * X: 400m, Y: undefined, Z: 200m.
     * 1. Add locations for X, within 400m of each other.
     * 2. Add locations for Y, without any spacing.
     * 3. Finally, add locations for Z within 200m of each other as well X and Y.
     * The distance diagram between those locations end up as:
     *   * From-&gt;To.
     *   * X-&gt;X: 400m
     *   * Y-&gt;X, Y-&gt;Y: unspecified.
     *   * Z-&gt;X, Z-&gt;Y, Z-&gt;Z: 200m.
     * </pre>
     *
     * <code>double min_spacing_meters = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The minSpacingMeters to set.
     * @return This builder for chaining.
     */
    public Builder setMinSpacingMeters(double value) {
      
      minSpacingMeters_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The minimum spacing between any two playable locations, measured
     * in meters. The minimum value is 30. The maximum value is 1000.
     * Inputs will be rounded up to the next 10 meter interval.
     * The default value is 200m.
     * Set this field to remove tight clusters of playable locations.
     * Note:
     * The spacing is a greedy algorithm. It optimizes for selecting the highest
     * ranking locations first, not to maximize the number of locations selected.
     * Consider the following scenario:
     *   * Rank: A: 2, B: 1, C: 3.
     *   * Distance: A--200m--B--200m--C
     * If spacing=250, it will pick the highest ranked location [B], not [A, C].
     * Note:
     * Spacing works within the game object type itself, as well as the previous
     * ones.
     * Suppose three game object types, each with the following spacing:
     *   * X: 400m, Y: undefined, Z: 200m.
     * 1. Add locations for X, within 400m of each other.
     * 2. Add locations for Y, without any spacing.
     * 3. Finally, add locations for Z within 200m of each other as well X and Y.
     * The distance diagram between those locations end up as:
     *   * From-&gt;To.
     *   * X-&gt;X: 400m
     *   * Y-&gt;X, Y-&gt;Y: unspecified.
     *   * Z-&gt;X, Z-&gt;Y, Z-&gt;Z: 200m.
     * </pre>
     *
     * <code>double min_spacing_meters = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinSpacingMeters() {
      bitField0_ = (bitField0_ & ~0x00000001);
      minSpacingMeters_ = 0D;
      onChanged();
      return this;
    }

    private int pointType_ = 0;
    /**
     * <pre>
     * Specifies whether the minimum spacing constraint applies to the
     * center-point or to the snapped point of playable locations. The default
     * value is `CENTER_POINT`.
     * If a snapped point is not available for a playable location, its
     * center-point is used instead.
     * Set this to the point type used in your game.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
     * @return The enum numeric value on the wire for pointType.
     */
    @java.lang.Override public int getPointTypeValue() {
      return pointType_;
    }
    /**
     * <pre>
     * Specifies whether the minimum spacing constraint applies to the
     * center-point or to the snapped point of playable locations. The default
     * value is `CENTER_POINT`.
     * If a snapped point is not available for a playable location, its
     * center-point is used instead.
     * Set this to the point type used in your game.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
     * @param value The enum numeric value on the wire for pointType to set.
     * @return This builder for chaining.
     */
    public Builder setPointTypeValue(int value) {
      pointType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether the minimum spacing constraint applies to the
     * center-point or to the snapped point of playable locations. The default
     * value is `CENTER_POINT`.
     * If a snapped point is not available for a playable location, its
     * center-point is used instead.
     * Set this to the point type used in your game.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
     * @return The pointType.
     */
    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType getPointType() {
      com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType result = com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType.forNumber(pointType_);
      return result == null ? com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Specifies whether the minimum spacing constraint applies to the
     * center-point or to the snapped point of playable locations. The default
     * value is `CENTER_POINT`.
     * If a snapped point is not available for a playable location, its
     * center-point is used instead.
     * Set this to the point type used in your game.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
     * @param value The pointType to set.
     * @return This builder for chaining.
     */
    public Builder setPointType(com.google.maps.playablelocations.v3.sample.SpacingOptions.PointType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      pointType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies whether the minimum spacing constraint applies to the
     * center-point or to the snapped point of playable locations. The default
     * value is `CENTER_POINT`.
     * If a snapped point is not available for a playable location, its
     * center-point is used instead.
     * Set this to the point type used in your game.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPointType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      pointType_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.maps.playablelocations.v3.sample.SpacingOptions)
  }

  // @@protoc_insertion_point(class_scope:google.maps.playablelocations.v3.sample.SpacingOptions)
  private static final com.google.maps.playablelocations.v3.sample.SpacingOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.maps.playablelocations.v3.sample.SpacingOptions();
  }

  public static com.google.maps.playablelocations.v3.sample.SpacingOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SpacingOptions>
      PARSER = new com.google.protobuf.AbstractParser<SpacingOptions>() {
    @java.lang.Override
    public SpacingOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SpacingOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SpacingOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.SpacingOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

