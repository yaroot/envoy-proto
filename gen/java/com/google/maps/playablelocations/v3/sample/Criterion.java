// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/playablelocations/v3/sample/resources.proto

package com.google.maps.playablelocations.v3.sample;

/**
 * <pre>
 * Encapsulates a filter criterion for searching for a set of playable
 * locations.
 * </pre>
 *
 * Protobuf type {@code google.maps.playablelocations.v3.sample.Criterion}
 */
public final class Criterion extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.maps.playablelocations.v3.sample.Criterion)
    CriterionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Criterion.newBuilder() to construct.
  private Criterion(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Criterion() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Criterion();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Criterion(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            gameObjectType_ = input.readInt32();
            break;
          }
          case 18: {
            com.google.maps.playablelocations.v3.sample.Filter.Builder subBuilder = null;
            if (filter_ != null) {
              subBuilder = filter_.toBuilder();
            }
            filter_ = input.readMessage(com.google.maps.playablelocations.v3.sample.Filter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(filter_);
              filter_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.protobuf.FieldMask.Builder subBuilder = null;
            if (fieldsToReturn_ != null) {
              subBuilder = fieldsToReturn_.toBuilder();
            }
            fieldsToReturn_ = input.readMessage(com.google.protobuf.FieldMask.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fieldsToReturn_);
              fieldsToReturn_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_Criterion_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_Criterion_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.playablelocations.v3.sample.Criterion.class, com.google.maps.playablelocations.v3.sample.Criterion.Builder.class);
  }

  public static final int GAME_OBJECT_TYPE_FIELD_NUMBER = 1;
  private int gameObjectType_;
  /**
   * <pre>
   * Required. An arbitrary, developer-defined identifier of the type of game
   * object that the playable location is used for. This field allows you to
   * specify criteria per game object type when searching for playable
   * locations.
   * You should assign a unique `game_object_type` ID across all
   * `request_criteria` to represent a distinct type of game object. For
   * example, 1=monster location, 2=powerup location.
   * The response contains a map&lt;game_object_type, Response&gt;.
   * </pre>
   *
   * <code>int32 game_object_type = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The gameObjectType.
   */
  @java.lang.Override
  public int getGameObjectType() {
    return gameObjectType_;
  }

  public static final int FILTER_FIELD_NUMBER = 2;
  private com.google.maps.playablelocations.v3.sample.Filter filter_;
  /**
   * <pre>
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
   * @return Whether the filter field is set.
   */
  @java.lang.Override
  public boolean hasFilter() {
    return filter_ != null;
  }
  /**
   * <pre>
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
   * @return The filter.
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.Filter getFilter() {
    return filter_ == null ? com.google.maps.playablelocations.v3.sample.Filter.getDefaultInstance() : filter_;
  }
  /**
   * <pre>
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.FilterOrBuilder getFilterOrBuilder() {
    return getFilter();
  }

  public static final int FIELDS_TO_RETURN_FIELD_NUMBER = 3;
  private com.google.protobuf.FieldMask fieldsToReturn_;
  /**
   * <pre>
   * Specifies which `PlayableLocation` fields are returned.
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   * The following fields are omitted unless you specify them here:
   *   * snapped_point
   *   * types
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
   * @return Whether the fieldsToReturn field is set.
   */
  @java.lang.Override
  public boolean hasFieldsToReturn() {
    return fieldsToReturn_ != null;
  }
  /**
   * <pre>
   * Specifies which `PlayableLocation` fields are returned.
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   * The following fields are omitted unless you specify them here:
   *   * snapped_point
   *   * types
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
   * @return The fieldsToReturn.
   */
  @java.lang.Override
  public com.google.protobuf.FieldMask getFieldsToReturn() {
    return fieldsToReturn_ == null ? com.google.protobuf.FieldMask.getDefaultInstance() : fieldsToReturn_;
  }
  /**
   * <pre>
   * Specifies which `PlayableLocation` fields are returned.
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   * The following fields are omitted unless you specify them here:
   *   * snapped_point
   *   * types
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.FieldMaskOrBuilder getFieldsToReturnOrBuilder() {
    return getFieldsToReturn();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (gameObjectType_ != 0) {
      output.writeInt32(1, gameObjectType_);
    }
    if (filter_ != null) {
      output.writeMessage(2, getFilter());
    }
    if (fieldsToReturn_ != null) {
      output.writeMessage(3, getFieldsToReturn());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (gameObjectType_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, gameObjectType_);
    }
    if (filter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getFilter());
    }
    if (fieldsToReturn_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getFieldsToReturn());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.maps.playablelocations.v3.sample.Criterion)) {
      return super.equals(obj);
    }
    com.google.maps.playablelocations.v3.sample.Criterion other = (com.google.maps.playablelocations.v3.sample.Criterion) obj;

    if (getGameObjectType()
        != other.getGameObjectType()) return false;
    if (hasFilter() != other.hasFilter()) return false;
    if (hasFilter()) {
      if (!getFilter()
          .equals(other.getFilter())) return false;
    }
    if (hasFieldsToReturn() != other.hasFieldsToReturn()) return false;
    if (hasFieldsToReturn()) {
      if (!getFieldsToReturn()
          .equals(other.getFieldsToReturn())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + GAME_OBJECT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getGameObjectType();
    if (hasFilter()) {
      hash = (37 * hash) + FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getFilter().hashCode();
    }
    if (hasFieldsToReturn()) {
      hash = (37 * hash) + FIELDS_TO_RETURN_FIELD_NUMBER;
      hash = (53 * hash) + getFieldsToReturn().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.sample.Criterion parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.maps.playablelocations.v3.sample.Criterion prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Encapsulates a filter criterion for searching for a set of playable
   * locations.
   * </pre>
   *
   * Protobuf type {@code google.maps.playablelocations.v3.sample.Criterion}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.maps.playablelocations.v3.sample.Criterion)
      com.google.maps.playablelocations.v3.sample.CriterionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_Criterion_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_Criterion_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.playablelocations.v3.sample.Criterion.class, com.google.maps.playablelocations.v3.sample.Criterion.Builder.class);
    }

    // Construct using com.google.maps.playablelocations.v3.sample.Criterion.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      gameObjectType_ = 0;

      if (filterBuilder_ == null) {
        filter_ = null;
      } else {
        filter_ = null;
        filterBuilder_ = null;
      }
      if (fieldsToReturnBuilder_ == null) {
        fieldsToReturn_ = null;
      } else {
        fieldsToReturn_ = null;
        fieldsToReturnBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.maps.playablelocations.v3.sample.ResourcesProto.internal_static_google_maps_playablelocations_v3_sample_Criterion_descriptor;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.Criterion getDefaultInstanceForType() {
      return com.google.maps.playablelocations.v3.sample.Criterion.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.Criterion build() {
      com.google.maps.playablelocations.v3.sample.Criterion result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.sample.Criterion buildPartial() {
      com.google.maps.playablelocations.v3.sample.Criterion result = new com.google.maps.playablelocations.v3.sample.Criterion(this);
      result.gameObjectType_ = gameObjectType_;
      if (filterBuilder_ == null) {
        result.filter_ = filter_;
      } else {
        result.filter_ = filterBuilder_.build();
      }
      if (fieldsToReturnBuilder_ == null) {
        result.fieldsToReturn_ = fieldsToReturn_;
      } else {
        result.fieldsToReturn_ = fieldsToReturnBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.playablelocations.v3.sample.Criterion) {
        return mergeFrom((com.google.maps.playablelocations.v3.sample.Criterion)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.playablelocations.v3.sample.Criterion other) {
      if (other == com.google.maps.playablelocations.v3.sample.Criterion.getDefaultInstance()) return this;
      if (other.getGameObjectType() != 0) {
        setGameObjectType(other.getGameObjectType());
      }
      if (other.hasFilter()) {
        mergeFilter(other.getFilter());
      }
      if (other.hasFieldsToReturn()) {
        mergeFieldsToReturn(other.getFieldsToReturn());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.maps.playablelocations.v3.sample.Criterion parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.maps.playablelocations.v3.sample.Criterion) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int gameObjectType_ ;
    /**
     * <pre>
     * Required. An arbitrary, developer-defined identifier of the type of game
     * object that the playable location is used for. This field allows you to
     * specify criteria per game object type when searching for playable
     * locations.
     * You should assign a unique `game_object_type` ID across all
     * `request_criteria` to represent a distinct type of game object. For
     * example, 1=monster location, 2=powerup location.
     * The response contains a map&lt;game_object_type, Response&gt;.
     * </pre>
     *
     * <code>int32 game_object_type = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The gameObjectType.
     */
    @java.lang.Override
    public int getGameObjectType() {
      return gameObjectType_;
    }
    /**
     * <pre>
     * Required. An arbitrary, developer-defined identifier of the type of game
     * object that the playable location is used for. This field allows you to
     * specify criteria per game object type when searching for playable
     * locations.
     * You should assign a unique `game_object_type` ID across all
     * `request_criteria` to represent a distinct type of game object. For
     * example, 1=monster location, 2=powerup location.
     * The response contains a map&lt;game_object_type, Response&gt;.
     * </pre>
     *
     * <code>int32 game_object_type = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The gameObjectType to set.
     * @return This builder for chaining.
     */
    public Builder setGameObjectType(int value) {
      
      gameObjectType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. An arbitrary, developer-defined identifier of the type of game
     * object that the playable location is used for. This field allows you to
     * specify criteria per game object type when searching for playable
     * locations.
     * You should assign a unique `game_object_type` ID across all
     * `request_criteria` to represent a distinct type of game object. For
     * example, 1=monster location, 2=powerup location.
     * The response contains a map&lt;game_object_type, Response&gt;.
     * </pre>
     *
     * <code>int32 game_object_type = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearGameObjectType() {
      
      gameObjectType_ = 0;
      onChanged();
      return this;
    }

    private com.google.maps.playablelocations.v3.sample.Filter filter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.playablelocations.v3.sample.Filter, com.google.maps.playablelocations.v3.sample.Filter.Builder, com.google.maps.playablelocations.v3.sample.FilterOrBuilder> filterBuilder_;
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     * @return Whether the filter field is set.
     */
    public boolean hasFilter() {
      return filterBuilder_ != null || filter_ != null;
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     * @return The filter.
     */
    public com.google.maps.playablelocations.v3.sample.Filter getFilter() {
      if (filterBuilder_ == null) {
        return filter_ == null ? com.google.maps.playablelocations.v3.sample.Filter.getDefaultInstance() : filter_;
      } else {
        return filterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    public Builder setFilter(com.google.maps.playablelocations.v3.sample.Filter value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filter_ = value;
        onChanged();
      } else {
        filterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    public Builder setFilter(
        com.google.maps.playablelocations.v3.sample.Filter.Builder builderForValue) {
      if (filterBuilder_ == null) {
        filter_ = builderForValue.build();
        onChanged();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    public Builder mergeFilter(com.google.maps.playablelocations.v3.sample.Filter value) {
      if (filterBuilder_ == null) {
        if (filter_ != null) {
          filter_ =
            com.google.maps.playablelocations.v3.sample.Filter.newBuilder(filter_).mergeFrom(value).buildPartial();
        } else {
          filter_ = value;
        }
        onChanged();
      } else {
        filterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    public Builder clearFilter() {
      if (filterBuilder_ == null) {
        filter_ = null;
        onChanged();
      } else {
        filter_ = null;
        filterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    public com.google.maps.playablelocations.v3.sample.Filter.Builder getFilterBuilder() {
      
      onChanged();
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    public com.google.maps.playablelocations.v3.sample.FilterOrBuilder getFilterOrBuilder() {
      if (filterBuilder_ != null) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        return filter_ == null ?
            com.google.maps.playablelocations.v3.sample.Filter.getDefaultInstance() : filter_;
      }
    }
    /**
     * <pre>
     * Specifies filtering options, and specifies what will be included in the
     * result set.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.playablelocations.v3.sample.Filter, com.google.maps.playablelocations.v3.sample.Filter.Builder, com.google.maps.playablelocations.v3.sample.FilterOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.playablelocations.v3.sample.Filter, com.google.maps.playablelocations.v3.sample.Filter.Builder, com.google.maps.playablelocations.v3.sample.FilterOrBuilder>(
                getFilter(),
                getParentForChildren(),
                isClean());
        filter_ = null;
      }
      return filterBuilder_;
    }

    private com.google.protobuf.FieldMask fieldsToReturn_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.FieldMask, com.google.protobuf.FieldMask.Builder, com.google.protobuf.FieldMaskOrBuilder> fieldsToReturnBuilder_;
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     * @return Whether the fieldsToReturn field is set.
     */
    public boolean hasFieldsToReturn() {
      return fieldsToReturnBuilder_ != null || fieldsToReturn_ != null;
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     * @return The fieldsToReturn.
     */
    public com.google.protobuf.FieldMask getFieldsToReturn() {
      if (fieldsToReturnBuilder_ == null) {
        return fieldsToReturn_ == null ? com.google.protobuf.FieldMask.getDefaultInstance() : fieldsToReturn_;
      } else {
        return fieldsToReturnBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    public Builder setFieldsToReturn(com.google.protobuf.FieldMask value) {
      if (fieldsToReturnBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fieldsToReturn_ = value;
        onChanged();
      } else {
        fieldsToReturnBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    public Builder setFieldsToReturn(
        com.google.protobuf.FieldMask.Builder builderForValue) {
      if (fieldsToReturnBuilder_ == null) {
        fieldsToReturn_ = builderForValue.build();
        onChanged();
      } else {
        fieldsToReturnBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    public Builder mergeFieldsToReturn(com.google.protobuf.FieldMask value) {
      if (fieldsToReturnBuilder_ == null) {
        if (fieldsToReturn_ != null) {
          fieldsToReturn_ =
            com.google.protobuf.FieldMask.newBuilder(fieldsToReturn_).mergeFrom(value).buildPartial();
        } else {
          fieldsToReturn_ = value;
        }
        onChanged();
      } else {
        fieldsToReturnBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    public Builder clearFieldsToReturn() {
      if (fieldsToReturnBuilder_ == null) {
        fieldsToReturn_ = null;
        onChanged();
      } else {
        fieldsToReturn_ = null;
        fieldsToReturnBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    public com.google.protobuf.FieldMask.Builder getFieldsToReturnBuilder() {
      
      onChanged();
      return getFieldsToReturnFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    public com.google.protobuf.FieldMaskOrBuilder getFieldsToReturnOrBuilder() {
      if (fieldsToReturnBuilder_ != null) {
        return fieldsToReturnBuilder_.getMessageOrBuilder();
      } else {
        return fieldsToReturn_ == null ?
            com.google.protobuf.FieldMask.getDefaultInstance() : fieldsToReturn_;
      }
    }
    /**
     * <pre>
     * Specifies which `PlayableLocation` fields are returned.
     * `name` (which is used for logging impressions), `center_point` and
     * `place_id` (or `plus_code`) are always returned.
     * The following fields are omitted unless you specify them here:
     *   * snapped_point
     *   * types
     * Note: The more fields you include, the more expensive in terms of data and
     * associated latency your query will be.
     * </pre>
     *
     * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.FieldMask, com.google.protobuf.FieldMask.Builder, com.google.protobuf.FieldMaskOrBuilder> 
        getFieldsToReturnFieldBuilder() {
      if (fieldsToReturnBuilder_ == null) {
        fieldsToReturnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.FieldMask, com.google.protobuf.FieldMask.Builder, com.google.protobuf.FieldMaskOrBuilder>(
                getFieldsToReturn(),
                getParentForChildren(),
                isClean());
        fieldsToReturn_ = null;
      }
      return fieldsToReturnBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.maps.playablelocations.v3.sample.Criterion)
  }

  // @@protoc_insertion_point(class_scope:google.maps.playablelocations.v3.sample.Criterion)
  private static final com.google.maps.playablelocations.v3.sample.Criterion DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.maps.playablelocations.v3.sample.Criterion();
  }

  public static com.google.maps.playablelocations.v3.sample.Criterion getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Criterion>
      PARSER = new com.google.protobuf.AbstractParser<Criterion>() {
    @java.lang.Override
    public Criterion parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Criterion(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Criterion> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Criterion> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.Criterion getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

