// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/playablelocations/v3/sample/resources.proto

package com.google.maps.playablelocations.v3.sample;

public interface CriterionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.maps.playablelocations.v3.sample.Criterion)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. An arbitrary, developer-defined identifier of the type of game
   * object that the playable location is used for. This field allows you to
   * specify criteria per game object type when searching for playable
   * locations.
   * You should assign a unique `game_object_type` ID across all
   * `request_criteria` to represent a distinct type of game object. For
   * example, 1=monster location, 2=powerup location.
   * The response contains a map&lt;game_object_type, Response&gt;.
   * </pre>
   *
   * <code>int32 game_object_type = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The gameObjectType.
   */
  int getGameObjectType();

  /**
   * <pre>
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <pre>
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
   * @return The filter.
   */
  com.google.maps.playablelocations.v3.sample.Filter getFilter();
  /**
   * <pre>
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.Filter filter = 2;</code>
   */
  com.google.maps.playablelocations.v3.sample.FilterOrBuilder getFilterOrBuilder();

  /**
   * <pre>
   * Specifies which `PlayableLocation` fields are returned.
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   * The following fields are omitted unless you specify them here:
   *   * snapped_point
   *   * types
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
   * @return Whether the fieldsToReturn field is set.
   */
  boolean hasFieldsToReturn();
  /**
   * <pre>
   * Specifies which `PlayableLocation` fields are returned.
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   * The following fields are omitted unless you specify them here:
   *   * snapped_point
   *   * types
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
   * @return The fieldsToReturn.
   */
  com.google.protobuf.FieldMask getFieldsToReturn();
  /**
   * <pre>
   * Specifies which `PlayableLocation` fields are returned.
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   * The following fields are omitted unless you specify them here:
   *   * snapped_point
   *   * types
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   * </pre>
   *
   * <code>.google.protobuf.FieldMask fields_to_return = 3;</code>
   */
  com.google.protobuf.FieldMaskOrBuilder getFieldsToReturnOrBuilder();
}
