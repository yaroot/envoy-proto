// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/playablelocations/v3/playablelocations.proto

package com.google.maps.playablelocations.v3;

/**
 * <pre>
 * Life of a query:
 * - When a game starts in a new location, your game server issues a
 * [SamplePlayableLocations][google.maps.playablelocations.v3.PlayableLocations.SamplePlayableLocations]
 * request. The request specifies the S2 cell, and contains one or more
 * "criteria" for filtering:
 * - Criterion 0: i locations for long-lived bases, or level 0 monsters, or...
 * - Criterion 1: j locations for short-lived bases, or level 1 monsters, ...
 * - Criterion 2: k locations for random objects.
 * - etc (up to 5 criterion may be specified).
 * `PlayableLocationList` will then contain mutually
 * exclusive lists of `PlayableLocation` objects that satisfy each of
 * the criteria. Think of it as a collection of real-world locations that you
 * can then associate with your game state.
 * Note: These points are impermanent in nature. E.g, parks can close, and
 * places can be removed.
 * The response specifies how long you can expect the playable locations to
 * last. Once they expire, you should query the `samplePlayableLocations` API
 * again to get a fresh view of the real world.
 * </pre>
 *
 * Protobuf type {@code google.maps.playablelocations.v3.SamplePlayableLocationsRequest}
 */
public final class SamplePlayableLocationsRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.maps.playablelocations.v3.SamplePlayableLocationsRequest)
    SamplePlayableLocationsRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SamplePlayableLocationsRequest.newBuilder() to construct.
  private SamplePlayableLocationsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SamplePlayableLocationsRequest() {
    criteria_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SamplePlayableLocationsRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_SamplePlayableLocationsRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_SamplePlayableLocationsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.class, com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.Builder.class);
  }

  public static final int AREA_FILTER_FIELD_NUMBER = 1;
  private com.google.maps.playablelocations.v3.sample.AreaFilter areaFilter_;
  /**
   * <pre>
   * Required. Specifies the area to search within for playable locations.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the areaFilter field is set.
   */
  @java.lang.Override
  public boolean hasAreaFilter() {
    return areaFilter_ != null;
  }
  /**
   * <pre>
   * Required. Specifies the area to search within for playable locations.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The areaFilter.
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.AreaFilter getAreaFilter() {
    return areaFilter_ == null ? com.google.maps.playablelocations.v3.sample.AreaFilter.getDefaultInstance() : areaFilter_;
  }
  /**
   * <pre>
   * Required. Specifies the area to search within for playable locations.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.AreaFilterOrBuilder getAreaFilterOrBuilder() {
    return areaFilter_ == null ? com.google.maps.playablelocations.v3.sample.AreaFilter.getDefaultInstance() : areaFilter_;
  }

  public static final int CRITERIA_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.google.maps.playablelocations.v3.sample.Criterion> criteria_;
  /**
   * <pre>
   * Required. Specifies one or more (up to 5) criteria for filtering the
   * returned playable locations.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public java.util.List<com.google.maps.playablelocations.v3.sample.Criterion> getCriteriaList() {
    return criteria_;
  }
  /**
   * <pre>
   * Required. Specifies one or more (up to 5) criteria for filtering the
   * returned playable locations.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.maps.playablelocations.v3.sample.CriterionOrBuilder> 
      getCriteriaOrBuilderList() {
    return criteria_;
  }
  /**
   * <pre>
   * Required. Specifies one or more (up to 5) criteria for filtering the
   * returned playable locations.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public int getCriteriaCount() {
    return criteria_.size();
  }
  /**
   * <pre>
   * Required. Specifies one or more (up to 5) criteria for filtering the
   * returned playable locations.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.Criterion getCriteria(int index) {
    return criteria_.get(index);
  }
  /**
   * <pre>
   * Required. Specifies one or more (up to 5) criteria for filtering the
   * returned playable locations.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.sample.CriterionOrBuilder getCriteriaOrBuilder(
      int index) {
    return criteria_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (areaFilter_ != null) {
      output.writeMessage(1, getAreaFilter());
    }
    for (int i = 0; i < criteria_.size(); i++) {
      output.writeMessage(2, criteria_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (areaFilter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getAreaFilter());
    }
    for (int i = 0; i < criteria_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, criteria_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest)) {
      return super.equals(obj);
    }
    com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest other = (com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest) obj;

    if (hasAreaFilter() != other.hasAreaFilter()) return false;
    if (hasAreaFilter()) {
      if (!getAreaFilter()
          .equals(other.getAreaFilter())) return false;
    }
    if (!getCriteriaList()
        .equals(other.getCriteriaList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasAreaFilter()) {
      hash = (37 * hash) + AREA_FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getAreaFilter().hashCode();
    }
    if (getCriteriaCount() > 0) {
      hash = (37 * hash) + CRITERIA_FIELD_NUMBER;
      hash = (53 * hash) + getCriteriaList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Life of a query:
   * - When a game starts in a new location, your game server issues a
   * [SamplePlayableLocations][google.maps.playablelocations.v3.PlayableLocations.SamplePlayableLocations]
   * request. The request specifies the S2 cell, and contains one or more
   * "criteria" for filtering:
   * - Criterion 0: i locations for long-lived bases, or level 0 monsters, or...
   * - Criterion 1: j locations for short-lived bases, or level 1 monsters, ...
   * - Criterion 2: k locations for random objects.
   * - etc (up to 5 criterion may be specified).
   * `PlayableLocationList` will then contain mutually
   * exclusive lists of `PlayableLocation` objects that satisfy each of
   * the criteria. Think of it as a collection of real-world locations that you
   * can then associate with your game state.
   * Note: These points are impermanent in nature. E.g, parks can close, and
   * places can be removed.
   * The response specifies how long you can expect the playable locations to
   * last. Once they expire, you should query the `samplePlayableLocations` API
   * again to get a fresh view of the real world.
   * </pre>
   *
   * Protobuf type {@code google.maps.playablelocations.v3.SamplePlayableLocationsRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.maps.playablelocations.v3.SamplePlayableLocationsRequest)
      com.google.maps.playablelocations.v3.SamplePlayableLocationsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_SamplePlayableLocationsRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_SamplePlayableLocationsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.class, com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.Builder.class);
    }

    // Construct using com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      areaFilter_ = null;
      if (areaFilterBuilder_ != null) {
        areaFilterBuilder_.dispose();
        areaFilterBuilder_ = null;
      }
      if (criteriaBuilder_ == null) {
        criteria_ = java.util.Collections.emptyList();
      } else {
        criteria_ = null;
        criteriaBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_SamplePlayableLocationsRequest_descriptor;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest getDefaultInstanceForType() {
      return com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest build() {
      com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest buildPartial() {
      com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest result = new com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest result) {
      if (criteriaBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          criteria_ = java.util.Collections.unmodifiableList(criteria_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.criteria_ = criteria_;
      } else {
        result.criteria_ = criteriaBuilder_.build();
      }
    }

    private void buildPartial0(com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.areaFilter_ = areaFilterBuilder_ == null
            ? areaFilter_
            : areaFilterBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest) {
        return mergeFrom((com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest other) {
      if (other == com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest.getDefaultInstance()) return this;
      if (other.hasAreaFilter()) {
        mergeAreaFilter(other.getAreaFilter());
      }
      if (criteriaBuilder_ == null) {
        if (!other.criteria_.isEmpty()) {
          if (criteria_.isEmpty()) {
            criteria_ = other.criteria_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCriteriaIsMutable();
            criteria_.addAll(other.criteria_);
          }
          onChanged();
        }
      } else {
        if (!other.criteria_.isEmpty()) {
          if (criteriaBuilder_.isEmpty()) {
            criteriaBuilder_.dispose();
            criteriaBuilder_ = null;
            criteria_ = other.criteria_;
            bitField0_ = (bitField0_ & ~0x00000002);
            criteriaBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCriteriaFieldBuilder() : null;
          } else {
            criteriaBuilder_.addAllMessages(other.criteria_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getAreaFilterFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.maps.playablelocations.v3.sample.Criterion m =
                  input.readMessage(
                      com.google.maps.playablelocations.v3.sample.Criterion.parser(),
                      extensionRegistry);
              if (criteriaBuilder_ == null) {
                ensureCriteriaIsMutable();
                criteria_.add(m);
              } else {
                criteriaBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.maps.playablelocations.v3.sample.AreaFilter areaFilter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.playablelocations.v3.sample.AreaFilter, com.google.maps.playablelocations.v3.sample.AreaFilter.Builder, com.google.maps.playablelocations.v3.sample.AreaFilterOrBuilder> areaFilterBuilder_;
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the areaFilter field is set.
     */
    public boolean hasAreaFilter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The areaFilter.
     */
    public com.google.maps.playablelocations.v3.sample.AreaFilter getAreaFilter() {
      if (areaFilterBuilder_ == null) {
        return areaFilter_ == null ? com.google.maps.playablelocations.v3.sample.AreaFilter.getDefaultInstance() : areaFilter_;
      } else {
        return areaFilterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setAreaFilter(com.google.maps.playablelocations.v3.sample.AreaFilter value) {
      if (areaFilterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        areaFilter_ = value;
      } else {
        areaFilterBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setAreaFilter(
        com.google.maps.playablelocations.v3.sample.AreaFilter.Builder builderForValue) {
      if (areaFilterBuilder_ == null) {
        areaFilter_ = builderForValue.build();
      } else {
        areaFilterBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeAreaFilter(com.google.maps.playablelocations.v3.sample.AreaFilter value) {
      if (areaFilterBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          areaFilter_ != null &&
          areaFilter_ != com.google.maps.playablelocations.v3.sample.AreaFilter.getDefaultInstance()) {
          getAreaFilterBuilder().mergeFrom(value);
        } else {
          areaFilter_ = value;
        }
      } else {
        areaFilterBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearAreaFilter() {
      bitField0_ = (bitField0_ & ~0x00000001);
      areaFilter_ = null;
      if (areaFilterBuilder_ != null) {
        areaFilterBuilder_.dispose();
        areaFilterBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.AreaFilter.Builder getAreaFilterBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getAreaFilterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.AreaFilterOrBuilder getAreaFilterOrBuilder() {
      if (areaFilterBuilder_ != null) {
        return areaFilterBuilder_.getMessageOrBuilder();
      } else {
        return areaFilter_ == null ?
            com.google.maps.playablelocations.v3.sample.AreaFilter.getDefaultInstance() : areaFilter_;
      }
    }
    /**
     * <pre>
     * Required. Specifies the area to search within for playable locations.
     * </pre>
     *
     * <code>.google.maps.playablelocations.v3.sample.AreaFilter area_filter = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.playablelocations.v3.sample.AreaFilter, com.google.maps.playablelocations.v3.sample.AreaFilter.Builder, com.google.maps.playablelocations.v3.sample.AreaFilterOrBuilder> 
        getAreaFilterFieldBuilder() {
      if (areaFilterBuilder_ == null) {
        areaFilterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.playablelocations.v3.sample.AreaFilter, com.google.maps.playablelocations.v3.sample.AreaFilter.Builder, com.google.maps.playablelocations.v3.sample.AreaFilterOrBuilder>(
                getAreaFilter(),
                getParentForChildren(),
                isClean());
        areaFilter_ = null;
      }
      return areaFilterBuilder_;
    }

    private java.util.List<com.google.maps.playablelocations.v3.sample.Criterion> criteria_ =
      java.util.Collections.emptyList();
    private void ensureCriteriaIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        criteria_ = new java.util.ArrayList<com.google.maps.playablelocations.v3.sample.Criterion>(criteria_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.maps.playablelocations.v3.sample.Criterion, com.google.maps.playablelocations.v3.sample.Criterion.Builder, com.google.maps.playablelocations.v3.sample.CriterionOrBuilder> criteriaBuilder_;

    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<com.google.maps.playablelocations.v3.sample.Criterion> getCriteriaList() {
      if (criteriaBuilder_ == null) {
        return java.util.Collections.unmodifiableList(criteria_);
      } else {
        return criteriaBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getCriteriaCount() {
      if (criteriaBuilder_ == null) {
        return criteria_.size();
      } else {
        return criteriaBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.Criterion getCriteria(int index) {
      if (criteriaBuilder_ == null) {
        return criteria_.get(index);
      } else {
        return criteriaBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setCriteria(
        int index, com.google.maps.playablelocations.v3.sample.Criterion value) {
      if (criteriaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCriteriaIsMutable();
        criteria_.set(index, value);
        onChanged();
      } else {
        criteriaBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setCriteria(
        int index, com.google.maps.playablelocations.v3.sample.Criterion.Builder builderForValue) {
      if (criteriaBuilder_ == null) {
        ensureCriteriaIsMutable();
        criteria_.set(index, builderForValue.build());
        onChanged();
      } else {
        criteriaBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addCriteria(com.google.maps.playablelocations.v3.sample.Criterion value) {
      if (criteriaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCriteriaIsMutable();
        criteria_.add(value);
        onChanged();
      } else {
        criteriaBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addCriteria(
        int index, com.google.maps.playablelocations.v3.sample.Criterion value) {
      if (criteriaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCriteriaIsMutable();
        criteria_.add(index, value);
        onChanged();
      } else {
        criteriaBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addCriteria(
        com.google.maps.playablelocations.v3.sample.Criterion.Builder builderForValue) {
      if (criteriaBuilder_ == null) {
        ensureCriteriaIsMutable();
        criteria_.add(builderForValue.build());
        onChanged();
      } else {
        criteriaBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addCriteria(
        int index, com.google.maps.playablelocations.v3.sample.Criterion.Builder builderForValue) {
      if (criteriaBuilder_ == null) {
        ensureCriteriaIsMutable();
        criteria_.add(index, builderForValue.build());
        onChanged();
      } else {
        criteriaBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllCriteria(
        java.lang.Iterable<? extends com.google.maps.playablelocations.v3.sample.Criterion> values) {
      if (criteriaBuilder_ == null) {
        ensureCriteriaIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, criteria_);
        onChanged();
      } else {
        criteriaBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearCriteria() {
      if (criteriaBuilder_ == null) {
        criteria_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        criteriaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder removeCriteria(int index) {
      if (criteriaBuilder_ == null) {
        ensureCriteriaIsMutable();
        criteria_.remove(index);
        onChanged();
      } else {
        criteriaBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.Criterion.Builder getCriteriaBuilder(
        int index) {
      return getCriteriaFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.CriterionOrBuilder getCriteriaOrBuilder(
        int index) {
      if (criteriaBuilder_ == null) {
        return criteria_.get(index);  } else {
        return criteriaBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<? extends com.google.maps.playablelocations.v3.sample.CriterionOrBuilder> 
         getCriteriaOrBuilderList() {
      if (criteriaBuilder_ != null) {
        return criteriaBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(criteria_);
      }
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.Criterion.Builder addCriteriaBuilder() {
      return getCriteriaFieldBuilder().addBuilder(
          com.google.maps.playablelocations.v3.sample.Criterion.getDefaultInstance());
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.sample.Criterion.Builder addCriteriaBuilder(
        int index) {
      return getCriteriaFieldBuilder().addBuilder(
          index, com.google.maps.playablelocations.v3.sample.Criterion.getDefaultInstance());
    }
    /**
     * <pre>
     * Required. Specifies one or more (up to 5) criteria for filtering the
     * returned playable locations.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.sample.Criterion criteria = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<com.google.maps.playablelocations.v3.sample.Criterion.Builder> 
         getCriteriaBuilderList() {
      return getCriteriaFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.maps.playablelocations.v3.sample.Criterion, com.google.maps.playablelocations.v3.sample.Criterion.Builder, com.google.maps.playablelocations.v3.sample.CriterionOrBuilder> 
        getCriteriaFieldBuilder() {
      if (criteriaBuilder_ == null) {
        criteriaBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.maps.playablelocations.v3.sample.Criterion, com.google.maps.playablelocations.v3.sample.Criterion.Builder, com.google.maps.playablelocations.v3.sample.CriterionOrBuilder>(
                criteria_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        criteria_ = null;
      }
      return criteriaBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.maps.playablelocations.v3.SamplePlayableLocationsRequest)
  }

  // @@protoc_insertion_point(class_scope:google.maps.playablelocations.v3.SamplePlayableLocationsRequest)
  private static final com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest();
  }

  public static com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SamplePlayableLocationsRequest>
      PARSER = new com.google.protobuf.AbstractParser<SamplePlayableLocationsRequest>() {
    @java.lang.Override
    public SamplePlayableLocationsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SamplePlayableLocationsRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SamplePlayableLocationsRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.playablelocations.v3.SamplePlayableLocationsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

