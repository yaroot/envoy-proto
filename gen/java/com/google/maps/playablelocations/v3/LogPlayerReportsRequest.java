// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/playablelocations/v3/playablelocations.proto

package com.google.maps.playablelocations.v3;

/**
 * <pre>
 * A request for logging your player's bad location reports.
 * </pre>
 *
 * Protobuf type {@code google.maps.playablelocations.v3.LogPlayerReportsRequest}
 */
public final class LogPlayerReportsRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.maps.playablelocations.v3.LogPlayerReportsRequest)
    LogPlayerReportsRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LogPlayerReportsRequest.newBuilder() to construct.
  private LogPlayerReportsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LogPlayerReportsRequest() {
    playerReports_ = java.util.Collections.emptyList();
    requestId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LogPlayerReportsRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LogPlayerReportsRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              playerReports_ = new java.util.ArrayList<com.google.maps.playablelocations.v3.PlayerReport>();
              mutable_bitField0_ |= 0x00000001;
            }
            playerReports_.add(
                input.readMessage(com.google.maps.playablelocations.v3.PlayerReport.parser(), extensionRegistry));
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            requestId_ = s;
            break;
          }
          case 26: {
            com.google.maps.unity.ClientInfo.Builder subBuilder = null;
            if (clientInfo_ != null) {
              subBuilder = clientInfo_.toBuilder();
            }
            clientInfo_ = input.readMessage(com.google.maps.unity.ClientInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(clientInfo_);
              clientInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        playerReports_ = java.util.Collections.unmodifiableList(playerReports_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_LogPlayerReportsRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_LogPlayerReportsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.playablelocations.v3.LogPlayerReportsRequest.class, com.google.maps.playablelocations.v3.LogPlayerReportsRequest.Builder.class);
  }

  public static final int PLAYER_REPORTS_FIELD_NUMBER = 1;
  private java.util.List<com.google.maps.playablelocations.v3.PlayerReport> playerReports_;
  /**
   * <pre>
   * Required. Player reports. The maximum number of player reports that you can
   * log at once is 50.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public java.util.List<com.google.maps.playablelocations.v3.PlayerReport> getPlayerReportsList() {
    return playerReports_;
  }
  /**
   * <pre>
   * Required. Player reports. The maximum number of player reports that you can
   * log at once is 50.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.maps.playablelocations.v3.PlayerReportOrBuilder> 
      getPlayerReportsOrBuilderList() {
    return playerReports_;
  }
  /**
   * <pre>
   * Required. Player reports. The maximum number of player reports that you can
   * log at once is 50.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public int getPlayerReportsCount() {
    return playerReports_.size();
  }
  /**
   * <pre>
   * Required. Player reports. The maximum number of player reports that you can
   * log at once is 50.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.PlayerReport getPlayerReports(int index) {
    return playerReports_.get(index);
  }
  /**
   * <pre>
   * Required. Player reports. The maximum number of player reports that you can
   * log at once is 50.
   * </pre>
   *
   * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.maps.playablelocations.v3.PlayerReportOrBuilder getPlayerReportsOrBuilder(
      int index) {
    return playerReports_.get(index);
  }

  public static final int REQUEST_ID_FIELD_NUMBER = 2;
  private volatile java.lang.Object requestId_;
  /**
   * <pre>
   * Required. A string that uniquely identifies the log player reports request.
   * This allows you to detect duplicate requests. We recommend that you use
   * UUIDs for this value. The value must not exceed 50 characters.
   * You should reuse the `request_id` only when retrying a request in the case
   * of a failure. In that case, the request must be identical to the one that
   * failed.
   * </pre>
   *
   * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The requestId.
   */
  @java.lang.Override
  public java.lang.String getRequestId() {
    java.lang.Object ref = requestId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      requestId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. A string that uniquely identifies the log player reports request.
   * This allows you to detect duplicate requests. We recommend that you use
   * UUIDs for this value. The value must not exceed 50 characters.
   * You should reuse the `request_id` only when retrying a request in the case
   * of a failure. In that case, the request must be identical to the one that
   * failed.
   * </pre>
   *
   * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for requestId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRequestIdBytes() {
    java.lang.Object ref = requestId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      requestId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CLIENT_INFO_FIELD_NUMBER = 3;
  private com.google.maps.unity.ClientInfo clientInfo_;
  /**
   * <pre>
   * Required. Information about the client device (for example, device model
   * and operating system).
   * </pre>
   *
   * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the clientInfo field is set.
   */
  @java.lang.Override
  public boolean hasClientInfo() {
    return clientInfo_ != null;
  }
  /**
   * <pre>
   * Required. Information about the client device (for example, device model
   * and operating system).
   * </pre>
   *
   * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The clientInfo.
   */
  @java.lang.Override
  public com.google.maps.unity.ClientInfo getClientInfo() {
    return clientInfo_ == null ? com.google.maps.unity.ClientInfo.getDefaultInstance() : clientInfo_;
  }
  /**
   * <pre>
   * Required. Information about the client device (for example, device model
   * and operating system).
   * </pre>
   *
   * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.maps.unity.ClientInfoOrBuilder getClientInfoOrBuilder() {
    return getClientInfo();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < playerReports_.size(); i++) {
      output.writeMessage(1, playerReports_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(requestId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, requestId_);
    }
    if (clientInfo_ != null) {
      output.writeMessage(3, getClientInfo());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < playerReports_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, playerReports_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(requestId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, requestId_);
    }
    if (clientInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getClientInfo());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.maps.playablelocations.v3.LogPlayerReportsRequest)) {
      return super.equals(obj);
    }
    com.google.maps.playablelocations.v3.LogPlayerReportsRequest other = (com.google.maps.playablelocations.v3.LogPlayerReportsRequest) obj;

    if (!getPlayerReportsList()
        .equals(other.getPlayerReportsList())) return false;
    if (!getRequestId()
        .equals(other.getRequestId())) return false;
    if (hasClientInfo() != other.hasClientInfo()) return false;
    if (hasClientInfo()) {
      if (!getClientInfo()
          .equals(other.getClientInfo())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getPlayerReportsCount() > 0) {
      hash = (37 * hash) + PLAYER_REPORTS_FIELD_NUMBER;
      hash = (53 * hash) + getPlayerReportsList().hashCode();
    }
    hash = (37 * hash) + REQUEST_ID_FIELD_NUMBER;
    hash = (53 * hash) + getRequestId().hashCode();
    if (hasClientInfo()) {
      hash = (37 * hash) + CLIENT_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getClientInfo().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.maps.playablelocations.v3.LogPlayerReportsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A request for logging your player's bad location reports.
   * </pre>
   *
   * Protobuf type {@code google.maps.playablelocations.v3.LogPlayerReportsRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.maps.playablelocations.v3.LogPlayerReportsRequest)
      com.google.maps.playablelocations.v3.LogPlayerReportsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_LogPlayerReportsRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_LogPlayerReportsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.playablelocations.v3.LogPlayerReportsRequest.class, com.google.maps.playablelocations.v3.LogPlayerReportsRequest.Builder.class);
    }

    // Construct using com.google.maps.playablelocations.v3.LogPlayerReportsRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPlayerReportsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (playerReportsBuilder_ == null) {
        playerReports_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        playerReportsBuilder_.clear();
      }
      requestId_ = "";

      if (clientInfoBuilder_ == null) {
        clientInfo_ = null;
      } else {
        clientInfo_ = null;
        clientInfoBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.maps.playablelocations.v3.PlayableLocationsProto.internal_static_google_maps_playablelocations_v3_LogPlayerReportsRequest_descriptor;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.LogPlayerReportsRequest getDefaultInstanceForType() {
      return com.google.maps.playablelocations.v3.LogPlayerReportsRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.LogPlayerReportsRequest build() {
      com.google.maps.playablelocations.v3.LogPlayerReportsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.playablelocations.v3.LogPlayerReportsRequest buildPartial() {
      com.google.maps.playablelocations.v3.LogPlayerReportsRequest result = new com.google.maps.playablelocations.v3.LogPlayerReportsRequest(this);
      int from_bitField0_ = bitField0_;
      if (playerReportsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          playerReports_ = java.util.Collections.unmodifiableList(playerReports_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.playerReports_ = playerReports_;
      } else {
        result.playerReports_ = playerReportsBuilder_.build();
      }
      result.requestId_ = requestId_;
      if (clientInfoBuilder_ == null) {
        result.clientInfo_ = clientInfo_;
      } else {
        result.clientInfo_ = clientInfoBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.playablelocations.v3.LogPlayerReportsRequest) {
        return mergeFrom((com.google.maps.playablelocations.v3.LogPlayerReportsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.playablelocations.v3.LogPlayerReportsRequest other) {
      if (other == com.google.maps.playablelocations.v3.LogPlayerReportsRequest.getDefaultInstance()) return this;
      if (playerReportsBuilder_ == null) {
        if (!other.playerReports_.isEmpty()) {
          if (playerReports_.isEmpty()) {
            playerReports_ = other.playerReports_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePlayerReportsIsMutable();
            playerReports_.addAll(other.playerReports_);
          }
          onChanged();
        }
      } else {
        if (!other.playerReports_.isEmpty()) {
          if (playerReportsBuilder_.isEmpty()) {
            playerReportsBuilder_.dispose();
            playerReportsBuilder_ = null;
            playerReports_ = other.playerReports_;
            bitField0_ = (bitField0_ & ~0x00000001);
            playerReportsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPlayerReportsFieldBuilder() : null;
          } else {
            playerReportsBuilder_.addAllMessages(other.playerReports_);
          }
        }
      }
      if (!other.getRequestId().isEmpty()) {
        requestId_ = other.requestId_;
        onChanged();
      }
      if (other.hasClientInfo()) {
        mergeClientInfo(other.getClientInfo());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.maps.playablelocations.v3.LogPlayerReportsRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.maps.playablelocations.v3.LogPlayerReportsRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.maps.playablelocations.v3.PlayerReport> playerReports_ =
      java.util.Collections.emptyList();
    private void ensurePlayerReportsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        playerReports_ = new java.util.ArrayList<com.google.maps.playablelocations.v3.PlayerReport>(playerReports_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.maps.playablelocations.v3.PlayerReport, com.google.maps.playablelocations.v3.PlayerReport.Builder, com.google.maps.playablelocations.v3.PlayerReportOrBuilder> playerReportsBuilder_;

    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<com.google.maps.playablelocations.v3.PlayerReport> getPlayerReportsList() {
      if (playerReportsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(playerReports_);
      } else {
        return playerReportsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public int getPlayerReportsCount() {
      if (playerReportsBuilder_ == null) {
        return playerReports_.size();
      } else {
        return playerReportsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.PlayerReport getPlayerReports(int index) {
      if (playerReportsBuilder_ == null) {
        return playerReports_.get(index);
      } else {
        return playerReportsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setPlayerReports(
        int index, com.google.maps.playablelocations.v3.PlayerReport value) {
      if (playerReportsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlayerReportsIsMutable();
        playerReports_.set(index, value);
        onChanged();
      } else {
        playerReportsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setPlayerReports(
        int index, com.google.maps.playablelocations.v3.PlayerReport.Builder builderForValue) {
      if (playerReportsBuilder_ == null) {
        ensurePlayerReportsIsMutable();
        playerReports_.set(index, builderForValue.build());
        onChanged();
      } else {
        playerReportsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addPlayerReports(com.google.maps.playablelocations.v3.PlayerReport value) {
      if (playerReportsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlayerReportsIsMutable();
        playerReports_.add(value);
        onChanged();
      } else {
        playerReportsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addPlayerReports(
        int index, com.google.maps.playablelocations.v3.PlayerReport value) {
      if (playerReportsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlayerReportsIsMutable();
        playerReports_.add(index, value);
        onChanged();
      } else {
        playerReportsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addPlayerReports(
        com.google.maps.playablelocations.v3.PlayerReport.Builder builderForValue) {
      if (playerReportsBuilder_ == null) {
        ensurePlayerReportsIsMutable();
        playerReports_.add(builderForValue.build());
        onChanged();
      } else {
        playerReportsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addPlayerReports(
        int index, com.google.maps.playablelocations.v3.PlayerReport.Builder builderForValue) {
      if (playerReportsBuilder_ == null) {
        ensurePlayerReportsIsMutable();
        playerReports_.add(index, builderForValue.build());
        onChanged();
      } else {
        playerReportsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder addAllPlayerReports(
        java.lang.Iterable<? extends com.google.maps.playablelocations.v3.PlayerReport> values) {
      if (playerReportsBuilder_ == null) {
        ensurePlayerReportsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, playerReports_);
        onChanged();
      } else {
        playerReportsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearPlayerReports() {
      if (playerReportsBuilder_ == null) {
        playerReports_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        playerReportsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder removePlayerReports(int index) {
      if (playerReportsBuilder_ == null) {
        ensurePlayerReportsIsMutable();
        playerReports_.remove(index);
        onChanged();
      } else {
        playerReportsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.PlayerReport.Builder getPlayerReportsBuilder(
        int index) {
      return getPlayerReportsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.PlayerReportOrBuilder getPlayerReportsOrBuilder(
        int index) {
      if (playerReportsBuilder_ == null) {
        return playerReports_.get(index);  } else {
        return playerReportsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<? extends com.google.maps.playablelocations.v3.PlayerReportOrBuilder> 
         getPlayerReportsOrBuilderList() {
      if (playerReportsBuilder_ != null) {
        return playerReportsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(playerReports_);
      }
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.PlayerReport.Builder addPlayerReportsBuilder() {
      return getPlayerReportsFieldBuilder().addBuilder(
          com.google.maps.playablelocations.v3.PlayerReport.getDefaultInstance());
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.playablelocations.v3.PlayerReport.Builder addPlayerReportsBuilder(
        int index) {
      return getPlayerReportsFieldBuilder().addBuilder(
          index, com.google.maps.playablelocations.v3.PlayerReport.getDefaultInstance());
    }
    /**
     * <pre>
     * Required. Player reports. The maximum number of player reports that you can
     * log at once is 50.
     * </pre>
     *
     * <code>repeated .google.maps.playablelocations.v3.PlayerReport player_reports = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public java.util.List<com.google.maps.playablelocations.v3.PlayerReport.Builder> 
         getPlayerReportsBuilderList() {
      return getPlayerReportsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.maps.playablelocations.v3.PlayerReport, com.google.maps.playablelocations.v3.PlayerReport.Builder, com.google.maps.playablelocations.v3.PlayerReportOrBuilder> 
        getPlayerReportsFieldBuilder() {
      if (playerReportsBuilder_ == null) {
        playerReportsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.maps.playablelocations.v3.PlayerReport, com.google.maps.playablelocations.v3.PlayerReport.Builder, com.google.maps.playablelocations.v3.PlayerReportOrBuilder>(
                playerReports_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        playerReports_ = null;
      }
      return playerReportsBuilder_;
    }

    private java.lang.Object requestId_ = "";
    /**
     * <pre>
     * Required. A string that uniquely identifies the log player reports request.
     * This allows you to detect duplicate requests. We recommend that you use
     * UUIDs for this value. The value must not exceed 50 characters.
     * You should reuse the `request_id` only when retrying a request in the case
     * of a failure. In that case, the request must be identical to the one that
     * failed.
     * </pre>
     *
     * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The requestId.
     */
    public java.lang.String getRequestId() {
      java.lang.Object ref = requestId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        requestId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. A string that uniquely identifies the log player reports request.
     * This allows you to detect duplicate requests. We recommend that you use
     * UUIDs for this value. The value must not exceed 50 characters.
     * You should reuse the `request_id` only when retrying a request in the case
     * of a failure. In that case, the request must be identical to the one that
     * failed.
     * </pre>
     *
     * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The bytes for requestId.
     */
    public com.google.protobuf.ByteString
        getRequestIdBytes() {
      java.lang.Object ref = requestId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        requestId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. A string that uniquely identifies the log player reports request.
     * This allows you to detect duplicate requests. We recommend that you use
     * UUIDs for this value. The value must not exceed 50 characters.
     * You should reuse the `request_id` only when retrying a request in the case
     * of a failure. In that case, the request must be identical to the one that
     * failed.
     * </pre>
     *
     * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The requestId to set.
     * @return This builder for chaining.
     */
    public Builder setRequestId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      requestId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. A string that uniquely identifies the log player reports request.
     * This allows you to detect duplicate requests. We recommend that you use
     * UUIDs for this value. The value must not exceed 50 characters.
     * You should reuse the `request_id` only when retrying a request in the case
     * of a failure. In that case, the request must be identical to the one that
     * failed.
     * </pre>
     *
     * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestId() {
      
      requestId_ = getDefaultInstance().getRequestId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. A string that uniquely identifies the log player reports request.
     * This allows you to detect duplicate requests. We recommend that you use
     * UUIDs for this value. The value must not exceed 50 characters.
     * You should reuse the `request_id` only when retrying a request in the case
     * of a failure. In that case, the request must be identical to the one that
     * failed.
     * </pre>
     *
     * <code>string request_id = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The bytes for requestId to set.
     * @return This builder for chaining.
     */
    public Builder setRequestIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      requestId_ = value;
      onChanged();
      return this;
    }

    private com.google.maps.unity.ClientInfo clientInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.unity.ClientInfo, com.google.maps.unity.ClientInfo.Builder, com.google.maps.unity.ClientInfoOrBuilder> clientInfoBuilder_;
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the clientInfo field is set.
     */
    public boolean hasClientInfo() {
      return clientInfoBuilder_ != null || clientInfo_ != null;
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The clientInfo.
     */
    public com.google.maps.unity.ClientInfo getClientInfo() {
      if (clientInfoBuilder_ == null) {
        return clientInfo_ == null ? com.google.maps.unity.ClientInfo.getDefaultInstance() : clientInfo_;
      } else {
        return clientInfoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setClientInfo(com.google.maps.unity.ClientInfo value) {
      if (clientInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        clientInfo_ = value;
        onChanged();
      } else {
        clientInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setClientInfo(
        com.google.maps.unity.ClientInfo.Builder builderForValue) {
      if (clientInfoBuilder_ == null) {
        clientInfo_ = builderForValue.build();
        onChanged();
      } else {
        clientInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeClientInfo(com.google.maps.unity.ClientInfo value) {
      if (clientInfoBuilder_ == null) {
        if (clientInfo_ != null) {
          clientInfo_ =
            com.google.maps.unity.ClientInfo.newBuilder(clientInfo_).mergeFrom(value).buildPartial();
        } else {
          clientInfo_ = value;
        }
        onChanged();
      } else {
        clientInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearClientInfo() {
      if (clientInfoBuilder_ == null) {
        clientInfo_ = null;
        onChanged();
      } else {
        clientInfo_ = null;
        clientInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.unity.ClientInfo.Builder getClientInfoBuilder() {
      
      onChanged();
      return getClientInfoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.maps.unity.ClientInfoOrBuilder getClientInfoOrBuilder() {
      if (clientInfoBuilder_ != null) {
        return clientInfoBuilder_.getMessageOrBuilder();
      } else {
        return clientInfo_ == null ?
            com.google.maps.unity.ClientInfo.getDefaultInstance() : clientInfo_;
      }
    }
    /**
     * <pre>
     * Required. Information about the client device (for example, device model
     * and operating system).
     * </pre>
     *
     * <code>.google.maps.unity.ClientInfo client_info = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.maps.unity.ClientInfo, com.google.maps.unity.ClientInfo.Builder, com.google.maps.unity.ClientInfoOrBuilder> 
        getClientInfoFieldBuilder() {
      if (clientInfoBuilder_ == null) {
        clientInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.maps.unity.ClientInfo, com.google.maps.unity.ClientInfo.Builder, com.google.maps.unity.ClientInfoOrBuilder>(
                getClientInfo(),
                getParentForChildren(),
                isClean());
        clientInfo_ = null;
      }
      return clientInfoBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.maps.playablelocations.v3.LogPlayerReportsRequest)
  }

  // @@protoc_insertion_point(class_scope:google.maps.playablelocations.v3.LogPlayerReportsRequest)
  private static final com.google.maps.playablelocations.v3.LogPlayerReportsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.maps.playablelocations.v3.LogPlayerReportsRequest();
  }

  public static com.google.maps.playablelocations.v3.LogPlayerReportsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LogPlayerReportsRequest>
      PARSER = new com.google.protobuf.AbstractParser<LogPlayerReportsRequest>() {
    @java.lang.Override
    public LogPlayerReportsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LogPlayerReportsRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LogPlayerReportsRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LogPlayerReportsRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.playablelocations.v3.LogPlayerReportsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

