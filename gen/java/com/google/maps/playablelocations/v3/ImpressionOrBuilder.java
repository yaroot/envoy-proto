// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/playablelocations/v3/resources.proto

package com.google.maps.playablelocations.v3;

public interface ImpressionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.maps.playablelocations.v3.Impression)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The name of the playable location.
   * </pre>
   *
   * <code>string location_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The locationName.
   */
  java.lang.String getLocationName();
  /**
   * <pre>
   * Required. The name of the playable location.
   * </pre>
   *
   * <code>string location_name = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The bytes for locationName.
   */
  com.google.protobuf.ByteString
      getLocationNameBytes();

  /**
   * <pre>
   * Required. The type of impression event.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.Impression.ImpressionType impression_type = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for impressionType.
   */
  int getImpressionTypeValue();
  /**
   * <pre>
   * Required. The type of impression event.
   * </pre>
   *
   * <code>.google.maps.playablelocations.v3.Impression.ImpressionType impression_type = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The impressionType.
   */
  com.google.maps.playablelocations.v3.Impression.ImpressionType getImpressionType();

  /**
   * <pre>
   * An arbitrary, developer-defined type identifier for each type of game
   * object used in your game.
   * Since players interact with differ types of game objects in different ways,
   * this field allows you to segregate impression data by type for analysis.
   * You should assign a unique `game_object_type` ID to represent a distinct
   * type of game object in your game.
   * For example, 1=monster location, 2=powerup location.
   * </pre>
   *
   * <code>int32 game_object_type = 4;</code>
   * @return The gameObjectType.
   */
  int getGameObjectType();
}
