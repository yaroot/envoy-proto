// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/regionlookup/v1alpha/region_identifier.proto

package com.google.maps.regionlookup.v1alpha;

/**
 * <pre>
 * Region Identifier.
 * Identifies a region to look up.
 * One of place or unit_code must be specified. If none is specified,
 * an INVALID_ARGUMENT error is returned. region_code must also be specified
 * except when place_type is "country".
 * place and unit_code specify a location to match a Place ID to. For
 * example if place is "California" and region_code "US" the API
 * returns the following matched_place_id results when the following
 * place_types are specified:
 * place_type:                   matched_place_id results:
 * administrative_area_level_1   Place ID for The State of California
 * (All other supported types)   No Match
 * If unit_code is "6" (FIPs code for California) and region_code is "US
 * the API returns the following matched_place_id results when the
 * following place_types are specified:
 * place type:                   matched_place_id results:
 * administrative_area_level_1   Place ID for The State of California
 * (All other supported types)   No Match
 * or if unit_code is "US" the API returns the following results when
 * the following place_types are specified:
 * place type:                   matched_place_id results:
 * country                       Place ID for the United States
 * (All other supported types)   No Match
 * If no match is found, matched_place_id is not set.
 * Candidate Place IDs are returned when a lookup finds a region with a
 * different place_type then the one requested. For example if place is
 * "California" and place_type is "country" the Place ID for The State of
 * California is returned as a candidate in the candidate_place_ids field.
 * Next available tag: 10
 * </pre>
 *
 * Protobuf type {@code google.maps.regionlookup.v1alpha.RegionIdentifier}
 */
public final class RegionIdentifier extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.maps.regionlookup.v1alpha.RegionIdentifier)
    RegionIdentifierOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RegionIdentifier.newBuilder() to construct.
  private RegionIdentifier(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RegionIdentifier() {
    placeType_ = 0;
    languageCode_ = "";
    regionCode_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RegionIdentifier();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.maps.regionlookup.v1alpha.RegionIdentifierProto.internal_static_google_maps_regionlookup_v1alpha_RegionIdentifier_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.maps.regionlookup.v1alpha.RegionIdentifierProto.internal_static_google_maps_regionlookup_v1alpha_RegionIdentifier_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.maps.regionlookup.v1alpha.RegionIdentifier.class, com.google.maps.regionlookup.v1alpha.RegionIdentifier.Builder.class);
  }

  /**
   * <pre>
   * Possible place types to match to.
   * </pre>
   *
   * Protobuf enum {@code google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType}
   */
  public enum PlaceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>PLACE_TYPE_UNSPECIFIED = 0;</code>
     */
    PLACE_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * Postal code.
     * </pre>
     *
     * <code>POSTAL_CODE = 1;</code>
     */
    POSTAL_CODE(1),
    /**
     * <pre>
     * Administrative area level 1 (State in the US).
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_1 = 2;</code>
     */
    ADMINISTRATIVE_AREA_LEVEL_1(2),
    /**
     * <pre>
     * Administrative area level 2 (County in the US).
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_2 = 3;</code>
     */
    ADMINISTRATIVE_AREA_LEVEL_2(3),
    /**
     * <pre>
     * Locality (City).
     * </pre>
     *
     * <code>LOCALITY = 4;</code>
     */
    LOCALITY(4),
    /**
     * <pre>
     * Neighborhood.
     * </pre>
     *
     * <code>NEIGHBORHOOD = 5;</code>
     */
    NEIGHBORHOOD(5),
    /**
     * <pre>
     * Country.
     * </pre>
     *
     * <code>COUNTRY = 6;</code>
     */
    COUNTRY(6),
    /**
     * <pre>
     * Sublocality.
     * </pre>
     *
     * <code>SUBLOCALITY = 7;</code>
     */
    SUBLOCALITY(7),
    /**
     * <pre>
     * Administrative area level 3.
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_3 = 8;</code>
     */
    ADMINISTRATIVE_AREA_LEVEL_3(8),
    /**
     * <pre>
     * Administrative area level 4.
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_4 = 9;</code>
     */
    ADMINISTRATIVE_AREA_LEVEL_4(9),
    /**
     * <pre>
     * School district.
     * </pre>
     *
     * <code>SCHOOL_DISTRICT = 10;</code>
     */
    SCHOOL_DISTRICT(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Default value. This value is unused.
     * </pre>
     *
     * <code>PLACE_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int PLACE_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Postal code.
     * </pre>
     *
     * <code>POSTAL_CODE = 1;</code>
     */
    public static final int POSTAL_CODE_VALUE = 1;
    /**
     * <pre>
     * Administrative area level 1 (State in the US).
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_1 = 2;</code>
     */
    public static final int ADMINISTRATIVE_AREA_LEVEL_1_VALUE = 2;
    /**
     * <pre>
     * Administrative area level 2 (County in the US).
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_2 = 3;</code>
     */
    public static final int ADMINISTRATIVE_AREA_LEVEL_2_VALUE = 3;
    /**
     * <pre>
     * Locality (City).
     * </pre>
     *
     * <code>LOCALITY = 4;</code>
     */
    public static final int LOCALITY_VALUE = 4;
    /**
     * <pre>
     * Neighborhood.
     * </pre>
     *
     * <code>NEIGHBORHOOD = 5;</code>
     */
    public static final int NEIGHBORHOOD_VALUE = 5;
    /**
     * <pre>
     * Country.
     * </pre>
     *
     * <code>COUNTRY = 6;</code>
     */
    public static final int COUNTRY_VALUE = 6;
    /**
     * <pre>
     * Sublocality.
     * </pre>
     *
     * <code>SUBLOCALITY = 7;</code>
     */
    public static final int SUBLOCALITY_VALUE = 7;
    /**
     * <pre>
     * Administrative area level 3.
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_3 = 8;</code>
     */
    public static final int ADMINISTRATIVE_AREA_LEVEL_3_VALUE = 8;
    /**
     * <pre>
     * Administrative area level 4.
     * </pre>
     *
     * <code>ADMINISTRATIVE_AREA_LEVEL_4 = 9;</code>
     */
    public static final int ADMINISTRATIVE_AREA_LEVEL_4_VALUE = 9;
    /**
     * <pre>
     * School district.
     * </pre>
     *
     * <code>SCHOOL_DISTRICT = 10;</code>
     */
    public static final int SCHOOL_DISTRICT_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PlaceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PlaceType forNumber(int value) {
      switch (value) {
        case 0: return PLACE_TYPE_UNSPECIFIED;
        case 1: return POSTAL_CODE;
        case 2: return ADMINISTRATIVE_AREA_LEVEL_1;
        case 3: return ADMINISTRATIVE_AREA_LEVEL_2;
        case 4: return LOCALITY;
        case 5: return NEIGHBORHOOD;
        case 6: return COUNTRY;
        case 7: return SUBLOCALITY;
        case 8: return ADMINISTRATIVE_AREA_LEVEL_3;
        case 9: return ADMINISTRATIVE_AREA_LEVEL_4;
        case 10: return SCHOOL_DISTRICT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlaceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PlaceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlaceType>() {
            public PlaceType findValueByNumber(int number) {
              return PlaceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.google.maps.regionlookup.v1alpha.RegionIdentifier.getDescriptor().getEnumTypes().get(0);
    }

    private static final PlaceType[] VALUES = values();

    public static PlaceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PlaceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType)
  }

  private int locationCase_ = 0;
  private java.lang.Object location_;
  public enum LocationCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PLACE(4),
    UNIT_CODE(5),
    LOCATION_NOT_SET(0);
    private final int value;
    private LocationCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LocationCase valueOf(int value) {
      return forNumber(value);
    }

    public static LocationCase forNumber(int value) {
      switch (value) {
        case 4: return PLACE;
        case 5: return UNIT_CODE;
        case 0: return LOCATION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public LocationCase
  getLocationCase() {
    return LocationCase.forNumber(
        locationCase_);
  }

  public static final int PLACE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * The name of the region to match to a Place ID.
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   * If place_type is "postal_code", a valid place can be "94109".
   * If place_type is "country", a valid place can be "United States".
   * etc.
   * region_code is required when place is specified except when
   * place_type is "country".
   * </pre>
   *
   * <code>string place = 4;</code>
   * @return Whether the place field is set.
   */
  public boolean hasPlace() {
    return locationCase_ == 4;
  }
  /**
   * <pre>
   * The name of the region to match to a Place ID.
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   * If place_type is "postal_code", a valid place can be "94109".
   * If place_type is "country", a valid place can be "United States".
   * etc.
   * region_code is required when place is specified except when
   * place_type is "country".
   * </pre>
   *
   * <code>string place = 4;</code>
   * @return The place.
   */
  public java.lang.String getPlace() {
    java.lang.Object ref = "";
    if (locationCase_ == 4) {
      ref = location_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (locationCase_ == 4) {
        location_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The name of the region to match to a Place ID.
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   * If place_type is "postal_code", a valid place can be "94109".
   * If place_type is "country", a valid place can be "United States".
   * etc.
   * region_code is required when place is specified except when
   * place_type is "country".
   * </pre>
   *
   * <code>string place = 4;</code>
   * @return The bytes for place.
   */
  public com.google.protobuf.ByteString
      getPlaceBytes() {
    java.lang.Object ref = "";
    if (locationCase_ == 4) {
      ref = location_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (locationCase_ == 4) {
        location_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int UNIT_CODE_FIELD_NUMBER = 5;
  /**
   * <pre>
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   * </pre>
   *
   * <code>string unit_code = 5;</code>
   * @return Whether the unitCode field is set.
   */
  public boolean hasUnitCode() {
    return locationCase_ == 5;
  }
  /**
   * <pre>
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   * </pre>
   *
   * <code>string unit_code = 5;</code>
   * @return The unitCode.
   */
  public java.lang.String getUnitCode() {
    java.lang.Object ref = "";
    if (locationCase_ == 5) {
      ref = location_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (locationCase_ == 5) {
        location_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   * </pre>
   *
   * <code>string unit_code = 5;</code>
   * @return The bytes for unitCode.
   */
  public com.google.protobuf.ByteString
      getUnitCodeBytes() {
    java.lang.Object ref = "";
    if (locationCase_ == 5) {
      ref = location_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (locationCase_ == 5) {
        location_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PLACE_TYPE_FIELD_NUMBER = 6;
  private int placeType_ = 0;
  /**
   * <pre>
   * Required. Place type to match.
   * </pre>
   *
   * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for placeType.
   */
  @java.lang.Override public int getPlaceTypeValue() {
    return placeType_;
  }
  /**
   * <pre>
   * Required. Place type to match.
   * </pre>
   *
   * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The placeType.
   */
  @java.lang.Override public com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType getPlaceType() {
    com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType result = com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType.forNumber(placeType_);
    return result == null ? com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType.UNRECOGNIZED : result;
  }

  public static final int LANGUAGE_CODE_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object languageCode_ = "";
  /**
   * <pre>
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   * </pre>
   *
   * <code>string language_code = 7;</code>
   * @return The languageCode.
   */
  @java.lang.Override
  public java.lang.String getLanguageCode() {
    java.lang.Object ref = languageCode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      languageCode_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   * </pre>
   *
   * <code>string language_code = 7;</code>
   * @return The bytes for languageCode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLanguageCodeBytes() {
    java.lang.Object ref = languageCode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      languageCode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REGION_CODE_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private volatile java.lang.Object regionCode_ = "";
  /**
   * <pre>
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is optional if place_type is "country".
   * </pre>
   *
   * <code>string region_code = 8;</code>
   * @return The regionCode.
   */
  @java.lang.Override
  public java.lang.String getRegionCode() {
    java.lang.Object ref = regionCode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      regionCode_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is optional if place_type is "country".
   * </pre>
   *
   * <code>string region_code = 8;</code>
   * @return The bytes for regionCode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRegionCodeBytes() {
    java.lang.Object ref = regionCode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      regionCode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (locationCase_ == 4) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, location_);
    }
    if (locationCase_ == 5) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, location_);
    }
    if (placeType_ != com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType.PLACE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(6, placeType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(languageCode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, languageCode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(regionCode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, regionCode_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (locationCase_ == 4) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, location_);
    }
    if (locationCase_ == 5) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, location_);
    }
    if (placeType_ != com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType.PLACE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, placeType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(languageCode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, languageCode_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(regionCode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, regionCode_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.maps.regionlookup.v1alpha.RegionIdentifier)) {
      return super.equals(obj);
    }
    com.google.maps.regionlookup.v1alpha.RegionIdentifier other = (com.google.maps.regionlookup.v1alpha.RegionIdentifier) obj;

    if (placeType_ != other.placeType_) return false;
    if (!getLanguageCode()
        .equals(other.getLanguageCode())) return false;
    if (!getRegionCode()
        .equals(other.getRegionCode())) return false;
    if (!getLocationCase().equals(other.getLocationCase())) return false;
    switch (locationCase_) {
      case 4:
        if (!getPlace()
            .equals(other.getPlace())) return false;
        break;
      case 5:
        if (!getUnitCode()
            .equals(other.getUnitCode())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PLACE_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + placeType_;
    hash = (37 * hash) + LANGUAGE_CODE_FIELD_NUMBER;
    hash = (53 * hash) + getLanguageCode().hashCode();
    hash = (37 * hash) + REGION_CODE_FIELD_NUMBER;
    hash = (53 * hash) + getRegionCode().hashCode();
    switch (locationCase_) {
      case 4:
        hash = (37 * hash) + PLACE_FIELD_NUMBER;
        hash = (53 * hash) + getPlace().hashCode();
        break;
      case 5:
        hash = (37 * hash) + UNIT_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getUnitCode().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.maps.regionlookup.v1alpha.RegionIdentifier prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Region Identifier.
   * Identifies a region to look up.
   * One of place or unit_code must be specified. If none is specified,
   * an INVALID_ARGUMENT error is returned. region_code must also be specified
   * except when place_type is "country".
   * place and unit_code specify a location to match a Place ID to. For
   * example if place is "California" and region_code "US" the API
   * returns the following matched_place_id results when the following
   * place_types are specified:
   * place_type:                   matched_place_id results:
   * administrative_area_level_1   Place ID for The State of California
   * (All other supported types)   No Match
   * If unit_code is "6" (FIPs code for California) and region_code is "US
   * the API returns the following matched_place_id results when the
   * following place_types are specified:
   * place type:                   matched_place_id results:
   * administrative_area_level_1   Place ID for The State of California
   * (All other supported types)   No Match
   * or if unit_code is "US" the API returns the following results when
   * the following place_types are specified:
   * place type:                   matched_place_id results:
   * country                       Place ID for the United States
   * (All other supported types)   No Match
   * If no match is found, matched_place_id is not set.
   * Candidate Place IDs are returned when a lookup finds a region with a
   * different place_type then the one requested. For example if place is
   * "California" and place_type is "country" the Place ID for The State of
   * California is returned as a candidate in the candidate_place_ids field.
   * Next available tag: 10
   * </pre>
   *
   * Protobuf type {@code google.maps.regionlookup.v1alpha.RegionIdentifier}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.maps.regionlookup.v1alpha.RegionIdentifier)
      com.google.maps.regionlookup.v1alpha.RegionIdentifierOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.maps.regionlookup.v1alpha.RegionIdentifierProto.internal_static_google_maps_regionlookup_v1alpha_RegionIdentifier_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.maps.regionlookup.v1alpha.RegionIdentifierProto.internal_static_google_maps_regionlookup_v1alpha_RegionIdentifier_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.maps.regionlookup.v1alpha.RegionIdentifier.class, com.google.maps.regionlookup.v1alpha.RegionIdentifier.Builder.class);
    }

    // Construct using com.google.maps.regionlookup.v1alpha.RegionIdentifier.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      placeType_ = 0;
      languageCode_ = "";
      regionCode_ = "";
      locationCase_ = 0;
      location_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.maps.regionlookup.v1alpha.RegionIdentifierProto.internal_static_google_maps_regionlookup_v1alpha_RegionIdentifier_descriptor;
    }

    @java.lang.Override
    public com.google.maps.regionlookup.v1alpha.RegionIdentifier getDefaultInstanceForType() {
      return com.google.maps.regionlookup.v1alpha.RegionIdentifier.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.maps.regionlookup.v1alpha.RegionIdentifier build() {
      com.google.maps.regionlookup.v1alpha.RegionIdentifier result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.maps.regionlookup.v1alpha.RegionIdentifier buildPartial() {
      com.google.maps.regionlookup.v1alpha.RegionIdentifier result = new com.google.maps.regionlookup.v1alpha.RegionIdentifier(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.maps.regionlookup.v1alpha.RegionIdentifier result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.placeType_ = placeType_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.languageCode_ = languageCode_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.regionCode_ = regionCode_;
      }
    }

    private void buildPartialOneofs(com.google.maps.regionlookup.v1alpha.RegionIdentifier result) {
      result.locationCase_ = locationCase_;
      result.location_ = this.location_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.maps.regionlookup.v1alpha.RegionIdentifier) {
        return mergeFrom((com.google.maps.regionlookup.v1alpha.RegionIdentifier)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.maps.regionlookup.v1alpha.RegionIdentifier other) {
      if (other == com.google.maps.regionlookup.v1alpha.RegionIdentifier.getDefaultInstance()) return this;
      if (other.placeType_ != 0) {
        setPlaceTypeValue(other.getPlaceTypeValue());
      }
      if (!other.getLanguageCode().isEmpty()) {
        languageCode_ = other.languageCode_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (!other.getRegionCode().isEmpty()) {
        regionCode_ = other.regionCode_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      switch (other.getLocationCase()) {
        case PLACE: {
          locationCase_ = 4;
          location_ = other.location_;
          onChanged();
          break;
        }
        case UNIT_CODE: {
          locationCase_ = 5;
          location_ = other.location_;
          onChanged();
          break;
        }
        case LOCATION_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              locationCase_ = 4;
              location_ = s;
              break;
            } // case 34
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              locationCase_ = 5;
              location_ = s;
              break;
            } // case 42
            case 48: {
              placeType_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 48
            case 58: {
              languageCode_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 58
            case 66: {
              regionCode_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000010;
              break;
            } // case 66
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int locationCase_ = 0;
    private java.lang.Object location_;
    public LocationCase
        getLocationCase() {
      return LocationCase.forNumber(
          locationCase_);
    }

    public Builder clearLocation() {
      locationCase_ = 0;
      location_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <pre>
     * The name of the region to match to a Place ID.
     * The place field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "locality", a valid place can be "Palo Alto, CA".
     * If place_type is "postal_code", a valid place can be "94109".
     * If place_type is "country", a valid place can be "United States".
     * etc.
     * region_code is required when place is specified except when
     * place_type is "country".
     * </pre>
     *
     * <code>string place = 4;</code>
     * @return Whether the place field is set.
     */
    @java.lang.Override
    public boolean hasPlace() {
      return locationCase_ == 4;
    }
    /**
     * <pre>
     * The name of the region to match to a Place ID.
     * The place field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "locality", a valid place can be "Palo Alto, CA".
     * If place_type is "postal_code", a valid place can be "94109".
     * If place_type is "country", a valid place can be "United States".
     * etc.
     * region_code is required when place is specified except when
     * place_type is "country".
     * </pre>
     *
     * <code>string place = 4;</code>
     * @return The place.
     */
    @java.lang.Override
    public java.lang.String getPlace() {
      java.lang.Object ref = "";
      if (locationCase_ == 4) {
        ref = location_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (locationCase_ == 4) {
          location_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the region to match to a Place ID.
     * The place field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "locality", a valid place can be "Palo Alto, CA".
     * If place_type is "postal_code", a valid place can be "94109".
     * If place_type is "country", a valid place can be "United States".
     * etc.
     * region_code is required when place is specified except when
     * place_type is "country".
     * </pre>
     *
     * <code>string place = 4;</code>
     * @return The bytes for place.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPlaceBytes() {
      java.lang.Object ref = "";
      if (locationCase_ == 4) {
        ref = location_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (locationCase_ == 4) {
          location_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the region to match to a Place ID.
     * The place field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "locality", a valid place can be "Palo Alto, CA".
     * If place_type is "postal_code", a valid place can be "94109".
     * If place_type is "country", a valid place can be "United States".
     * etc.
     * region_code is required when place is specified except when
     * place_type is "country".
     * </pre>
     *
     * <code>string place = 4;</code>
     * @param value The place to set.
     * @return This builder for chaining.
     */
    public Builder setPlace(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      locationCase_ = 4;
      location_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the region to match to a Place ID.
     * The place field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "locality", a valid place can be "Palo Alto, CA".
     * If place_type is "postal_code", a valid place can be "94109".
     * If place_type is "country", a valid place can be "United States".
     * etc.
     * region_code is required when place is specified except when
     * place_type is "country".
     * </pre>
     *
     * <code>string place = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPlace() {
      if (locationCase_ == 4) {
        locationCase_ = 0;
        location_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The name of the region to match to a Place ID.
     * The place field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "locality", a valid place can be "Palo Alto, CA".
     * If place_type is "postal_code", a valid place can be "94109".
     * If place_type is "country", a valid place can be "United States".
     * etc.
     * region_code is required when place is specified except when
     * place_type is "country".
     * </pre>
     *
     * <code>string place = 4;</code>
     * @param value The bytes for place to set.
     * @return This builder for chaining.
     */
    public Builder setPlaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      locationCase_ = 4;
      location_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
     * matched.
     * The unit_code field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
     * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
     * Brazil).
     * If place_type is "administrative_area_level_1" (state) and region_code is
     * "US", a valid unit_code can be "6" (FIPs code for California) or
     * "12"(FIPs code for Florida).
     * If place_type is "administrative_area_level_2" (county) and region_code
     * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
     * California) or "12086" (FIPs code for Miami-Dade County in Florida).
     * region_code is required when specifying a FIPs code. region_code is
     * ignored for ISO-3166-1 country codes.
     * </pre>
     *
     * <code>string unit_code = 5;</code>
     * @return Whether the unitCode field is set.
     */
    @java.lang.Override
    public boolean hasUnitCode() {
      return locationCase_ == 5;
    }
    /**
     * <pre>
     * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
     * matched.
     * The unit_code field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
     * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
     * Brazil).
     * If place_type is "administrative_area_level_1" (state) and region_code is
     * "US", a valid unit_code can be "6" (FIPs code for California) or
     * "12"(FIPs code for Florida).
     * If place_type is "administrative_area_level_2" (county) and region_code
     * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
     * California) or "12086" (FIPs code for Miami-Dade County in Florida).
     * region_code is required when specifying a FIPs code. region_code is
     * ignored for ISO-3166-1 country codes.
     * </pre>
     *
     * <code>string unit_code = 5;</code>
     * @return The unitCode.
     */
    @java.lang.Override
    public java.lang.String getUnitCode() {
      java.lang.Object ref = "";
      if (locationCase_ == 5) {
        ref = location_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (locationCase_ == 5) {
          location_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
     * matched.
     * The unit_code field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
     * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
     * Brazil).
     * If place_type is "administrative_area_level_1" (state) and region_code is
     * "US", a valid unit_code can be "6" (FIPs code for California) or
     * "12"(FIPs code for Florida).
     * If place_type is "administrative_area_level_2" (county) and region_code
     * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
     * California) or "12086" (FIPs code for Miami-Dade County in Florida).
     * region_code is required when specifying a FIPs code. region_code is
     * ignored for ISO-3166-1 country codes.
     * </pre>
     *
     * <code>string unit_code = 5;</code>
     * @return The bytes for unitCode.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnitCodeBytes() {
      java.lang.Object ref = "";
      if (locationCase_ == 5) {
        ref = location_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (locationCase_ == 5) {
          location_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
     * matched.
     * The unit_code field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
     * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
     * Brazil).
     * If place_type is "administrative_area_level_1" (state) and region_code is
     * "US", a valid unit_code can be "6" (FIPs code for California) or
     * "12"(FIPs code for Florida).
     * If place_type is "administrative_area_level_2" (county) and region_code
     * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
     * California) or "12086" (FIPs code for Miami-Dade County in Florida).
     * region_code is required when specifying a FIPs code. region_code is
     * ignored for ISO-3166-1 country codes.
     * </pre>
     *
     * <code>string unit_code = 5;</code>
     * @param value The unitCode to set.
     * @return This builder for chaining.
     */
    public Builder setUnitCode(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      locationCase_ = 5;
      location_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
     * matched.
     * The unit_code field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
     * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
     * Brazil).
     * If place_type is "administrative_area_level_1" (state) and region_code is
     * "US", a valid unit_code can be "6" (FIPs code for California) or
     * "12"(FIPs code for Florida).
     * If place_type is "administrative_area_level_2" (county) and region_code
     * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
     * California) or "12086" (FIPs code for Miami-Dade County in Florida).
     * region_code is required when specifying a FIPs code. region_code is
     * ignored for ISO-3166-1 country codes.
     * </pre>
     *
     * <code>string unit_code = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnitCode() {
      if (locationCase_ == 5) {
        locationCase_ = 0;
        location_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
     * matched.
     * The unit_code field is used in combination with place_type to look up
     * the region Place ID.
     * For example:
     * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
     * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
     * Brazil).
     * If place_type is "administrative_area_level_1" (state) and region_code is
     * "US", a valid unit_code can be "6" (FIPs code for California) or
     * "12"(FIPs code for Florida).
     * If place_type is "administrative_area_level_2" (county) and region_code
     * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
     * California) or "12086" (FIPs code for Miami-Dade County in Florida).
     * region_code is required when specifying a FIPs code. region_code is
     * ignored for ISO-3166-1 country codes.
     * </pre>
     *
     * <code>string unit_code = 5;</code>
     * @param value The bytes for unitCode to set.
     * @return This builder for chaining.
     */
    public Builder setUnitCodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      locationCase_ = 5;
      location_ = value;
      onChanged();
      return this;
    }

    private int placeType_ = 0;
    /**
     * <pre>
     * Required. Place type to match.
     * </pre>
     *
     * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The enum numeric value on the wire for placeType.
     */
    @java.lang.Override public int getPlaceTypeValue() {
      return placeType_;
    }
    /**
     * <pre>
     * Required. Place type to match.
     * </pre>
     *
     * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The enum numeric value on the wire for placeType to set.
     * @return This builder for chaining.
     */
    public Builder setPlaceTypeValue(int value) {
      placeType_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Place type to match.
     * </pre>
     *
     * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The placeType.
     */
    @java.lang.Override
    public com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType getPlaceType() {
      com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType result = com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType.forNumber(placeType_);
      return result == null ? com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Required. Place type to match.
     * </pre>
     *
     * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The placeType to set.
     * @return This builder for chaining.
     */
    public Builder setPlaceType(com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      placeType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Place type to match.
     * </pre>
     *
     * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearPlaceType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      placeType_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object languageCode_ = "";
    /**
     * <pre>
     * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
     * the language in which the place name and address is requested. If none is
     * requested, then it defaults to English.
     * </pre>
     *
     * <code>string language_code = 7;</code>
     * @return The languageCode.
     */
    public java.lang.String getLanguageCode() {
      java.lang.Object ref = languageCode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        languageCode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
     * the language in which the place name and address is requested. If none is
     * requested, then it defaults to English.
     * </pre>
     *
     * <code>string language_code = 7;</code>
     * @return The bytes for languageCode.
     */
    public com.google.protobuf.ByteString
        getLanguageCodeBytes() {
      java.lang.Object ref = languageCode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        languageCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
     * the language in which the place name and address is requested. If none is
     * requested, then it defaults to English.
     * </pre>
     *
     * <code>string language_code = 7;</code>
     * @param value The languageCode to set.
     * @return This builder for chaining.
     */
    public Builder setLanguageCode(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      languageCode_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
     * the language in which the place name and address is requested. If none is
     * requested, then it defaults to English.
     * </pre>
     *
     * <code>string language_code = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearLanguageCode() {
      languageCode_ = getDefaultInstance().getLanguageCode();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
     * the language in which the place name and address is requested. If none is
     * requested, then it defaults to English.
     * </pre>
     *
     * <code>string language_code = 7;</code>
     * @param value The bytes for languageCode to set.
     * @return This builder for chaining.
     */
    public Builder setLanguageCodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      languageCode_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private java.lang.Object regionCode_ = "";
    /**
     * <pre>
     * Two-letter ISO-3166 country/region code for the location you're trying to
     * match. region_code is optional if place_type is "country".
     * </pre>
     *
     * <code>string region_code = 8;</code>
     * @return The regionCode.
     */
    public java.lang.String getRegionCode() {
      java.lang.Object ref = regionCode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        regionCode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Two-letter ISO-3166 country/region code for the location you're trying to
     * match. region_code is optional if place_type is "country".
     * </pre>
     *
     * <code>string region_code = 8;</code>
     * @return The bytes for regionCode.
     */
    public com.google.protobuf.ByteString
        getRegionCodeBytes() {
      java.lang.Object ref = regionCode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        regionCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Two-letter ISO-3166 country/region code for the location you're trying to
     * match. region_code is optional if place_type is "country".
     * </pre>
     *
     * <code>string region_code = 8;</code>
     * @param value The regionCode to set.
     * @return This builder for chaining.
     */
    public Builder setRegionCode(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      regionCode_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Two-letter ISO-3166 country/region code for the location you're trying to
     * match. region_code is optional if place_type is "country".
     * </pre>
     *
     * <code>string region_code = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearRegionCode() {
      regionCode_ = getDefaultInstance().getRegionCode();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Two-letter ISO-3166 country/region code for the location you're trying to
     * match. region_code is optional if place_type is "country".
     * </pre>
     *
     * <code>string region_code = 8;</code>
     * @param value The bytes for regionCode to set.
     * @return This builder for chaining.
     */
    public Builder setRegionCodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      regionCode_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.maps.regionlookup.v1alpha.RegionIdentifier)
  }

  // @@protoc_insertion_point(class_scope:google.maps.regionlookup.v1alpha.RegionIdentifier)
  private static final com.google.maps.regionlookup.v1alpha.RegionIdentifier DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.maps.regionlookup.v1alpha.RegionIdentifier();
  }

  public static com.google.maps.regionlookup.v1alpha.RegionIdentifier getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RegionIdentifier>
      PARSER = new com.google.protobuf.AbstractParser<RegionIdentifier>() {
    @java.lang.Override
    public RegionIdentifier parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<RegionIdentifier> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RegionIdentifier> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.maps.regionlookup.v1alpha.RegionIdentifier getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

