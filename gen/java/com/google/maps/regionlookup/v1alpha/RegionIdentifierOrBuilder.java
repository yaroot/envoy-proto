// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/regionlookup/v1alpha/region_identifier.proto

package com.google.maps.regionlookup.v1alpha;

public interface RegionIdentifierOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.maps.regionlookup.v1alpha.RegionIdentifier)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the region to match to a Place ID.
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   * If place_type is "postal_code", a valid place can be "94109".
   * If place_type is "country", a valid place can be "United States".
   * etc.
   * region_code is required when place is specified except when
   * place_type is "country".
   * </pre>
   *
   * <code>string place = 4;</code>
   * @return Whether the place field is set.
   */
  boolean hasPlace();
  /**
   * <pre>
   * The name of the region to match to a Place ID.
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   * If place_type is "postal_code", a valid place can be "94109".
   * If place_type is "country", a valid place can be "United States".
   * etc.
   * region_code is required when place is specified except when
   * place_type is "country".
   * </pre>
   *
   * <code>string place = 4;</code>
   * @return The place.
   */
  java.lang.String getPlace();
  /**
   * <pre>
   * The name of the region to match to a Place ID.
   * The place field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "locality", a valid place can be "Palo Alto, CA".
   * If place_type is "postal_code", a valid place can be "94109".
   * If place_type is "country", a valid place can be "United States".
   * etc.
   * region_code is required when place is specified except when
   * place_type is "country".
   * </pre>
   *
   * <code>string place = 4;</code>
   * @return The bytes for place.
   */
  com.google.protobuf.ByteString
      getPlaceBytes();

  /**
   * <pre>
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   * </pre>
   *
   * <code>string unit_code = 5;</code>
   * @return Whether the unitCode field is set.
   */
  boolean hasUnitCode();
  /**
   * <pre>
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   * </pre>
   *
   * <code>string unit_code = 5;</code>
   * @return The unitCode.
   */
  java.lang.String getUnitCode();
  /**
   * <pre>
   * The FIPs state or county codes (US only) or ISO-3166-1 country code to be
   * matched.
   * The unit_code field is used in combination with place_type to look up
   * the region Place ID.
   * For example:
   * If place_type is "country", a valid unit_code can be "US" (ISO-3166-1
   * Alpha-2 code for United States) or "BR" (ISO-3166-1 Alpha-2 code for
   * Brazil).
   * If place_type is "administrative_area_level_1" (state) and region_code is
   * "US", a valid unit_code can be "6" (FIPs code for California) or
   * "12"(FIPs code for Florida).
   * If place_type is "administrative_area_level_2" (county) and region_code
   * is "US", a valid unit_code can be "6001" (FIPs code for Alameda County in
   * California) or "12086" (FIPs code for Miami-Dade County in Florida).
   * region_code is required when specifying a FIPs code. region_code is
   * ignored for ISO-3166-1 country codes.
   * </pre>
   *
   * <code>string unit_code = 5;</code>
   * @return The bytes for unitCode.
   */
  com.google.protobuf.ByteString
      getUnitCodeBytes();

  /**
   * <pre>
   * Required. Place type to match.
   * </pre>
   *
   * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for placeType.
   */
  int getPlaceTypeValue();
  /**
   * <pre>
   * Required. Place type to match.
   * </pre>
   *
   * <code>.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType place_type = 6 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The placeType.
   */
  com.google.maps.regionlookup.v1alpha.RegionIdentifier.PlaceType getPlaceType();

  /**
   * <pre>
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   * </pre>
   *
   * <code>string language_code = 7;</code>
   * @return The languageCode.
   */
  java.lang.String getLanguageCode();
  /**
   * <pre>
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   * </pre>
   *
   * <code>string language_code = 7;</code>
   * @return The bytes for languageCode.
   */
  com.google.protobuf.ByteString
      getLanguageCodeBytes();

  /**
   * <pre>
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is optional if place_type is "country".
   * </pre>
   *
   * <code>string region_code = 8;</code>
   * @return The regionCode.
   */
  java.lang.String getRegionCode();
  /**
   * <pre>
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is optional if place_type is "country".
   * </pre>
   *
   * <code>string region_code = 8;</code>
   * @return The bytes for regionCode.
   */
  com.google.protobuf.ByteString
      getRegionCodeBytes();

  public com.google.maps.regionlookup.v1alpha.RegionIdentifier.LocationCase getLocationCase();
}
