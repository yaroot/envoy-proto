// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

package com.google.devtools.remoteworkers.v1test2;

public interface LeaseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.Lease)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A short string uniquely identifing the lease within this bot session.
   * </pre>
   *
   * <code>string id = 7;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * A short string uniquely identifing the lease within this bot session.
   * </pre>
   *
   * <code>string id = 7;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * The actual work to be performed, if any. May be omitted by the server if
   * the lease is not in the `PENDING` state. The message must be meaningful to
   * the bot. Output only (must only be set by the server).
   * </pre>
   *
   * <code>.google.protobuf.Any payload = 8;</code>
   * @return Whether the payload field is set.
   */
  boolean hasPayload();
  /**
   * <pre>
   * The actual work to be performed, if any. May be omitted by the server if
   * the lease is not in the `PENDING` state. The message must be meaningful to
   * the bot. Output only (must only be set by the server).
   * </pre>
   *
   * <code>.google.protobuf.Any payload = 8;</code>
   * @return The payload.
   */
  com.google.protobuf.Any getPayload();
  /**
   * <pre>
   * The actual work to be performed, if any. May be omitted by the server if
   * the lease is not in the `PENDING` state. The message must be meaningful to
   * the bot. Output only (must only be set by the server).
   * </pre>
   *
   * <code>.google.protobuf.Any payload = 8;</code>
   */
  com.google.protobuf.AnyOrBuilder getPayloadOrBuilder();

  /**
   * <pre>
   * Any result the bot wishes to provide about the lease. Must not be changed
   * after the first call with the lease in the `COMPLETED` or `CANCELLED`
   * state. Input only (must only be set by the bot, will not be echoed by the
   * server).
   * </pre>
   *
   * <code>.google.protobuf.Any result = 9;</code>
   * @return Whether the result field is set.
   */
  boolean hasResult();
  /**
   * <pre>
   * Any result the bot wishes to provide about the lease. Must not be changed
   * after the first call with the lease in the `COMPLETED` or `CANCELLED`
   * state. Input only (must only be set by the bot, will not be echoed by the
   * server).
   * </pre>
   *
   * <code>.google.protobuf.Any result = 9;</code>
   * @return The result.
   */
  com.google.protobuf.Any getResult();
  /**
   * <pre>
   * Any result the bot wishes to provide about the lease. Must not be changed
   * after the first call with the lease in the `COMPLETED` or `CANCELLED`
   * state. Input only (must only be set by the bot, will not be echoed by the
   * server).
   * </pre>
   *
   * <code>.google.protobuf.Any result = 9;</code>
   */
  com.google.protobuf.AnyOrBuilder getResultOrBuilder();

  /**
   * <pre>
   * The state of the lease. See LeaseState for more information.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.LeaseState state = 2;</code>
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();
  /**
   * <pre>
   * The state of the lease. See LeaseState for more information.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.LeaseState state = 2;</code>
   * @return The state.
   */
  com.google.devtools.remoteworkers.v1test2.LeaseState getState();

  /**
   * <pre>
   * The final status of the lease (should be populated by the bot if the state
   * is completed). This is the status of the lease, not of any task represented
   * by the lease. For example, if the bot could not accept the lease because it
   * asked for some resource the bot didn't have, this status will be
   * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
   * correctly, this field will be `OK` while the failure of the assignment must
   * communicated via the `result` field.
   * </pre>
   *
   * <code>.google.rpc.Status status = 3;</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * The final status of the lease (should be populated by the bot if the state
   * is completed). This is the status of the lease, not of any task represented
   * by the lease. For example, if the bot could not accept the lease because it
   * asked for some resource the bot didn't have, this status will be
   * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
   * correctly, this field will be `OK` while the failure of the assignment must
   * communicated via the `result` field.
   * </pre>
   *
   * <code>.google.rpc.Status status = 3;</code>
   * @return The status.
   */
  com.google.rpc.Status getStatus();
  /**
   * <pre>
   * The final status of the lease (should be populated by the bot if the state
   * is completed). This is the status of the lease, not of any task represented
   * by the lease. For example, if the bot could not accept the lease because it
   * asked for some resource the bot didn't have, this status will be
   * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
   * correctly, this field will be `OK` while the failure of the assignment must
   * communicated via the `result` field.
   * </pre>
   *
   * <code>.google.rpc.Status status = 3;</code>
   */
  com.google.rpc.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * The requirements that are being claimed by this lease. This field may be
   * omitted by the server if the lease is not pending.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker requirements = 4;</code>
   * @return Whether the requirements field is set.
   */
  boolean hasRequirements();
  /**
   * <pre>
   * The requirements that are being claimed by this lease. This field may be
   * omitted by the server if the lease is not pending.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker requirements = 4;</code>
   * @return The requirements.
   */
  com.google.devtools.remoteworkers.v1test2.Worker getRequirements();
  /**
   * <pre>
   * The requirements that are being claimed by this lease. This field may be
   * omitted by the server if the lease is not pending.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker requirements = 4;</code>
   */
  com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder getRequirementsOrBuilder();

  /**
   * <pre>
   * The time at which this lease expires. The server *may* extend this over
   * time, but due to race conditions, the bot is not *required* to respect any
   * expiry date except the first one.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 5;</code>
   * @return Whether the expireTime field is set.
   */
  boolean hasExpireTime();
  /**
   * <pre>
   * The time at which this lease expires. The server *may* extend this over
   * time, but due to race conditions, the bot is not *required* to respect any
   * expiry date except the first one.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 5;</code>
   * @return The expireTime.
   */
  com.google.protobuf.Timestamp getExpireTime();
  /**
   * <pre>
   * The time at which this lease expires. The server *may* extend this over
   * time, but due to race conditions, the bot is not *required* to respect any
   * expiry date except the first one.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 5;</code>
   */
  com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder();

  /**
   * <pre>
   * DEPRECATED. The assignment should be provided to the bot via the `payload`
   * field. Clients that wish to use a simple name (such as a queue of work
   * provided elsewhere) should define a custom message type and encode it into
   * `payload`.
   * </pre>
   *
   * <code>string assignment = 1 [deprecated = true];</code>
   * @deprecated google.devtools.remoteworkers.v1test2.Lease.assignment is deprecated.
   *     See google/devtools/remoteworkers/v1test2/bots.proto;l=208
   * @return The assignment.
   */
  @java.lang.Deprecated java.lang.String getAssignment();
  /**
   * <pre>
   * DEPRECATED. The assignment should be provided to the bot via the `payload`
   * field. Clients that wish to use a simple name (such as a queue of work
   * provided elsewhere) should define a custom message type and encode it into
   * `payload`.
   * </pre>
   *
   * <code>string assignment = 1 [deprecated = true];</code>
   * @deprecated google.devtools.remoteworkers.v1test2.Lease.assignment is deprecated.
   *     See google/devtools/remoteworkers/v1test2/bots.proto;l=208
   * @return The bytes for assignment.
   */
  @java.lang.Deprecated com.google.protobuf.ByteString
      getAssignmentBytes();

  /**
   * <pre>
   * DEPRECATED. Use `payload` instead.
   * </pre>
   *
   * <code>.google.protobuf.Any inline_assignment = 6 [deprecated = true];</code>
   * @deprecated google.devtools.remoteworkers.v1test2.Lease.inline_assignment is deprecated.
   *     See google/devtools/remoteworkers/v1test2/bots.proto;l=211
   * @return Whether the inlineAssignment field is set.
   */
  @java.lang.Deprecated boolean hasInlineAssignment();
  /**
   * <pre>
   * DEPRECATED. Use `payload` instead.
   * </pre>
   *
   * <code>.google.protobuf.Any inline_assignment = 6 [deprecated = true];</code>
   * @deprecated google.devtools.remoteworkers.v1test2.Lease.inline_assignment is deprecated.
   *     See google/devtools/remoteworkers/v1test2/bots.proto;l=211
   * @return The inlineAssignment.
   */
  @java.lang.Deprecated com.google.protobuf.Any getInlineAssignment();
  /**
   * <pre>
   * DEPRECATED. Use `payload` instead.
   * </pre>
   *
   * <code>.google.protobuf.Any inline_assignment = 6 [deprecated = true];</code>
   */
  @java.lang.Deprecated com.google.protobuf.AnyOrBuilder getInlineAssignmentOrBuilder();
}
