// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

package com.google.devtools.remoteworkers.v1test2;

/**
 * <pre>
 * A coarse description of the status of the bot that the server uses to
 * determine whether to assign the bot new leases.
 * </pre>
 *
 * Protobuf enum {@code google.devtools.remoteworkers.v1test2.BotStatus}
 */
public enum BotStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default value; do not use.
   * </pre>
   *
   * <code>BOT_STATUS_UNSPECIFIED = 0;</code>
   */
  BOT_STATUS_UNSPECIFIED(0),
  /**
   * <pre>
   * The bot is healthy, and will accept leases as normal.
   * </pre>
   *
   * <code>OK = 1;</code>
   */
  OK(1),
  /**
   * <pre>
   * The bot is unhealthy and will not accept new leases. For example, the bot
   * may have detected that available disk space is too low. This situation may
   * resolve itself, but will typically require human intervention.
   * </pre>
   *
   * <code>UNHEALTHY = 2;</code>
   */
  UNHEALTHY(2),
  /**
   * <pre>
   * The bot has been asked to reboot the host. The bot will not accept new
   * leases; once all leases are complete, this session will no longer be
   * updated but the bot will be expected to establish a new session after the
   * reboot completes.
   * </pre>
   *
   * <code>HOST_REBOOTING = 3;</code>
   */
  HOST_REBOOTING(3),
  /**
   * <pre>
   * The bot has been asked to shut down. As with HOST_REBOOTING, once all
   * leases are completed, the session will no longer be updated and the bot
   * will not be expected to establish a new session.
   * Bots are typically only asked to shut down if its host computer will be
   * modified in some way, such as deleting a VM.
   * </pre>
   *
   * <code>BOT_TERMINATING = 4;</code>
   */
  BOT_TERMINATING(4),
  /**
   * <pre>
   * The bot is initializing and is not ready to accept leases.
   * </pre>
   *
   * <code>INITIALIZING = 5;</code>
   */
  INITIALIZING(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Default value; do not use.
   * </pre>
   *
   * <code>BOT_STATUS_UNSPECIFIED = 0;</code>
   */
  public static final int BOT_STATUS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The bot is healthy, and will accept leases as normal.
   * </pre>
   *
   * <code>OK = 1;</code>
   */
  public static final int OK_VALUE = 1;
  /**
   * <pre>
   * The bot is unhealthy and will not accept new leases. For example, the bot
   * may have detected that available disk space is too low. This situation may
   * resolve itself, but will typically require human intervention.
   * </pre>
   *
   * <code>UNHEALTHY = 2;</code>
   */
  public static final int UNHEALTHY_VALUE = 2;
  /**
   * <pre>
   * The bot has been asked to reboot the host. The bot will not accept new
   * leases; once all leases are complete, this session will no longer be
   * updated but the bot will be expected to establish a new session after the
   * reboot completes.
   * </pre>
   *
   * <code>HOST_REBOOTING = 3;</code>
   */
  public static final int HOST_REBOOTING_VALUE = 3;
  /**
   * <pre>
   * The bot has been asked to shut down. As with HOST_REBOOTING, once all
   * leases are completed, the session will no longer be updated and the bot
   * will not be expected to establish a new session.
   * Bots are typically only asked to shut down if its host computer will be
   * modified in some way, such as deleting a VM.
   * </pre>
   *
   * <code>BOT_TERMINATING = 4;</code>
   */
  public static final int BOT_TERMINATING_VALUE = 4;
  /**
   * <pre>
   * The bot is initializing and is not ready to accept leases.
   * </pre>
   *
   * <code>INITIALIZING = 5;</code>
   */
  public static final int INITIALIZING_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BotStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static BotStatus forNumber(int value) {
    switch (value) {
      case 0: return BOT_STATUS_UNSPECIFIED;
      case 1: return OK;
      case 2: return UNHEALTHY;
      case 3: return HOST_REBOOTING;
      case 4: return BOT_TERMINATING;
      case 5: return INITIALIZING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BotStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BotStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BotStatus>() {
          public BotStatus findValueByNumber(int number) {
            return BotStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.getDescriptor().getEnumTypes().get(0);
  }

  private static final BotStatus[] VALUES = values();

  public static BotStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BotStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.devtools.remoteworkers.v1test2.BotStatus)
}

