// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/worker.proto

package com.google.devtools.remoteworkers.v1test2;

public interface WorkerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.Worker)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  java.util.List<com.google.devtools.remoteworkers.v1test2.Device> 
      getDevicesList();
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Device getDevices(int index);
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  int getDevicesCount();
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  java.util.List<? extends com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder> 
      getDevicesOrBuilderList();
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder getDevicesOrBuilder(
      int index);

  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Property> 
      getPropertiesList();
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Worker.Property getProperties(int index);
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  int getPropertiesCount();
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder> 
      getPropertiesOrBuilderList();
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder getPropertiesOrBuilder(
      int index);

  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Config> 
      getConfigsList();
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Worker.Config getConfigs(int index);
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  int getConfigsCount();
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder> 
      getConfigsOrBuilderList();
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder getConfigsOrBuilder(
      int index);
}
