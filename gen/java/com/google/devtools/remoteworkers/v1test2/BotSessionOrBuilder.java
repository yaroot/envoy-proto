// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

package com.google.devtools.remoteworkers.v1test2;

public interface BotSessionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.BotSession)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The bot session name, as selected by the server. Output only during a call
   * to CreateBotSession.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The bot session name, as selected by the server. Output only during a call
   * to CreateBotSession.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * A unique bot ID within the farm used to persistently identify this bot over
   * time (i.e., over multiple sessions). This ID must be unique within a
   * farm. Typically, the bot ID will be the same as the name of the primary
   * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
   * but this is not required since a single device may allow multiple bots to
   * run on it, each with access to different resources. What is important is
   * that this ID is meaningful to humans, who might need to hunt a physical
   * machine down to fix it.
   * When CreateBotSession is successfully called with a bot_id, all prior
   * sessions with the same ID are invalidated. If a bot attempts to update an
   * invalid session, the server must reject that request, and may also
   * quarantine the other bot with the same bot IDs (ie, stop sending it new
   * leases and alert an admin).
   * </pre>
   *
   * <code>string bot_id = 2;</code>
   * @return The botId.
   */
  java.lang.String getBotId();
  /**
   * <pre>
   * A unique bot ID within the farm used to persistently identify this bot over
   * time (i.e., over multiple sessions). This ID must be unique within a
   * farm. Typically, the bot ID will be the same as the name of the primary
   * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
   * but this is not required since a single device may allow multiple bots to
   * run on it, each with access to different resources. What is important is
   * that this ID is meaningful to humans, who might need to hunt a physical
   * machine down to fix it.
   * When CreateBotSession is successfully called with a bot_id, all prior
   * sessions with the same ID are invalidated. If a bot attempts to update an
   * invalid session, the server must reject that request, and may also
   * quarantine the other bot with the same bot IDs (ie, stop sending it new
   * leases and alert an admin).
   * </pre>
   *
   * <code>string bot_id = 2;</code>
   * @return The bytes for botId.
   */
  com.google.protobuf.ByteString
      getBotIdBytes();

  /**
   * <pre>
   * The status of the bot. This must be populated in every call to
   * UpdateBotSession.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
   * @return The enum numeric value on the wire for status.
   */
  int getStatusValue();
  /**
   * <pre>
   * The status of the bot. This must be populated in every call to
   * UpdateBotSession.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
   * @return The status.
   */
  com.google.devtools.remoteworkers.v1test2.BotStatus getStatus();

  /**
   * <pre>
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
   * @return Whether the worker field is set.
   */
  boolean hasWorker();
  /**
   * <pre>
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
   * @return The worker.
   */
  com.google.devtools.remoteworkers.v1test2.Worker getWorker();
  /**
   * <pre>
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
   */
  com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder getWorkerOrBuilder();

  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  java.util.List<com.google.devtools.remoteworkers.v1test2.Lease> 
      getLeasesList();
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Lease getLeases(int index);
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  int getLeasesCount();
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  java.util.List<? extends com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder> 
      getLeasesOrBuilderList();
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder getLeasesOrBuilder(
      int index);

  /**
   * <pre>
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 6;</code>
   * @return Whether the expireTime field is set.
   */
  boolean hasExpireTime();
  /**
   * <pre>
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 6;</code>
   * @return The expireTime.
   */
  com.google.protobuf.Timestamp getExpireTime();
  /**
   * <pre>
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 6;</code>
   */
  com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder();

  /**
   * <pre>
   * The version of the bot code currently running. The server may use this
   * information to issue an admin action to tell the bot to update itself.
   * </pre>
   *
   * <code>string version = 7;</code>
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   * <pre>
   * The version of the bot code currently running. The server may use this
   * information to issue an admin action to tell the bot to update itself.
   * </pre>
   *
   * <code>string version = 7;</code>
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString
      getVersionBytes();
}
