// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

package com.google.devtools.remoteworkers.v1test2;

/**
 * <pre>
 * A bot session represents the state of a bot while in continuous contact with
 * the server for a period of time. The session includes information about the
 * worker - that is, the *worker* (the physical or virtual hardware) is
 * considered to be a property of the bot (the software agent running on that
 * hardware), which is the reverse of real life, but more natural from the point
 * of the view of this API, which communicates solely with the bot and not
 * directly with the underlying worker.
 * </pre>
 *
 * Protobuf type {@code google.devtools.remoteworkers.v1test2.BotSession}
 */
public final class BotSession extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.remoteworkers.v1test2.BotSession)
    BotSessionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BotSession.newBuilder() to construct.
  private BotSession(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BotSession() {
    name_ = "";
    botId_ = "";
    status_ = 0;
    leases_ = java.util.Collections.emptyList();
    version_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new BotSession();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.internal_static_google_devtools_remoteworkers_v1test2_BotSession_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.internal_static_google_devtools_remoteworkers_v1test2_BotSession_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.remoteworkers.v1test2.BotSession.class, com.google.devtools.remoteworkers.v1test2.BotSession.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   * <pre>
   * The bot session name, as selected by the server. Output only during a call
   * to CreateBotSession.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The bot session name, as selected by the server. Output only during a call
   * to CreateBotSession.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BOT_ID_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object botId_ = "";
  /**
   * <pre>
   * A unique bot ID within the farm used to persistently identify this bot over
   * time (i.e., over multiple sessions). This ID must be unique within a
   * farm. Typically, the bot ID will be the same as the name of the primary
   * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
   * but this is not required since a single device may allow multiple bots to
   * run on it, each with access to different resources. What is important is
   * that this ID is meaningful to humans, who might need to hunt a physical
   * machine down to fix it.
   * When CreateBotSession is successfully called with a bot_id, all prior
   * sessions with the same ID are invalidated. If a bot attempts to update an
   * invalid session, the server must reject that request, and may also
   * quarantine the other bot with the same bot IDs (ie, stop sending it new
   * leases and alert an admin).
   * </pre>
   *
   * <code>string bot_id = 2;</code>
   * @return The botId.
   */
  @java.lang.Override
  public java.lang.String getBotId() {
    java.lang.Object ref = botId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      botId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A unique bot ID within the farm used to persistently identify this bot over
   * time (i.e., over multiple sessions). This ID must be unique within a
   * farm. Typically, the bot ID will be the same as the name of the primary
   * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
   * but this is not required since a single device may allow multiple bots to
   * run on it, each with access to different resources. What is important is
   * that this ID is meaningful to humans, who might need to hunt a physical
   * machine down to fix it.
   * When CreateBotSession is successfully called with a bot_id, all prior
   * sessions with the same ID are invalidated. If a bot attempts to update an
   * invalid session, the server must reject that request, and may also
   * quarantine the other bot with the same bot IDs (ie, stop sending it new
   * leases and alert an admin).
   * </pre>
   *
   * <code>string bot_id = 2;</code>
   * @return The bytes for botId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getBotIdBytes() {
    java.lang.Object ref = botId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      botId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STATUS_FIELD_NUMBER = 3;
  private int status_ = 0;
  /**
   * <pre>
   * The status of the bot. This must be populated in every call to
   * UpdateBotSession.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
   * @return The enum numeric value on the wire for status.
   */
  @java.lang.Override public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   * The status of the bot. This must be populated in every call to
   * UpdateBotSession.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
   * @return The status.
   */
  @java.lang.Override public com.google.devtools.remoteworkers.v1test2.BotStatus getStatus() {
    com.google.devtools.remoteworkers.v1test2.BotStatus result = com.google.devtools.remoteworkers.v1test2.BotStatus.forNumber(status_);
    return result == null ? com.google.devtools.remoteworkers.v1test2.BotStatus.UNRECOGNIZED : result;
  }

  public static final int WORKER_FIELD_NUMBER = 4;
  private com.google.devtools.remoteworkers.v1test2.Worker worker_;
  /**
   * <pre>
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
   * @return Whether the worker field is set.
   */
  @java.lang.Override
  public boolean hasWorker() {
    return worker_ != null;
  }
  /**
   * <pre>
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
   * @return The worker.
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Worker getWorker() {
    return worker_ == null ? com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance() : worker_;
  }
  /**
   * <pre>
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   * </pre>
   *
   * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder getWorkerOrBuilder() {
    return worker_ == null ? com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance() : worker_;
  }

  public static final int LEASES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<com.google.devtools.remoteworkers.v1test2.Lease> leases_;
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.remoteworkers.v1test2.Lease> getLeasesList() {
    return leases_;
  }
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder> 
      getLeasesOrBuilderList() {
    return leases_;
  }
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  @java.lang.Override
  public int getLeasesCount() {
    return leases_.size();
  }
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Lease getLeases(int index) {
    return leases_.get(index);
  }
  /**
   * <pre>
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder getLeasesOrBuilder(
      int index) {
    return leases_.get(index);
  }

  public static final int EXPIRE_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp expireTime_;
  /**
   * <pre>
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 6;</code>
   * @return Whether the expireTime field is set.
   */
  @java.lang.Override
  public boolean hasExpireTime() {
    return expireTime_ != null;
  }
  /**
   * <pre>
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 6;</code>
   * @return The expireTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getExpireTime() {
    return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
  }
  /**
   * <pre>
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expire_time = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder() {
    return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
  }

  public static final int VERSION_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object version_ = "";
  /**
   * <pre>
   * The version of the bot code currently running. The server may use this
   * information to issue an admin action to tell the bot to update itself.
   * </pre>
   *
   * <code>string version = 7;</code>
   * @return The version.
   */
  @java.lang.Override
  public java.lang.String getVersion() {
    java.lang.Object ref = version_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      version_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The version of the bot code currently running. The server may use this
   * information to issue an admin action to tell the bot to update itself.
   * </pre>
   *
   * <code>string version = 7;</code>
   * @return The bytes for version.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getVersionBytes() {
    java.lang.Object ref = version_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      version_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(botId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, botId_);
    }
    if (status_ != com.google.devtools.remoteworkers.v1test2.BotStatus.BOT_STATUS_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, status_);
    }
    if (worker_ != null) {
      output.writeMessage(4, getWorker());
    }
    for (int i = 0; i < leases_.size(); i++) {
      output.writeMessage(5, leases_.get(i));
    }
    if (expireTime_ != null) {
      output.writeMessage(6, getExpireTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(version_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, version_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(botId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, botId_);
    }
    if (status_ != com.google.devtools.remoteworkers.v1test2.BotStatus.BOT_STATUS_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, status_);
    }
    if (worker_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getWorker());
    }
    for (int i = 0; i < leases_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, leases_.get(i));
    }
    if (expireTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getExpireTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(version_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, version_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.remoteworkers.v1test2.BotSession)) {
      return super.equals(obj);
    }
    com.google.devtools.remoteworkers.v1test2.BotSession other = (com.google.devtools.remoteworkers.v1test2.BotSession) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (!getBotId()
        .equals(other.getBotId())) return false;
    if (status_ != other.status_) return false;
    if (hasWorker() != other.hasWorker()) return false;
    if (hasWorker()) {
      if (!getWorker()
          .equals(other.getWorker())) return false;
    }
    if (!getLeasesList()
        .equals(other.getLeasesList())) return false;
    if (hasExpireTime() != other.hasExpireTime()) return false;
    if (hasExpireTime()) {
      if (!getExpireTime()
          .equals(other.getExpireTime())) return false;
    }
    if (!getVersion()
        .equals(other.getVersion())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + BOT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getBotId().hashCode();
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + status_;
    if (hasWorker()) {
      hash = (37 * hash) + WORKER_FIELD_NUMBER;
      hash = (53 * hash) + getWorker().hashCode();
    }
    if (getLeasesCount() > 0) {
      hash = (37 * hash) + LEASES_FIELD_NUMBER;
      hash = (53 * hash) + getLeasesList().hashCode();
    }
    if (hasExpireTime()) {
      hash = (37 * hash) + EXPIRE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getExpireTime().hashCode();
    }
    hash = (37 * hash) + VERSION_FIELD_NUMBER;
    hash = (53 * hash) + getVersion().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.BotSession parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.remoteworkers.v1test2.BotSession prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A bot session represents the state of a bot while in continuous contact with
   * the server for a period of time. The session includes information about the
   * worker - that is, the *worker* (the physical or virtual hardware) is
   * considered to be a property of the bot (the software agent running on that
   * hardware), which is the reverse of real life, but more natural from the point
   * of the view of this API, which communicates solely with the bot and not
   * directly with the underlying worker.
   * </pre>
   *
   * Protobuf type {@code google.devtools.remoteworkers.v1test2.BotSession}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.remoteworkers.v1test2.BotSession)
      com.google.devtools.remoteworkers.v1test2.BotSessionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.internal_static_google_devtools_remoteworkers_v1test2_BotSession_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.internal_static_google_devtools_remoteworkers_v1test2_BotSession_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.remoteworkers.v1test2.BotSession.class, com.google.devtools.remoteworkers.v1test2.BotSession.Builder.class);
    }

    // Construct using com.google.devtools.remoteworkers.v1test2.BotSession.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ = "";
      botId_ = "";
      status_ = 0;
      worker_ = null;
      if (workerBuilder_ != null) {
        workerBuilder_.dispose();
        workerBuilder_ = null;
      }
      if (leasesBuilder_ == null) {
        leases_ = java.util.Collections.emptyList();
      } else {
        leases_ = null;
        leasesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      expireTime_ = null;
      if (expireTimeBuilder_ != null) {
        expireTimeBuilder_.dispose();
        expireTimeBuilder_ = null;
      }
      version_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.internal_static_google_devtools_remoteworkers_v1test2_BotSession_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.BotSession getDefaultInstanceForType() {
      return com.google.devtools.remoteworkers.v1test2.BotSession.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.BotSession build() {
      com.google.devtools.remoteworkers.v1test2.BotSession result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.BotSession buildPartial() {
      com.google.devtools.remoteworkers.v1test2.BotSession result = new com.google.devtools.remoteworkers.v1test2.BotSession(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.devtools.remoteworkers.v1test2.BotSession result) {
      if (leasesBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          leases_ = java.util.Collections.unmodifiableList(leases_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.leases_ = leases_;
      } else {
        result.leases_ = leasesBuilder_.build();
      }
    }

    private void buildPartial0(com.google.devtools.remoteworkers.v1test2.BotSession result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.name_ = name_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.botId_ = botId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.status_ = status_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.worker_ = workerBuilder_ == null
            ? worker_
            : workerBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.expireTime_ = expireTimeBuilder_ == null
            ? expireTime_
            : expireTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.version_ = version_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.remoteworkers.v1test2.BotSession) {
        return mergeFrom((com.google.devtools.remoteworkers.v1test2.BotSession)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.remoteworkers.v1test2.BotSession other) {
      if (other == com.google.devtools.remoteworkers.v1test2.BotSession.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getBotId().isEmpty()) {
        botId_ = other.botId_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.status_ != 0) {
        setStatusValue(other.getStatusValue());
      }
      if (other.hasWorker()) {
        mergeWorker(other.getWorker());
      }
      if (leasesBuilder_ == null) {
        if (!other.leases_.isEmpty()) {
          if (leases_.isEmpty()) {
            leases_ = other.leases_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLeasesIsMutable();
            leases_.addAll(other.leases_);
          }
          onChanged();
        }
      } else {
        if (!other.leases_.isEmpty()) {
          if (leasesBuilder_.isEmpty()) {
            leasesBuilder_.dispose();
            leasesBuilder_ = null;
            leases_ = other.leases_;
            bitField0_ = (bitField0_ & ~0x00000010);
            leasesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLeasesFieldBuilder() : null;
          } else {
            leasesBuilder_.addAllMessages(other.leases_);
          }
        }
      }
      if (other.hasExpireTime()) {
        mergeExpireTime(other.getExpireTime());
      }
      if (!other.getVersion().isEmpty()) {
        version_ = other.version_;
        bitField0_ |= 0x00000040;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              name_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              botId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              status_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              input.readMessage(
                  getWorkerFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              com.google.devtools.remoteworkers.v1test2.Lease m =
                  input.readMessage(
                      com.google.devtools.remoteworkers.v1test2.Lease.parser(),
                      extensionRegistry);
              if (leasesBuilder_ == null) {
                ensureLeasesIsMutable();
                leases_.add(m);
              } else {
                leasesBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getExpireTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              version_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The bot session name, as selected by the server. Output only during a call
     * to CreateBotSession.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The bot session name, as selected by the server. Output only during a call
     * to CreateBotSession.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The bot session name, as selected by the server. Output only during a call
     * to CreateBotSession.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bot session name, as selected by the server. Output only during a call
     * to CreateBotSession.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The bot session name, as selected by the server. Output only during a call
     * to CreateBotSession.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object botId_ = "";
    /**
     * <pre>
     * A unique bot ID within the farm used to persistently identify this bot over
     * time (i.e., over multiple sessions). This ID must be unique within a
     * farm. Typically, the bot ID will be the same as the name of the primary
     * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
     * but this is not required since a single device may allow multiple bots to
     * run on it, each with access to different resources. What is important is
     * that this ID is meaningful to humans, who might need to hunt a physical
     * machine down to fix it.
     * When CreateBotSession is successfully called with a bot_id, all prior
     * sessions with the same ID are invalidated. If a bot attempts to update an
     * invalid session, the server must reject that request, and may also
     * quarantine the other bot with the same bot IDs (ie, stop sending it new
     * leases and alert an admin).
     * </pre>
     *
     * <code>string bot_id = 2;</code>
     * @return The botId.
     */
    public java.lang.String getBotId() {
      java.lang.Object ref = botId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        botId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A unique bot ID within the farm used to persistently identify this bot over
     * time (i.e., over multiple sessions). This ID must be unique within a
     * farm. Typically, the bot ID will be the same as the name of the primary
     * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
     * but this is not required since a single device may allow multiple bots to
     * run on it, each with access to different resources. What is important is
     * that this ID is meaningful to humans, who might need to hunt a physical
     * machine down to fix it.
     * When CreateBotSession is successfully called with a bot_id, all prior
     * sessions with the same ID are invalidated. If a bot attempts to update an
     * invalid session, the server must reject that request, and may also
     * quarantine the other bot with the same bot IDs (ie, stop sending it new
     * leases and alert an admin).
     * </pre>
     *
     * <code>string bot_id = 2;</code>
     * @return The bytes for botId.
     */
    public com.google.protobuf.ByteString
        getBotIdBytes() {
      java.lang.Object ref = botId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        botId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A unique bot ID within the farm used to persistently identify this bot over
     * time (i.e., over multiple sessions). This ID must be unique within a
     * farm. Typically, the bot ID will be the same as the name of the primary
     * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
     * but this is not required since a single device may allow multiple bots to
     * run on it, each with access to different resources. What is important is
     * that this ID is meaningful to humans, who might need to hunt a physical
     * machine down to fix it.
     * When CreateBotSession is successfully called with a bot_id, all prior
     * sessions with the same ID are invalidated. If a bot attempts to update an
     * invalid session, the server must reject that request, and may also
     * quarantine the other bot with the same bot IDs (ie, stop sending it new
     * leases and alert an admin).
     * </pre>
     *
     * <code>string bot_id = 2;</code>
     * @param value The botId to set.
     * @return This builder for chaining.
     */
    public Builder setBotId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      botId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique bot ID within the farm used to persistently identify this bot over
     * time (i.e., over multiple sessions). This ID must be unique within a
     * farm. Typically, the bot ID will be the same as the name of the primary
     * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
     * but this is not required since a single device may allow multiple bots to
     * run on it, each with access to different resources. What is important is
     * that this ID is meaningful to humans, who might need to hunt a physical
     * machine down to fix it.
     * When CreateBotSession is successfully called with a bot_id, all prior
     * sessions with the same ID are invalidated. If a bot attempts to update an
     * invalid session, the server must reject that request, and may also
     * quarantine the other bot with the same bot IDs (ie, stop sending it new
     * leases and alert an admin).
     * </pre>
     *
     * <code>string bot_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearBotId() {
      botId_ = getDefaultInstance().getBotId();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique bot ID within the farm used to persistently identify this bot over
     * time (i.e., over multiple sessions). This ID must be unique within a
     * farm. Typically, the bot ID will be the same as the name of the primary
     * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
     * but this is not required since a single device may allow multiple bots to
     * run on it, each with access to different resources. What is important is
     * that this ID is meaningful to humans, who might need to hunt a physical
     * machine down to fix it.
     * When CreateBotSession is successfully called with a bot_id, all prior
     * sessions with the same ID are invalidated. If a bot attempts to update an
     * invalid session, the server must reject that request, and may also
     * quarantine the other bot with the same bot IDs (ie, stop sending it new
     * leases and alert an admin).
     * </pre>
     *
     * <code>string bot_id = 2;</code>
     * @param value The bytes for botId to set.
     * @return This builder for chaining.
     */
    public Builder setBotIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      botId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private int status_ = 0;
    /**
     * <pre>
     * The status of the bot. This must be populated in every call to
     * UpdateBotSession.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * The status of the bot. This must be populated in every call to
     * UpdateBotSession.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      status_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of the bot. This must be populated in every call to
     * UpdateBotSession.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
     * @return The status.
     */
    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.BotStatus getStatus() {
      com.google.devtools.remoteworkers.v1test2.BotStatus result = com.google.devtools.remoteworkers.v1test2.BotStatus.forNumber(status_);
      return result == null ? com.google.devtools.remoteworkers.v1test2.BotStatus.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The status of the bot. This must be populated in every call to
     * UpdateBotSession.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(com.google.devtools.remoteworkers.v1test2.BotStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      status_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The status of the bot. This must be populated in every call to
     * UpdateBotSession.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.BotStatus status = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000004);
      status_ = 0;
      onChanged();
      return this;
    }

    private com.google.devtools.remoteworkers.v1test2.Worker worker_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Worker, com.google.devtools.remoteworkers.v1test2.Worker.Builder, com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder> workerBuilder_;
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     * @return Whether the worker field is set.
     */
    public boolean hasWorker() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     * @return The worker.
     */
    public com.google.devtools.remoteworkers.v1test2.Worker getWorker() {
      if (workerBuilder_ == null) {
        return worker_ == null ? com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance() : worker_;
      } else {
        return workerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    public Builder setWorker(com.google.devtools.remoteworkers.v1test2.Worker value) {
      if (workerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        worker_ = value;
      } else {
        workerBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    public Builder setWorker(
        com.google.devtools.remoteworkers.v1test2.Worker.Builder builderForValue) {
      if (workerBuilder_ == null) {
        worker_ = builderForValue.build();
      } else {
        workerBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    public Builder mergeWorker(com.google.devtools.remoteworkers.v1test2.Worker value) {
      if (workerBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          worker_ != null &&
          worker_ != com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance()) {
          getWorkerBuilder().mergeFrom(value);
        } else {
          worker_ = value;
        }
      } else {
        workerBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    public Builder clearWorker() {
      bitField0_ = (bitField0_ & ~0x00000008);
      worker_ = null;
      if (workerBuilder_ != null) {
        workerBuilder_.dispose();
        workerBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Builder getWorkerBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getWorkerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder getWorkerOrBuilder() {
      if (workerBuilder_ != null) {
        return workerBuilder_.getMessageOrBuilder();
      } else {
        return worker_ == null ?
            com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance() : worker_;
      }
    }
    /**
     * <pre>
     * A description of the worker hosting this bot. The Worker message is used
     * here in the Status context (see Worker for more information).  If multiple
     * bots are running on the worker, this field should only describe the
     * resources accessible from this bot.
     * During the call to CreateBotSession, the server may make arbitrary changes
     * to the worker's `server_properties` field (see that field for more
     * information). Otherwise, this field is input-only.
     * </pre>
     *
     * <code>.google.devtools.remoteworkers.v1test2.Worker worker = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Worker, com.google.devtools.remoteworkers.v1test2.Worker.Builder, com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder> 
        getWorkerFieldBuilder() {
      if (workerBuilder_ == null) {
        workerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.remoteworkers.v1test2.Worker, com.google.devtools.remoteworkers.v1test2.Worker.Builder, com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder>(
                getWorker(),
                getParentForChildren(),
                isClean());
        worker_ = null;
      }
      return workerBuilder_;
    }

    private java.util.List<com.google.devtools.remoteworkers.v1test2.Lease> leases_ =
      java.util.Collections.emptyList();
    private void ensureLeasesIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        leases_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Lease>(leases_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Lease, com.google.devtools.remoteworkers.v1test2.Lease.Builder, com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder> leasesBuilder_;

    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Lease> getLeasesList() {
      if (leasesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(leases_);
      } else {
        return leasesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public int getLeasesCount() {
      if (leasesBuilder_ == null) {
        return leases_.size();
      } else {
        return leasesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Lease getLeases(int index) {
      if (leasesBuilder_ == null) {
        return leases_.get(index);
      } else {
        return leasesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder setLeases(
        int index, com.google.devtools.remoteworkers.v1test2.Lease value) {
      if (leasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLeasesIsMutable();
        leases_.set(index, value);
        onChanged();
      } else {
        leasesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder setLeases(
        int index, com.google.devtools.remoteworkers.v1test2.Lease.Builder builderForValue) {
      if (leasesBuilder_ == null) {
        ensureLeasesIsMutable();
        leases_.set(index, builderForValue.build());
        onChanged();
      } else {
        leasesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder addLeases(com.google.devtools.remoteworkers.v1test2.Lease value) {
      if (leasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLeasesIsMutable();
        leases_.add(value);
        onChanged();
      } else {
        leasesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder addLeases(
        int index, com.google.devtools.remoteworkers.v1test2.Lease value) {
      if (leasesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLeasesIsMutable();
        leases_.add(index, value);
        onChanged();
      } else {
        leasesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder addLeases(
        com.google.devtools.remoteworkers.v1test2.Lease.Builder builderForValue) {
      if (leasesBuilder_ == null) {
        ensureLeasesIsMutable();
        leases_.add(builderForValue.build());
        onChanged();
      } else {
        leasesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder addLeases(
        int index, com.google.devtools.remoteworkers.v1test2.Lease.Builder builderForValue) {
      if (leasesBuilder_ == null) {
        ensureLeasesIsMutable();
        leases_.add(index, builderForValue.build());
        onChanged();
      } else {
        leasesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder addAllLeases(
        java.lang.Iterable<? extends com.google.devtools.remoteworkers.v1test2.Lease> values) {
      if (leasesBuilder_ == null) {
        ensureLeasesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, leases_);
        onChanged();
      } else {
        leasesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder clearLeases() {
      if (leasesBuilder_ == null) {
        leases_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        leasesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public Builder removeLeases(int index) {
      if (leasesBuilder_ == null) {
        ensureLeasesIsMutable();
        leases_.remove(index);
        onChanged();
      } else {
        leasesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Lease.Builder getLeasesBuilder(
        int index) {
      return getLeasesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder getLeasesOrBuilder(
        int index) {
      if (leasesBuilder_ == null) {
        return leases_.get(index);  } else {
        return leasesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder> 
         getLeasesOrBuilderList() {
      if (leasesBuilder_ != null) {
        return leasesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(leases_);
      }
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Lease.Builder addLeasesBuilder() {
      return getLeasesFieldBuilder().addBuilder(
          com.google.devtools.remoteworkers.v1test2.Lease.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Lease.Builder addLeasesBuilder(
        int index) {
      return getLeasesFieldBuilder().addBuilder(
          index, com.google.devtools.remoteworkers.v1test2.Lease.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of all leases that are a part of this session. See the Lease message
     * for details.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Lease.Builder> 
         getLeasesBuilderList() {
      return getLeasesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Lease, com.google.devtools.remoteworkers.v1test2.Lease.Builder, com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder> 
        getLeasesFieldBuilder() {
      if (leasesBuilder_ == null) {
        leasesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.remoteworkers.v1test2.Lease, com.google.devtools.remoteworkers.v1test2.Lease.Builder, com.google.devtools.remoteworkers.v1test2.LeaseOrBuilder>(
                leases_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        leases_ = null;
      }
      return leasesBuilder_;
    }

    private com.google.protobuf.Timestamp expireTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> expireTimeBuilder_;
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     * @return Whether the expireTime field is set.
     */
    public boolean hasExpireTime() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     * @return The expireTime.
     */
    public com.google.protobuf.Timestamp getExpireTime() {
      if (expireTimeBuilder_ == null) {
        return expireTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
      } else {
        return expireTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    public Builder setExpireTime(com.google.protobuf.Timestamp value) {
      if (expireTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expireTime_ = value;
      } else {
        expireTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    public Builder setExpireTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (expireTimeBuilder_ == null) {
        expireTime_ = builderForValue.build();
      } else {
        expireTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    public Builder mergeExpireTime(com.google.protobuf.Timestamp value) {
      if (expireTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          expireTime_ != null &&
          expireTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getExpireTimeBuilder().mergeFrom(value);
        } else {
          expireTime_ = value;
        }
      } else {
        expireTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    public Builder clearExpireTime() {
      bitField0_ = (bitField0_ & ~0x00000020);
      expireTime_ = null;
      if (expireTimeBuilder_ != null) {
        expireTimeBuilder_.dispose();
        expireTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getExpireTimeBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getExpireTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getExpireTimeOrBuilder() {
      if (expireTimeBuilder_ != null) {
        return expireTimeBuilder_.getMessageOrBuilder();
      } else {
        return expireTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : expireTime_;
      }
    }
    /**
     * <pre>
     * The time at which this bot session will expire, unless the bot calls
     * UpdateBotSession again. Output only.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expire_time = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getExpireTimeFieldBuilder() {
      if (expireTimeBuilder_ == null) {
        expireTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getExpireTime(),
                getParentForChildren(),
                isClean());
        expireTime_ = null;
      }
      return expireTimeBuilder_;
    }

    private java.lang.Object version_ = "";
    /**
     * <pre>
     * The version of the bot code currently running. The server may use this
     * information to issue an admin action to tell the bot to update itself.
     * </pre>
     *
     * <code>string version = 7;</code>
     * @return The version.
     */
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The version of the bot code currently running. The server may use this
     * information to issue an admin action to tell the bot to update itself.
     * </pre>
     *
     * <code>string version = 7;</code>
     * @return The bytes for version.
     */
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The version of the bot code currently running. The server may use this
     * information to issue an admin action to tell the bot to update itself.
     * </pre>
     *
     * <code>string version = 7;</code>
     * @param value The version to set.
     * @return This builder for chaining.
     */
    public Builder setVersion(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      version_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The version of the bot code currently running. The server may use this
     * information to issue an admin action to tell the bot to update itself.
     * </pre>
     *
     * <code>string version = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearVersion() {
      version_ = getDefaultInstance().getVersion();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The version of the bot code currently running. The server may use this
     * information to issue an admin action to tell the bot to update itself.
     * </pre>
     *
     * <code>string version = 7;</code>
     * @param value The bytes for version to set.
     * @return This builder for chaining.
     */
    public Builder setVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      version_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.remoteworkers.v1test2.BotSession)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.BotSession)
  private static final com.google.devtools.remoteworkers.v1test2.BotSession DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.remoteworkers.v1test2.BotSession();
  }

  public static com.google.devtools.remoteworkers.v1test2.BotSession getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BotSession>
      PARSER = new com.google.protobuf.AbstractParser<BotSession>() {
    @java.lang.Override
    public BotSession parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BotSession> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BotSession> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.BotSession getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

