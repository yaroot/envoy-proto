// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/worker.proto

package com.google.devtools.remoteworkers.v1test2;

public interface DeviceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.Device)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The handle can be thought of as the "name" of the device, and must be
   * unique within a Worker.
   * In the Status context, the handle should be some human-understandable name,
   * perhaps corresponding to a label physically written on the device to make
   * it easy to locate. In the Request context, the name should be the
   * *logical* name expected by the task. The bot is responsible for mapping the
   * logical name expected by the task to a machine-readable name that the task
   * can actually use, such as a USB address. The method by which this mapping
   * is communicated to the task is not covered in this API.
   * </pre>
   *
   * <code>string handle = 1;</code>
   * @return The handle.
   */
  java.lang.String getHandle();
  /**
   * <pre>
   * The handle can be thought of as the "name" of the device, and must be
   * unique within a Worker.
   * In the Status context, the handle should be some human-understandable name,
   * perhaps corresponding to a label physically written on the device to make
   * it easy to locate. In the Request context, the name should be the
   * *logical* name expected by the task. The bot is responsible for mapping the
   * logical name expected by the task to a machine-readable name that the task
   * can actually use, such as a USB address. The method by which this mapping
   * is communicated to the task is not covered in this API.
   * </pre>
   *
   * <code>string handle = 1;</code>
   * @return The bytes for handle.
   */
  com.google.protobuf.ByteString
      getHandleBytes();

  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Property> 
      getPropertiesList();
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Device.Property getProperties(int index);
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  int getPropertiesCount();
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder> 
      getPropertiesOrBuilderList();
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder getPropertiesOrBuilder(
      int index);
}
