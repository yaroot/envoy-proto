// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/worker.proto

package com.google.devtools.remoteworkers.v1test2;

/**
 * <pre>
 * Any device, including computers, phones, accelerators (e.g. GPUs), etc. All
 * names must be unique.
 * </pre>
 *
 * Protobuf type {@code google.devtools.remoteworkers.v1test2.Device}
 */
public final class Device extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.remoteworkers.v1test2.Device)
    DeviceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Device.newBuilder() to construct.
  private Device(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Device() {
    handle_ = "";
    properties_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Device();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Device(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            handle_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              properties_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Device.Property>();
              mutable_bitField0_ |= 0x00000001;
            }
            properties_.add(
                input.readMessage(com.google.devtools.remoteworkers.v1test2.Device.Property.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        properties_ = java.util.Collections.unmodifiableList(properties_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.remoteworkers.v1test2.Device.class, com.google.devtools.remoteworkers.v1test2.Device.Builder.class);
  }

  public interface PropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.Device.Property)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * os: a human-readable description of the OS. Examples include `linux`,
     * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
     * than one). This will be replaced in the future by more well-structured
     * keys and values to represent OS variants.
     * * has-docker: "true" if the bot has Docker installed. This will be
     * replaced in the future by a more structured message for Docker support.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * os: a human-readable description of the OS. Examples include `linux`,
     * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
     * than one). This will be replaced in the future by more well-structured
     * keys and values to represent OS variants.
     * * has-docker: "true" if the bot has Docker installed. This will be
     * replaced in the future by a more structured message for Docker support.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * A device property; see `properties` for more information.
   * </pre>
   *
   * Protobuf type {@code google.devtools.remoteworkers.v1test2.Device.Property}
   */
  public static final class Property extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.devtools.remoteworkers.v1test2.Device.Property)
      PropertyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Property.newBuilder() to construct.
    private Property(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Property() {
      key_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Property();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Property(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              key_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_Property_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_Property_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.remoteworkers.v1test2.Device.Property.class, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private volatile java.lang.Object key_;
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * os: a human-readable description of the OS. Examples include `linux`,
     * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
     * than one). This will be replaced in the future by more well-structured
     * keys and values to represent OS variants.
     * * has-docker: "true" if the bot has Docker installed. This will be
     * replaced in the future by a more structured message for Docker support.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * os: a human-readable description of the OS. Examples include `linux`,
     * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
     * than one). This will be replaced in the future by more well-structured
     * keys and values to represent OS variants.
     * * has-docker: "true" if the bot has Docker installed. This will be
     * replaced in the future by a more structured message for Docker support.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.remoteworkers.v1test2.Device.Property)) {
        return super.equals(obj);
      }
      com.google.devtools.remoteworkers.v1test2.Device.Property other = (com.google.devtools.remoteworkers.v1test2.Device.Property) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Device.Property parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.remoteworkers.v1test2.Device.Property prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A device property; see `properties` for more information.
     * </pre>
     *
     * Protobuf type {@code google.devtools.remoteworkers.v1test2.Device.Property}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.devtools.remoteworkers.v1test2.Device.Property)
        com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_Property_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_Property_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.remoteworkers.v1test2.Device.Property.class, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder.class);
      }

      // Construct using com.google.devtools.remoteworkers.v1test2.Device.Property.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_Property_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Device.Property getDefaultInstanceForType() {
        return com.google.devtools.remoteworkers.v1test2.Device.Property.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Device.Property build() {
        com.google.devtools.remoteworkers.v1test2.Device.Property result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Device.Property buildPartial() {
        com.google.devtools.remoteworkers.v1test2.Device.Property result = new com.google.devtools.remoteworkers.v1test2.Device.Property(this);
        result.key_ = key_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.remoteworkers.v1test2.Device.Property) {
          return mergeFrom((com.google.devtools.remoteworkers.v1test2.Device.Property)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.remoteworkers.v1test2.Device.Property other) {
        if (other == com.google.devtools.remoteworkers.v1test2.Device.Property.getDefaultInstance()) return this;
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.remoteworkers.v1test2.Device.Property parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.remoteworkers.v1test2.Device.Property) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * os: a human-readable description of the OS. Examples include `linux`,
       * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
       * than one). This will be replaced in the future by more well-structured
       * keys and values to represent OS variants.
       * * has-docker: "true" if the bot has Docker installed. This will be
       * replaced in the future by a more structured message for Docker support.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * os: a human-readable description of the OS. Examples include `linux`,
       * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
       * than one). This will be replaced in the future by more well-structured
       * keys and values to represent OS variants.
       * * has-docker: "true" if the bot has Docker installed. This will be
       * replaced in the future by a more structured message for Docker support.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * os: a human-readable description of the OS. Examples include `linux`,
       * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
       * than one). This will be replaced in the future by more well-structured
       * keys and values to represent OS variants.
       * * has-docker: "true" if the bot has Docker installed. This will be
       * replaced in the future by a more structured message for Docker support.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * os: a human-readable description of the OS. Examples include `linux`,
       * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
       * than one). This will be replaced in the future by more well-structured
       * keys and values to represent OS variants.
       * * has-docker: "true" if the bot has Docker installed. This will be
       * replaced in the future by a more structured message for Docker support.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * os: a human-readable description of the OS. Examples include `linux`,
       * `ubuntu` and `ubuntu 14.04` (note that a bot may advertise itself as more
       * than one). This will be replaced in the future by more well-structured
       * keys and values to represent OS variants.
       * * has-docker: "true" if the bot has Docker installed. This will be
       * replaced in the future by a more structured message for Docker support.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.devtools.remoteworkers.v1test2.Device.Property)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Device.Property)
    private static final com.google.devtools.remoteworkers.v1test2.Device.Property DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.remoteworkers.v1test2.Device.Property();
    }

    public static com.google.devtools.remoteworkers.v1test2.Device.Property getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Property>
        PARSER = new com.google.protobuf.AbstractParser<Property>() {
      @java.lang.Override
      public Property parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Property(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Property> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Property> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Device.Property getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int HANDLE_FIELD_NUMBER = 1;
  private volatile java.lang.Object handle_;
  /**
   * <pre>
   * The handle can be thought of as the "name" of the device, and must be
   * unique within a Worker.
   * In the Status context, the handle should be some human-understandable name,
   * perhaps corresponding to a label physically written on the device to make
   * it easy to locate. In the Request context, the name should be the
   * *logical* name expected by the task. The bot is responsible for mapping the
   * logical name expected by the task to a machine-readable name that the task
   * can actually use, such as a USB address. The method by which this mapping
   * is communicated to the task is not covered in this API.
   * </pre>
   *
   * <code>string handle = 1;</code>
   * @return The handle.
   */
  @java.lang.Override
  public java.lang.String getHandle() {
    java.lang.Object ref = handle_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      handle_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The handle can be thought of as the "name" of the device, and must be
   * unique within a Worker.
   * In the Status context, the handle should be some human-understandable name,
   * perhaps corresponding to a label physically written on the device to make
   * it easy to locate. In the Request context, the name should be the
   * *logical* name expected by the task. The bot is responsible for mapping the
   * logical name expected by the task to a machine-readable name that the task
   * can actually use, such as a USB address. The method by which this mapping
   * is communicated to the task is not covered in this API.
   * </pre>
   *
   * <code>string handle = 1;</code>
   * @return The bytes for handle.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHandleBytes() {
    java.lang.Object ref = handle_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      handle_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PROPERTIES_FIELD_NUMBER = 2;
  private java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Property> properties_;
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Property> getPropertiesList() {
    return properties_;
  }
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder> 
      getPropertiesOrBuilderList() {
    return properties_;
  }
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  @java.lang.Override
  public int getPropertiesCount() {
    return properties_.size();
  }
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Device.Property getProperties(int index) {
    return properties_.get(index);
  }
  /**
   * <pre>
   * Properties of this device that don't change based on the tasks that are
   * running on it, e.g. OS, CPU architecture, etc.
   * Keys may be repeated, and have the following interpretation:
   *    * Status context: the device can support *any* the listed values. For
   *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
   *    * Request context: the device *must* support *all* of the listed values.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder getPropertiesOrBuilder(
      int index) {
    return properties_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(handle_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, handle_);
    }
    for (int i = 0; i < properties_.size(); i++) {
      output.writeMessage(2, properties_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(handle_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, handle_);
    }
    for (int i = 0; i < properties_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, properties_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.remoteworkers.v1test2.Device)) {
      return super.equals(obj);
    }
    com.google.devtools.remoteworkers.v1test2.Device other = (com.google.devtools.remoteworkers.v1test2.Device) obj;

    if (!getHandle()
        .equals(other.getHandle())) return false;
    if (!getPropertiesList()
        .equals(other.getPropertiesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HANDLE_FIELD_NUMBER;
    hash = (53 * hash) + getHandle().hashCode();
    if (getPropertiesCount() > 0) {
      hash = (37 * hash) + PROPERTIES_FIELD_NUMBER;
      hash = (53 * hash) + getPropertiesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.Device parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.remoteworkers.v1test2.Device prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Any device, including computers, phones, accelerators (e.g. GPUs), etc. All
   * names must be unique.
   * </pre>
   *
   * Protobuf type {@code google.devtools.remoteworkers.v1test2.Device}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.remoteworkers.v1test2.Device)
      com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.remoteworkers.v1test2.Device.class, com.google.devtools.remoteworkers.v1test2.Device.Builder.class);
    }

    // Construct using com.google.devtools.remoteworkers.v1test2.Device.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPropertiesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      handle_ = "";

      if (propertiesBuilder_ == null) {
        properties_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        propertiesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Device_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Device getDefaultInstanceForType() {
      return com.google.devtools.remoteworkers.v1test2.Device.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Device build() {
      com.google.devtools.remoteworkers.v1test2.Device result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Device buildPartial() {
      com.google.devtools.remoteworkers.v1test2.Device result = new com.google.devtools.remoteworkers.v1test2.Device(this);
      int from_bitField0_ = bitField0_;
      result.handle_ = handle_;
      if (propertiesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          properties_ = java.util.Collections.unmodifiableList(properties_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.properties_ = properties_;
      } else {
        result.properties_ = propertiesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.remoteworkers.v1test2.Device) {
        return mergeFrom((com.google.devtools.remoteworkers.v1test2.Device)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.remoteworkers.v1test2.Device other) {
      if (other == com.google.devtools.remoteworkers.v1test2.Device.getDefaultInstance()) return this;
      if (!other.getHandle().isEmpty()) {
        handle_ = other.handle_;
        onChanged();
      }
      if (propertiesBuilder_ == null) {
        if (!other.properties_.isEmpty()) {
          if (properties_.isEmpty()) {
            properties_ = other.properties_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePropertiesIsMutable();
            properties_.addAll(other.properties_);
          }
          onChanged();
        }
      } else {
        if (!other.properties_.isEmpty()) {
          if (propertiesBuilder_.isEmpty()) {
            propertiesBuilder_.dispose();
            propertiesBuilder_ = null;
            properties_ = other.properties_;
            bitField0_ = (bitField0_ & ~0x00000001);
            propertiesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPropertiesFieldBuilder() : null;
          } else {
            propertiesBuilder_.addAllMessages(other.properties_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.devtools.remoteworkers.v1test2.Device parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.devtools.remoteworkers.v1test2.Device) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object handle_ = "";
    /**
     * <pre>
     * The handle can be thought of as the "name" of the device, and must be
     * unique within a Worker.
     * In the Status context, the handle should be some human-understandable name,
     * perhaps corresponding to a label physically written on the device to make
     * it easy to locate. In the Request context, the name should be the
     * *logical* name expected by the task. The bot is responsible for mapping the
     * logical name expected by the task to a machine-readable name that the task
     * can actually use, such as a USB address. The method by which this mapping
     * is communicated to the task is not covered in this API.
     * </pre>
     *
     * <code>string handle = 1;</code>
     * @return The handle.
     */
    public java.lang.String getHandle() {
      java.lang.Object ref = handle_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        handle_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The handle can be thought of as the "name" of the device, and must be
     * unique within a Worker.
     * In the Status context, the handle should be some human-understandable name,
     * perhaps corresponding to a label physically written on the device to make
     * it easy to locate. In the Request context, the name should be the
     * *logical* name expected by the task. The bot is responsible for mapping the
     * logical name expected by the task to a machine-readable name that the task
     * can actually use, such as a USB address. The method by which this mapping
     * is communicated to the task is not covered in this API.
     * </pre>
     *
     * <code>string handle = 1;</code>
     * @return The bytes for handle.
     */
    public com.google.protobuf.ByteString
        getHandleBytes() {
      java.lang.Object ref = handle_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        handle_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The handle can be thought of as the "name" of the device, and must be
     * unique within a Worker.
     * In the Status context, the handle should be some human-understandable name,
     * perhaps corresponding to a label physically written on the device to make
     * it easy to locate. In the Request context, the name should be the
     * *logical* name expected by the task. The bot is responsible for mapping the
     * logical name expected by the task to a machine-readable name that the task
     * can actually use, such as a USB address. The method by which this mapping
     * is communicated to the task is not covered in this API.
     * </pre>
     *
     * <code>string handle = 1;</code>
     * @param value The handle to set.
     * @return This builder for chaining.
     */
    public Builder setHandle(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      handle_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The handle can be thought of as the "name" of the device, and must be
     * unique within a Worker.
     * In the Status context, the handle should be some human-understandable name,
     * perhaps corresponding to a label physically written on the device to make
     * it easy to locate. In the Request context, the name should be the
     * *logical* name expected by the task. The bot is responsible for mapping the
     * logical name expected by the task to a machine-readable name that the task
     * can actually use, such as a USB address. The method by which this mapping
     * is communicated to the task is not covered in this API.
     * </pre>
     *
     * <code>string handle = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHandle() {
      
      handle_ = getDefaultInstance().getHandle();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The handle can be thought of as the "name" of the device, and must be
     * unique within a Worker.
     * In the Status context, the handle should be some human-understandable name,
     * perhaps corresponding to a label physically written on the device to make
     * it easy to locate. In the Request context, the name should be the
     * *logical* name expected by the task. The bot is responsible for mapping the
     * logical name expected by the task to a machine-readable name that the task
     * can actually use, such as a USB address. The method by which this mapping
     * is communicated to the task is not covered in this API.
     * </pre>
     *
     * <code>string handle = 1;</code>
     * @param value The bytes for handle to set.
     * @return This builder for chaining.
     */
    public Builder setHandleBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      handle_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Property> properties_ =
      java.util.Collections.emptyList();
    private void ensurePropertiesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        properties_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Device.Property>(properties_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Device.Property, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder, com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder> propertiesBuilder_;

    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Property> getPropertiesList() {
      if (propertiesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(properties_);
      } else {
        return propertiesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public int getPropertiesCount() {
      if (propertiesBuilder_ == null) {
        return properties_.size();
      } else {
        return propertiesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Property getProperties(int index) {
      if (propertiesBuilder_ == null) {
        return properties_.get(index);
      } else {
        return propertiesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder setProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Device.Property value) {
      if (propertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropertiesIsMutable();
        properties_.set(index, value);
        onChanged();
      } else {
        propertiesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder setProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder builderForValue) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.set(index, builderForValue.build());
        onChanged();
      } else {
        propertiesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder addProperties(com.google.devtools.remoteworkers.v1test2.Device.Property value) {
      if (propertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropertiesIsMutable();
        properties_.add(value);
        onChanged();
      } else {
        propertiesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder addProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Device.Property value) {
      if (propertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropertiesIsMutable();
        properties_.add(index, value);
        onChanged();
      } else {
        propertiesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder addProperties(
        com.google.devtools.remoteworkers.v1test2.Device.Property.Builder builderForValue) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.add(builderForValue.build());
        onChanged();
      } else {
        propertiesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder addProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder builderForValue) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.add(index, builderForValue.build());
        onChanged();
      } else {
        propertiesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder addAllProperties(
        java.lang.Iterable<? extends com.google.devtools.remoteworkers.v1test2.Device.Property> values) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, properties_);
        onChanged();
      } else {
        propertiesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder clearProperties() {
      if (propertiesBuilder_ == null) {
        properties_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        propertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public Builder removeProperties(int index) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.remove(index);
        onChanged();
      } else {
        propertiesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Property.Builder getPropertiesBuilder(
        int index) {
      return getPropertiesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder getPropertiesOrBuilder(
        int index) {
      if (propertiesBuilder_ == null) {
        return properties_.get(index);  } else {
        return propertiesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder> 
         getPropertiesOrBuilderList() {
      if (propertiesBuilder_ != null) {
        return propertiesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(properties_);
      }
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Property.Builder addPropertiesBuilder() {
      return getPropertiesFieldBuilder().addBuilder(
          com.google.devtools.remoteworkers.v1test2.Device.Property.getDefaultInstance());
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Property.Builder addPropertiesBuilder(
        int index) {
      return getPropertiesFieldBuilder().addBuilder(
          index, com.google.devtools.remoteworkers.v1test2.Device.Property.getDefaultInstance());
    }
    /**
     * <pre>
     * Properties of this device that don't change based on the tasks that are
     * running on it, e.g. OS, CPU architecture, etc.
     * Keys may be repeated, and have the following interpretation:
     *    * Status context: the device can support *any* the listed values. For
     *    example, an "ISA" property might include "x86", "x86-64" and "sse4".
     *    * Request context: the device *must* support *all* of the listed values.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Property.Builder> 
         getPropertiesBuilderList() {
      return getPropertiesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Device.Property, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder, com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder> 
        getPropertiesFieldBuilder() {
      if (propertiesBuilder_ == null) {
        propertiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.remoteworkers.v1test2.Device.Property, com.google.devtools.remoteworkers.v1test2.Device.Property.Builder, com.google.devtools.remoteworkers.v1test2.Device.PropertyOrBuilder>(
                properties_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        properties_ = null;
      }
      return propertiesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.remoteworkers.v1test2.Device)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Device)
  private static final com.google.devtools.remoteworkers.v1test2.Device DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.remoteworkers.v1test2.Device();
  }

  public static com.google.devtools.remoteworkers.v1test2.Device getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Device>
      PARSER = new com.google.protobuf.AbstractParser<Device>() {
    @java.lang.Override
    public Device parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Device(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Device> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Device> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Device getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

