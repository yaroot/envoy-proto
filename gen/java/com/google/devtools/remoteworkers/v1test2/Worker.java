// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/worker.proto

package com.google.devtools.remoteworkers.v1test2;

/**
 * <pre>
 * Describes a worker, which is a list of one or more devices and the
 * connections between them. A device could be a computer, a phone, or even an
 * accelerator like a GPU; it's up to the farm administrator to decide how to
 * model their farm. For example, if a farm only has one type of GPU, the GPU
 * could be modelled as a "has_gpu" property on its host computer; if it has
 * many subproperties itself, it might be better to model it as a separate
 * device.
 * The first device in the worker is the "primary device" - that is, the device
 * running a bot and which is responsible for actually executing commands. All
 * other devices are considered to be attached devices, and must be controllable
 * by the primary device.
 * This message (and all its submessages) can be used in two contexts:
 * * Status: sent by the bot to report the current capabilities of the device to
 * allow reservation matching.
 * * Request: sent by a client to request a device with certain capabilities in
 * a reservation.
 * Several of the fields in this message have different semantics depending on
 * which of which of these contexts it is used. These semantics are described
 * below.
 * Several messages in Worker and its submessages have the concept of keys and
 * values, such as `Worker.Property` and `Device.Property`. All keys are simple
 * strings, but certain keys are "standard" keys and should be broadly supported
 * across farms and implementations; these are listed below each relevant
 * message. Bot implementations or farm admins may add *additional* keys, but
 * these SHOULD all begin with an underscore so they do not conflict with
 * standard keys that may be added in the future.
 * Keys are not context sensitive.
 * See http://goo.gl/NurY8g for more information on the Worker message.
 * </pre>
 *
 * Protobuf type {@code google.devtools.remoteworkers.v1test2.Worker}
 */
public final class Worker extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.remoteworkers.v1test2.Worker)
    WorkerOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Worker.newBuilder() to construct.
  private Worker(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Worker() {
    devices_ = java.util.Collections.emptyList();
    properties_ = java.util.Collections.emptyList();
    configs_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Worker();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Worker(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              devices_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Device>();
              mutable_bitField0_ |= 0x00000001;
            }
            devices_.add(
                input.readMessage(com.google.devtools.remoteworkers.v1test2.Device.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              properties_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Worker.Property>();
              mutable_bitField0_ |= 0x00000002;
            }
            properties_.add(
                input.readMessage(com.google.devtools.remoteworkers.v1test2.Worker.Property.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              configs_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Worker.Config>();
              mutable_bitField0_ |= 0x00000004;
            }
            configs_.add(
                input.readMessage(com.google.devtools.remoteworkers.v1test2.Worker.Config.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        devices_ = java.util.Collections.unmodifiableList(devices_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        properties_ = java.util.Collections.unmodifiableList(properties_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        configs_ = java.util.Collections.unmodifiableList(configs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.remoteworkers.v1test2.Worker.class, com.google.devtools.remoteworkers.v1test2.Worker.Builder.class);
  }

  public interface PropertyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.Worker.Property)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * A global property; see the `properties` field for more information.
   * </pre>
   *
   * Protobuf type {@code google.devtools.remoteworkers.v1test2.Worker.Property}
   */
  public static final class Property extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.devtools.remoteworkers.v1test2.Worker.Property)
      PropertyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Property.newBuilder() to construct.
    private Property(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Property() {
      key_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Property();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Property(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              key_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Property_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Property_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.remoteworkers.v1test2.Worker.Property.class, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private volatile java.lang.Object key_;
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The property's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.remoteworkers.v1test2.Worker.Property)) {
        return super.equals(obj);
      }
      com.google.devtools.remoteworkers.v1test2.Worker.Property other = (com.google.devtools.remoteworkers.v1test2.Worker.Property) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Property parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.remoteworkers.v1test2.Worker.Property prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A global property; see the `properties` field for more information.
     * </pre>
     *
     * Protobuf type {@code google.devtools.remoteworkers.v1test2.Worker.Property}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.devtools.remoteworkers.v1test2.Worker.Property)
        com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Property_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Property_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.remoteworkers.v1test2.Worker.Property.class, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder.class);
      }

      // Construct using com.google.devtools.remoteworkers.v1test2.Worker.Property.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Property_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Worker.Property getDefaultInstanceForType() {
        return com.google.devtools.remoteworkers.v1test2.Worker.Property.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Worker.Property build() {
        com.google.devtools.remoteworkers.v1test2.Worker.Property result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Worker.Property buildPartial() {
        com.google.devtools.remoteworkers.v1test2.Worker.Property result = new com.google.devtools.remoteworkers.v1test2.Worker.Property(this);
        result.key_ = key_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.remoteworkers.v1test2.Worker.Property) {
          return mergeFrom((com.google.devtools.remoteworkers.v1test2.Worker.Property)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.remoteworkers.v1test2.Worker.Property other) {
        if (other == com.google.devtools.remoteworkers.v1test2.Worker.Property.getDefaultInstance()) return this;
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.remoteworkers.v1test2.Worker.Property parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.remoteworkers.v1test2.Worker.Property) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * pool: different workers can be reserved for different purposes. For
       * example, an admin might want to segregate long-running integration tests
       * from short-running unit tests, so unit tests will always get some
       * throughput. To support this, the server can assign different values for
       * `pool` (such as "itest" and "utest") to different workers, and then have
       * jobs request workers from those pools.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * pool: different workers can be reserved for different purposes. For
       * example, an admin might want to segregate long-running integration tests
       * from short-running unit tests, so unit tests will always get some
       * throughput. To support this, the server can assign different values for
       * `pool` (such as "itest" and "utest") to different workers, and then have
       * jobs request workers from those pools.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * pool: different workers can be reserved for different purposes. For
       * example, an admin might want to segregate long-running integration tests
       * from short-running unit tests, so unit tests will always get some
       * throughput. To support this, the server can assign different values for
       * `pool` (such as "itest" and "utest") to different workers, and then have
       * jobs request workers from those pools.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * pool: different workers can be reserved for different purposes. For
       * example, an admin might want to segregate long-running integration tests
       * from short-running unit tests, so unit tests will always get some
       * throughput. To support this, the server can assign different values for
       * `pool` (such as "itest" and "utest") to different workers, and then have
       * jobs request workers from those pools.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * pool: different workers can be reserved for different purposes. For
       * example, an admin might want to segregate long-running integration tests
       * from short-running unit tests, so unit tests will always get some
       * throughput. To support this, the server can assign different values for
       * `pool` (such as "itest" and "utest") to different workers, and then have
       * jobs request workers from those pools.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The property's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.devtools.remoteworkers.v1test2.Worker.Property)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker.Property)
    private static final com.google.devtools.remoteworkers.v1test2.Worker.Property DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.remoteworkers.v1test2.Worker.Property();
    }

    public static com.google.devtools.remoteworkers.v1test2.Worker.Property getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Property>
        PARSER = new com.google.protobuf.AbstractParser<Property>() {
      @java.lang.Override
      public Property parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Property(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Property> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Property> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Worker.Property getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.devtools.remoteworkers.v1test2.Worker.Config)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * DockerImage: the image of the container. When being reported by the
     * bot, the empty value should always be included if the bot is able to pull
     * its own images; the bot may optionally *also* report images that are
     * present in its cache. When being requested in a lease, the value is the
     * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * DockerImage: the image of the container. When being reported by the
     * bot, the empty value should always be included if the bot is able to pull
     * its own images; the bot may optionally *also* report images that are
     * present in its cache. When being requested in a lease, the value is the
     * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     * The configuration's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * The configuration's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * A configuration request or report; see the `configs` field for more
   * information.
   * </pre>
   *
   * Protobuf type {@code google.devtools.remoteworkers.v1test2.Worker.Config}
   */
  public static final class Config extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.devtools.remoteworkers.v1test2.Worker.Config)
      ConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Config.newBuilder() to construct.
    private Config(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Config() {
      key_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Config();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Config(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              key_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Config_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Config_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.remoteworkers.v1test2.Worker.Config.class, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private volatile java.lang.Object key_;
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * DockerImage: the image of the container. When being reported by the
     * bot, the empty value should always be included if the bot is able to pull
     * its own images; the bot may optionally *also* report images that are
     * present in its cache. When being requested in a lease, the value is the
     * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * DockerImage: the image of the container. When being reported by the
     * bot, the empty value should always be included if the bot is able to pull
     * its own images; the bot may optionally *also* report images that are
     * present in its cache. When being requested in a lease, the value is the
     * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
     * </pre>
     *
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <pre>
     * The configuration's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The configuration's value.
     * </pre>
     *
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.devtools.remoteworkers.v1test2.Worker.Config)) {
        return super.equals(obj);
      }
      com.google.devtools.remoteworkers.v1test2.Worker.Config other = (com.google.devtools.remoteworkers.v1test2.Worker.Config) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.devtools.remoteworkers.v1test2.Worker.Config parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.devtools.remoteworkers.v1test2.Worker.Config prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A configuration request or report; see the `configs` field for more
     * information.
     * </pre>
     *
     * Protobuf type {@code google.devtools.remoteworkers.v1test2.Worker.Config}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.devtools.remoteworkers.v1test2.Worker.Config)
        com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Config_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Config_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.devtools.remoteworkers.v1test2.Worker.Config.class, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder.class);
      }

      // Construct using com.google.devtools.remoteworkers.v1test2.Worker.Config.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_Config_descriptor;
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Worker.Config getDefaultInstanceForType() {
        return com.google.devtools.remoteworkers.v1test2.Worker.Config.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Worker.Config build() {
        com.google.devtools.remoteworkers.v1test2.Worker.Config result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.devtools.remoteworkers.v1test2.Worker.Config buildPartial() {
        com.google.devtools.remoteworkers.v1test2.Worker.Config result = new com.google.devtools.remoteworkers.v1test2.Worker.Config(this);
        result.key_ = key_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.devtools.remoteworkers.v1test2.Worker.Config) {
          return mergeFrom((com.google.devtools.remoteworkers.v1test2.Worker.Config)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.devtools.remoteworkers.v1test2.Worker.Config other) {
        if (other == com.google.devtools.remoteworkers.v1test2.Worker.Config.getDefaultInstance()) return this;
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.devtools.remoteworkers.v1test2.Worker.Config parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.devtools.remoteworkers.v1test2.Worker.Config) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * DockerImage: the image of the container. When being reported by the
       * bot, the empty value should always be included if the bot is able to pull
       * its own images; the bot may optionally *also* report images that are
       * present in its cache. When being requested in a lease, the value is the
       * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * DockerImage: the image of the container. When being reported by the
       * bot, the empty value should always be included if the bot is able to pull
       * its own images; the bot may optionally *also* report images that are
       * present in its cache. When being requested in a lease, the value is the
       * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * DockerImage: the image of the container. When being reported by the
       * bot, the empty value should always be included if the bot is able to pull
       * its own images; the bot may optionally *also* report images that are
       * present in its cache. When being requested in a lease, the value is the
       * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * DockerImage: the image of the container. When being reported by the
       * bot, the empty value should always be included if the bot is able to pull
       * its own images; the bot may optionally *also* report images that are
       * present in its cache. When being requested in a lease, the value is the
       * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For general information on keys, see the documentation to `Worker`.
       * The current set of standard keys are:
       * * DockerImage: the image of the container. When being reported by the
       * bot, the empty value should always be included if the bot is able to pull
       * its own images; the bot may optionally *also* report images that are
       * present in its cache. When being requested in a lease, the value is the
       * URI of the image (eg `gcr.io/user/image&#64;sha256:hash`).
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <pre>
       * The configuration's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The configuration's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The configuration's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The configuration's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The configuration's value.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.devtools.remoteworkers.v1test2.Worker.Config)
    }

    // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker.Config)
    private static final com.google.devtools.remoteworkers.v1test2.Worker.Config DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.devtools.remoteworkers.v1test2.Worker.Config();
    }

    public static com.google.devtools.remoteworkers.v1test2.Worker.Config getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Config>
        PARSER = new com.google.protobuf.AbstractParser<Config>() {
      @java.lang.Override
      public Config parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Config(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Config> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Config> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Worker.Config getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int DEVICES_FIELD_NUMBER = 1;
  private java.util.List<com.google.devtools.remoteworkers.v1test2.Device> devices_;
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.remoteworkers.v1test2.Device> getDevicesList() {
    return devices_;
  }
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder> 
      getDevicesOrBuilderList() {
    return devices_;
  }
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  @java.lang.Override
  public int getDevicesCount() {
    return devices_.size();
  }
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Device getDevices(int index) {
    return devices_.get(index);
  }
  /**
   * <pre>
   * A list of devices; the first device is the primary device. See the `Device`
   * message for more information.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder getDevicesOrBuilder(
      int index) {
    return devices_.get(index);
  }

  public static final int PROPERTIES_FIELD_NUMBER = 2;
  private java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Property> properties_;
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Property> getPropertiesList() {
    return properties_;
  }
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder> 
      getPropertiesOrBuilderList() {
    return properties_;
  }
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  @java.lang.Override
  public int getPropertiesCount() {
    return properties_.size();
  }
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Worker.Property getProperties(int index) {
    return properties_.get(index);
  }
  /**
   * <pre>
   * A worker may contain "global" properties. For example, certain machines
   * might be reserved for certain types of jobs, like short-running compilation
   * versus long-running integration tests. This property is known as a "pool"
   * and is not related to any one device within the worker; rather, it applies
   * to the worker as a whole.
   * The behaviour of repeated keys is identical to that of Device.Property.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder getPropertiesOrBuilder(
      int index) {
    return properties_.get(index);
  }

  public static final int CONFIGS_FIELD_NUMBER = 3;
  private java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Config> configs_;
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Config> getConfigsList() {
    return configs_;
  }
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder> 
      getConfigsOrBuilderList() {
    return configs_;
  }
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  @java.lang.Override
  public int getConfigsCount() {
    return configs_.size();
  }
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Worker.Config getConfigs(int index) {
    return configs_.get(index);
  }
  /**
   * <pre>
   * Bots can be configured in certain ways when accepting leases. For example,
   * many leases are executed inside a Docker container. To support this, the
   * bot needs to be able to report that it has Docker installed (and knows how
   * to execute something inside a container), and the task submitter needs to
   * specify which image should be used to start the container. Similarly, a
   * lease may be able to run as one of several users on the worker; in such
   * cases, the bot needs to report what users are available, and the submitter
   * needs to choose one.
   * Therefore, when this message is reported by the bot to the service, each
   * key represents a *type* of configuration that the bot knows how to set,
   * while each *value* represents a legal value for that configuration (the
   * empty string is interpretted as a wildcard, such as for Docker images).
   * When this message is sent by the server to the bot in the context of a
   * lease, it represents a command to the bot to apply the setting. Keys may
   * be repeated during reporting but not in a lease.
   * </pre>
   *
   * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder getConfigsOrBuilder(
      int index) {
    return configs_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < devices_.size(); i++) {
      output.writeMessage(1, devices_.get(i));
    }
    for (int i = 0; i < properties_.size(); i++) {
      output.writeMessage(2, properties_.get(i));
    }
    for (int i = 0; i < configs_.size(); i++) {
      output.writeMessage(3, configs_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < devices_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, devices_.get(i));
    }
    for (int i = 0; i < properties_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, properties_.get(i));
    }
    for (int i = 0; i < configs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, configs_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.remoteworkers.v1test2.Worker)) {
      return super.equals(obj);
    }
    com.google.devtools.remoteworkers.v1test2.Worker other = (com.google.devtools.remoteworkers.v1test2.Worker) obj;

    if (!getDevicesList()
        .equals(other.getDevicesList())) return false;
    if (!getPropertiesList()
        .equals(other.getPropertiesList())) return false;
    if (!getConfigsList()
        .equals(other.getConfigsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getDevicesCount() > 0) {
      hash = (37 * hash) + DEVICES_FIELD_NUMBER;
      hash = (53 * hash) + getDevicesList().hashCode();
    }
    if (getPropertiesCount() > 0) {
      hash = (37 * hash) + PROPERTIES_FIELD_NUMBER;
      hash = (53 * hash) + getPropertiesList().hashCode();
    }
    if (getConfigsCount() > 0) {
      hash = (37 * hash) + CONFIGS_FIELD_NUMBER;
      hash = (53 * hash) + getConfigsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.remoteworkers.v1test2.Worker parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.remoteworkers.v1test2.Worker prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes a worker, which is a list of one or more devices and the
   * connections between them. A device could be a computer, a phone, or even an
   * accelerator like a GPU; it's up to the farm administrator to decide how to
   * model their farm. For example, if a farm only has one type of GPU, the GPU
   * could be modelled as a "has_gpu" property on its host computer; if it has
   * many subproperties itself, it might be better to model it as a separate
   * device.
   * The first device in the worker is the "primary device" - that is, the device
   * running a bot and which is responsible for actually executing commands. All
   * other devices are considered to be attached devices, and must be controllable
   * by the primary device.
   * This message (and all its submessages) can be used in two contexts:
   * * Status: sent by the bot to report the current capabilities of the device to
   * allow reservation matching.
   * * Request: sent by a client to request a device with certain capabilities in
   * a reservation.
   * Several of the fields in this message have different semantics depending on
   * which of which of these contexts it is used. These semantics are described
   * below.
   * Several messages in Worker and its submessages have the concept of keys and
   * values, such as `Worker.Property` and `Device.Property`. All keys are simple
   * strings, but certain keys are "standard" keys and should be broadly supported
   * across farms and implementations; these are listed below each relevant
   * message. Bot implementations or farm admins may add *additional* keys, but
   * these SHOULD all begin with an underscore so they do not conflict with
   * standard keys that may be added in the future.
   * Keys are not context sensitive.
   * See http://goo.gl/NurY8g for more information on the Worker message.
   * </pre>
   *
   * Protobuf type {@code google.devtools.remoteworkers.v1test2.Worker}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.remoteworkers.v1test2.Worker)
      com.google.devtools.remoteworkers.v1test2.WorkerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.remoteworkers.v1test2.Worker.class, com.google.devtools.remoteworkers.v1test2.Worker.Builder.class);
    }

    // Construct using com.google.devtools.remoteworkers.v1test2.Worker.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getDevicesFieldBuilder();
        getPropertiesFieldBuilder();
        getConfigsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (devicesBuilder_ == null) {
        devices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        devicesBuilder_.clear();
      }
      if (propertiesBuilder_ == null) {
        properties_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        propertiesBuilder_.clear();
      }
      if (configsBuilder_ == null) {
        configs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        configsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.remoteworkers.v1test2.RemoteWorkersWorker.internal_static_google_devtools_remoteworkers_v1test2_Worker_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Worker getDefaultInstanceForType() {
      return com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Worker build() {
      com.google.devtools.remoteworkers.v1test2.Worker result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.remoteworkers.v1test2.Worker buildPartial() {
      com.google.devtools.remoteworkers.v1test2.Worker result = new com.google.devtools.remoteworkers.v1test2.Worker(this);
      int from_bitField0_ = bitField0_;
      if (devicesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          devices_ = java.util.Collections.unmodifiableList(devices_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.devices_ = devices_;
      } else {
        result.devices_ = devicesBuilder_.build();
      }
      if (propertiesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          properties_ = java.util.Collections.unmodifiableList(properties_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.properties_ = properties_;
      } else {
        result.properties_ = propertiesBuilder_.build();
      }
      if (configsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          configs_ = java.util.Collections.unmodifiableList(configs_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.configs_ = configs_;
      } else {
        result.configs_ = configsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.remoteworkers.v1test2.Worker) {
        return mergeFrom((com.google.devtools.remoteworkers.v1test2.Worker)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.remoteworkers.v1test2.Worker other) {
      if (other == com.google.devtools.remoteworkers.v1test2.Worker.getDefaultInstance()) return this;
      if (devicesBuilder_ == null) {
        if (!other.devices_.isEmpty()) {
          if (devices_.isEmpty()) {
            devices_ = other.devices_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDevicesIsMutable();
            devices_.addAll(other.devices_);
          }
          onChanged();
        }
      } else {
        if (!other.devices_.isEmpty()) {
          if (devicesBuilder_.isEmpty()) {
            devicesBuilder_.dispose();
            devicesBuilder_ = null;
            devices_ = other.devices_;
            bitField0_ = (bitField0_ & ~0x00000001);
            devicesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDevicesFieldBuilder() : null;
          } else {
            devicesBuilder_.addAllMessages(other.devices_);
          }
        }
      }
      if (propertiesBuilder_ == null) {
        if (!other.properties_.isEmpty()) {
          if (properties_.isEmpty()) {
            properties_ = other.properties_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePropertiesIsMutable();
            properties_.addAll(other.properties_);
          }
          onChanged();
        }
      } else {
        if (!other.properties_.isEmpty()) {
          if (propertiesBuilder_.isEmpty()) {
            propertiesBuilder_.dispose();
            propertiesBuilder_ = null;
            properties_ = other.properties_;
            bitField0_ = (bitField0_ & ~0x00000002);
            propertiesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPropertiesFieldBuilder() : null;
          } else {
            propertiesBuilder_.addAllMessages(other.properties_);
          }
        }
      }
      if (configsBuilder_ == null) {
        if (!other.configs_.isEmpty()) {
          if (configs_.isEmpty()) {
            configs_ = other.configs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureConfigsIsMutable();
            configs_.addAll(other.configs_);
          }
          onChanged();
        }
      } else {
        if (!other.configs_.isEmpty()) {
          if (configsBuilder_.isEmpty()) {
            configsBuilder_.dispose();
            configsBuilder_ = null;
            configs_ = other.configs_;
            bitField0_ = (bitField0_ & ~0x00000004);
            configsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getConfigsFieldBuilder() : null;
          } else {
            configsBuilder_.addAllMessages(other.configs_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.devtools.remoteworkers.v1test2.Worker parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.devtools.remoteworkers.v1test2.Worker) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.devtools.remoteworkers.v1test2.Device> devices_ =
      java.util.Collections.emptyList();
    private void ensureDevicesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        devices_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Device>(devices_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Device, com.google.devtools.remoteworkers.v1test2.Device.Builder, com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder> devicesBuilder_;

    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Device> getDevicesList() {
      if (devicesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(devices_);
      } else {
        return devicesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public int getDevicesCount() {
      if (devicesBuilder_ == null) {
        return devices_.size();
      } else {
        return devicesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device getDevices(int index) {
      if (devicesBuilder_ == null) {
        return devices_.get(index);
      } else {
        return devicesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder setDevices(
        int index, com.google.devtools.remoteworkers.v1test2.Device value) {
      if (devicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDevicesIsMutable();
        devices_.set(index, value);
        onChanged();
      } else {
        devicesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder setDevices(
        int index, com.google.devtools.remoteworkers.v1test2.Device.Builder builderForValue) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.set(index, builderForValue.build());
        onChanged();
      } else {
        devicesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder addDevices(com.google.devtools.remoteworkers.v1test2.Device value) {
      if (devicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDevicesIsMutable();
        devices_.add(value);
        onChanged();
      } else {
        devicesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder addDevices(
        int index, com.google.devtools.remoteworkers.v1test2.Device value) {
      if (devicesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDevicesIsMutable();
        devices_.add(index, value);
        onChanged();
      } else {
        devicesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder addDevices(
        com.google.devtools.remoteworkers.v1test2.Device.Builder builderForValue) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.add(builderForValue.build());
        onChanged();
      } else {
        devicesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder addDevices(
        int index, com.google.devtools.remoteworkers.v1test2.Device.Builder builderForValue) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.add(index, builderForValue.build());
        onChanged();
      } else {
        devicesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder addAllDevices(
        java.lang.Iterable<? extends com.google.devtools.remoteworkers.v1test2.Device> values) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, devices_);
        onChanged();
      } else {
        devicesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder clearDevices() {
      if (devicesBuilder_ == null) {
        devices_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        devicesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public Builder removeDevices(int index) {
      if (devicesBuilder_ == null) {
        ensureDevicesIsMutable();
        devices_.remove(index);
        onChanged();
      } else {
        devicesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Builder getDevicesBuilder(
        int index) {
      return getDevicesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder getDevicesOrBuilder(
        int index) {
      if (devicesBuilder_ == null) {
        return devices_.get(index);  } else {
        return devicesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder> 
         getDevicesOrBuilderList() {
      if (devicesBuilder_ != null) {
        return devicesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(devices_);
      }
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Builder addDevicesBuilder() {
      return getDevicesFieldBuilder().addBuilder(
          com.google.devtools.remoteworkers.v1test2.Device.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Device.Builder addDevicesBuilder(
        int index) {
      return getDevicesFieldBuilder().addBuilder(
          index, com.google.devtools.remoteworkers.v1test2.Device.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of devices; the first device is the primary device. See the `Device`
     * message for more information.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Device.Builder> 
         getDevicesBuilderList() {
      return getDevicesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Device, com.google.devtools.remoteworkers.v1test2.Device.Builder, com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder> 
        getDevicesFieldBuilder() {
      if (devicesBuilder_ == null) {
        devicesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.remoteworkers.v1test2.Device, com.google.devtools.remoteworkers.v1test2.Device.Builder, com.google.devtools.remoteworkers.v1test2.DeviceOrBuilder>(
                devices_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        devices_ = null;
      }
      return devicesBuilder_;
    }

    private java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Property> properties_ =
      java.util.Collections.emptyList();
    private void ensurePropertiesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        properties_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Worker.Property>(properties_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Worker.Property, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder, com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder> propertiesBuilder_;

    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Property> getPropertiesList() {
      if (propertiesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(properties_);
      } else {
        return propertiesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public int getPropertiesCount() {
      if (propertiesBuilder_ == null) {
        return properties_.size();
      } else {
        return propertiesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Property getProperties(int index) {
      if (propertiesBuilder_ == null) {
        return properties_.get(index);
      } else {
        return propertiesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder setProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Property value) {
      if (propertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropertiesIsMutable();
        properties_.set(index, value);
        onChanged();
      } else {
        propertiesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder setProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder builderForValue) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.set(index, builderForValue.build());
        onChanged();
      } else {
        propertiesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder addProperties(com.google.devtools.remoteworkers.v1test2.Worker.Property value) {
      if (propertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropertiesIsMutable();
        properties_.add(value);
        onChanged();
      } else {
        propertiesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder addProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Property value) {
      if (propertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePropertiesIsMutable();
        properties_.add(index, value);
        onChanged();
      } else {
        propertiesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder addProperties(
        com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder builderForValue) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.add(builderForValue.build());
        onChanged();
      } else {
        propertiesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder addProperties(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder builderForValue) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.add(index, builderForValue.build());
        onChanged();
      } else {
        propertiesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder addAllProperties(
        java.lang.Iterable<? extends com.google.devtools.remoteworkers.v1test2.Worker.Property> values) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, properties_);
        onChanged();
      } else {
        propertiesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder clearProperties() {
      if (propertiesBuilder_ == null) {
        properties_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        propertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public Builder removeProperties(int index) {
      if (propertiesBuilder_ == null) {
        ensurePropertiesIsMutable();
        properties_.remove(index);
        onChanged();
      } else {
        propertiesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder getPropertiesBuilder(
        int index) {
      return getPropertiesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder getPropertiesOrBuilder(
        int index) {
      if (propertiesBuilder_ == null) {
        return properties_.get(index);  } else {
        return propertiesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder> 
         getPropertiesOrBuilderList() {
      if (propertiesBuilder_ != null) {
        return propertiesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(properties_);
      }
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder addPropertiesBuilder() {
      return getPropertiesFieldBuilder().addBuilder(
          com.google.devtools.remoteworkers.v1test2.Worker.Property.getDefaultInstance());
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder addPropertiesBuilder(
        int index) {
      return getPropertiesFieldBuilder().addBuilder(
          index, com.google.devtools.remoteworkers.v1test2.Worker.Property.getDefaultInstance());
    }
    /**
     * <pre>
     * A worker may contain "global" properties. For example, certain machines
     * might be reserved for certain types of jobs, like short-running compilation
     * versus long-running integration tests. This property is known as a "pool"
     * and is not related to any one device within the worker; rather, it applies
     * to the worker as a whole.
     * The behaviour of repeated keys is identical to that of Device.Property.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder> 
         getPropertiesBuilderList() {
      return getPropertiesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Worker.Property, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder, com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder> 
        getPropertiesFieldBuilder() {
      if (propertiesBuilder_ == null) {
        propertiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.remoteworkers.v1test2.Worker.Property, com.google.devtools.remoteworkers.v1test2.Worker.Property.Builder, com.google.devtools.remoteworkers.v1test2.Worker.PropertyOrBuilder>(
                properties_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        properties_ = null;
      }
      return propertiesBuilder_;
    }

    private java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Config> configs_ =
      java.util.Collections.emptyList();
    private void ensureConfigsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        configs_ = new java.util.ArrayList<com.google.devtools.remoteworkers.v1test2.Worker.Config>(configs_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Worker.Config, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder, com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder> configsBuilder_;

    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Config> getConfigsList() {
      if (configsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(configs_);
      } else {
        return configsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public int getConfigsCount() {
      if (configsBuilder_ == null) {
        return configs_.size();
      } else {
        return configsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Config getConfigs(int index) {
      if (configsBuilder_ == null) {
        return configs_.get(index);
      } else {
        return configsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder setConfigs(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Config value) {
      if (configsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigsIsMutable();
        configs_.set(index, value);
        onChanged();
      } else {
        configsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder setConfigs(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder builderForValue) {
      if (configsBuilder_ == null) {
        ensureConfigsIsMutable();
        configs_.set(index, builderForValue.build());
        onChanged();
      } else {
        configsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder addConfigs(com.google.devtools.remoteworkers.v1test2.Worker.Config value) {
      if (configsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigsIsMutable();
        configs_.add(value);
        onChanged();
      } else {
        configsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder addConfigs(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Config value) {
      if (configsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigsIsMutable();
        configs_.add(index, value);
        onChanged();
      } else {
        configsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder addConfigs(
        com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder builderForValue) {
      if (configsBuilder_ == null) {
        ensureConfigsIsMutable();
        configs_.add(builderForValue.build());
        onChanged();
      } else {
        configsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder addConfigs(
        int index, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder builderForValue) {
      if (configsBuilder_ == null) {
        ensureConfigsIsMutable();
        configs_.add(index, builderForValue.build());
        onChanged();
      } else {
        configsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder addAllConfigs(
        java.lang.Iterable<? extends com.google.devtools.remoteworkers.v1test2.Worker.Config> values) {
      if (configsBuilder_ == null) {
        ensureConfigsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, configs_);
        onChanged();
      } else {
        configsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder clearConfigs() {
      if (configsBuilder_ == null) {
        configs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        configsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public Builder removeConfigs(int index) {
      if (configsBuilder_ == null) {
        ensureConfigsIsMutable();
        configs_.remove(index);
        onChanged();
      } else {
        configsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder getConfigsBuilder(
        int index) {
      return getConfigsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder getConfigsOrBuilder(
        int index) {
      if (configsBuilder_ == null) {
        return configs_.get(index);  } else {
        return configsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public java.util.List<? extends com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder> 
         getConfigsOrBuilderList() {
      if (configsBuilder_ != null) {
        return configsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(configs_);
      }
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder addConfigsBuilder() {
      return getConfigsFieldBuilder().addBuilder(
          com.google.devtools.remoteworkers.v1test2.Worker.Config.getDefaultInstance());
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder addConfigsBuilder(
        int index) {
      return getConfigsFieldBuilder().addBuilder(
          index, com.google.devtools.remoteworkers.v1test2.Worker.Config.getDefaultInstance());
    }
    /**
     * <pre>
     * Bots can be configured in certain ways when accepting leases. For example,
     * many leases are executed inside a Docker container. To support this, the
     * bot needs to be able to report that it has Docker installed (and knows how
     * to execute something inside a container), and the task submitter needs to
     * specify which image should be used to start the container. Similarly, a
     * lease may be able to run as one of several users on the worker; in such
     * cases, the bot needs to report what users are available, and the submitter
     * needs to choose one.
     * Therefore, when this message is reported by the bot to the service, each
     * key represents a *type* of configuration that the bot knows how to set,
     * while each *value* represents a legal value for that configuration (the
     * empty string is interpretted as a wildcard, such as for Docker images).
     * When this message is sent by the server to the bot in the context of a
     * lease, it represents a command to the bot to apply the setting. Keys may
     * be repeated during reporting but not in a lease.
     * </pre>
     *
     * <code>repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;</code>
     */
    public java.util.List<com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder> 
         getConfigsBuilderList() {
      return getConfigsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.remoteworkers.v1test2.Worker.Config, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder, com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder> 
        getConfigsFieldBuilder() {
      if (configsBuilder_ == null) {
        configsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.remoteworkers.v1test2.Worker.Config, com.google.devtools.remoteworkers.v1test2.Worker.Config.Builder, com.google.devtools.remoteworkers.v1test2.Worker.ConfigOrBuilder>(
                configs_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        configs_ = null;
      }
      return configsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.remoteworkers.v1test2.Worker)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker)
  private static final com.google.devtools.remoteworkers.v1test2.Worker DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.remoteworkers.v1test2.Worker();
  }

  public static com.google.devtools.remoteworkers.v1test2.Worker getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Worker>
      PARSER = new com.google.protobuf.AbstractParser<Worker>() {
    @java.lang.Override
    public Worker parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Worker(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Worker> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Worker> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.remoteworkers.v1test2.Worker getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

