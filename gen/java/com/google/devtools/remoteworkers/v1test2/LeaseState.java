// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

package com.google.devtools.remoteworkers.v1test2;

/**
 * <pre>
 * The state of the lease. All leases start in the PENDING state. A bot can
 * change PENDING to ACTIVE or (in the case of an error) COMPLETED, or from
 * ACTIVE to COMPLETED. The server can change PENDING or ACTIVE to CANCELLED if
 * it wants the bot to release its resources - for example, if the bot needs to
 * be quarantined (it's producing bad output) or a cell needs to be drained.
 * </pre>
 *
 * Protobuf enum {@code google.devtools.remoteworkers.v1test2.LeaseState}
 */
public enum LeaseState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default value; do not use.
   * </pre>
   *
   * <code>LEASE_STATE_UNSPECIFIED = 0;</code>
   */
  LEASE_STATE_UNSPECIFIED(0),
  /**
   * <pre>
   * Pending: the server expects the bot to accept this lease. This may only be
   * set by the server.
   * </pre>
   *
   * <code>PENDING = 1;</code>
   */
  PENDING(1),
  /**
   * <pre>
   * Active: the bot has accepted this lease. This may only be set by the bot.
   * </pre>
   *
   * <code>ACTIVE = 2;</code>
   */
  ACTIVE(2),
  /**
   * <pre>
   * Completed: the bot is no longer leased. This may only be set by the bot,
   * and the status field must be populated iff the state is COMPLETED.
   * </pre>
   *
   * <code>COMPLETED = 4;</code>
   */
  COMPLETED(4),
  /**
   * <pre>
   * Cancelled: The bot should immediately release all resources associated with
   * the lease. This may only be set by the server.
   * </pre>
   *
   * <code>CANCELLED = 5;</code>
   */
  CANCELLED(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Default value; do not use.
   * </pre>
   *
   * <code>LEASE_STATE_UNSPECIFIED = 0;</code>
   */
  public static final int LEASE_STATE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Pending: the server expects the bot to accept this lease. This may only be
   * set by the server.
   * </pre>
   *
   * <code>PENDING = 1;</code>
   */
  public static final int PENDING_VALUE = 1;
  /**
   * <pre>
   * Active: the bot has accepted this lease. This may only be set by the bot.
   * </pre>
   *
   * <code>ACTIVE = 2;</code>
   */
  public static final int ACTIVE_VALUE = 2;
  /**
   * <pre>
   * Completed: the bot is no longer leased. This may only be set by the bot,
   * and the status field must be populated iff the state is COMPLETED.
   * </pre>
   *
   * <code>COMPLETED = 4;</code>
   */
  public static final int COMPLETED_VALUE = 4;
  /**
   * <pre>
   * Cancelled: The bot should immediately release all resources associated with
   * the lease. This may only be set by the server.
   * </pre>
   *
   * <code>CANCELLED = 5;</code>
   */
  public static final int CANCELLED_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static LeaseState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static LeaseState forNumber(int value) {
    switch (value) {
      case 0: return LEASE_STATE_UNSPECIFIED;
      case 1: return PENDING;
      case 2: return ACTIVE;
      case 4: return COMPLETED;
      case 5: return CANCELLED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<LeaseState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      LeaseState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<LeaseState>() {
          public LeaseState findValueByNumber(int number) {
            return LeaseState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.devtools.remoteworkers.v1test2.RemoteWorkersBots.getDescriptor().getEnumTypes().get(1);
  }

  private static final LeaseState[] VALUES = values();

  public static LeaseState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private LeaseState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.devtools.remoteworkers.v1test2.LeaseState)
}

