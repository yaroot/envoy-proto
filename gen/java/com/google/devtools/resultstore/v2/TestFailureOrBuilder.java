// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/test_suite.proto

package com.google.devtools.resultstore.v2;

public interface TestFailureOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.TestFailure)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The exception message reported in the message attribute. Typically short,
   * but may be multi-line. Eg. "Expected 'foo' but was 'bar'".
   * </pre>
   *
   * <code>string failure_message = 1;</code>
   * @return The failureMessage.
   */
  java.lang.String getFailureMessage();
  /**
   * <pre>
   * The exception message reported in the message attribute. Typically short,
   * but may be multi-line. Eg. "Expected 'foo' but was 'bar'".
   * </pre>
   *
   * <code>string failure_message = 1;</code>
   * @return The bytes for failureMessage.
   */
  com.google.protobuf.ByteString
      getFailureMessageBytes();

  /**
   * <pre>
   * The type of the exception being thrown, reported in the type attribute.
   * Eg: "org.junit.ComparisonFailure"
   * </pre>
   *
   * <code>string exception_type = 2;</code>
   * @return The exceptionType.
   */
  java.lang.String getExceptionType();
  /**
   * <pre>
   * The type of the exception being thrown, reported in the type attribute.
   * Eg: "org.junit.ComparisonFailure"
   * </pre>
   *
   * <code>string exception_type = 2;</code>
   * @return The bytes for exceptionType.
   */
  com.google.protobuf.ByteString
      getExceptionTypeBytes();

  /**
   * <pre>
   * The stack trace reported as the content of the &lt;failure&gt; element, often in
   * a CDATA block. This contains one line for each stack frame, each including
   * a method/function name, a class/file name, and a line number. Most recent
   * call is usually first, but not for Python stack traces. May contain the
   * exception_type and message.
   * </pre>
   *
   * <code>string stack_trace = 3;</code>
   * @return The stackTrace.
   */
  java.lang.String getStackTrace();
  /**
   * <pre>
   * The stack trace reported as the content of the &lt;failure&gt; element, often in
   * a CDATA block. This contains one line for each stack frame, each including
   * a method/function name, a class/file name, and a line number. Most recent
   * call is usually first, but not for Python stack traces. May contain the
   * exception_type and message.
   * </pre>
   *
   * <code>string stack_trace = 3;</code>
   * @return The bytes for stackTrace.
   */
  com.google.protobuf.ByteString
      getStackTraceBytes();

  /**
   * <pre>
   * The expected values.
   * These values can be diffed against the actual values. Often, there is just
   * one actual and one expected value. If there is more than one, they should
   * be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string expected = 4;</code>
   * @return A list containing the expected.
   */
  java.util.List<java.lang.String>
      getExpectedList();
  /**
   * <pre>
   * The expected values.
   * These values can be diffed against the actual values. Often, there is just
   * one actual and one expected value. If there is more than one, they should
   * be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string expected = 4;</code>
   * @return The count of expected.
   */
  int getExpectedCount();
  /**
   * <pre>
   * The expected values.
   * These values can be diffed against the actual values. Often, there is just
   * one actual and one expected value. If there is more than one, they should
   * be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string expected = 4;</code>
   * @param index The index of the element to return.
   * @return The expected at the given index.
   */
  java.lang.String getExpected(int index);
  /**
   * <pre>
   * The expected values.
   * These values can be diffed against the actual values. Often, there is just
   * one actual and one expected value. If there is more than one, they should
   * be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string expected = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the expected at the given index.
   */
  com.google.protobuf.ByteString
      getExpectedBytes(int index);

  /**
   * <pre>
   * The actual values.
   * These values can be diffed against the expected values. Often, there is
   * just one actual and one expected value. If there is more than one, they
   * should be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string actual = 5;</code>
   * @return A list containing the actual.
   */
  java.util.List<java.lang.String>
      getActualList();
  /**
   * <pre>
   * The actual values.
   * These values can be diffed against the expected values. Often, there is
   * just one actual and one expected value. If there is more than one, they
   * should be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string actual = 5;</code>
   * @return The count of actual.
   */
  int getActualCount();
  /**
   * <pre>
   * The actual values.
   * These values can be diffed against the expected values. Often, there is
   * just one actual and one expected value. If there is more than one, they
   * should be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string actual = 5;</code>
   * @param index The index of the element to return.
   * @return The actual at the given index.
   */
  java.lang.String getActual(int index);
  /**
   * <pre>
   * The actual values.
   * These values can be diffed against the expected values. Often, there is
   * just one actual and one expected value. If there is more than one, they
   * should be compared as an unordered collection.
   * </pre>
   *
   * <code>repeated string actual = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the actual at the given index.
   */
  com.google.protobuf.ByteString
      getActualBytes(int index);
}
