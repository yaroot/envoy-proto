// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/invocation.proto

package com.google.devtools.resultstore.v2;

public interface InvocationAttributesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.InvocationAttributes)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Immutable. The Cloud Project that owns this invocation (this is different than the
   * Consumer Cloud Project that calls this API).
   * This must be set in the CreateInvocation call, and can't be changed.
   * As input, callers can set this field to a project id (string) or a
   * stringified int64 project number. As output, the API populates this field
   * with the stringified int64 project number (per
   * https://google.aip.dev/cloud/2510).
   * </pre>
   *
   * <code>string project_id = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
   * @return The projectId.
   */
  java.lang.String getProjectId();
  /**
   * <pre>
   * Immutable. The Cloud Project that owns this invocation (this is different than the
   * Consumer Cloud Project that calls this API).
   * This must be set in the CreateInvocation call, and can't be changed.
   * As input, callers can set this field to a project id (string) or a
   * stringified int64 project number. As output, the API populates this field
   * with the stringified int64 project number (per
   * https://google.aip.dev/cloud/2510).
   * </pre>
   *
   * <code>string project_id = 1 [(.google.api.field_behavior) = IMMUTABLE];</code>
   * @return The bytes for projectId.
   */
  com.google.protobuf.ByteString
      getProjectIdBytes();

  /**
   * <pre>
   * The list of users in the command chain.  The first user in this sequence
   * is the one who instigated the first command in the chain. For example,
   * this might contain just the user that ran a Bazel command, or a robot
   * that tested a change as part of a CI system. It could also contain the user
   * that manually triggered a CI test, then the robot that ran the test.
   * </pre>
   *
   * <code>repeated string users = 2;</code>
   * @return A list containing the users.
   */
  java.util.List<java.lang.String>
      getUsersList();
  /**
   * <pre>
   * The list of users in the command chain.  The first user in this sequence
   * is the one who instigated the first command in the chain. For example,
   * this might contain just the user that ran a Bazel command, or a robot
   * that tested a change as part of a CI system. It could also contain the user
   * that manually triggered a CI test, then the robot that ran the test.
   * </pre>
   *
   * <code>repeated string users = 2;</code>
   * @return The count of users.
   */
  int getUsersCount();
  /**
   * <pre>
   * The list of users in the command chain.  The first user in this sequence
   * is the one who instigated the first command in the chain. For example,
   * this might contain just the user that ran a Bazel command, or a robot
   * that tested a change as part of a CI system. It could also contain the user
   * that manually triggered a CI test, then the robot that ran the test.
   * </pre>
   *
   * <code>repeated string users = 2;</code>
   * @param index The index of the element to return.
   * @return The users at the given index.
   */
  java.lang.String getUsers(int index);
  /**
   * <pre>
   * The list of users in the command chain.  The first user in this sequence
   * is the one who instigated the first command in the chain. For example,
   * this might contain just the user that ran a Bazel command, or a robot
   * that tested a change as part of a CI system. It could also contain the user
   * that manually triggered a CI test, then the robot that ran the test.
   * </pre>
   *
   * <code>repeated string users = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the users at the given index.
   */
  com.google.protobuf.ByteString
      getUsersBytes(int index);

  /**
   * <pre>
   * Labels to categorize this invocation.
   * This is implemented as a set. All labels will be unique. Any duplicate
   * labels added will be ignored. Labels will be returned in lexicographical
   * order. Labels should be a list of words describing the Invocation. Labels
   * should be short, easy to read, and you shouldn't have more than a handful.
   * Labels should not be used for unique properties such as unique IDs. Use
   * properties in cases that don't meet these conditions.
   * </pre>
   *
   * <code>repeated string labels = 3;</code>
   * @return A list containing the labels.
   */
  java.util.List<java.lang.String>
      getLabelsList();
  /**
   * <pre>
   * Labels to categorize this invocation.
   * This is implemented as a set. All labels will be unique. Any duplicate
   * labels added will be ignored. Labels will be returned in lexicographical
   * order. Labels should be a list of words describing the Invocation. Labels
   * should be short, easy to read, and you shouldn't have more than a handful.
   * Labels should not be used for unique properties such as unique IDs. Use
   * properties in cases that don't meet these conditions.
   * </pre>
   *
   * <code>repeated string labels = 3;</code>
   * @return The count of labels.
   */
  int getLabelsCount();
  /**
   * <pre>
   * Labels to categorize this invocation.
   * This is implemented as a set. All labels will be unique. Any duplicate
   * labels added will be ignored. Labels will be returned in lexicographical
   * order. Labels should be a list of words describing the Invocation. Labels
   * should be short, easy to read, and you shouldn't have more than a handful.
   * Labels should not be used for unique properties such as unique IDs. Use
   * properties in cases that don't meet these conditions.
   * </pre>
   *
   * <code>repeated string labels = 3;</code>
   * @param index The index of the element to return.
   * @return The labels at the given index.
   */
  java.lang.String getLabels(int index);
  /**
   * <pre>
   * Labels to categorize this invocation.
   * This is implemented as a set. All labels will be unique. Any duplicate
   * labels added will be ignored. Labels will be returned in lexicographical
   * order. Labels should be a list of words describing the Invocation. Labels
   * should be short, easy to read, and you shouldn't have more than a handful.
   * Labels should not be used for unique properties such as unique IDs. Use
   * properties in cases that don't meet these conditions.
   * </pre>
   *
   * <code>repeated string labels = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the labels at the given index.
   */
  com.google.protobuf.ByteString
      getLabelsBytes(int index);

  /**
   * <pre>
   * This field describes the overall context or purpose of this invocation.
   * It will be used in the UI to give users more information about
   * how or why this invocation was run.
   * </pre>
   *
   * <code>string description = 4;</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * This field describes the overall context or purpose of this invocation.
   * It will be used in the UI to give users more information about
   * how or why this invocation was run.
   * </pre>
   *
   * <code>string description = 4;</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * If this Invocation was run in the context of a larger Continuous
   * Integration build or other automated system, this field may contain more
   * information about the greater context.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.InvocationContext invocation_contexts = 6;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.InvocationContext> 
      getInvocationContextsList();
  /**
   * <pre>
   * If this Invocation was run in the context of a larger Continuous
   * Integration build or other automated system, this field may contain more
   * information about the greater context.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.InvocationContext invocation_contexts = 6;</code>
   */
  com.google.devtools.resultstore.v2.InvocationContext getInvocationContexts(int index);
  /**
   * <pre>
   * If this Invocation was run in the context of a larger Continuous
   * Integration build or other automated system, this field may contain more
   * information about the greater context.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.InvocationContext invocation_contexts = 6;</code>
   */
  int getInvocationContextsCount();
  /**
   * <pre>
   * If this Invocation was run in the context of a larger Continuous
   * Integration build or other automated system, this field may contain more
   * information about the greater context.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.InvocationContext invocation_contexts = 6;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.InvocationContextOrBuilder> 
      getInvocationContextsOrBuilderList();
  /**
   * <pre>
   * If this Invocation was run in the context of a larger Continuous
   * Integration build or other automated system, this field may contain more
   * information about the greater context.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.InvocationContext invocation_contexts = 6;</code>
   */
  com.google.devtools.resultstore.v2.InvocationContextOrBuilder getInvocationContextsOrBuilder(
      int index);

  /**
   * <pre>
   * Exit code of the process that ran the invocation. A non-zero value
   * means failure. For example, the exit code of a "bazel test" command.
   * </pre>
   *
   * <code>int32 exit_code = 7;</code>
   * @return The exitCode.
   */
  int getExitCode();
}
