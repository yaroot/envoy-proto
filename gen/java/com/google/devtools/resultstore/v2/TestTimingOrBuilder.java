// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/action.proto

package com.google.devtools.resultstore.v2;

public interface TestTimingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.TestTiming)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Used for local test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.LocalTestTiming local = 1;</code>
   * @return Whether the local field is set.
   */
  boolean hasLocal();
  /**
   * <pre>
   * Used for local test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.LocalTestTiming local = 1;</code>
   * @return The local.
   */
  com.google.devtools.resultstore.v2.LocalTestTiming getLocal();
  /**
   * <pre>
   * Used for local test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.LocalTestTiming local = 1;</code>
   */
  com.google.devtools.resultstore.v2.LocalTestTimingOrBuilder getLocalOrBuilder();

  /**
   * <pre>
   * Used for remote test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.RemoteTestTiming remote = 2;</code>
   * @return Whether the remote field is set.
   */
  boolean hasRemote();
  /**
   * <pre>
   * Used for remote test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.RemoteTestTiming remote = 2;</code>
   * @return The remote.
   */
  com.google.devtools.resultstore.v2.RemoteTestTiming getRemote();
  /**
   * <pre>
   * Used for remote test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.RemoteTestTiming remote = 2;</code>
   */
  com.google.devtools.resultstore.v2.RemoteTestTimingOrBuilder getRemoteOrBuilder();

  /**
   * <pre>
   * The amount of CPU time spent by the test process executing system calls
   * within the kernel, as opposed to library code. Time the test process spent
   * blocked does not count towards this figure.
   * </pre>
   *
   * <code>.google.protobuf.Duration system_time_duration = 3;</code>
   * @return Whether the systemTimeDuration field is set.
   */
  boolean hasSystemTimeDuration();
  /**
   * <pre>
   * The amount of CPU time spent by the test process executing system calls
   * within the kernel, as opposed to library code. Time the test process spent
   * blocked does not count towards this figure.
   * </pre>
   *
   * <code>.google.protobuf.Duration system_time_duration = 3;</code>
   * @return The systemTimeDuration.
   */
  com.google.protobuf.Duration getSystemTimeDuration();
  /**
   * <pre>
   * The amount of CPU time spent by the test process executing system calls
   * within the kernel, as opposed to library code. Time the test process spent
   * blocked does not count towards this figure.
   * </pre>
   *
   * <code>.google.protobuf.Duration system_time_duration = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getSystemTimeDurationOrBuilder();

  /**
   * <pre>
   * The amount of CPU time spent by the test process executing user-mode code
   * outside the kernel, as opposed to library code. Time the test process
   * spent blocked does not count towards this figure. You can add user_time to
   * system_time to get total CPU time taken by the test process.
   * </pre>
   *
   * <code>.google.protobuf.Duration user_time_duration = 4;</code>
   * @return Whether the userTimeDuration field is set.
   */
  boolean hasUserTimeDuration();
  /**
   * <pre>
   * The amount of CPU time spent by the test process executing user-mode code
   * outside the kernel, as opposed to library code. Time the test process
   * spent blocked does not count towards this figure. You can add user_time to
   * system_time to get total CPU time taken by the test process.
   * </pre>
   *
   * <code>.google.protobuf.Duration user_time_duration = 4;</code>
   * @return The userTimeDuration.
   */
  com.google.protobuf.Duration getUserTimeDuration();
  /**
   * <pre>
   * The amount of CPU time spent by the test process executing user-mode code
   * outside the kernel, as opposed to library code. Time the test process
   * spent blocked does not count towards this figure. You can add user_time to
   * system_time to get total CPU time taken by the test process.
   * </pre>
   *
   * <code>.google.protobuf.Duration user_time_duration = 4;</code>
   */
  com.google.protobuf.DurationOrBuilder getUserTimeDurationOrBuilder();

  /**
   * <pre>
   * Most build systems cache build results to speed up incremental builds.
   * Some also cache test results too. This indicates whether the test results
   * were found in a cache, and where that cache was located.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TestCaching test_caching = 5;</code>
   * @return The enum numeric value on the wire for testCaching.
   */
  int getTestCachingValue();
  /**
   * <pre>
   * Most build systems cache build results to speed up incremental builds.
   * Some also cache test results too. This indicates whether the test results
   * were found in a cache, and where that cache was located.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TestCaching test_caching = 5;</code>
   * @return The testCaching.
   */
  com.google.devtools.resultstore.v2.TestCaching getTestCaching();

  public com.google.devtools.resultstore.v2.TestTiming.LocationCase getLocationCase();
}
