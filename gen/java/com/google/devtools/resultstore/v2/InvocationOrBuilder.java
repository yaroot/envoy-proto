// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/invocation.proto

package com.google.devtools.resultstore.v2;

public interface InvocationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.Invocation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The resource ID components that identify the Invocation. They must match
   * the resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation.Id id = 2;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * The resource ID components that identify the Invocation. They must match
   * the resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation.Id id = 2;</code>
   * @return The id.
   */
  com.google.devtools.resultstore.v2.Invocation.Id getId();
  /**
   * <pre>
   * The resource ID components that identify the Invocation. They must match
   * the resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation.Id id = 2;</code>
   */
  com.google.devtools.resultstore.v2.Invocation.IdOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * The aggregate status of the invocation.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   * @return Whether the statusAttributes field is set.
   */
  boolean hasStatusAttributes();
  /**
   * <pre>
   * The aggregate status of the invocation.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   * @return The statusAttributes.
   */
  com.google.devtools.resultstore.v2.StatusAttributes getStatusAttributes();
  /**
   * <pre>
   * The aggregate status of the invocation.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   */
  com.google.devtools.resultstore.v2.StatusAttributesOrBuilder getStatusAttributesOrBuilder();

  /**
   * <pre>
   * When this invocation started and its duration.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   * @return Whether the timing field is set.
   */
  boolean hasTiming();
  /**
   * <pre>
   * When this invocation started and its duration.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   * @return The timing.
   */
  com.google.devtools.resultstore.v2.Timing getTiming();
  /**
   * <pre>
   * When this invocation started and its duration.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   */
  com.google.devtools.resultstore.v2.TimingOrBuilder getTimingOrBuilder();

  /**
   * <pre>
   * Attributes of this invocation.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.InvocationAttributes invocation_attributes = 5;</code>
   * @return Whether the invocationAttributes field is set.
   */
  boolean hasInvocationAttributes();
  /**
   * <pre>
   * Attributes of this invocation.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.InvocationAttributes invocation_attributes = 5;</code>
   * @return The invocationAttributes.
   */
  com.google.devtools.resultstore.v2.InvocationAttributes getInvocationAttributes();
  /**
   * <pre>
   * Attributes of this invocation.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.InvocationAttributes invocation_attributes = 5;</code>
   */
  com.google.devtools.resultstore.v2.InvocationAttributesOrBuilder getInvocationAttributesOrBuilder();

  /**
   * <pre>
   * The workspace the tool was run in.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.WorkspaceInfo workspace_info = 6;</code>
   * @return Whether the workspaceInfo field is set.
   */
  boolean hasWorkspaceInfo();
  /**
   * <pre>
   * The workspace the tool was run in.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.WorkspaceInfo workspace_info = 6;</code>
   * @return The workspaceInfo.
   */
  com.google.devtools.resultstore.v2.WorkspaceInfo getWorkspaceInfo();
  /**
   * <pre>
   * The workspace the tool was run in.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.WorkspaceInfo workspace_info = 6;</code>
   */
  com.google.devtools.resultstore.v2.WorkspaceInfoOrBuilder getWorkspaceInfoOrBuilder();

  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.Property> 
      getPropertiesList();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  com.google.devtools.resultstore.v2.Property getProperties(int index);
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  int getPropertiesCount();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.PropertyOrBuilder> 
      getPropertiesOrBuilderList();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  com.google.devtools.resultstore.v2.PropertyOrBuilder getPropertiesOrBuilder(
      int index);

  /**
   * <pre>
   * A list of file references for invocation level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Use this field to specify build logs, and other invocation level logs.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * build.log: The primary log for the Invocation.
   * coverage_report.lcov: Aggregate coverage report for the invocation.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.File> 
      getFilesList();
  /**
   * <pre>
   * A list of file references for invocation level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Use this field to specify build logs, and other invocation level logs.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * build.log: The primary log for the Invocation.
   * coverage_report.lcov: Aggregate coverage report for the invocation.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  com.google.devtools.resultstore.v2.File getFiles(int index);
  /**
   * <pre>
   * A list of file references for invocation level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Use this field to specify build logs, and other invocation level logs.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * build.log: The primary log for the Invocation.
   * coverage_report.lcov: Aggregate coverage report for the invocation.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  int getFilesCount();
  /**
   * <pre>
   * A list of file references for invocation level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Use this field to specify build logs, and other invocation level logs.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * build.log: The primary log for the Invocation.
   * coverage_report.lcov: Aggregate coverage report for the invocation.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.FileOrBuilder> 
      getFilesOrBuilderList();
  /**
   * <pre>
   * A list of file references for invocation level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Use this field to specify build logs, and other invocation level logs.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * build.log: The primary log for the Invocation.
   * coverage_report.lcov: Aggregate coverage report for the invocation.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  com.google.devtools.resultstore.v2.FileOrBuilder getFilesOrBuilder(
      int index);

  /**
   * <pre>
   * Summary of aggregate coverage across all Actions in this Invocation.
   * If missing, this data will be populated by the server from the
   * coverage_report.lcov file or the union of all ActionCoverages under this
   * invocation (in that order).
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.LanguageCoverageSummary coverage_summaries = 9;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.LanguageCoverageSummary> 
      getCoverageSummariesList();
  /**
   * <pre>
   * Summary of aggregate coverage across all Actions in this Invocation.
   * If missing, this data will be populated by the server from the
   * coverage_report.lcov file or the union of all ActionCoverages under this
   * invocation (in that order).
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.LanguageCoverageSummary coverage_summaries = 9;</code>
   */
  com.google.devtools.resultstore.v2.LanguageCoverageSummary getCoverageSummaries(int index);
  /**
   * <pre>
   * Summary of aggregate coverage across all Actions in this Invocation.
   * If missing, this data will be populated by the server from the
   * coverage_report.lcov file or the union of all ActionCoverages under this
   * invocation (in that order).
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.LanguageCoverageSummary coverage_summaries = 9;</code>
   */
  int getCoverageSummariesCount();
  /**
   * <pre>
   * Summary of aggregate coverage across all Actions in this Invocation.
   * If missing, this data will be populated by the server from the
   * coverage_report.lcov file or the union of all ActionCoverages under this
   * invocation (in that order).
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.LanguageCoverageSummary coverage_summaries = 9;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.LanguageCoverageSummaryOrBuilder> 
      getCoverageSummariesOrBuilderList();
  /**
   * <pre>
   * Summary of aggregate coverage across all Actions in this Invocation.
   * If missing, this data will be populated by the server from the
   * coverage_report.lcov file or the union of all ActionCoverages under this
   * invocation (in that order).
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.LanguageCoverageSummary coverage_summaries = 9;</code>
   */
  com.google.devtools.resultstore.v2.LanguageCoverageSummaryOrBuilder getCoverageSummariesOrBuilder(
      int index);

  /**
   * <pre>
   * Aggregate code coverage for all build and test Actions within this
   * Invocation. If missing, this data will be populated by the server
   * from the coverage_report.lcov file or the union of all ActionCoverages
   * under this invocation (in that order).
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.AggregateCoverage aggregate_coverage = 10;</code>
   * @return Whether the aggregateCoverage field is set.
   */
  boolean hasAggregateCoverage();
  /**
   * <pre>
   * Aggregate code coverage for all build and test Actions within this
   * Invocation. If missing, this data will be populated by the server
   * from the coverage_report.lcov file or the union of all ActionCoverages
   * under this invocation (in that order).
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.AggregateCoverage aggregate_coverage = 10;</code>
   * @return The aggregateCoverage.
   */
  com.google.devtools.resultstore.v2.AggregateCoverage getAggregateCoverage();
  /**
   * <pre>
   * Aggregate code coverage for all build and test Actions within this
   * Invocation. If missing, this data will be populated by the server
   * from the coverage_report.lcov file or the union of all ActionCoverages
   * under this invocation (in that order).
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.AggregateCoverage aggregate_coverage = 10;</code>
   */
  com.google.devtools.resultstore.v2.AggregateCoverageOrBuilder getAggregateCoverageOrBuilder();

  /**
   * <pre>
   * NOT IMPLEMENTED.
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 11;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.FileProcessingErrors> 
      getFileProcessingErrorsList();
  /**
   * <pre>
   * NOT IMPLEMENTED.
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 11;</code>
   */
  com.google.devtools.resultstore.v2.FileProcessingErrors getFileProcessingErrors(int index);
  /**
   * <pre>
   * NOT IMPLEMENTED.
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 11;</code>
   */
  int getFileProcessingErrorsCount();
  /**
   * <pre>
   * NOT IMPLEMENTED.
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 11;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.FileProcessingErrorsOrBuilder> 
      getFileProcessingErrorsOrBuilderList();
  /**
   * <pre>
   * NOT IMPLEMENTED.
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 11;</code>
   */
  com.google.devtools.resultstore.v2.FileProcessingErrorsOrBuilder getFileProcessingErrorsOrBuilder(
      int index);
}
