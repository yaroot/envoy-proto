// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/resultstore_upload.proto

package com.google.devtools.resultstore.v2;

/**
 * <pre>
 * Request passed into CreateInvocation
 * </pre>
 *
 * Protobuf type {@code google.devtools.resultstore.v2.CreateInvocationRequest}
 */
public final class CreateInvocationRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.resultstore.v2.CreateInvocationRequest)
    CreateInvocationRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CreateInvocationRequest.newBuilder() to construct.
  private CreateInvocationRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CreateInvocationRequest() {
    requestId_ = "";
    invocationId_ = "";
    authorizationToken_ = "";
    initialResumeToken_ = "";
    uploaderState_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CreateInvocationRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.resultstore.v2.ResultStoreUploadProto.internal_static_google_devtools_resultstore_v2_CreateInvocationRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.resultstore.v2.ResultStoreUploadProto.internal_static_google_devtools_resultstore_v2_CreateInvocationRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.resultstore.v2.CreateInvocationRequest.class, com.google.devtools.resultstore.v2.CreateInvocationRequest.Builder.class);
  }

  public static final int REQUEST_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object requestId_ = "";
  /**
   * <pre>
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID. If set, invocation_id must also be provided.
   * Restricted to 36 Unicode characters.
   * </pre>
   *
   * <code>string request_id = 1;</code>
   * @return The requestId.
   */
  @java.lang.Override
  public java.lang.String getRequestId() {
    java.lang.Object ref = requestId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      requestId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID. If set, invocation_id must also be provided.
   * Restricted to 36 Unicode characters.
   * </pre>
   *
   * <code>string request_id = 1;</code>
   * @return The bytes for requestId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRequestIdBytes() {
    java.lang.Object ref = requestId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      requestId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INVOCATION_ID_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object invocationId_ = "";
  /**
   * <pre>
   * The invocation ID. It is optional, but strongly recommended.
   * If left empty then a new unique ID will be assigned by the server. If
   * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
   * are allowed too.
   * </pre>
   *
   * <code>string invocation_id = 2;</code>
   * @return The invocationId.
   */
  @java.lang.Override
  public java.lang.String getInvocationId() {
    java.lang.Object ref = invocationId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      invocationId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The invocation ID. It is optional, but strongly recommended.
   * If left empty then a new unique ID will be assigned by the server. If
   * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
   * are allowed too.
   * </pre>
   *
   * <code>string invocation_id = 2;</code>
   * @return The bytes for invocationId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getInvocationIdBytes() {
    java.lang.Object ref = invocationId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      invocationId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INVOCATION_FIELD_NUMBER = 3;
  private com.google.devtools.resultstore.v2.Invocation invocation_;
  /**
   * <pre>
   * Required. The invocation to create.  Its name field will be ignored, since the name
   * will be derived from the id field above and assigned by the server.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the invocation field is set.
   */
  @java.lang.Override
  public boolean hasInvocation() {
    return invocation_ != null;
  }
  /**
   * <pre>
   * Required. The invocation to create.  Its name field will be ignored, since the name
   * will be derived from the id field above and assigned by the server.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The invocation.
   */
  @java.lang.Override
  public com.google.devtools.resultstore.v2.Invocation getInvocation() {
    return invocation_ == null ? com.google.devtools.resultstore.v2.Invocation.getDefaultInstance() : invocation_;
  }
  /**
   * <pre>
   * Required. The invocation to create.  Its name field will be ignored, since the name
   * will be derived from the id field above and assigned by the server.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  @java.lang.Override
  public com.google.devtools.resultstore.v2.InvocationOrBuilder getInvocationOrBuilder() {
    return invocation_ == null ? com.google.devtools.resultstore.v2.Invocation.getDefaultInstance() : invocation_;
  }

  public static final int AUTHORIZATION_TOKEN_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object authorizationToken_ = "";
  /**
   * <pre>
   * This is a token to authorize upload access to this invocation. It must be
   * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
   * CreateInvocation, all other upload RPCs for that Invocation and any of its
   * child resources must also include the exact same token, or they will be
   * rejected. The generated token should be unique to this invocation, and it
   * should be kept secret.
   * The purpose of this field is to prevent other users and tools from
   * clobbering your upload intentionally or accidentally. The standard way of
   * using this token is to create a second v4 UUID when the invocation_id is
   * created, and storing them together during the upload. Essentially, this is
   * a "password" to the invocation.
   * </pre>
   *
   * <code>string authorization_token = 4;</code>
   * @return The authorizationToken.
   */
  @java.lang.Override
  public java.lang.String getAuthorizationToken() {
    java.lang.Object ref = authorizationToken_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      authorizationToken_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * This is a token to authorize upload access to this invocation. It must be
   * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
   * CreateInvocation, all other upload RPCs for that Invocation and any of its
   * child resources must also include the exact same token, or they will be
   * rejected. The generated token should be unique to this invocation, and it
   * should be kept secret.
   * The purpose of this field is to prevent other users and tools from
   * clobbering your upload intentionally or accidentally. The standard way of
   * using this token is to create a second v4 UUID when the invocation_id is
   * created, and storing them together during the upload. Essentially, this is
   * a "password" to the invocation.
   * </pre>
   *
   * <code>string authorization_token = 4;</code>
   * @return The bytes for authorizationToken.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAuthorizationTokenBytes() {
    java.lang.Object ref = authorizationToken_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      authorizationToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int AUTO_FINALIZE_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp autoFinalizeTime_;
  /**
   * <pre>
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
   * @return Whether the autoFinalizeTime field is set.
   */
  @java.lang.Override
  public boolean hasAutoFinalizeTime() {
    return autoFinalizeTime_ != null;
  }
  /**
   * <pre>
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
   * @return The autoFinalizeTime.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getAutoFinalizeTime() {
    return autoFinalizeTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : autoFinalizeTime_;
  }
  /**
   * <pre>
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getAutoFinalizeTimeOrBuilder() {
    return autoFinalizeTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : autoFinalizeTime_;
  }

  public static final int INITIAL_RESUME_TOKEN_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object initialResumeToken_ = "";
  /**
   * <pre>
   * Client provided unique token for batch upload to ensure data integrity and
   * to provide a way to resume batch upload in case of a distributed failure on
   * the client side. The standard uploading client is presumed to have many
   * machines uploading to ResultStore, and that any given machine could process
   * any given Invocation at any time. This field is used to coordinate between
   * the client's machines, resolve concurrency issues, and enforce "exactly
   * once" semantics on each batch within the upload.
   * The typical usage of the resume_token is that it should contain a "key"
   * indicating to the client where it is in the upload process, so that the
   * client can use it to resume the upload by reconstructing the state of
   * upload from the point where it was interrupted.
   * If this matches the previously uploaded resume_token, then this request
   * will silently do nothing, making CreateInvocation idempotent.
   * If this token is provided, all further upload RPCs must be done through
   * UploadBatch. This token must not be combined with request_id.
   * Must be web safe Base64 encoded bytes.
   * </pre>
   *
   * <code>string initial_resume_token = 7;</code>
   * @return The initialResumeToken.
   */
  @java.lang.Override
  public java.lang.String getInitialResumeToken() {
    java.lang.Object ref = initialResumeToken_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      initialResumeToken_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Client provided unique token for batch upload to ensure data integrity and
   * to provide a way to resume batch upload in case of a distributed failure on
   * the client side. The standard uploading client is presumed to have many
   * machines uploading to ResultStore, and that any given machine could process
   * any given Invocation at any time. This field is used to coordinate between
   * the client's machines, resolve concurrency issues, and enforce "exactly
   * once" semantics on each batch within the upload.
   * The typical usage of the resume_token is that it should contain a "key"
   * indicating to the client where it is in the upload process, so that the
   * client can use it to resume the upload by reconstructing the state of
   * upload from the point where it was interrupted.
   * If this matches the previously uploaded resume_token, then this request
   * will silently do nothing, making CreateInvocation idempotent.
   * If this token is provided, all further upload RPCs must be done through
   * UploadBatch. This token must not be combined with request_id.
   * Must be web safe Base64 encoded bytes.
   * </pre>
   *
   * <code>string initial_resume_token = 7;</code>
   * @return The bytes for initialResumeToken.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getInitialResumeTokenBytes() {
    java.lang.Object ref = initialResumeToken_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      initialResumeToken_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int UPLOADER_STATE_FIELD_NUMBER = 8;
  private com.google.protobuf.ByteString uploaderState_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Client-specific data used to resume batch upload if an error occurs and
   * retry is needed. This serves a role closely related to resume_token, as
   * both fields may be used to provide state required to restore a Batch
   * Upload, but they differ in two important aspects:
   *  - it is not compared to previous values, and as such does not provide
   *    concurrency control;
   *  - it allows for a larger payload, since the contents are never
   *    inspected/compared;
   * The size of the message must be within 1 MiB. Too large requests will be
   * rejected.
   * </pre>
   *
   * <code>bytes uploader_state = 8;</code>
   * @return The uploaderState.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getUploaderState() {
    return uploaderState_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(requestId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, requestId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(invocationId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, invocationId_);
    }
    if (invocation_ != null) {
      output.writeMessage(3, getInvocation());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(authorizationToken_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, authorizationToken_);
    }
    if (autoFinalizeTime_ != null) {
      output.writeMessage(6, getAutoFinalizeTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(initialResumeToken_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, initialResumeToken_);
    }
    if (!uploaderState_.isEmpty()) {
      output.writeBytes(8, uploaderState_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(requestId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, requestId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(invocationId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, invocationId_);
    }
    if (invocation_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getInvocation());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(authorizationToken_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, authorizationToken_);
    }
    if (autoFinalizeTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getAutoFinalizeTime());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(initialResumeToken_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, initialResumeToken_);
    }
    if (!uploaderState_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(8, uploaderState_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.resultstore.v2.CreateInvocationRequest)) {
      return super.equals(obj);
    }
    com.google.devtools.resultstore.v2.CreateInvocationRequest other = (com.google.devtools.resultstore.v2.CreateInvocationRequest) obj;

    if (!getRequestId()
        .equals(other.getRequestId())) return false;
    if (!getInvocationId()
        .equals(other.getInvocationId())) return false;
    if (hasInvocation() != other.hasInvocation()) return false;
    if (hasInvocation()) {
      if (!getInvocation()
          .equals(other.getInvocation())) return false;
    }
    if (!getAuthorizationToken()
        .equals(other.getAuthorizationToken())) return false;
    if (hasAutoFinalizeTime() != other.hasAutoFinalizeTime()) return false;
    if (hasAutoFinalizeTime()) {
      if (!getAutoFinalizeTime()
          .equals(other.getAutoFinalizeTime())) return false;
    }
    if (!getInitialResumeToken()
        .equals(other.getInitialResumeToken())) return false;
    if (!getUploaderState()
        .equals(other.getUploaderState())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REQUEST_ID_FIELD_NUMBER;
    hash = (53 * hash) + getRequestId().hashCode();
    hash = (37 * hash) + INVOCATION_ID_FIELD_NUMBER;
    hash = (53 * hash) + getInvocationId().hashCode();
    if (hasInvocation()) {
      hash = (37 * hash) + INVOCATION_FIELD_NUMBER;
      hash = (53 * hash) + getInvocation().hashCode();
    }
    hash = (37 * hash) + AUTHORIZATION_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getAuthorizationToken().hashCode();
    if (hasAutoFinalizeTime()) {
      hash = (37 * hash) + AUTO_FINALIZE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getAutoFinalizeTime().hashCode();
    }
    hash = (37 * hash) + INITIAL_RESUME_TOKEN_FIELD_NUMBER;
    hash = (53 * hash) + getInitialResumeToken().hashCode();
    hash = (37 * hash) + UPLOADER_STATE_FIELD_NUMBER;
    hash = (53 * hash) + getUploaderState().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.resultstore.v2.CreateInvocationRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.resultstore.v2.CreateInvocationRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Request passed into CreateInvocation
   * </pre>
   *
   * Protobuf type {@code google.devtools.resultstore.v2.CreateInvocationRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.resultstore.v2.CreateInvocationRequest)
      com.google.devtools.resultstore.v2.CreateInvocationRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.resultstore.v2.ResultStoreUploadProto.internal_static_google_devtools_resultstore_v2_CreateInvocationRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.resultstore.v2.ResultStoreUploadProto.internal_static_google_devtools_resultstore_v2_CreateInvocationRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.resultstore.v2.CreateInvocationRequest.class, com.google.devtools.resultstore.v2.CreateInvocationRequest.Builder.class);
    }

    // Construct using com.google.devtools.resultstore.v2.CreateInvocationRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      requestId_ = "";
      invocationId_ = "";
      invocation_ = null;
      if (invocationBuilder_ != null) {
        invocationBuilder_.dispose();
        invocationBuilder_ = null;
      }
      authorizationToken_ = "";
      autoFinalizeTime_ = null;
      if (autoFinalizeTimeBuilder_ != null) {
        autoFinalizeTimeBuilder_.dispose();
        autoFinalizeTimeBuilder_ = null;
      }
      initialResumeToken_ = "";
      uploaderState_ = com.google.protobuf.ByteString.EMPTY;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.resultstore.v2.ResultStoreUploadProto.internal_static_google_devtools_resultstore_v2_CreateInvocationRequest_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.resultstore.v2.CreateInvocationRequest getDefaultInstanceForType() {
      return com.google.devtools.resultstore.v2.CreateInvocationRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.resultstore.v2.CreateInvocationRequest build() {
      com.google.devtools.resultstore.v2.CreateInvocationRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.resultstore.v2.CreateInvocationRequest buildPartial() {
      com.google.devtools.resultstore.v2.CreateInvocationRequest result = new com.google.devtools.resultstore.v2.CreateInvocationRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.devtools.resultstore.v2.CreateInvocationRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.requestId_ = requestId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.invocationId_ = invocationId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.invocation_ = invocationBuilder_ == null
            ? invocation_
            : invocationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.authorizationToken_ = authorizationToken_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.autoFinalizeTime_ = autoFinalizeTimeBuilder_ == null
            ? autoFinalizeTime_
            : autoFinalizeTimeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.initialResumeToken_ = initialResumeToken_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.uploaderState_ = uploaderState_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.resultstore.v2.CreateInvocationRequest) {
        return mergeFrom((com.google.devtools.resultstore.v2.CreateInvocationRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.resultstore.v2.CreateInvocationRequest other) {
      if (other == com.google.devtools.resultstore.v2.CreateInvocationRequest.getDefaultInstance()) return this;
      if (!other.getRequestId().isEmpty()) {
        requestId_ = other.requestId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getInvocationId().isEmpty()) {
        invocationId_ = other.invocationId_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasInvocation()) {
        mergeInvocation(other.getInvocation());
      }
      if (!other.getAuthorizationToken().isEmpty()) {
        authorizationToken_ = other.authorizationToken_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.hasAutoFinalizeTime()) {
        mergeAutoFinalizeTime(other.getAutoFinalizeTime());
      }
      if (!other.getInitialResumeToken().isEmpty()) {
        initialResumeToken_ = other.initialResumeToken_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      if (other.getUploaderState() != com.google.protobuf.ByteString.EMPTY) {
        setUploaderState(other.getUploaderState());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              requestId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              invocationId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getInvocationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              authorizationToken_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 50: {
              input.readMessage(
                  getAutoFinalizeTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 50
            case 58: {
              initialResumeToken_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000020;
              break;
            } // case 58
            case 66: {
              uploaderState_ = input.readBytes();
              bitField0_ |= 0x00000040;
              break;
            } // case 66
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object requestId_ = "";
    /**
     * <pre>
     * A unique identifier for this request. Must be set to a different value for
     * each request that affects a given resource (eg. a random UUID). Required
     * for the operation to be idempotent. This is achieved by ignoring this
     * request if the last successful operation on the resource had the same
     * request ID. If set, invocation_id must also be provided.
     * Restricted to 36 Unicode characters.
     * </pre>
     *
     * <code>string request_id = 1;</code>
     * @return The requestId.
     */
    public java.lang.String getRequestId() {
      java.lang.Object ref = requestId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        requestId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A unique identifier for this request. Must be set to a different value for
     * each request that affects a given resource (eg. a random UUID). Required
     * for the operation to be idempotent. This is achieved by ignoring this
     * request if the last successful operation on the resource had the same
     * request ID. If set, invocation_id must also be provided.
     * Restricted to 36 Unicode characters.
     * </pre>
     *
     * <code>string request_id = 1;</code>
     * @return The bytes for requestId.
     */
    public com.google.protobuf.ByteString
        getRequestIdBytes() {
      java.lang.Object ref = requestId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        requestId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A unique identifier for this request. Must be set to a different value for
     * each request that affects a given resource (eg. a random UUID). Required
     * for the operation to be idempotent. This is achieved by ignoring this
     * request if the last successful operation on the resource had the same
     * request ID. If set, invocation_id must also be provided.
     * Restricted to 36 Unicode characters.
     * </pre>
     *
     * <code>string request_id = 1;</code>
     * @param value The requestId to set.
     * @return This builder for chaining.
     */
    public Builder setRequestId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      requestId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique identifier for this request. Must be set to a different value for
     * each request that affects a given resource (eg. a random UUID). Required
     * for the operation to be idempotent. This is achieved by ignoring this
     * request if the last successful operation on the resource had the same
     * request ID. If set, invocation_id must also be provided.
     * Restricted to 36 Unicode characters.
     * </pre>
     *
     * <code>string request_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestId() {
      requestId_ = getDefaultInstance().getRequestId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A unique identifier for this request. Must be set to a different value for
     * each request that affects a given resource (eg. a random UUID). Required
     * for the operation to be idempotent. This is achieved by ignoring this
     * request if the last successful operation on the resource had the same
     * request ID. If set, invocation_id must also be provided.
     * Restricted to 36 Unicode characters.
     * </pre>
     *
     * <code>string request_id = 1;</code>
     * @param value The bytes for requestId to set.
     * @return This builder for chaining.
     */
    public Builder setRequestIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      requestId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object invocationId_ = "";
    /**
     * <pre>
     * The invocation ID. It is optional, but strongly recommended.
     * If left empty then a new unique ID will be assigned by the server. If
     * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
     * are allowed too.
     * </pre>
     *
     * <code>string invocation_id = 2;</code>
     * @return The invocationId.
     */
    public java.lang.String getInvocationId() {
      java.lang.Object ref = invocationId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        invocationId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The invocation ID. It is optional, but strongly recommended.
     * If left empty then a new unique ID will be assigned by the server. If
     * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
     * are allowed too.
     * </pre>
     *
     * <code>string invocation_id = 2;</code>
     * @return The bytes for invocationId.
     */
    public com.google.protobuf.ByteString
        getInvocationIdBytes() {
      java.lang.Object ref = invocationId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        invocationId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The invocation ID. It is optional, but strongly recommended.
     * If left empty then a new unique ID will be assigned by the server. If
     * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
     * are allowed too.
     * </pre>
     *
     * <code>string invocation_id = 2;</code>
     * @param value The invocationId to set.
     * @return This builder for chaining.
     */
    public Builder setInvocationId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      invocationId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The invocation ID. It is optional, but strongly recommended.
     * If left empty then a new unique ID will be assigned by the server. If
     * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
     * are allowed too.
     * </pre>
     *
     * <code>string invocation_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearInvocationId() {
      invocationId_ = getDefaultInstance().getInvocationId();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The invocation ID. It is optional, but strongly recommended.
     * If left empty then a new unique ID will be assigned by the server. If
     * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
     * are allowed too.
     * </pre>
     *
     * <code>string invocation_id = 2;</code>
     * @param value The bytes for invocationId to set.
     * @return This builder for chaining.
     */
    public Builder setInvocationIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      invocationId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.devtools.resultstore.v2.Invocation invocation_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.resultstore.v2.Invocation, com.google.devtools.resultstore.v2.Invocation.Builder, com.google.devtools.resultstore.v2.InvocationOrBuilder> invocationBuilder_;
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return Whether the invocation field is set.
     */
    public boolean hasInvocation() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The invocation.
     */
    public com.google.devtools.resultstore.v2.Invocation getInvocation() {
      if (invocationBuilder_ == null) {
        return invocation_ == null ? com.google.devtools.resultstore.v2.Invocation.getDefaultInstance() : invocation_;
      } else {
        return invocationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setInvocation(com.google.devtools.resultstore.v2.Invocation value) {
      if (invocationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        invocation_ = value;
      } else {
        invocationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder setInvocation(
        com.google.devtools.resultstore.v2.Invocation.Builder builderForValue) {
      if (invocationBuilder_ == null) {
        invocation_ = builderForValue.build();
      } else {
        invocationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder mergeInvocation(com.google.devtools.resultstore.v2.Invocation value) {
      if (invocationBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          invocation_ != null &&
          invocation_ != com.google.devtools.resultstore.v2.Invocation.getDefaultInstance()) {
          getInvocationBuilder().mergeFrom(value);
        } else {
          invocation_ = value;
        }
      } else {
        invocationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public Builder clearInvocation() {
      bitField0_ = (bitField0_ & ~0x00000004);
      invocation_ = null;
      if (invocationBuilder_ != null) {
        invocationBuilder_.dispose();
        invocationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.devtools.resultstore.v2.Invocation.Builder getInvocationBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getInvocationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    public com.google.devtools.resultstore.v2.InvocationOrBuilder getInvocationOrBuilder() {
      if (invocationBuilder_ != null) {
        return invocationBuilder_.getMessageOrBuilder();
      } else {
        return invocation_ == null ?
            com.google.devtools.resultstore.v2.Invocation.getDefaultInstance() : invocation_;
      }
    }
    /**
     * <pre>
     * Required. The invocation to create.  Its name field will be ignored, since the name
     * will be derived from the id field above and assigned by the server.
     * </pre>
     *
     * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.resultstore.v2.Invocation, com.google.devtools.resultstore.v2.Invocation.Builder, com.google.devtools.resultstore.v2.InvocationOrBuilder> 
        getInvocationFieldBuilder() {
      if (invocationBuilder_ == null) {
        invocationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.resultstore.v2.Invocation, com.google.devtools.resultstore.v2.Invocation.Builder, com.google.devtools.resultstore.v2.InvocationOrBuilder>(
                getInvocation(),
                getParentForChildren(),
                isClean());
        invocation_ = null;
      }
      return invocationBuilder_;
    }

    private java.lang.Object authorizationToken_ = "";
    /**
     * <pre>
     * This is a token to authorize upload access to this invocation. It must be
     * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
     * CreateInvocation, all other upload RPCs for that Invocation and any of its
     * child resources must also include the exact same token, or they will be
     * rejected. The generated token should be unique to this invocation, and it
     * should be kept secret.
     * The purpose of this field is to prevent other users and tools from
     * clobbering your upload intentionally or accidentally. The standard way of
     * using this token is to create a second v4 UUID when the invocation_id is
     * created, and storing them together during the upload. Essentially, this is
     * a "password" to the invocation.
     * </pre>
     *
     * <code>string authorization_token = 4;</code>
     * @return The authorizationToken.
     */
    public java.lang.String getAuthorizationToken() {
      java.lang.Object ref = authorizationToken_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        authorizationToken_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * This is a token to authorize upload access to this invocation. It must be
     * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
     * CreateInvocation, all other upload RPCs for that Invocation and any of its
     * child resources must also include the exact same token, or they will be
     * rejected. The generated token should be unique to this invocation, and it
     * should be kept secret.
     * The purpose of this field is to prevent other users and tools from
     * clobbering your upload intentionally or accidentally. The standard way of
     * using this token is to create a second v4 UUID when the invocation_id is
     * created, and storing them together during the upload. Essentially, this is
     * a "password" to the invocation.
     * </pre>
     *
     * <code>string authorization_token = 4;</code>
     * @return The bytes for authorizationToken.
     */
    public com.google.protobuf.ByteString
        getAuthorizationTokenBytes() {
      java.lang.Object ref = authorizationToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        authorizationToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * This is a token to authorize upload access to this invocation. It must be
     * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
     * CreateInvocation, all other upload RPCs for that Invocation and any of its
     * child resources must also include the exact same token, or they will be
     * rejected. The generated token should be unique to this invocation, and it
     * should be kept secret.
     * The purpose of this field is to prevent other users and tools from
     * clobbering your upload intentionally or accidentally. The standard way of
     * using this token is to create a second v4 UUID when the invocation_id is
     * created, and storing them together during the upload. Essentially, this is
     * a "password" to the invocation.
     * </pre>
     *
     * <code>string authorization_token = 4;</code>
     * @param value The authorizationToken to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorizationToken(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      authorizationToken_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is a token to authorize upload access to this invocation. It must be
     * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
     * CreateInvocation, all other upload RPCs for that Invocation and any of its
     * child resources must also include the exact same token, or they will be
     * rejected. The generated token should be unique to this invocation, and it
     * should be kept secret.
     * The purpose of this field is to prevent other users and tools from
     * clobbering your upload intentionally or accidentally. The standard way of
     * using this token is to create a second v4 UUID when the invocation_id is
     * created, and storing them together during the upload. Essentially, this is
     * a "password" to the invocation.
     * </pre>
     *
     * <code>string authorization_token = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAuthorizationToken() {
      authorizationToken_ = getDefaultInstance().getAuthorizationToken();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is a token to authorize upload access to this invocation. It must be
     * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
     * CreateInvocation, all other upload RPCs for that Invocation and any of its
     * child resources must also include the exact same token, or they will be
     * rejected. The generated token should be unique to this invocation, and it
     * should be kept secret.
     * The purpose of this field is to prevent other users and tools from
     * clobbering your upload intentionally or accidentally. The standard way of
     * using this token is to create a second v4 UUID when the invocation_id is
     * created, and storing them together during the upload. Essentially, this is
     * a "password" to the invocation.
     * </pre>
     *
     * <code>string authorization_token = 4;</code>
     * @param value The bytes for authorizationToken to set.
     * @return This builder for chaining.
     */
    public Builder setAuthorizationTokenBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      authorizationToken_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp autoFinalizeTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> autoFinalizeTimeBuilder_;
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     * @return Whether the autoFinalizeTime field is set.
     */
    public boolean hasAutoFinalizeTime() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     * @return The autoFinalizeTime.
     */
    public com.google.protobuf.Timestamp getAutoFinalizeTime() {
      if (autoFinalizeTimeBuilder_ == null) {
        return autoFinalizeTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : autoFinalizeTime_;
      } else {
        return autoFinalizeTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    public Builder setAutoFinalizeTime(com.google.protobuf.Timestamp value) {
      if (autoFinalizeTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        autoFinalizeTime_ = value;
      } else {
        autoFinalizeTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    public Builder setAutoFinalizeTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (autoFinalizeTimeBuilder_ == null) {
        autoFinalizeTime_ = builderForValue.build();
      } else {
        autoFinalizeTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    public Builder mergeAutoFinalizeTime(com.google.protobuf.Timestamp value) {
      if (autoFinalizeTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          autoFinalizeTime_ != null &&
          autoFinalizeTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getAutoFinalizeTimeBuilder().mergeFrom(value);
        } else {
          autoFinalizeTime_ = value;
        }
      } else {
        autoFinalizeTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    public Builder clearAutoFinalizeTime() {
      bitField0_ = (bitField0_ & ~0x00000010);
      autoFinalizeTime_ = null;
      if (autoFinalizeTimeBuilder_ != null) {
        autoFinalizeTimeBuilder_.dispose();
        autoFinalizeTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    public com.google.protobuf.Timestamp.Builder getAutoFinalizeTimeBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getAutoFinalizeTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getAutoFinalizeTimeOrBuilder() {
      if (autoFinalizeTimeBuilder_ != null) {
        return autoFinalizeTimeBuilder_.getMessageOrBuilder();
      } else {
        return autoFinalizeTime_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : autoFinalizeTime_;
      }
    }
    /**
     * <pre>
     * By default, Invocations are auto-finalized if they are not modified for 24
     * hours. If you need auto-finalize to happen sooner, set this field to the
     * time you'd like auto-finalize to occur.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getAutoFinalizeTimeFieldBuilder() {
      if (autoFinalizeTimeBuilder_ == null) {
        autoFinalizeTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getAutoFinalizeTime(),
                getParentForChildren(),
                isClean());
        autoFinalizeTime_ = null;
      }
      return autoFinalizeTimeBuilder_;
    }

    private java.lang.Object initialResumeToken_ = "";
    /**
     * <pre>
     * Client provided unique token for batch upload to ensure data integrity and
     * to provide a way to resume batch upload in case of a distributed failure on
     * the client side. The standard uploading client is presumed to have many
     * machines uploading to ResultStore, and that any given machine could process
     * any given Invocation at any time. This field is used to coordinate between
     * the client's machines, resolve concurrency issues, and enforce "exactly
     * once" semantics on each batch within the upload.
     * The typical usage of the resume_token is that it should contain a "key"
     * indicating to the client where it is in the upload process, so that the
     * client can use it to resume the upload by reconstructing the state of
     * upload from the point where it was interrupted.
     * If this matches the previously uploaded resume_token, then this request
     * will silently do nothing, making CreateInvocation idempotent.
     * If this token is provided, all further upload RPCs must be done through
     * UploadBatch. This token must not be combined with request_id.
     * Must be web safe Base64 encoded bytes.
     * </pre>
     *
     * <code>string initial_resume_token = 7;</code>
     * @return The initialResumeToken.
     */
    public java.lang.String getInitialResumeToken() {
      java.lang.Object ref = initialResumeToken_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        initialResumeToken_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Client provided unique token for batch upload to ensure data integrity and
     * to provide a way to resume batch upload in case of a distributed failure on
     * the client side. The standard uploading client is presumed to have many
     * machines uploading to ResultStore, and that any given machine could process
     * any given Invocation at any time. This field is used to coordinate between
     * the client's machines, resolve concurrency issues, and enforce "exactly
     * once" semantics on each batch within the upload.
     * The typical usage of the resume_token is that it should contain a "key"
     * indicating to the client where it is in the upload process, so that the
     * client can use it to resume the upload by reconstructing the state of
     * upload from the point where it was interrupted.
     * If this matches the previously uploaded resume_token, then this request
     * will silently do nothing, making CreateInvocation idempotent.
     * If this token is provided, all further upload RPCs must be done through
     * UploadBatch. This token must not be combined with request_id.
     * Must be web safe Base64 encoded bytes.
     * </pre>
     *
     * <code>string initial_resume_token = 7;</code>
     * @return The bytes for initialResumeToken.
     */
    public com.google.protobuf.ByteString
        getInitialResumeTokenBytes() {
      java.lang.Object ref = initialResumeToken_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        initialResumeToken_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Client provided unique token for batch upload to ensure data integrity and
     * to provide a way to resume batch upload in case of a distributed failure on
     * the client side. The standard uploading client is presumed to have many
     * machines uploading to ResultStore, and that any given machine could process
     * any given Invocation at any time. This field is used to coordinate between
     * the client's machines, resolve concurrency issues, and enforce "exactly
     * once" semantics on each batch within the upload.
     * The typical usage of the resume_token is that it should contain a "key"
     * indicating to the client where it is in the upload process, so that the
     * client can use it to resume the upload by reconstructing the state of
     * upload from the point where it was interrupted.
     * If this matches the previously uploaded resume_token, then this request
     * will silently do nothing, making CreateInvocation idempotent.
     * If this token is provided, all further upload RPCs must be done through
     * UploadBatch. This token must not be combined with request_id.
     * Must be web safe Base64 encoded bytes.
     * </pre>
     *
     * <code>string initial_resume_token = 7;</code>
     * @param value The initialResumeToken to set.
     * @return This builder for chaining.
     */
    public Builder setInitialResumeToken(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      initialResumeToken_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Client provided unique token for batch upload to ensure data integrity and
     * to provide a way to resume batch upload in case of a distributed failure on
     * the client side. The standard uploading client is presumed to have many
     * machines uploading to ResultStore, and that any given machine could process
     * any given Invocation at any time. This field is used to coordinate between
     * the client's machines, resolve concurrency issues, and enforce "exactly
     * once" semantics on each batch within the upload.
     * The typical usage of the resume_token is that it should contain a "key"
     * indicating to the client where it is in the upload process, so that the
     * client can use it to resume the upload by reconstructing the state of
     * upload from the point where it was interrupted.
     * If this matches the previously uploaded resume_token, then this request
     * will silently do nothing, making CreateInvocation idempotent.
     * If this token is provided, all further upload RPCs must be done through
     * UploadBatch. This token must not be combined with request_id.
     * Must be web safe Base64 encoded bytes.
     * </pre>
     *
     * <code>string initial_resume_token = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearInitialResumeToken() {
      initialResumeToken_ = getDefaultInstance().getInitialResumeToken();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Client provided unique token for batch upload to ensure data integrity and
     * to provide a way to resume batch upload in case of a distributed failure on
     * the client side. The standard uploading client is presumed to have many
     * machines uploading to ResultStore, and that any given machine could process
     * any given Invocation at any time. This field is used to coordinate between
     * the client's machines, resolve concurrency issues, and enforce "exactly
     * once" semantics on each batch within the upload.
     * The typical usage of the resume_token is that it should contain a "key"
     * indicating to the client where it is in the upload process, so that the
     * client can use it to resume the upload by reconstructing the state of
     * upload from the point where it was interrupted.
     * If this matches the previously uploaded resume_token, then this request
     * will silently do nothing, making CreateInvocation idempotent.
     * If this token is provided, all further upload RPCs must be done through
     * UploadBatch. This token must not be combined with request_id.
     * Must be web safe Base64 encoded bytes.
     * </pre>
     *
     * <code>string initial_resume_token = 7;</code>
     * @param value The bytes for initialResumeToken to set.
     * @return This builder for chaining.
     */
    public Builder setInitialResumeTokenBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      initialResumeToken_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString uploaderState_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Client-specific data used to resume batch upload if an error occurs and
     * retry is needed. This serves a role closely related to resume_token, as
     * both fields may be used to provide state required to restore a Batch
     * Upload, but they differ in two important aspects:
     *  - it is not compared to previous values, and as such does not provide
     *    concurrency control;
     *  - it allows for a larger payload, since the contents are never
     *    inspected/compared;
     * The size of the message must be within 1 MiB. Too large requests will be
     * rejected.
     * </pre>
     *
     * <code>bytes uploader_state = 8;</code>
     * @return The uploaderState.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getUploaderState() {
      return uploaderState_;
    }
    /**
     * <pre>
     * Client-specific data used to resume batch upload if an error occurs and
     * retry is needed. This serves a role closely related to resume_token, as
     * both fields may be used to provide state required to restore a Batch
     * Upload, but they differ in two important aspects:
     *  - it is not compared to previous values, and as such does not provide
     *    concurrency control;
     *  - it allows for a larger payload, since the contents are never
     *    inspected/compared;
     * The size of the message must be within 1 MiB. Too large requests will be
     * rejected.
     * </pre>
     *
     * <code>bytes uploader_state = 8;</code>
     * @param value The uploaderState to set.
     * @return This builder for chaining.
     */
    public Builder setUploaderState(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      uploaderState_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Client-specific data used to resume batch upload if an error occurs and
     * retry is needed. This serves a role closely related to resume_token, as
     * both fields may be used to provide state required to restore a Batch
     * Upload, but they differ in two important aspects:
     *  - it is not compared to previous values, and as such does not provide
     *    concurrency control;
     *  - it allows for a larger payload, since the contents are never
     *    inspected/compared;
     * The size of the message must be within 1 MiB. Too large requests will be
     * rejected.
     * </pre>
     *
     * <code>bytes uploader_state = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearUploaderState() {
      bitField0_ = (bitField0_ & ~0x00000040);
      uploaderState_ = getDefaultInstance().getUploaderState();
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.resultstore.v2.CreateInvocationRequest)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.resultstore.v2.CreateInvocationRequest)
  private static final com.google.devtools.resultstore.v2.CreateInvocationRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.resultstore.v2.CreateInvocationRequest();
  }

  public static com.google.devtools.resultstore.v2.CreateInvocationRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CreateInvocationRequest>
      PARSER = new com.google.protobuf.AbstractParser<CreateInvocationRequest>() {
    @java.lang.Override
    public CreateInvocationRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CreateInvocationRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CreateInvocationRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.resultstore.v2.CreateInvocationRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

