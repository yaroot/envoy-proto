// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/resultstore_upload.proto

package com.google.devtools.resultstore.v2;

public interface CreateInvocationRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.CreateInvocationRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID. If set, invocation_id must also be provided.
   * Restricted to 36 Unicode characters.
   * </pre>
   *
   * <code>string request_id = 1;</code>
   * @return The requestId.
   */
  java.lang.String getRequestId();
  /**
   * <pre>
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID. If set, invocation_id must also be provided.
   * Restricted to 36 Unicode characters.
   * </pre>
   *
   * <code>string request_id = 1;</code>
   * @return The bytes for requestId.
   */
  com.google.protobuf.ByteString
      getRequestIdBytes();

  /**
   * <pre>
   * The invocation ID. It is optional, but strongly recommended.
   * If left empty then a new unique ID will be assigned by the server. If
   * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
   * are allowed too.
   * </pre>
   *
   * <code>string invocation_id = 2;</code>
   * @return The invocationId.
   */
  java.lang.String getInvocationId();
  /**
   * <pre>
   * The invocation ID. It is optional, but strongly recommended.
   * If left empty then a new unique ID will be assigned by the server. If
   * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
   * are allowed too.
   * </pre>
   *
   * <code>string invocation_id = 2;</code>
   * @return The bytes for invocationId.
   */
  com.google.protobuf.ByteString
      getInvocationIdBytes();

  /**
   * <pre>
   * Required. The invocation to create.  Its name field will be ignored, since the name
   * will be derived from the id field above and assigned by the server.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the invocation field is set.
   */
  boolean hasInvocation();
  /**
   * <pre>
   * Required. The invocation to create.  Its name field will be ignored, since the name
   * will be derived from the id field above and assigned by the server.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The invocation.
   */
  com.google.devtools.resultstore.v2.Invocation getInvocation();
  /**
   * <pre>
   * Required. The invocation to create.  Its name field will be ignored, since the name
   * will be derived from the id field above and assigned by the server.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Invocation invocation = 3 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.devtools.resultstore.v2.InvocationOrBuilder getInvocationOrBuilder();

  /**
   * <pre>
   * This is a token to authorize upload access to this invocation. It must be
   * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
   * CreateInvocation, all other upload RPCs for that Invocation and any of its
   * child resources must also include the exact same token, or they will be
   * rejected. The generated token should be unique to this invocation, and it
   * should be kept secret.
   * The purpose of this field is to prevent other users and tools from
   * clobbering your upload intentionally or accidentally. The standard way of
   * using this token is to create a second v4 UUID when the invocation_id is
   * created, and storing them together during the upload. Essentially, this is
   * a "password" to the invocation.
   * </pre>
   *
   * <code>string authorization_token = 4;</code>
   * @return The authorizationToken.
   */
  java.lang.String getAuthorizationToken();
  /**
   * <pre>
   * This is a token to authorize upload access to this invocation. It must be
   * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
   * CreateInvocation, all other upload RPCs for that Invocation and any of its
   * child resources must also include the exact same token, or they will be
   * rejected. The generated token should be unique to this invocation, and it
   * should be kept secret.
   * The purpose of this field is to prevent other users and tools from
   * clobbering your upload intentionally or accidentally. The standard way of
   * using this token is to create a second v4 UUID when the invocation_id is
   * created, and storing them together during the upload. Essentially, this is
   * a "password" to the invocation.
   * </pre>
   *
   * <code>string authorization_token = 4;</code>
   * @return The bytes for authorizationToken.
   */
  com.google.protobuf.ByteString
      getAuthorizationTokenBytes();

  /**
   * <pre>
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
   * @return Whether the autoFinalizeTime field is set.
   */
  boolean hasAutoFinalizeTime();
  /**
   * <pre>
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
   * @return The autoFinalizeTime.
   */
  com.google.protobuf.Timestamp getAutoFinalizeTime();
  /**
   * <pre>
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp auto_finalize_time = 6;</code>
   */
  com.google.protobuf.TimestampOrBuilder getAutoFinalizeTimeOrBuilder();

  /**
   * <pre>
   * Client provided unique token for batch upload to ensure data integrity and
   * to provide a way to resume batch upload in case of a distributed failure on
   * the client side. The standard uploading client is presumed to have many
   * machines uploading to ResultStore, and that any given machine could process
   * any given Invocation at any time. This field is used to coordinate between
   * the client's machines, resolve concurrency issues, and enforce "exactly
   * once" semantics on each batch within the upload.
   * The typical usage of the resume_token is that it should contain a "key"
   * indicating to the client where it is in the upload process, so that the
   * client can use it to resume the upload by reconstructing the state of
   * upload from the point where it was interrupted.
   * If this matches the previously uploaded resume_token, then this request
   * will silently do nothing, making CreateInvocation idempotent.
   * If this token is provided, all further upload RPCs must be done through
   * UploadBatch. This token must not be combined with request_id.
   * Must be web safe Base64 encoded bytes.
   * </pre>
   *
   * <code>string initial_resume_token = 7;</code>
   * @return The initialResumeToken.
   */
  java.lang.String getInitialResumeToken();
  /**
   * <pre>
   * Client provided unique token for batch upload to ensure data integrity and
   * to provide a way to resume batch upload in case of a distributed failure on
   * the client side. The standard uploading client is presumed to have many
   * machines uploading to ResultStore, and that any given machine could process
   * any given Invocation at any time. This field is used to coordinate between
   * the client's machines, resolve concurrency issues, and enforce "exactly
   * once" semantics on each batch within the upload.
   * The typical usage of the resume_token is that it should contain a "key"
   * indicating to the client where it is in the upload process, so that the
   * client can use it to resume the upload by reconstructing the state of
   * upload from the point where it was interrupted.
   * If this matches the previously uploaded resume_token, then this request
   * will silently do nothing, making CreateInvocation idempotent.
   * If this token is provided, all further upload RPCs must be done through
   * UploadBatch. This token must not be combined with request_id.
   * Must be web safe Base64 encoded bytes.
   * </pre>
   *
   * <code>string initial_resume_token = 7;</code>
   * @return The bytes for initialResumeToken.
   */
  com.google.protobuf.ByteString
      getInitialResumeTokenBytes();

  /**
   * <pre>
   * Client-specific data used to resume batch upload if an error occurs and
   * retry is needed. This serves a role closely related to resume_token, as
   * both fields may be used to provide state required to restore a Batch
   * Upload, but they differ in two important aspects:
   *  - it is not compared to previous values, and as such does not provide
   *    concurrency control;
   *  - it allows for a larger payload, since the contents are never
   *    inspected/compared;
   * The size of the message must be within 1 MiB. Too large requests will be
   * rejected.
   * </pre>
   *
   * <code>bytes uploader_state = 8;</code>
   * @return The uploaderState.
   */
  com.google.protobuf.ByteString getUploaderState();
}
