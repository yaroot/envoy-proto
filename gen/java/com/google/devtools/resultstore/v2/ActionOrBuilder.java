// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/action.proto

package com.google.devtools.resultstore.v2;

public interface ActionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.Action)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/url_encode(${CONFIG_ID})/actions/${url_encode(ACTION_ID)}
   * See CreateActionRequest proto for more information.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/url_encode(${CONFIG_ID})/actions/${url_encode(ACTION_ID)}
   * See CreateActionRequest proto for more information.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The resource ID components that identify the Action. They must match the
   * resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Action.Id id = 2;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * The resource ID components that identify the Action. They must match the
   * resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Action.Id id = 2;</code>
   * @return The id.
   */
  com.google.devtools.resultstore.v2.Action.Id getId();
  /**
   * <pre>
   * The resource ID components that identify the Action. They must match the
   * resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Action.Id id = 2;</code>
   */
  com.google.devtools.resultstore.v2.Action.IdOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * The status of the action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   * @return Whether the statusAttributes field is set.
   */
  boolean hasStatusAttributes();
  /**
   * <pre>
   * The status of the action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   * @return The statusAttributes.
   */
  com.google.devtools.resultstore.v2.StatusAttributes getStatusAttributes();
  /**
   * <pre>
   * The status of the action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   */
  com.google.devtools.resultstore.v2.StatusAttributesOrBuilder getStatusAttributesOrBuilder();

  /**
   * <pre>
   * The timing of the whole action. For TestActions, the start time may be
   * before the test actually started, and the duration may last until after the
   * test actually finished.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   * @return Whether the timing field is set.
   */
  boolean hasTiming();
  /**
   * <pre>
   * The timing of the whole action. For TestActions, the start time may be
   * before the test actually started, and the duration may last until after the
   * test actually finished.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   * @return The timing.
   */
  com.google.devtools.resultstore.v2.Timing getTiming();
  /**
   * <pre>
   * The timing of the whole action. For TestActions, the start time may be
   * before the test actually started, and the duration may last until after the
   * test actually finished.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   */
  com.google.devtools.resultstore.v2.TimingOrBuilder getTimingOrBuilder();

  /**
   * <pre>
   * Used only when this action represents a build action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.BuildAction build_action = 9;</code>
   * @return Whether the buildAction field is set.
   */
  boolean hasBuildAction();
  /**
   * <pre>
   * Used only when this action represents a build action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.BuildAction build_action = 9;</code>
   * @return The buildAction.
   */
  com.google.devtools.resultstore.v2.BuildAction getBuildAction();
  /**
   * <pre>
   * Used only when this action represents a build action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.BuildAction build_action = 9;</code>
   */
  com.google.devtools.resultstore.v2.BuildActionOrBuilder getBuildActionOrBuilder();

  /**
   * <pre>
   * Only for test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TestAction test_action = 10;</code>
   * @return Whether the testAction field is set.
   */
  boolean hasTestAction();
  /**
   * <pre>
   * Only for test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TestAction test_action = 10;</code>
   * @return The testAction.
   */
  com.google.devtools.resultstore.v2.TestAction getTestAction();
  /**
   * <pre>
   * Only for test actions.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TestAction test_action = 10;</code>
   */
  com.google.devtools.resultstore.v2.TestActionOrBuilder getTestActionOrBuilder();

  /**
   * <pre>
   * General attributes of the action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;</code>
   * @return Whether the actionAttributes field is set.
   */
  boolean hasActionAttributes();
  /**
   * <pre>
   * General attributes of the action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;</code>
   * @return The actionAttributes.
   */
  com.google.devtools.resultstore.v2.ActionAttributes getActionAttributes();
  /**
   * <pre>
   * General attributes of the action.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;</code>
   */
  com.google.devtools.resultstore.v2.ActionAttributesOrBuilder getActionAttributesOrBuilder();

  /**
   * <pre>
   * A list of resources that this action depended upon. May be used to provide
   * the cause of a build failure in the case of a failed build action.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.Dependency> 
      getActionDependenciesList();
  /**
   * <pre>
   * A list of resources that this action depended upon. May be used to provide
   * the cause of a build failure in the case of a failed build action.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
   */
  com.google.devtools.resultstore.v2.Dependency getActionDependencies(int index);
  /**
   * <pre>
   * A list of resources that this action depended upon. May be used to provide
   * the cause of a build failure in the case of a failed build action.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
   */
  int getActionDependenciesCount();
  /**
   * <pre>
   * A list of resources that this action depended upon. May be used to provide
   * the cause of a build failure in the case of a failed build action.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.DependencyOrBuilder> 
      getActionDependenciesOrBuilderList();
  /**
   * <pre>
   * A list of resources that this action depended upon. May be used to provide
   * the cause of a build failure in the case of a failed build action.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
   */
  com.google.devtools.resultstore.v2.DependencyOrBuilder getActionDependenciesOrBuilder(
      int index);

  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.Property> 
      getPropertiesList();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  com.google.devtools.resultstore.v2.Property getProperties(int index);
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  int getPropertiesCount();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.PropertyOrBuilder> 
      getPropertiesOrBuilderList();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  com.google.devtools.resultstore.v2.PropertyOrBuilder getPropertiesOrBuilder(
      int index);

  /**
   * <pre>
   * A list of file references for action level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * For build actions:
   * stdout: The stdout of the action
   * stderr: The stderr of the action
   * baseline.lcov: Baseline coverage file to be parsed by the server. This
   *     uses a stripped down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * For test actions:
   * test.xml: The test suite / test case data in XML format.
   * test.log: The combined stdout and stderr of the test process.
   * test.lcov: Coverage file to be parsed by the server. This uses a stripped
   *     down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.File> 
      getFilesList();
  /**
   * <pre>
   * A list of file references for action level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * For build actions:
   * stdout: The stdout of the action
   * stderr: The stderr of the action
   * baseline.lcov: Baseline coverage file to be parsed by the server. This
   *     uses a stripped down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * For test actions:
   * test.xml: The test suite / test case data in XML format.
   * test.log: The combined stdout and stderr of the test process.
   * test.lcov: Coverage file to be parsed by the server. This uses a stripped
   *     down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  com.google.devtools.resultstore.v2.File getFiles(int index);
  /**
   * <pre>
   * A list of file references for action level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * For build actions:
   * stdout: The stdout of the action
   * stderr: The stderr of the action
   * baseline.lcov: Baseline coverage file to be parsed by the server. This
   *     uses a stripped down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * For test actions:
   * test.xml: The test suite / test case data in XML format.
   * test.log: The combined stdout and stderr of the test process.
   * test.lcov: Coverage file to be parsed by the server. This uses a stripped
   *     down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  int getFilesCount();
  /**
   * <pre>
   * A list of file references for action level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * For build actions:
   * stdout: The stdout of the action
   * stderr: The stderr of the action
   * baseline.lcov: Baseline coverage file to be parsed by the server. This
   *     uses a stripped down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * For test actions:
   * test.xml: The test suite / test case data in XML format.
   * test.log: The combined stdout and stderr of the test process.
   * test.lcov: Coverage file to be parsed by the server. This uses a stripped
   *     down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.FileOrBuilder> 
      getFilesOrBuilderList();
  /**
   * <pre>
   * A list of file references for action level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   * For build actions:
   * stdout: The stdout of the action
   * stderr: The stderr of the action
   * baseline.lcov: Baseline coverage file to be parsed by the server. This
   *     uses a stripped down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * For test actions:
   * test.xml: The test suite / test case data in XML format.
   * test.log: The combined stdout and stderr of the test process.
   * test.lcov: Coverage file to be parsed by the server. This uses a stripped
   *     down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  com.google.devtools.resultstore.v2.FileOrBuilder getFilesOrBuilder(
      int index);

  /**
   * <pre>
   * List of names of file sets that are referenced from this Action.
   * Each name must point to a file set under the same Invocation. The name
   * format must be: invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   * </pre>
   *
   * <code>repeated string file_sets = 15;</code>
   * @return A list containing the fileSets.
   */
  java.util.List<java.lang.String>
      getFileSetsList();
  /**
   * <pre>
   * List of names of file sets that are referenced from this Action.
   * Each name must point to a file set under the same Invocation. The name
   * format must be: invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   * </pre>
   *
   * <code>repeated string file_sets = 15;</code>
   * @return The count of fileSets.
   */
  int getFileSetsCount();
  /**
   * <pre>
   * List of names of file sets that are referenced from this Action.
   * Each name must point to a file set under the same Invocation. The name
   * format must be: invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   * </pre>
   *
   * <code>repeated string file_sets = 15;</code>
   * @param index The index of the element to return.
   * @return The fileSets at the given index.
   */
  java.lang.String getFileSets(int index);
  /**
   * <pre>
   * List of names of file sets that are referenced from this Action.
   * Each name must point to a file set under the same Invocation. The name
   * format must be: invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   * </pre>
   *
   * <code>repeated string file_sets = 15;</code>
   * @param index The index of the value to return.
   * @return The bytes of the fileSets at the given index.
   */
  com.google.protobuf.ByteString
      getFileSetsBytes(int index);

  /**
   * <pre>
   * Coverage data was collected while running the build or test action. This
   * usually includes line coverage, and may also include branch coverage.
   * For test actions, this is usually only for the source files which were
   * actually executed by that particular action.
   * For build actions, this is the baseline coverage, which captures the
   * instrumented files and lines, without any lines being executed. This
   * ensures files that are never covered at all are included.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ActionCoverage coverage = 11;</code>
   * @return Whether the coverage field is set.
   */
  boolean hasCoverage();
  /**
   * <pre>
   * Coverage data was collected while running the build or test action. This
   * usually includes line coverage, and may also include branch coverage.
   * For test actions, this is usually only for the source files which were
   * actually executed by that particular action.
   * For build actions, this is the baseline coverage, which captures the
   * instrumented files and lines, without any lines being executed. This
   * ensures files that are never covered at all are included.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ActionCoverage coverage = 11;</code>
   * @return The coverage.
   */
  com.google.devtools.resultstore.v2.ActionCoverage getCoverage();
  /**
   * <pre>
   * Coverage data was collected while running the build or test action. This
   * usually includes line coverage, and may also include branch coverage.
   * For test actions, this is usually only for the source files which were
   * actually executed by that particular action.
   * For build actions, this is the baseline coverage, which captures the
   * instrumented files and lines, without any lines being executed. This
   * ensures files that are never covered at all are included.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ActionCoverage coverage = 11;</code>
   */
  com.google.devtools.resultstore.v2.ActionCoverageOrBuilder getCoverageOrBuilder();

  /**
   * <pre>
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.FileProcessingErrors> 
      getFileProcessingErrorsList();
  /**
   * <pre>
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
   */
  com.google.devtools.resultstore.v2.FileProcessingErrors getFileProcessingErrors(int index);
  /**
   * <pre>
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
   */
  int getFileProcessingErrorsCount();
  /**
   * <pre>
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.FileProcessingErrorsOrBuilder> 
      getFileProcessingErrorsOrBuilderList();
  /**
   * <pre>
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
   */
  com.google.devtools.resultstore.v2.FileProcessingErrorsOrBuilder getFileProcessingErrorsOrBuilder(
      int index);

  public com.google.devtools.resultstore.v2.Action.ActionTypeCase getActionTypeCase();
}
