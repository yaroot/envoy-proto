// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/resultstore_file_download.proto

package com.google.devtools.resultstore.v2;

public interface GetFileRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.GetFileRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * This corresponds to the uri field in the File message.
   * </pre>
   *
   * <code>string uri = 1;</code>
   * @return The uri.
   */
  java.lang.String getUri();
  /**
   * <pre>
   * This corresponds to the uri field in the File message.
   * </pre>
   *
   * <code>string uri = 1;</code>
   * @return The bytes for uri.
   */
  com.google.protobuf.ByteString
      getUriBytes();

  /**
   * <pre>
   * The offset for the first byte to return in the read, relative to the start
   * of the resource.
   * A `read_offset` that is negative or greater than the size of the resource
   * will cause an `OUT_OF_RANGE` error.
   * </pre>
   *
   * <code>int64 read_offset = 2;</code>
   * @return The readOffset.
   */
  long getReadOffset();

  /**
   * <pre>
   * The maximum number of `data` bytes the server is allowed to return in the
   * sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
   * there is no limit, and a negative `read_limit` will cause an error.
   * If the stream returns fewer bytes than allowed by the `read_limit` and no
   * error occurred, the stream includes all data from the `read_offset` to the
   * end of the resource.
   * </pre>
   *
   * <code>int64 read_limit = 3;</code>
   * @return The readLimit.
   */
  long getReadLimit();

  /**
   * <pre>
   * Only applies if the referenced file is a known archive type (ar, jar, zip)
   * The above read_offset and read_limit fields are applied to this entry.
   * If this file is not an archive, INVALID_ARGUMENT is thrown.
   * </pre>
   *
   * <code>string archive_entry = 4;</code>
   * @return The archiveEntry.
   */
  java.lang.String getArchiveEntry();
  /**
   * <pre>
   * Only applies if the referenced file is a known archive type (ar, jar, zip)
   * The above read_offset and read_limit fields are applied to this entry.
   * If this file is not an archive, INVALID_ARGUMENT is thrown.
   * </pre>
   *
   * <code>string archive_entry = 4;</code>
   * @return The bytes for archiveEntry.
   */
  com.google.protobuf.ByteString
      getArchiveEntryBytes();
}
