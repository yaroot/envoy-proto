// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/file.proto

package com.google.devtools.resultstore.v2;

public interface FileOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.File)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The identifier of the file or archive entry.
   * User-provided, must be unique for the repeated field it is in. When an
   * Append RPC is called with a Files field populated, if a File already exists
   * with this ID, that File will be overwritten with the new File proto.
   * </pre>
   *
   * <code>string uid = 1;</code>
   * @return The uid.
   */
  java.lang.String getUid();
  /**
   * <pre>
   * The identifier of the file or archive entry.
   * User-provided, must be unique for the repeated field it is in. When an
   * Append RPC is called with a Files field populated, if a File already exists
   * with this ID, that File will be overwritten with the new File proto.
   * </pre>
   *
   * <code>string uid = 1;</code>
   * @return The bytes for uid.
   */
  com.google.protobuf.ByteString
      getUidBytes();

  /**
   * <pre>
   * The URI of a file.
   * This could also be the URI of an entire archive.
   * Most log data doesn't need to be stored forever, so a ttl is suggested.
   * Note that if you ever move or delete the file at this URI, the link from
   * the server will be broken.
   * </pre>
   *
   * <code>string uri = 2;</code>
   * @return The uri.
   */
  java.lang.String getUri();
  /**
   * <pre>
   * The URI of a file.
   * This could also be the URI of an entire archive.
   * Most log data doesn't need to be stored forever, so a ttl is suggested.
   * Note that if you ever move or delete the file at this URI, the link from
   * the server will be broken.
   * </pre>
   *
   * <code>string uri = 2;</code>
   * @return The bytes for uri.
   */
  com.google.protobuf.ByteString
      getUriBytes();

  /**
   * <pre>
   * The length of the file in bytes.  Allows the filesize to be shown in the
   * UI.  Omit if file is still being written or length is not known.  This
   * could also be the length of an entire archive.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value length = 3;</code>
   * @return Whether the length field is set.
   */
  boolean hasLength();
  /**
   * <pre>
   * The length of the file in bytes.  Allows the filesize to be shown in the
   * UI.  Omit if file is still being written or length is not known.  This
   * could also be the length of an entire archive.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value length = 3;</code>
   * @return The length.
   */
  com.google.protobuf.Int64Value getLength();
  /**
   * <pre>
   * The length of the file in bytes.  Allows the filesize to be shown in the
   * UI.  Omit if file is still being written or length is not known.  This
   * could also be the length of an entire archive.
   * </pre>
   *
   * <code>.google.protobuf.Int64Value length = 3;</code>
   */
  com.google.protobuf.Int64ValueOrBuilder getLengthOrBuilder();

  /**
   * <pre>
   * The content-type (aka MIME-type) of the file.  This is sent to the web
   * browser so it knows how to handle the file. (e.g. text/plain, image/jpeg,
   * text/html, etc). For zip archives, use "application/zip".
   * </pre>
   *
   * <code>string content_type = 4;</code>
   * @return The contentType.
   */
  java.lang.String getContentType();
  /**
   * <pre>
   * The content-type (aka MIME-type) of the file.  This is sent to the web
   * browser so it knows how to handle the file. (e.g. text/plain, image/jpeg,
   * text/html, etc). For zip archives, use "application/zip".
   * </pre>
   *
   * <code>string content_type = 4;</code>
   * @return The bytes for contentType.
   */
  com.google.protobuf.ByteString
      getContentTypeBytes();

  /**
   * <pre>
   * If the above path, length, and content_type are referring to an archive,
   * and you wish to refer to a particular entry within that archive, put the
   * particular archive entry data here.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ArchiveEntry archive_entry = 5;</code>
   * @return Whether the archiveEntry field is set.
   */
  boolean hasArchiveEntry();
  /**
   * <pre>
   * If the above path, length, and content_type are referring to an archive,
   * and you wish to refer to a particular entry within that archive, put the
   * particular archive entry data here.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ArchiveEntry archive_entry = 5;</code>
   * @return The archiveEntry.
   */
  com.google.devtools.resultstore.v2.ArchiveEntry getArchiveEntry();
  /**
   * <pre>
   * If the above path, length, and content_type are referring to an archive,
   * and you wish to refer to a particular entry within that archive, put the
   * particular archive entry data here.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ArchiveEntry archive_entry = 5;</code>
   */
  com.google.devtools.resultstore.v2.ArchiveEntryOrBuilder getArchiveEntryOrBuilder();

  /**
   * <pre>
   * A url to a content display app/site for this file or archive entry.
   * </pre>
   *
   * <code>string content_viewer = 6;</code>
   * @return The contentViewer.
   */
  java.lang.String getContentViewer();
  /**
   * <pre>
   * A url to a content display app/site for this file or archive entry.
   * </pre>
   *
   * <code>string content_viewer = 6;</code>
   * @return The bytes for contentViewer.
   */
  com.google.protobuf.ByteString
      getContentViewerBytes();

  /**
   * <pre>
   * Whether to hide this file or archive entry in the UI.  Defaults to false.
   * A checkbox lets users see hidden files, but they're hidden by default.
   * </pre>
   *
   * <code>bool hidden = 7;</code>
   * @return The hidden.
   */
  boolean getHidden();

  /**
   * <pre>
   * A short description of what this file or archive entry contains. This
   * description should help someone viewing the list of these files to
   * understand the purpose of this file and what they would want to view it
   * for.
   * </pre>
   *
   * <code>string description = 8;</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * A short description of what this file or archive entry contains. This
   * description should help someone viewing the list of these files to
   * understand the purpose of this file and what they would want to view it
   * for.
   * </pre>
   *
   * <code>string description = 8;</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * The digest of this file in hexadecimal-like string if known.
   * </pre>
   *
   * <code>string digest = 9;</code>
   * @return The digest.
   */
  java.lang.String getDigest();
  /**
   * <pre>
   * The digest of this file in hexadecimal-like string if known.
   * </pre>
   *
   * <code>string digest = 9;</code>
   * @return The bytes for digest.
   */
  com.google.protobuf.ByteString
      getDigestBytes();

  /**
   * <pre>
   * The algorithm corresponding to the digest if known.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.File.HashType hash_type = 10;</code>
   * @return The enum numeric value on the wire for hashType.
   */
  int getHashTypeValue();
  /**
   * <pre>
   * The algorithm corresponding to the digest if known.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.File.HashType hash_type = 10;</code>
   * @return The hashType.
   */
  com.google.devtools.resultstore.v2.File.HashType getHashType();
}
