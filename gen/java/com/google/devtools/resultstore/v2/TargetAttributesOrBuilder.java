// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/target.proto

package com.google.devtools.resultstore.v2;

public interface TargetAttributesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.TargetAttributes)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If known, indicates the type of this target.  In bazel this corresponds
   * to the rule-suffix.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TargetType type = 1;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * If known, indicates the type of this target.  In bazel this corresponds
   * to the rule-suffix.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.TargetType type = 1;</code>
   * @return The type.
   */
  com.google.devtools.resultstore.v2.TargetType getType();

  /**
   * <pre>
   * If known, the main language of this target, e.g. java, cc, python, etc.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Language language = 2;</code>
   * @return The enum numeric value on the wire for language.
   */
  int getLanguageValue();
  /**
   * <pre>
   * If known, the main language of this target, e.g. java, cc, python, etc.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Language language = 2;</code>
   * @return The language.
   */
  com.google.devtools.resultstore.v2.Language getLanguage();

  /**
   * <pre>
   * The tags attribute of the build rule. These should be short, descriptive
   * words, and there should only be a few of them.
   * This is implemented as a set. All tags will be unique. Any duplicate tags
   * will be ignored. Tags will be returned in lexicographical order.
   * </pre>
   *
   * <code>repeated string tags = 3;</code>
   * @return A list containing the tags.
   */
  java.util.List<java.lang.String>
      getTagsList();
  /**
   * <pre>
   * The tags attribute of the build rule. These should be short, descriptive
   * words, and there should only be a few of them.
   * This is implemented as a set. All tags will be unique. Any duplicate tags
   * will be ignored. Tags will be returned in lexicographical order.
   * </pre>
   *
   * <code>repeated string tags = 3;</code>
   * @return The count of tags.
   */
  int getTagsCount();
  /**
   * <pre>
   * The tags attribute of the build rule. These should be short, descriptive
   * words, and there should only be a few of them.
   * This is implemented as a set. All tags will be unique. Any duplicate tags
   * will be ignored. Tags will be returned in lexicographical order.
   * </pre>
   *
   * <code>repeated string tags = 3;</code>
   * @param index The index of the element to return.
   * @return The tags at the given index.
   */
  java.lang.String getTags(int index);
  /**
   * <pre>
   * The tags attribute of the build rule. These should be short, descriptive
   * words, and there should only be a few of them.
   * This is implemented as a set. All tags will be unique. Any duplicate tags
   * will be ignored. Tags will be returned in lexicographical order.
   * </pre>
   *
   * <code>repeated string tags = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tags at the given index.
   */
  com.google.protobuf.ByteString
      getTagsBytes(int index);
}
