// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/coverage.proto

package com.google.devtools.resultstore.v2;

public interface BranchCoverageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.BranchCoverage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The field branch_present denotes the lines containing at least one branch.
   * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
   * number by 8 to get index into byte array. Mod line number by 8 to get bit
   * number (0 = LSB, 7 = MSB).
   * A 1 denotes the line contains at least one branch.
   * A 0 denotes the line contains no branches.
   * </pre>
   *
   * <code>bytes branch_present = 1;</code>
   * @return The branchPresent.
   */
  com.google.protobuf.ByteString getBranchPresent();

  /**
   * <pre>
   * Contains the number of branches present, only for the lines which have the
   * corresponding bit set in branch_present, in a relative order ignoring
   * lines which do not have any branches.
   * </pre>
   *
   * <code>repeated int32 branches_in_line = 2;</code>
   * @return A list containing the branchesInLine.
   */
  java.util.List<java.lang.Integer> getBranchesInLineList();
  /**
   * <pre>
   * Contains the number of branches present, only for the lines which have the
   * corresponding bit set in branch_present, in a relative order ignoring
   * lines which do not have any branches.
   * </pre>
   *
   * <code>repeated int32 branches_in_line = 2;</code>
   * @return The count of branchesInLine.
   */
  int getBranchesInLineCount();
  /**
   * <pre>
   * Contains the number of branches present, only for the lines which have the
   * corresponding bit set in branch_present, in a relative order ignoring
   * lines which do not have any branches.
   * </pre>
   *
   * <code>repeated int32 branches_in_line = 2;</code>
   * @param index The index of the element to return.
   * @return The branchesInLine at the given index.
   */
  int getBranchesInLine(int index);

  /**
   * <pre>
   * As each branch can have any one of the following three states: not
   * executed, executed but not taken, executed and taken.
   * This is a bitfield where i-th bit corresponds to the i-th branch. Divide
   * branch number by 8 to get index into byte array. Mod branch number by 8 to
   * get bit number (0 = LSB, 7 = MSB).
   * i-th bit of the following two byte arrays are used to denote the above
   * mentioned states.
   * not executed: i-th bit of executed == 0 &amp;&amp; i-th bit of taken == 0
   * executed but not taken: i-th bit of executed == 1 &amp;&amp; i-th bit of taken == 0
   * executed and taken: i-th bit of executed == 1 &amp;&amp; i-th bit of taken == 1
   * </pre>
   *
   * <code>bytes executed = 3;</code>
   * @return The executed.
   */
  com.google.protobuf.ByteString getExecuted();

  /**
   * <pre>
   * Described above.
   * </pre>
   *
   * <code>bytes taken = 4;</code>
   * @return The taken.
   */
  com.google.protobuf.ByteString getTaken();
}
