// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/resultstore/v2/configured_target.proto

package com.google.devtools.resultstore.v2;

public interface ConfiguredTargetOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.resultstore.v2.ConfiguredTarget)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
   * where ${CONFIG_ID} must match the ID of an existing Configuration under
   * this Invocation.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
   * where ${CONFIG_ID} must match the ID of an existing Configuration under
   * this Invocation.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The resource ID components that identify the ConfiguredTarget. They must
   * match the resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ConfiguredTarget.Id id = 2;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * The resource ID components that identify the ConfiguredTarget. They must
   * match the resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ConfiguredTarget.Id id = 2;</code>
   * @return The id.
   */
  com.google.devtools.resultstore.v2.ConfiguredTarget.Id getId();
  /**
   * <pre>
   * The resource ID components that identify the ConfiguredTarget. They must
   * match the resource name after proper encoding.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ConfiguredTarget.Id id = 2;</code>
   */
  com.google.devtools.resultstore.v2.ConfiguredTarget.IdOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * The aggregate status for this configuration of this target. If testing
   * was not requested, set this to the build status (e.g. BUILT or
   * FAILED_TO_BUILD).
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   * @return Whether the statusAttributes field is set.
   */
  boolean hasStatusAttributes();
  /**
   * <pre>
   * The aggregate status for this configuration of this target. If testing
   * was not requested, set this to the build status (e.g. BUILT or
   * FAILED_TO_BUILD).
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   * @return The statusAttributes.
   */
  com.google.devtools.resultstore.v2.StatusAttributes getStatusAttributes();
  /**
   * <pre>
   * The aggregate status for this configuration of this target. If testing
   * was not requested, set this to the build status (e.g. BUILT or
   * FAILED_TO_BUILD).
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
   */
  com.google.devtools.resultstore.v2.StatusAttributesOrBuilder getStatusAttributesOrBuilder();

  /**
   * <pre>
   * Captures the start time and duration of this configured target.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   * @return Whether the timing field is set.
   */
  boolean hasTiming();
  /**
   * <pre>
   * Captures the start time and duration of this configured target.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   * @return The timing.
   */
  com.google.devtools.resultstore.v2.Timing getTiming();
  /**
   * <pre>
   * Captures the start time and duration of this configured target.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
   */
  com.google.devtools.resultstore.v2.TimingOrBuilder getTimingOrBuilder();

  /**
   * <pre>
   * Test specific attributes for this ConfiguredTarget.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ConfiguredTestAttributes test_attributes = 6;</code>
   * @return Whether the testAttributes field is set.
   */
  boolean hasTestAttributes();
  /**
   * <pre>
   * Test specific attributes for this ConfiguredTarget.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ConfiguredTestAttributes test_attributes = 6;</code>
   * @return The testAttributes.
   */
  com.google.devtools.resultstore.v2.ConfiguredTestAttributes getTestAttributes();
  /**
   * <pre>
   * Test specific attributes for this ConfiguredTarget.
   * </pre>
   *
   * <code>.google.devtools.resultstore.v2.ConfiguredTestAttributes test_attributes = 6;</code>
   */
  com.google.devtools.resultstore.v2.ConfiguredTestAttributesOrBuilder getTestAttributesOrBuilder();

  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.Property> 
      getPropertiesList();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  com.google.devtools.resultstore.v2.Property getProperties(int index);
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  int getPropertiesCount();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.PropertyOrBuilder> 
      getPropertiesOrBuilderList();
  /**
   * <pre>
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
   */
  com.google.devtools.resultstore.v2.PropertyOrBuilder getPropertiesOrBuilder(
      int index);

  /**
   * <pre>
   * A list of file references for configured target level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  java.util.List<com.google.devtools.resultstore.v2.File> 
      getFilesList();
  /**
   * <pre>
   * A list of file references for configured target level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  com.google.devtools.resultstore.v2.File getFiles(int index);
  /**
   * <pre>
   * A list of file references for configured target level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  int getFilesCount();
  /**
   * <pre>
   * A list of file references for configured target level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  java.util.List<? extends com.google.devtools.resultstore.v2.FileOrBuilder> 
      getFilesOrBuilderList();
  /**
   * <pre>
   * A list of file references for configured target level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * </pre>
   *
   * <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
   */
  com.google.devtools.resultstore.v2.FileOrBuilder getFilesOrBuilder(
      int index);
}
