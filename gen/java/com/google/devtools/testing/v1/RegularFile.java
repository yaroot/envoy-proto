// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * A file or directory to install on the device before the test starts.
 * </pre>
 *
 * Protobuf type {@code google.devtools.testing.v1.RegularFile}
 */
public final class RegularFile extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.testing.v1.RegularFile)
    RegularFileOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RegularFile.newBuilder() to construct.
  private RegularFile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RegularFile() {
    devicePath_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RegularFile();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_RegularFile_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_RegularFile_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.testing.v1.RegularFile.class, com.google.devtools.testing.v1.RegularFile.Builder.class);
  }

  public static final int CONTENT_FIELD_NUMBER = 1;
  private com.google.devtools.testing.v1.FileReference content_;
  /**
   * <pre>
   * Required. The source file.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
   * @return Whether the content field is set.
   */
  @java.lang.Override
  public boolean hasContent() {
    return content_ != null;
  }
  /**
   * <pre>
   * Required. The source file.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
   * @return The content.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReference getContent() {
    return content_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : content_;
  }
  /**
   * <pre>
   * Required. The source file.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReferenceOrBuilder getContentOrBuilder() {
    return content_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : content_;
  }

  public static final int DEVICE_PATH_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object devicePath_ = "";
  /**
   * <pre>
   * Required. Where to put the content on the device. Must be an absolute,
   * allowlisted path. If the file exists, it will be replaced.
   * The following device-side directories and any of their subdirectories are
   * allowlisted:
   * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
   * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
   * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
   * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device and copy the file there.
   * &lt;p&gt; It is strongly advised to use the &lt;a href=
   * "http://developer.android.com/reference/android/os/Environment.html"&gt;
   * Environment API&lt;/a&gt; in app and test code to access files on the device in a
   * portable way.
   * </pre>
   *
   * <code>string device_path = 2;</code>
   * @return The devicePath.
   */
  @java.lang.Override
  public java.lang.String getDevicePath() {
    java.lang.Object ref = devicePath_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      devicePath_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Required. Where to put the content on the device. Must be an absolute,
   * allowlisted path. If the file exists, it will be replaced.
   * The following device-side directories and any of their subdirectories are
   * allowlisted:
   * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
   * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
   * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
   * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device and copy the file there.
   * &lt;p&gt; It is strongly advised to use the &lt;a href=
   * "http://developer.android.com/reference/android/os/Environment.html"&gt;
   * Environment API&lt;/a&gt; in app and test code to access files on the device in a
   * portable way.
   * </pre>
   *
   * <code>string device_path = 2;</code>
   * @return The bytes for devicePath.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDevicePathBytes() {
    java.lang.Object ref = devicePath_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      devicePath_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (content_ != null) {
      output.writeMessage(1, getContent());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(devicePath_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, devicePath_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (content_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getContent());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(devicePath_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, devicePath_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.testing.v1.RegularFile)) {
      return super.equals(obj);
    }
    com.google.devtools.testing.v1.RegularFile other = (com.google.devtools.testing.v1.RegularFile) obj;

    if (hasContent() != other.hasContent()) return false;
    if (hasContent()) {
      if (!getContent()
          .equals(other.getContent())) return false;
    }
    if (!getDevicePath()
        .equals(other.getDevicePath())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasContent()) {
      hash = (37 * hash) + CONTENT_FIELD_NUMBER;
      hash = (53 * hash) + getContent().hashCode();
    }
    hash = (37 * hash) + DEVICE_PATH_FIELD_NUMBER;
    hash = (53 * hash) + getDevicePath().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.RegularFile parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.RegularFile parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.RegularFile parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.testing.v1.RegularFile prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A file or directory to install on the device before the test starts.
   * </pre>
   *
   * Protobuf type {@code google.devtools.testing.v1.RegularFile}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.testing.v1.RegularFile)
      com.google.devtools.testing.v1.RegularFileOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_RegularFile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_RegularFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.testing.v1.RegularFile.class, com.google.devtools.testing.v1.RegularFile.Builder.class);
    }

    // Construct using com.google.devtools.testing.v1.RegularFile.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      content_ = null;
      if (contentBuilder_ != null) {
        contentBuilder_.dispose();
        contentBuilder_ = null;
      }
      devicePath_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_RegularFile_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.RegularFile getDefaultInstanceForType() {
      return com.google.devtools.testing.v1.RegularFile.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.RegularFile build() {
      com.google.devtools.testing.v1.RegularFile result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.RegularFile buildPartial() {
      com.google.devtools.testing.v1.RegularFile result = new com.google.devtools.testing.v1.RegularFile(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.devtools.testing.v1.RegularFile result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.content_ = contentBuilder_ == null
            ? content_
            : contentBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.devicePath_ = devicePath_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.testing.v1.RegularFile) {
        return mergeFrom((com.google.devtools.testing.v1.RegularFile)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.testing.v1.RegularFile other) {
      if (other == com.google.devtools.testing.v1.RegularFile.getDefaultInstance()) return this;
      if (other.hasContent()) {
        mergeContent(other.getContent());
      }
      if (!other.getDevicePath().isEmpty()) {
        devicePath_ = other.devicePath_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getContentFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              devicePath_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.devtools.testing.v1.FileReference content_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> contentBuilder_;
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     * @return Whether the content field is set.
     */
    public boolean hasContent() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     * @return The content.
     */
    public com.google.devtools.testing.v1.FileReference getContent() {
      if (contentBuilder_ == null) {
        return content_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : content_;
      } else {
        return contentBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    public Builder setContent(com.google.devtools.testing.v1.FileReference value) {
      if (contentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        content_ = value;
      } else {
        contentBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    public Builder setContent(
        com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (contentBuilder_ == null) {
        content_ = builderForValue.build();
      } else {
        contentBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    public Builder mergeContent(com.google.devtools.testing.v1.FileReference value) {
      if (contentBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          content_ != null &&
          content_ != com.google.devtools.testing.v1.FileReference.getDefaultInstance()) {
          getContentBuilder().mergeFrom(value);
        } else {
          content_ = value;
        }
      } else {
        contentBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    public Builder clearContent() {
      bitField0_ = (bitField0_ & ~0x00000001);
      content_ = null;
      if (contentBuilder_ != null) {
        contentBuilder_.dispose();
        contentBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder getContentBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getContentFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    public com.google.devtools.testing.v1.FileReferenceOrBuilder getContentOrBuilder() {
      if (contentBuilder_ != null) {
        return contentBuilder_.getMessageOrBuilder();
      } else {
        return content_ == null ?
            com.google.devtools.testing.v1.FileReference.getDefaultInstance() : content_;
      }
    }
    /**
     * <pre>
     * Required. The source file.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference content = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> 
        getContentFieldBuilder() {
      if (contentBuilder_ == null) {
        contentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder>(
                getContent(),
                getParentForChildren(),
                isClean());
        content_ = null;
      }
      return contentBuilder_;
    }

    private java.lang.Object devicePath_ = "";
    /**
     * <pre>
     * Required. Where to put the content on the device. Must be an absolute,
     * allowlisted path. If the file exists, it will be replaced.
     * The following device-side directories and any of their subdirectories are
     * allowlisted:
     * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
     * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
     * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
     * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device and copy the file there.
     * &lt;p&gt; It is strongly advised to use the &lt;a href=
     * "http://developer.android.com/reference/android/os/Environment.html"&gt;
     * Environment API&lt;/a&gt; in app and test code to access files on the device in a
     * portable way.
     * </pre>
     *
     * <code>string device_path = 2;</code>
     * @return The devicePath.
     */
    public java.lang.String getDevicePath() {
      java.lang.Object ref = devicePath_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        devicePath_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Required. Where to put the content on the device. Must be an absolute,
     * allowlisted path. If the file exists, it will be replaced.
     * The following device-side directories and any of their subdirectories are
     * allowlisted:
     * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
     * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
     * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
     * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device and copy the file there.
     * &lt;p&gt; It is strongly advised to use the &lt;a href=
     * "http://developer.android.com/reference/android/os/Environment.html"&gt;
     * Environment API&lt;/a&gt; in app and test code to access files on the device in a
     * portable way.
     * </pre>
     *
     * <code>string device_path = 2;</code>
     * @return The bytes for devicePath.
     */
    public com.google.protobuf.ByteString
        getDevicePathBytes() {
      java.lang.Object ref = devicePath_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        devicePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Required. Where to put the content on the device. Must be an absolute,
     * allowlisted path. If the file exists, it will be replaced.
     * The following device-side directories and any of their subdirectories are
     * allowlisted:
     * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
     * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
     * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
     * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device and copy the file there.
     * &lt;p&gt; It is strongly advised to use the &lt;a href=
     * "http://developer.android.com/reference/android/os/Environment.html"&gt;
     * Environment API&lt;/a&gt; in app and test code to access files on the device in a
     * portable way.
     * </pre>
     *
     * <code>string device_path = 2;</code>
     * @param value The devicePath to set.
     * @return This builder for chaining.
     */
    public Builder setDevicePath(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      devicePath_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Where to put the content on the device. Must be an absolute,
     * allowlisted path. If the file exists, it will be replaced.
     * The following device-side directories and any of their subdirectories are
     * allowlisted:
     * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
     * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
     * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
     * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device and copy the file there.
     * &lt;p&gt; It is strongly advised to use the &lt;a href=
     * "http://developer.android.com/reference/android/os/Environment.html"&gt;
     * Environment API&lt;/a&gt; in app and test code to access files on the device in a
     * portable way.
     * </pre>
     *
     * <code>string device_path = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDevicePath() {
      devicePath_ = getDefaultInstance().getDevicePath();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. Where to put the content on the device. Must be an absolute,
     * allowlisted path. If the file exists, it will be replaced.
     * The following device-side directories and any of their subdirectories are
     * allowlisted:
     * &lt;p&gt;${EXTERNAL_STORAGE}, /sdcard, or /storage&lt;/p&gt;
     * &lt;p&gt;${ANDROID_DATA}/local/tmp, or /data/local/tmp&lt;/p&gt;
     * &lt;p&gt;Specifying a path outside of these directory trees is invalid.
     * &lt;p&gt; The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device and copy the file there.
     * &lt;p&gt; It is strongly advised to use the &lt;a href=
     * "http://developer.android.com/reference/android/os/Environment.html"&gt;
     * Environment API&lt;/a&gt; in app and test code to access files on the device in a
     * portable way.
     * </pre>
     *
     * <code>string device_path = 2;</code>
     * @param value The bytes for devicePath to set.
     * @return This builder for chaining.
     */
    public Builder setDevicePathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      devicePath_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.testing.v1.RegularFile)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.testing.v1.RegularFile)
  private static final com.google.devtools.testing.v1.RegularFile DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.testing.v1.RegularFile();
  }

  public static com.google.devtools.testing.v1.RegularFile getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RegularFile>
      PARSER = new com.google.protobuf.AbstractParser<RegularFile>() {
    @java.lang.Override
    public RegularFile parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<RegularFile> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RegularFile> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.testing.v1.RegularFile getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

