// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * The state (i.e., progress) of a test execution or matrix.
 * </pre>
 *
 * Protobuf enum {@code google.devtools.testing.v1.TestState}
 */
public enum TestState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Do not use.  For proto versioning only.
   * </pre>
   *
   * <code>TEST_STATE_UNSPECIFIED = 0;</code>
   */
  TEST_STATE_UNSPECIFIED(0),
  /**
   * <pre>
   * The execution or matrix is being validated.
   * </pre>
   *
   * <code>VALIDATING = 8;</code>
   */
  VALIDATING(8),
  /**
   * <pre>
   * The execution or matrix is waiting for resources to become available.
   * </pre>
   *
   * <code>PENDING = 1;</code>
   */
  PENDING(1),
  /**
   * <pre>
   * The execution is currently being processed.
   * Can only be set on an execution.
   * </pre>
   *
   * <code>RUNNING = 2;</code>
   */
  RUNNING(2),
  /**
   * <pre>
   * The execution or matrix has terminated normally.
   * On a matrix this means that the matrix level processing completed normally,
   * but individual executions may be in an ERROR state.
   * </pre>
   *
   * <code>FINISHED = 3;</code>
   */
  FINISHED(3),
  /**
   * <pre>
   * The execution or matrix has stopped because it encountered an
   * infrastructure failure.
   * </pre>
   *
   * <code>ERROR = 4;</code>
   */
  ERROR(4),
  /**
   * <pre>
   * The execution was not run because it corresponds to a unsupported
   * environment.
   * Can only be set on an execution.
   * </pre>
   *
   * <code>UNSUPPORTED_ENVIRONMENT = 5;</code>
   */
  UNSUPPORTED_ENVIRONMENT(5),
  /**
   * <pre>
   * The execution was not run because the provided inputs are incompatible with
   * the requested environment.
   * Example: requested AndroidVersion is lower than APK's minSdkVersion
   * Can only be set on an execution.
   * </pre>
   *
   * <code>INCOMPATIBLE_ENVIRONMENT = 9;</code>
   */
  INCOMPATIBLE_ENVIRONMENT(9),
  /**
   * <pre>
   * The execution was not run because the provided inputs are incompatible with
   * the requested architecture.
   * Example: requested device does not support running the native code in
   * the supplied APK
   * Can only be set on an execution.
   * </pre>
   *
   * <code>INCOMPATIBLE_ARCHITECTURE = 10;</code>
   */
  INCOMPATIBLE_ARCHITECTURE(10),
  /**
   * <pre>
   * The user cancelled the execution.
   * Can only be set on an execution.
   * </pre>
   *
   * <code>CANCELLED = 6;</code>
   */
  CANCELLED(6),
  /**
   * <pre>
   * The execution or matrix was not run because the provided inputs are not
   * valid.
   * Examples: input file is not of the expected type, is malformed/corrupt, or
   * was flagged as malware
   * </pre>
   *
   * <code>INVALID = 7;</code>
   */
  INVALID(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Do not use.  For proto versioning only.
   * </pre>
   *
   * <code>TEST_STATE_UNSPECIFIED = 0;</code>
   */
  public static final int TEST_STATE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The execution or matrix is being validated.
   * </pre>
   *
   * <code>VALIDATING = 8;</code>
   */
  public static final int VALIDATING_VALUE = 8;
  /**
   * <pre>
   * The execution or matrix is waiting for resources to become available.
   * </pre>
   *
   * <code>PENDING = 1;</code>
   */
  public static final int PENDING_VALUE = 1;
  /**
   * <pre>
   * The execution is currently being processed.
   * Can only be set on an execution.
   * </pre>
   *
   * <code>RUNNING = 2;</code>
   */
  public static final int RUNNING_VALUE = 2;
  /**
   * <pre>
   * The execution or matrix has terminated normally.
   * On a matrix this means that the matrix level processing completed normally,
   * but individual executions may be in an ERROR state.
   * </pre>
   *
   * <code>FINISHED = 3;</code>
   */
  public static final int FINISHED_VALUE = 3;
  /**
   * <pre>
   * The execution or matrix has stopped because it encountered an
   * infrastructure failure.
   * </pre>
   *
   * <code>ERROR = 4;</code>
   */
  public static final int ERROR_VALUE = 4;
  /**
   * <pre>
   * The execution was not run because it corresponds to a unsupported
   * environment.
   * Can only be set on an execution.
   * </pre>
   *
   * <code>UNSUPPORTED_ENVIRONMENT = 5;</code>
   */
  public static final int UNSUPPORTED_ENVIRONMENT_VALUE = 5;
  /**
   * <pre>
   * The execution was not run because the provided inputs are incompatible with
   * the requested environment.
   * Example: requested AndroidVersion is lower than APK's minSdkVersion
   * Can only be set on an execution.
   * </pre>
   *
   * <code>INCOMPATIBLE_ENVIRONMENT = 9;</code>
   */
  public static final int INCOMPATIBLE_ENVIRONMENT_VALUE = 9;
  /**
   * <pre>
   * The execution was not run because the provided inputs are incompatible with
   * the requested architecture.
   * Example: requested device does not support running the native code in
   * the supplied APK
   * Can only be set on an execution.
   * </pre>
   *
   * <code>INCOMPATIBLE_ARCHITECTURE = 10;</code>
   */
  public static final int INCOMPATIBLE_ARCHITECTURE_VALUE = 10;
  /**
   * <pre>
   * The user cancelled the execution.
   * Can only be set on an execution.
   * </pre>
   *
   * <code>CANCELLED = 6;</code>
   */
  public static final int CANCELLED_VALUE = 6;
  /**
   * <pre>
   * The execution or matrix was not run because the provided inputs are not
   * valid.
   * Examples: input file is not of the expected type, is malformed/corrupt, or
   * was flagged as malware
   * </pre>
   *
   * <code>INVALID = 7;</code>
   */
  public static final int INVALID_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TestState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TestState forNumber(int value) {
    switch (value) {
      case 0: return TEST_STATE_UNSPECIFIED;
      case 8: return VALIDATING;
      case 1: return PENDING;
      case 2: return RUNNING;
      case 3: return FINISHED;
      case 4: return ERROR;
      case 5: return UNSUPPORTED_ENVIRONMENT;
      case 9: return INCOMPATIBLE_ENVIRONMENT;
      case 10: return INCOMPATIBLE_ARCHITECTURE;
      case 6: return CANCELLED;
      case 7: return INVALID;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TestState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TestState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TestState>() {
          public TestState findValueByNumber(int number) {
            return TestState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final TestState[] VALUES = values();

  public static TestState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TestState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.devtools.testing.v1.TestState)
}

