// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * The detailed reason that a Matrix was deemed INVALID.
 * </pre>
 *
 * Protobuf enum {@code google.devtools.testing.v1.InvalidMatrixDetails}
 */
public enum InvalidMatrixDetails
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Do not use. For proto versioning only.
   * </pre>
   *
   * <code>INVALID_MATRIX_DETAILS_UNSPECIFIED = 0;</code>
   */
  INVALID_MATRIX_DETAILS_UNSPECIFIED(0),
  /**
   * <pre>
   * The matrix is INVALID, but there are no further details available.
   * </pre>
   *
   * <code>DETAILS_UNAVAILABLE = 1;</code>
   */
  DETAILS_UNAVAILABLE(1),
  /**
   * <pre>
   * The input app APK could not be parsed.
   * </pre>
   *
   * <code>MALFORMED_APK = 2;</code>
   */
  MALFORMED_APK(2),
  /**
   * <pre>
   * The input test APK could not be parsed.
   * </pre>
   *
   * <code>MALFORMED_TEST_APK = 3;</code>
   */
  MALFORMED_TEST_APK(3),
  /**
   * <pre>
   * The AndroidManifest.xml could not be found.
   * </pre>
   *
   * <code>NO_MANIFEST = 4;</code>
   */
  NO_MANIFEST(4),
  /**
   * <pre>
   * The APK manifest does not declare a package name.
   * </pre>
   *
   * <code>NO_PACKAGE_NAME = 5;</code>
   */
  NO_PACKAGE_NAME(5),
  /**
   * <pre>
   * The APK application ID (aka package name) is invalid.
   * See also
   * https://developer.android.com/studio/build/application-id
   * </pre>
   *
   * <code>INVALID_PACKAGE_NAME = 31;</code>
   */
  INVALID_PACKAGE_NAME(31),
  /**
   * <pre>
   * The test package and app package are the same.
   * </pre>
   *
   * <code>TEST_SAME_AS_APP = 6;</code>
   */
  TEST_SAME_AS_APP(6),
  /**
   * <pre>
   * The test apk does not declare an instrumentation.
   * </pre>
   *
   * <code>NO_INSTRUMENTATION = 7;</code>
   */
  NO_INSTRUMENTATION(7),
  /**
   * <pre>
   * The input app apk does not have a signature.
   * </pre>
   *
   * <code>NO_SIGNATURE = 20;</code>
   */
  NO_SIGNATURE(20),
  /**
   * <pre>
   * The test runner class specified by user or in the test APK's manifest file
   * is not compatible with Android Test Orchestrator.
   * Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
   * higher.
   * Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
   * OrchestratorOption.
   * </pre>
   *
   * <code>INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE = 18;</code>
   */
  INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE(18),
  /**
   * <pre>
   * The test APK does not contain the test runner class specified by user or in
   * the manifest file.
   * This can be caused by either of the following reasons:
   * - the user provided a runner class name that's incorrect, or
   * - the test runner isn't built into the test APK (might be in the app APK
   * instead).
   * </pre>
   *
   * <code>NO_TEST_RUNNER_CLASS = 19;</code>
   */
  NO_TEST_RUNNER_CLASS(19),
  /**
   * <pre>
   * A main launcher activity could not be found.
   * </pre>
   *
   * <code>NO_LAUNCHER_ACTIVITY = 8;</code>
   */
  NO_LAUNCHER_ACTIVITY(8),
  /**
   * <pre>
   * The app declares one or more permissions that are not allowed.
   * </pre>
   *
   * <code>FORBIDDEN_PERMISSIONS = 9;</code>
   */
  FORBIDDEN_PERMISSIONS(9),
  /**
   * <pre>
   * There is a conflict in the provided robo_directives.
   * </pre>
   *
   * <code>INVALID_ROBO_DIRECTIVES = 10;</code>
   */
  INVALID_ROBO_DIRECTIVES(10),
  /**
   * <pre>
   * There is at least one invalid resource name in the provided
   * robo directives
   * </pre>
   *
   * <code>INVALID_RESOURCE_NAME = 33;</code>
   */
  INVALID_RESOURCE_NAME(33),
  /**
   * <pre>
   * Invalid definition of action in the robo directives
   * (e.g. a click or ignore action includes an input text field)
   * </pre>
   *
   * <code>INVALID_DIRECTIVE_ACTION = 34;</code>
   */
  INVALID_DIRECTIVE_ACTION(34),
  /**
   * <pre>
   * There is no test loop intent filter, or the one that is given is
   * not formatted correctly.
   * </pre>
   *
   * <code>TEST_LOOP_INTENT_FILTER_NOT_FOUND = 12;</code>
   */
  TEST_LOOP_INTENT_FILTER_NOT_FOUND(12),
  /**
   * <pre>
   * The request contains a scenario label that was not declared in the
   * manifest.
   * </pre>
   *
   * <code>SCENARIO_LABEL_NOT_DECLARED = 13;</code>
   */
  SCENARIO_LABEL_NOT_DECLARED(13),
  /**
   * <pre>
   * There was an error when parsing a label's value.
   * </pre>
   *
   * <code>SCENARIO_LABEL_MALFORMED = 14;</code>
   */
  SCENARIO_LABEL_MALFORMED(14),
  /**
   * <pre>
   * The request contains a scenario number that was not declared in the
   * manifest.
   * </pre>
   *
   * <code>SCENARIO_NOT_DECLARED = 15;</code>
   */
  SCENARIO_NOT_DECLARED(15),
  /**
   * <pre>
   * Device administrator applications are not allowed.
   * </pre>
   *
   * <code>DEVICE_ADMIN_RECEIVER = 17;</code>
   */
  DEVICE_ADMIN_RECEIVER(17),
  /**
   * <pre>
   * The zipped XCTest was malformed. The zip did not contain a single
   * .xctestrun file and the contents of the DerivedData/Build/Products
   * directory.
   * </pre>
   *
   * <code>MALFORMED_XC_TEST_ZIP = 11;</code>
   */
  MALFORMED_XC_TEST_ZIP(11),
  /**
   * <pre>
   * The zipped XCTest was built for the iOS simulator rather than for a
   * physical device.
   * </pre>
   *
   * <code>BUILT_FOR_IOS_SIMULATOR = 24;</code>
   */
  BUILT_FOR_IOS_SIMULATOR(24),
  /**
   * <pre>
   * The .xctestrun file did not specify any test targets.
   * </pre>
   *
   * <code>NO_TESTS_IN_XC_TEST_ZIP = 25;</code>
   */
  NO_TESTS_IN_XC_TEST_ZIP(25),
  /**
   * <pre>
   * One or more of the test targets defined in the .xctestrun file specifies
   * "UseDestinationArtifacts", which is disallowed.
   * </pre>
   *
   * <code>USE_DESTINATION_ARTIFACTS = 26;</code>
   */
  USE_DESTINATION_ARTIFACTS(26),
  /**
   * <pre>
   * XC tests which run on physical devices must have
   * "IsAppHostedTestBundle" == "true" in the xctestrun file.
   * </pre>
   *
   * <code>TEST_NOT_APP_HOSTED = 28;</code>
   */
  TEST_NOT_APP_HOSTED(28),
  /**
   * <pre>
   * An Info.plist file in the XCTest zip could not be parsed.
   * </pre>
   *
   * <code>PLIST_CANNOT_BE_PARSED = 30;</code>
   */
  PLIST_CANNOT_BE_PARSED(30),
  /**
   * <pre>
   * The APK is marked as "testOnly".
   * Deprecated and not currently used.
   * </pre>
   *
   * <code>TEST_ONLY_APK = 21 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  TEST_ONLY_APK(21),
  /**
   * <pre>
   * The input IPA could not be parsed.
   * </pre>
   *
   * <code>MALFORMED_IPA = 22;</code>
   */
  MALFORMED_IPA(22),
  /**
   * <pre>
   * The application doesn't register the game loop URL scheme.
   * </pre>
   *
   * <code>MISSING_URL_SCHEME = 35;</code>
   */
  MISSING_URL_SCHEME(35),
  /**
   * <pre>
   * The iOS application bundle (.app) couldn't be processed.
   * </pre>
   *
   * <code>MALFORMED_APP_BUNDLE = 36;</code>
   */
  MALFORMED_APP_BUNDLE(36),
  /**
   * <pre>
   * APK contains no code.
   * See also
   * https://developer.android.com/guide/topics/manifest/application-element.html#code
   * </pre>
   *
   * <code>NO_CODE_APK = 23;</code>
   */
  NO_CODE_APK(23),
  /**
   * <pre>
   * Either the provided input APK path was malformed,
   * the APK file does not exist, or the user does not have permission to
   * access the APK file.
   * </pre>
   *
   * <code>INVALID_INPUT_APK = 27;</code>
   */
  INVALID_INPUT_APK(27),
  /**
   * <pre>
   * APK is built for a preview SDK which is unsupported
   * </pre>
   *
   * <code>INVALID_APK_PREVIEW_SDK = 29;</code>
   */
  INVALID_APK_PREVIEW_SDK(29),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Do not use. For proto versioning only.
   * </pre>
   *
   * <code>INVALID_MATRIX_DETAILS_UNSPECIFIED = 0;</code>
   */
  public static final int INVALID_MATRIX_DETAILS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The matrix is INVALID, but there are no further details available.
   * </pre>
   *
   * <code>DETAILS_UNAVAILABLE = 1;</code>
   */
  public static final int DETAILS_UNAVAILABLE_VALUE = 1;
  /**
   * <pre>
   * The input app APK could not be parsed.
   * </pre>
   *
   * <code>MALFORMED_APK = 2;</code>
   */
  public static final int MALFORMED_APK_VALUE = 2;
  /**
   * <pre>
   * The input test APK could not be parsed.
   * </pre>
   *
   * <code>MALFORMED_TEST_APK = 3;</code>
   */
  public static final int MALFORMED_TEST_APK_VALUE = 3;
  /**
   * <pre>
   * The AndroidManifest.xml could not be found.
   * </pre>
   *
   * <code>NO_MANIFEST = 4;</code>
   */
  public static final int NO_MANIFEST_VALUE = 4;
  /**
   * <pre>
   * The APK manifest does not declare a package name.
   * </pre>
   *
   * <code>NO_PACKAGE_NAME = 5;</code>
   */
  public static final int NO_PACKAGE_NAME_VALUE = 5;
  /**
   * <pre>
   * The APK application ID (aka package name) is invalid.
   * See also
   * https://developer.android.com/studio/build/application-id
   * </pre>
   *
   * <code>INVALID_PACKAGE_NAME = 31;</code>
   */
  public static final int INVALID_PACKAGE_NAME_VALUE = 31;
  /**
   * <pre>
   * The test package and app package are the same.
   * </pre>
   *
   * <code>TEST_SAME_AS_APP = 6;</code>
   */
  public static final int TEST_SAME_AS_APP_VALUE = 6;
  /**
   * <pre>
   * The test apk does not declare an instrumentation.
   * </pre>
   *
   * <code>NO_INSTRUMENTATION = 7;</code>
   */
  public static final int NO_INSTRUMENTATION_VALUE = 7;
  /**
   * <pre>
   * The input app apk does not have a signature.
   * </pre>
   *
   * <code>NO_SIGNATURE = 20;</code>
   */
  public static final int NO_SIGNATURE_VALUE = 20;
  /**
   * <pre>
   * The test runner class specified by user or in the test APK's manifest file
   * is not compatible with Android Test Orchestrator.
   * Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
   * higher.
   * Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
   * OrchestratorOption.
   * </pre>
   *
   * <code>INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE = 18;</code>
   */
  public static final int INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE_VALUE = 18;
  /**
   * <pre>
   * The test APK does not contain the test runner class specified by user or in
   * the manifest file.
   * This can be caused by either of the following reasons:
   * - the user provided a runner class name that's incorrect, or
   * - the test runner isn't built into the test APK (might be in the app APK
   * instead).
   * </pre>
   *
   * <code>NO_TEST_RUNNER_CLASS = 19;</code>
   */
  public static final int NO_TEST_RUNNER_CLASS_VALUE = 19;
  /**
   * <pre>
   * A main launcher activity could not be found.
   * </pre>
   *
   * <code>NO_LAUNCHER_ACTIVITY = 8;</code>
   */
  public static final int NO_LAUNCHER_ACTIVITY_VALUE = 8;
  /**
   * <pre>
   * The app declares one or more permissions that are not allowed.
   * </pre>
   *
   * <code>FORBIDDEN_PERMISSIONS = 9;</code>
   */
  public static final int FORBIDDEN_PERMISSIONS_VALUE = 9;
  /**
   * <pre>
   * There is a conflict in the provided robo_directives.
   * </pre>
   *
   * <code>INVALID_ROBO_DIRECTIVES = 10;</code>
   */
  public static final int INVALID_ROBO_DIRECTIVES_VALUE = 10;
  /**
   * <pre>
   * There is at least one invalid resource name in the provided
   * robo directives
   * </pre>
   *
   * <code>INVALID_RESOURCE_NAME = 33;</code>
   */
  public static final int INVALID_RESOURCE_NAME_VALUE = 33;
  /**
   * <pre>
   * Invalid definition of action in the robo directives
   * (e.g. a click or ignore action includes an input text field)
   * </pre>
   *
   * <code>INVALID_DIRECTIVE_ACTION = 34;</code>
   */
  public static final int INVALID_DIRECTIVE_ACTION_VALUE = 34;
  /**
   * <pre>
   * There is no test loop intent filter, or the one that is given is
   * not formatted correctly.
   * </pre>
   *
   * <code>TEST_LOOP_INTENT_FILTER_NOT_FOUND = 12;</code>
   */
  public static final int TEST_LOOP_INTENT_FILTER_NOT_FOUND_VALUE = 12;
  /**
   * <pre>
   * The request contains a scenario label that was not declared in the
   * manifest.
   * </pre>
   *
   * <code>SCENARIO_LABEL_NOT_DECLARED = 13;</code>
   */
  public static final int SCENARIO_LABEL_NOT_DECLARED_VALUE = 13;
  /**
   * <pre>
   * There was an error when parsing a label's value.
   * </pre>
   *
   * <code>SCENARIO_LABEL_MALFORMED = 14;</code>
   */
  public static final int SCENARIO_LABEL_MALFORMED_VALUE = 14;
  /**
   * <pre>
   * The request contains a scenario number that was not declared in the
   * manifest.
   * </pre>
   *
   * <code>SCENARIO_NOT_DECLARED = 15;</code>
   */
  public static final int SCENARIO_NOT_DECLARED_VALUE = 15;
  /**
   * <pre>
   * Device administrator applications are not allowed.
   * </pre>
   *
   * <code>DEVICE_ADMIN_RECEIVER = 17;</code>
   */
  public static final int DEVICE_ADMIN_RECEIVER_VALUE = 17;
  /**
   * <pre>
   * The zipped XCTest was malformed. The zip did not contain a single
   * .xctestrun file and the contents of the DerivedData/Build/Products
   * directory.
   * </pre>
   *
   * <code>MALFORMED_XC_TEST_ZIP = 11;</code>
   */
  public static final int MALFORMED_XC_TEST_ZIP_VALUE = 11;
  /**
   * <pre>
   * The zipped XCTest was built for the iOS simulator rather than for a
   * physical device.
   * </pre>
   *
   * <code>BUILT_FOR_IOS_SIMULATOR = 24;</code>
   */
  public static final int BUILT_FOR_IOS_SIMULATOR_VALUE = 24;
  /**
   * <pre>
   * The .xctestrun file did not specify any test targets.
   * </pre>
   *
   * <code>NO_TESTS_IN_XC_TEST_ZIP = 25;</code>
   */
  public static final int NO_TESTS_IN_XC_TEST_ZIP_VALUE = 25;
  /**
   * <pre>
   * One or more of the test targets defined in the .xctestrun file specifies
   * "UseDestinationArtifacts", which is disallowed.
   * </pre>
   *
   * <code>USE_DESTINATION_ARTIFACTS = 26;</code>
   */
  public static final int USE_DESTINATION_ARTIFACTS_VALUE = 26;
  /**
   * <pre>
   * XC tests which run on physical devices must have
   * "IsAppHostedTestBundle" == "true" in the xctestrun file.
   * </pre>
   *
   * <code>TEST_NOT_APP_HOSTED = 28;</code>
   */
  public static final int TEST_NOT_APP_HOSTED_VALUE = 28;
  /**
   * <pre>
   * An Info.plist file in the XCTest zip could not be parsed.
   * </pre>
   *
   * <code>PLIST_CANNOT_BE_PARSED = 30;</code>
   */
  public static final int PLIST_CANNOT_BE_PARSED_VALUE = 30;
  /**
   * <pre>
   * The APK is marked as "testOnly".
   * Deprecated and not currently used.
   * </pre>
   *
   * <code>TEST_ONLY_APK = 21 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int TEST_ONLY_APK_VALUE = 21;
  /**
   * <pre>
   * The input IPA could not be parsed.
   * </pre>
   *
   * <code>MALFORMED_IPA = 22;</code>
   */
  public static final int MALFORMED_IPA_VALUE = 22;
  /**
   * <pre>
   * The application doesn't register the game loop URL scheme.
   * </pre>
   *
   * <code>MISSING_URL_SCHEME = 35;</code>
   */
  public static final int MISSING_URL_SCHEME_VALUE = 35;
  /**
   * <pre>
   * The iOS application bundle (.app) couldn't be processed.
   * </pre>
   *
   * <code>MALFORMED_APP_BUNDLE = 36;</code>
   */
  public static final int MALFORMED_APP_BUNDLE_VALUE = 36;
  /**
   * <pre>
   * APK contains no code.
   * See also
   * https://developer.android.com/guide/topics/manifest/application-element.html#code
   * </pre>
   *
   * <code>NO_CODE_APK = 23;</code>
   */
  public static final int NO_CODE_APK_VALUE = 23;
  /**
   * <pre>
   * Either the provided input APK path was malformed,
   * the APK file does not exist, or the user does not have permission to
   * access the APK file.
   * </pre>
   *
   * <code>INVALID_INPUT_APK = 27;</code>
   */
  public static final int INVALID_INPUT_APK_VALUE = 27;
  /**
   * <pre>
   * APK is built for a preview SDK which is unsupported
   * </pre>
   *
   * <code>INVALID_APK_PREVIEW_SDK = 29;</code>
   */
  public static final int INVALID_APK_PREVIEW_SDK_VALUE = 29;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static InvalidMatrixDetails valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static InvalidMatrixDetails forNumber(int value) {
    switch (value) {
      case 0: return INVALID_MATRIX_DETAILS_UNSPECIFIED;
      case 1: return DETAILS_UNAVAILABLE;
      case 2: return MALFORMED_APK;
      case 3: return MALFORMED_TEST_APK;
      case 4: return NO_MANIFEST;
      case 5: return NO_PACKAGE_NAME;
      case 31: return INVALID_PACKAGE_NAME;
      case 6: return TEST_SAME_AS_APP;
      case 7: return NO_INSTRUMENTATION;
      case 20: return NO_SIGNATURE;
      case 18: return INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE;
      case 19: return NO_TEST_RUNNER_CLASS;
      case 8: return NO_LAUNCHER_ACTIVITY;
      case 9: return FORBIDDEN_PERMISSIONS;
      case 10: return INVALID_ROBO_DIRECTIVES;
      case 33: return INVALID_RESOURCE_NAME;
      case 34: return INVALID_DIRECTIVE_ACTION;
      case 12: return TEST_LOOP_INTENT_FILTER_NOT_FOUND;
      case 13: return SCENARIO_LABEL_NOT_DECLARED;
      case 14: return SCENARIO_LABEL_MALFORMED;
      case 15: return SCENARIO_NOT_DECLARED;
      case 17: return DEVICE_ADMIN_RECEIVER;
      case 11: return MALFORMED_XC_TEST_ZIP;
      case 24: return BUILT_FOR_IOS_SIMULATOR;
      case 25: return NO_TESTS_IN_XC_TEST_ZIP;
      case 26: return USE_DESTINATION_ARTIFACTS;
      case 28: return TEST_NOT_APP_HOSTED;
      case 30: return PLIST_CANNOT_BE_PARSED;
      case 21: return TEST_ONLY_APK;
      case 22: return MALFORMED_IPA;
      case 35: return MISSING_URL_SCHEME;
      case 36: return MALFORMED_APP_BUNDLE;
      case 23: return NO_CODE_APK;
      case 27: return INVALID_INPUT_APK;
      case 29: return INVALID_APK_PREVIEW_SDK;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<InvalidMatrixDetails>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      InvalidMatrixDetails> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<InvalidMatrixDetails>() {
          public InvalidMatrixDetails findValueByNumber(int number) {
            return InvalidMatrixDetails.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final InvalidMatrixDetails[] VALUES = values();

  public static InvalidMatrixDetails valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private InvalidMatrixDetails(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.devtools.testing.v1.InvalidMatrixDetails)
}

