// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

public interface IosTestSetupOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.testing.v1.IosTestSetup)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * </pre>
   *
   * <code>string network_profile = 1;</code>
   * @return The networkProfile.
   */
  java.lang.String getNetworkProfile();
  /**
   * <pre>
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * </pre>
   *
   * <code>string network_profile = 1;</code>
   * @return The bytes for networkProfile.
   */
  com.google.protobuf.ByteString
      getNetworkProfileBytes();

  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  java.util.List<com.google.devtools.testing.v1.FileReference> 
      getAdditionalIpasList();
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  com.google.devtools.testing.v1.FileReference getAdditionalIpas(int index);
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  int getAdditionalIpasCount();
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  java.util.List<? extends com.google.devtools.testing.v1.FileReferenceOrBuilder> 
      getAdditionalIpasOrBuilderList();
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  com.google.devtools.testing.v1.FileReferenceOrBuilder getAdditionalIpasOrBuilder(
      int index);

  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  java.util.List<com.google.devtools.testing.v1.IosDeviceFile> 
      getPushFilesList();
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  com.google.devtools.testing.v1.IosDeviceFile getPushFiles(int index);
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  int getPushFilesCount();
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  java.util.List<? extends com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
      getPushFilesOrBuilderList();
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  com.google.devtools.testing.v1.IosDeviceFileOrBuilder getPushFilesOrBuilder(
      int index);

  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  java.util.List<com.google.devtools.testing.v1.IosDeviceFile> 
      getPullDirectoriesList();
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  com.google.devtools.testing.v1.IosDeviceFile getPullDirectories(int index);
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  int getPullDirectoriesCount();
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  java.util.List<? extends com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
      getPullDirectoriesOrBuilderList();
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  com.google.devtools.testing.v1.IosDeviceFileOrBuilder getPullDirectoriesOrBuilder(
      int index);
}
