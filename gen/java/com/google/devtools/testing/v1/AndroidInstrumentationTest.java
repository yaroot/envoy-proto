// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * A test of an Android application that can control an Android component
 * independently of its normal lifecycle.
 * Android instrumentation tests run an application APK and test APK inside the
 * same process on a virtual or physical AndroidDevice.  They also specify
 * a test runner class, such as com.google.GoogleTestRunner, which can vary
 * on the specific instrumentation framework chosen.
 * See &lt;http://developer.android.com/tools/testing/testing_android.html&gt; for
 * more information on types of Android tests.
 * </pre>
 *
 * Protobuf type {@code google.devtools.testing.v1.AndroidInstrumentationTest}
 */
public final class AndroidInstrumentationTest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.testing.v1.AndroidInstrumentationTest)
    AndroidInstrumentationTestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AndroidInstrumentationTest.newBuilder() to construct.
  private AndroidInstrumentationTest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AndroidInstrumentationTest() {
    appPackageId_ = "";
    testPackageId_ = "";
    testRunnerClass_ = "";
    testTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    orchestratorOption_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AndroidInstrumentationTest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AndroidInstrumentationTest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.devtools.testing.v1.FileReference.Builder subBuilder = null;
            if (appUnderTestCase_ == 1) {
              subBuilder = ((com.google.devtools.testing.v1.FileReference) appUnderTest_).toBuilder();
            }
            appUnderTest_ =
                input.readMessage(com.google.devtools.testing.v1.FileReference.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.devtools.testing.v1.FileReference) appUnderTest_);
              appUnderTest_ = subBuilder.buildPartial();
            }
            appUnderTestCase_ = 1;
            break;
          }
          case 18: {
            com.google.devtools.testing.v1.FileReference.Builder subBuilder = null;
            if (testApk_ != null) {
              subBuilder = testApk_.toBuilder();
            }
            testApk_ = input.readMessage(com.google.devtools.testing.v1.FileReference.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(testApk_);
              testApk_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            appPackageId_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            testPackageId_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            testRunnerClass_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              testTargets_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            testTargets_.add(s);
            break;
          }
          case 56: {
            int rawValue = input.readEnum();

            orchestratorOption_ = rawValue;
            break;
          }
          case 66: {
            com.google.devtools.testing.v1.AppBundle.Builder subBuilder = null;
            if (appUnderTestCase_ == 8) {
              subBuilder = ((com.google.devtools.testing.v1.AppBundle) appUnderTest_).toBuilder();
            }
            appUnderTest_ =
                input.readMessage(com.google.devtools.testing.v1.AppBundle.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.devtools.testing.v1.AppBundle) appUnderTest_);
              appUnderTest_ = subBuilder.buildPartial();
            }
            appUnderTestCase_ = 8;
            break;
          }
          case 74: {
            com.google.devtools.testing.v1.ShardingOption.Builder subBuilder = null;
            if (shardingOption_ != null) {
              subBuilder = shardingOption_.toBuilder();
            }
            shardingOption_ = input.readMessage(com.google.devtools.testing.v1.ShardingOption.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(shardingOption_);
              shardingOption_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        testTargets_ = testTargets_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_AndroidInstrumentationTest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_AndroidInstrumentationTest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.testing.v1.AndroidInstrumentationTest.class, com.google.devtools.testing.v1.AndroidInstrumentationTest.Builder.class);
  }

  private int appUnderTestCase_ = 0;
  private java.lang.Object appUnderTest_;
  public enum AppUnderTestCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    APP_APK(1),
    APP_BUNDLE(8),
    APPUNDERTEST_NOT_SET(0);
    private final int value;
    private AppUnderTestCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AppUnderTestCase valueOf(int value) {
      return forNumber(value);
    }

    public static AppUnderTestCase forNumber(int value) {
      switch (value) {
        case 1: return APP_APK;
        case 8: return APP_BUNDLE;
        case 0: return APPUNDERTEST_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public AppUnderTestCase
  getAppUnderTestCase() {
    return AppUnderTestCase.forNumber(
        appUnderTestCase_);
  }

  public static final int APP_APK_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   * @return Whether the appApk field is set.
   */
  @java.lang.Override
  public boolean hasAppApk() {
    return appUnderTestCase_ == 1;
  }
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   * @return The appApk.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReference getAppApk() {
    if (appUnderTestCase_ == 1) {
       return (com.google.devtools.testing.v1.FileReference) appUnderTest_;
    }
    return com.google.devtools.testing.v1.FileReference.getDefaultInstance();
  }
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReferenceOrBuilder getAppApkOrBuilder() {
    if (appUnderTestCase_ == 1) {
       return (com.google.devtools.testing.v1.FileReference) appUnderTest_;
    }
    return com.google.devtools.testing.v1.FileReference.getDefaultInstance();
  }

  public static final int APP_BUNDLE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
   * @return Whether the appBundle field is set.
   */
  @java.lang.Override
  public boolean hasAppBundle() {
    return appUnderTestCase_ == 8;
  }
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
   * @return The appBundle.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.AppBundle getAppBundle() {
    if (appUnderTestCase_ == 8) {
       return (com.google.devtools.testing.v1.AppBundle) appUnderTest_;
    }
    return com.google.devtools.testing.v1.AppBundle.getDefaultInstance();
  }
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.AppBundleOrBuilder getAppBundleOrBuilder() {
    if (appUnderTestCase_ == 8) {
       return (com.google.devtools.testing.v1.AppBundle) appUnderTest_;
    }
    return com.google.devtools.testing.v1.AppBundle.getDefaultInstance();
  }

  public static final int TEST_APK_FIELD_NUMBER = 2;
  private com.google.devtools.testing.v1.FileReference testApk_;
  /**
   * <pre>
   * Required. The APK containing the test code to be executed.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
   * @return Whether the testApk field is set.
   */
  @java.lang.Override
  public boolean hasTestApk() {
    return testApk_ != null;
  }
  /**
   * <pre>
   * Required. The APK containing the test code to be executed.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
   * @return The testApk.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReference getTestApk() {
    return testApk_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testApk_;
  }
  /**
   * <pre>
   * Required. The APK containing the test code to be executed.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReferenceOrBuilder getTestApkOrBuilder() {
    return getTestApk();
  }

  public static final int APP_PACKAGE_ID_FIELD_NUMBER = 3;
  private volatile java.lang.Object appPackageId_;
  /**
   * <pre>
   * The java package for the application under test.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string app_package_id = 3;</code>
   * @return The appPackageId.
   */
  @java.lang.Override
  public java.lang.String getAppPackageId() {
    java.lang.Object ref = appPackageId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      appPackageId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The java package for the application under test.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string app_package_id = 3;</code>
   * @return The bytes for appPackageId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAppPackageIdBytes() {
    java.lang.Object ref = appPackageId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      appPackageId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEST_PACKAGE_ID_FIELD_NUMBER = 4;
  private volatile java.lang.Object testPackageId_;
  /**
   * <pre>
   * The java package for the test to be executed.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_package_id = 4;</code>
   * @return The testPackageId.
   */
  @java.lang.Override
  public java.lang.String getTestPackageId() {
    java.lang.Object ref = testPackageId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      testPackageId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The java package for the test to be executed.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_package_id = 4;</code>
   * @return The bytes for testPackageId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTestPackageIdBytes() {
    java.lang.Object ref = testPackageId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      testPackageId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEST_RUNNER_CLASS_FIELD_NUMBER = 5;
  private volatile java.lang.Object testRunnerClass_;
  /**
   * <pre>
   * The InstrumentationTestRunner class.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_runner_class = 5;</code>
   * @return The testRunnerClass.
   */
  @java.lang.Override
  public java.lang.String getTestRunnerClass() {
    java.lang.Object ref = testRunnerClass_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      testRunnerClass_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The InstrumentationTestRunner class.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_runner_class = 5;</code>
   * @return The bytes for testRunnerClass.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTestRunnerClassBytes() {
    java.lang.Object ref = testRunnerClass_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      testRunnerClass_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEST_TARGETS_FIELD_NUMBER = 6;
  private com.google.protobuf.LazyStringList testTargets_;
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @return A list containing the testTargets.
   */
  public com.google.protobuf.ProtocolStringList
      getTestTargetsList() {
    return testTargets_;
  }
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @return The count of testTargets.
   */
  public int getTestTargetsCount() {
    return testTargets_.size();
  }
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @param index The index of the element to return.
   * @return The testTargets at the given index.
   */
  public java.lang.String getTestTargets(int index) {
    return testTargets_.get(index);
  }
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the testTargets at the given index.
   */
  public com.google.protobuf.ByteString
      getTestTargetsBytes(int index) {
    return testTargets_.getByteString(index);
  }

  public static final int ORCHESTRATOR_OPTION_FIELD_NUMBER = 7;
  private int orchestratorOption_;
  /**
   * <pre>
   * The option of whether running each test within its own invocation of
   * instrumentation with Android Test Orchestrator or not.
   * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
   * higher! **
   * Orchestrator offers the following benefits:
   *  - No shared state
   *  - Crashes are isolated
   *  - Logs are scoped per test
   * See
   * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
   * for more information about Android Test Orchestrator.
   * If not set, the test will be run without the orchestrator.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
   * @return The enum numeric value on the wire for orchestratorOption.
   */
  @java.lang.Override public int getOrchestratorOptionValue() {
    return orchestratorOption_;
  }
  /**
   * <pre>
   * The option of whether running each test within its own invocation of
   * instrumentation with Android Test Orchestrator or not.
   * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
   * higher! **
   * Orchestrator offers the following benefits:
   *  - No shared state
   *  - Crashes are isolated
   *  - Logs are scoped per test
   * See
   * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
   * for more information about Android Test Orchestrator.
   * If not set, the test will be run without the orchestrator.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
   * @return The orchestratorOption.
   */
  @java.lang.Override public com.google.devtools.testing.v1.OrchestratorOption getOrchestratorOption() {
    @SuppressWarnings("deprecation")
    com.google.devtools.testing.v1.OrchestratorOption result = com.google.devtools.testing.v1.OrchestratorOption.valueOf(orchestratorOption_);
    return result == null ? com.google.devtools.testing.v1.OrchestratorOption.UNRECOGNIZED : result;
  }

  public static final int SHARDING_OPTION_FIELD_NUMBER = 9;
  private com.google.devtools.testing.v1.ShardingOption shardingOption_;
  /**
   * <pre>
   * The option to run tests in multiple shards in parallel.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
   * @return Whether the shardingOption field is set.
   */
  @java.lang.Override
  public boolean hasShardingOption() {
    return shardingOption_ != null;
  }
  /**
   * <pre>
   * The option to run tests in multiple shards in parallel.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
   * @return The shardingOption.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.ShardingOption getShardingOption() {
    return shardingOption_ == null ? com.google.devtools.testing.v1.ShardingOption.getDefaultInstance() : shardingOption_;
  }
  /**
   * <pre>
   * The option to run tests in multiple shards in parallel.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.ShardingOptionOrBuilder getShardingOptionOrBuilder() {
    return getShardingOption();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (appUnderTestCase_ == 1) {
      output.writeMessage(1, (com.google.devtools.testing.v1.FileReference) appUnderTest_);
    }
    if (testApk_ != null) {
      output.writeMessage(2, getTestApk());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(appPackageId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, appPackageId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(testPackageId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, testPackageId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(testRunnerClass_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, testRunnerClass_);
    }
    for (int i = 0; i < testTargets_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, testTargets_.getRaw(i));
    }
    if (orchestratorOption_ != com.google.devtools.testing.v1.OrchestratorOption.ORCHESTRATOR_OPTION_UNSPECIFIED.getNumber()) {
      output.writeEnum(7, orchestratorOption_);
    }
    if (appUnderTestCase_ == 8) {
      output.writeMessage(8, (com.google.devtools.testing.v1.AppBundle) appUnderTest_);
    }
    if (shardingOption_ != null) {
      output.writeMessage(9, getShardingOption());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (appUnderTestCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.google.devtools.testing.v1.FileReference) appUnderTest_);
    }
    if (testApk_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTestApk());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(appPackageId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, appPackageId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(testPackageId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, testPackageId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(testRunnerClass_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, testRunnerClass_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < testTargets_.size(); i++) {
        dataSize += computeStringSizeNoTag(testTargets_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getTestTargetsList().size();
    }
    if (orchestratorOption_ != com.google.devtools.testing.v1.OrchestratorOption.ORCHESTRATOR_OPTION_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, orchestratorOption_);
    }
    if (appUnderTestCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.google.devtools.testing.v1.AppBundle) appUnderTest_);
    }
    if (shardingOption_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getShardingOption());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.testing.v1.AndroidInstrumentationTest)) {
      return super.equals(obj);
    }
    com.google.devtools.testing.v1.AndroidInstrumentationTest other = (com.google.devtools.testing.v1.AndroidInstrumentationTest) obj;

    if (hasTestApk() != other.hasTestApk()) return false;
    if (hasTestApk()) {
      if (!getTestApk()
          .equals(other.getTestApk())) return false;
    }
    if (!getAppPackageId()
        .equals(other.getAppPackageId())) return false;
    if (!getTestPackageId()
        .equals(other.getTestPackageId())) return false;
    if (!getTestRunnerClass()
        .equals(other.getTestRunnerClass())) return false;
    if (!getTestTargetsList()
        .equals(other.getTestTargetsList())) return false;
    if (orchestratorOption_ != other.orchestratorOption_) return false;
    if (hasShardingOption() != other.hasShardingOption()) return false;
    if (hasShardingOption()) {
      if (!getShardingOption()
          .equals(other.getShardingOption())) return false;
    }
    if (!getAppUnderTestCase().equals(other.getAppUnderTestCase())) return false;
    switch (appUnderTestCase_) {
      case 1:
        if (!getAppApk()
            .equals(other.getAppApk())) return false;
        break;
      case 8:
        if (!getAppBundle()
            .equals(other.getAppBundle())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTestApk()) {
      hash = (37 * hash) + TEST_APK_FIELD_NUMBER;
      hash = (53 * hash) + getTestApk().hashCode();
    }
    hash = (37 * hash) + APP_PACKAGE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getAppPackageId().hashCode();
    hash = (37 * hash) + TEST_PACKAGE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTestPackageId().hashCode();
    hash = (37 * hash) + TEST_RUNNER_CLASS_FIELD_NUMBER;
    hash = (53 * hash) + getTestRunnerClass().hashCode();
    if (getTestTargetsCount() > 0) {
      hash = (37 * hash) + TEST_TARGETS_FIELD_NUMBER;
      hash = (53 * hash) + getTestTargetsList().hashCode();
    }
    hash = (37 * hash) + ORCHESTRATOR_OPTION_FIELD_NUMBER;
    hash = (53 * hash) + orchestratorOption_;
    if (hasShardingOption()) {
      hash = (37 * hash) + SHARDING_OPTION_FIELD_NUMBER;
      hash = (53 * hash) + getShardingOption().hashCode();
    }
    switch (appUnderTestCase_) {
      case 1:
        hash = (37 * hash) + APP_APK_FIELD_NUMBER;
        hash = (53 * hash) + getAppApk().hashCode();
        break;
      case 8:
        hash = (37 * hash) + APP_BUNDLE_FIELD_NUMBER;
        hash = (53 * hash) + getAppBundle().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.AndroidInstrumentationTest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.testing.v1.AndroidInstrumentationTest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A test of an Android application that can control an Android component
   * independently of its normal lifecycle.
   * Android instrumentation tests run an application APK and test APK inside the
   * same process on a virtual or physical AndroidDevice.  They also specify
   * a test runner class, such as com.google.GoogleTestRunner, which can vary
   * on the specific instrumentation framework chosen.
   * See &lt;http://developer.android.com/tools/testing/testing_android.html&gt; for
   * more information on types of Android tests.
   * </pre>
   *
   * Protobuf type {@code google.devtools.testing.v1.AndroidInstrumentationTest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.testing.v1.AndroidInstrumentationTest)
      com.google.devtools.testing.v1.AndroidInstrumentationTestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_AndroidInstrumentationTest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_AndroidInstrumentationTest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.testing.v1.AndroidInstrumentationTest.class, com.google.devtools.testing.v1.AndroidInstrumentationTest.Builder.class);
    }

    // Construct using com.google.devtools.testing.v1.AndroidInstrumentationTest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (testApkBuilder_ == null) {
        testApk_ = null;
      } else {
        testApk_ = null;
        testApkBuilder_ = null;
      }
      appPackageId_ = "";

      testPackageId_ = "";

      testRunnerClass_ = "";

      testTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      orchestratorOption_ = 0;

      if (shardingOptionBuilder_ == null) {
        shardingOption_ = null;
      } else {
        shardingOption_ = null;
        shardingOptionBuilder_ = null;
      }
      appUnderTestCase_ = 0;
      appUnderTest_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_AndroidInstrumentationTest_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.AndroidInstrumentationTest getDefaultInstanceForType() {
      return com.google.devtools.testing.v1.AndroidInstrumentationTest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.AndroidInstrumentationTest build() {
      com.google.devtools.testing.v1.AndroidInstrumentationTest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.AndroidInstrumentationTest buildPartial() {
      com.google.devtools.testing.v1.AndroidInstrumentationTest result = new com.google.devtools.testing.v1.AndroidInstrumentationTest(this);
      int from_bitField0_ = bitField0_;
      if (appUnderTestCase_ == 1) {
        if (appApkBuilder_ == null) {
          result.appUnderTest_ = appUnderTest_;
        } else {
          result.appUnderTest_ = appApkBuilder_.build();
        }
      }
      if (appUnderTestCase_ == 8) {
        if (appBundleBuilder_ == null) {
          result.appUnderTest_ = appUnderTest_;
        } else {
          result.appUnderTest_ = appBundleBuilder_.build();
        }
      }
      if (testApkBuilder_ == null) {
        result.testApk_ = testApk_;
      } else {
        result.testApk_ = testApkBuilder_.build();
      }
      result.appPackageId_ = appPackageId_;
      result.testPackageId_ = testPackageId_;
      result.testRunnerClass_ = testRunnerClass_;
      if (((bitField0_ & 0x00000001) != 0)) {
        testTargets_ = testTargets_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.testTargets_ = testTargets_;
      result.orchestratorOption_ = orchestratorOption_;
      if (shardingOptionBuilder_ == null) {
        result.shardingOption_ = shardingOption_;
      } else {
        result.shardingOption_ = shardingOptionBuilder_.build();
      }
      result.appUnderTestCase_ = appUnderTestCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.testing.v1.AndroidInstrumentationTest) {
        return mergeFrom((com.google.devtools.testing.v1.AndroidInstrumentationTest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.testing.v1.AndroidInstrumentationTest other) {
      if (other == com.google.devtools.testing.v1.AndroidInstrumentationTest.getDefaultInstance()) return this;
      if (other.hasTestApk()) {
        mergeTestApk(other.getTestApk());
      }
      if (!other.getAppPackageId().isEmpty()) {
        appPackageId_ = other.appPackageId_;
        onChanged();
      }
      if (!other.getTestPackageId().isEmpty()) {
        testPackageId_ = other.testPackageId_;
        onChanged();
      }
      if (!other.getTestRunnerClass().isEmpty()) {
        testRunnerClass_ = other.testRunnerClass_;
        onChanged();
      }
      if (!other.testTargets_.isEmpty()) {
        if (testTargets_.isEmpty()) {
          testTargets_ = other.testTargets_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTestTargetsIsMutable();
          testTargets_.addAll(other.testTargets_);
        }
        onChanged();
      }
      if (other.orchestratorOption_ != 0) {
        setOrchestratorOptionValue(other.getOrchestratorOptionValue());
      }
      if (other.hasShardingOption()) {
        mergeShardingOption(other.getShardingOption());
      }
      switch (other.getAppUnderTestCase()) {
        case APP_APK: {
          mergeAppApk(other.getAppApk());
          break;
        }
        case APP_BUNDLE: {
          mergeAppBundle(other.getAppBundle());
          break;
        }
        case APPUNDERTEST_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.devtools.testing.v1.AndroidInstrumentationTest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.devtools.testing.v1.AndroidInstrumentationTest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int appUnderTestCase_ = 0;
    private java.lang.Object appUnderTest_;
    public AppUnderTestCase
        getAppUnderTestCase() {
      return AppUnderTestCase.forNumber(
          appUnderTestCase_);
    }

    public Builder clearAppUnderTest() {
      appUnderTestCase_ = 0;
      appUnderTest_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> appApkBuilder_;
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     * @return Whether the appApk field is set.
     */
    @java.lang.Override
    public boolean hasAppApk() {
      return appUnderTestCase_ == 1;
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     * @return The appApk.
     */
    @java.lang.Override
    public com.google.devtools.testing.v1.FileReference getAppApk() {
      if (appApkBuilder_ == null) {
        if (appUnderTestCase_ == 1) {
          return (com.google.devtools.testing.v1.FileReference) appUnderTest_;
        }
        return com.google.devtools.testing.v1.FileReference.getDefaultInstance();
      } else {
        if (appUnderTestCase_ == 1) {
          return appApkBuilder_.getMessage();
        }
        return com.google.devtools.testing.v1.FileReference.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    public Builder setAppApk(com.google.devtools.testing.v1.FileReference value) {
      if (appApkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        appUnderTest_ = value;
        onChanged();
      } else {
        appApkBuilder_.setMessage(value);
      }
      appUnderTestCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    public Builder setAppApk(
        com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (appApkBuilder_ == null) {
        appUnderTest_ = builderForValue.build();
        onChanged();
      } else {
        appApkBuilder_.setMessage(builderForValue.build());
      }
      appUnderTestCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    public Builder mergeAppApk(com.google.devtools.testing.v1.FileReference value) {
      if (appApkBuilder_ == null) {
        if (appUnderTestCase_ == 1 &&
            appUnderTest_ != com.google.devtools.testing.v1.FileReference.getDefaultInstance()) {
          appUnderTest_ = com.google.devtools.testing.v1.FileReference.newBuilder((com.google.devtools.testing.v1.FileReference) appUnderTest_)
              .mergeFrom(value).buildPartial();
        } else {
          appUnderTest_ = value;
        }
        onChanged();
      } else {
        if (appUnderTestCase_ == 1) {
          appApkBuilder_.mergeFrom(value);
        } else {
          appApkBuilder_.setMessage(value);
        }
      }
      appUnderTestCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    public Builder clearAppApk() {
      if (appApkBuilder_ == null) {
        if (appUnderTestCase_ == 1) {
          appUnderTestCase_ = 0;
          appUnderTest_ = null;
          onChanged();
        }
      } else {
        if (appUnderTestCase_ == 1) {
          appUnderTestCase_ = 0;
          appUnderTest_ = null;
        }
        appApkBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder getAppApkBuilder() {
      return getAppApkFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    @java.lang.Override
    public com.google.devtools.testing.v1.FileReferenceOrBuilder getAppApkOrBuilder() {
      if ((appUnderTestCase_ == 1) && (appApkBuilder_ != null)) {
        return appApkBuilder_.getMessageOrBuilder();
      } else {
        if (appUnderTestCase_ == 1) {
          return (com.google.devtools.testing.v1.FileReference) appUnderTest_;
        }
        return com.google.devtools.testing.v1.FileReference.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The APK for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> 
        getAppApkFieldBuilder() {
      if (appApkBuilder_ == null) {
        if (!(appUnderTestCase_ == 1)) {
          appUnderTest_ = com.google.devtools.testing.v1.FileReference.getDefaultInstance();
        }
        appApkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder>(
                (com.google.devtools.testing.v1.FileReference) appUnderTest_,
                getParentForChildren(),
                isClean());
        appUnderTest_ = null;
      }
      appUnderTestCase_ = 1;
      onChanged();;
      return appApkBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.AppBundle, com.google.devtools.testing.v1.AppBundle.Builder, com.google.devtools.testing.v1.AppBundleOrBuilder> appBundleBuilder_;
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     * @return Whether the appBundle field is set.
     */
    @java.lang.Override
    public boolean hasAppBundle() {
      return appUnderTestCase_ == 8;
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     * @return The appBundle.
     */
    @java.lang.Override
    public com.google.devtools.testing.v1.AppBundle getAppBundle() {
      if (appBundleBuilder_ == null) {
        if (appUnderTestCase_ == 8) {
          return (com.google.devtools.testing.v1.AppBundle) appUnderTest_;
        }
        return com.google.devtools.testing.v1.AppBundle.getDefaultInstance();
      } else {
        if (appUnderTestCase_ == 8) {
          return appBundleBuilder_.getMessage();
        }
        return com.google.devtools.testing.v1.AppBundle.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    public Builder setAppBundle(com.google.devtools.testing.v1.AppBundle value) {
      if (appBundleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        appUnderTest_ = value;
        onChanged();
      } else {
        appBundleBuilder_.setMessage(value);
      }
      appUnderTestCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    public Builder setAppBundle(
        com.google.devtools.testing.v1.AppBundle.Builder builderForValue) {
      if (appBundleBuilder_ == null) {
        appUnderTest_ = builderForValue.build();
        onChanged();
      } else {
        appBundleBuilder_.setMessage(builderForValue.build());
      }
      appUnderTestCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    public Builder mergeAppBundle(com.google.devtools.testing.v1.AppBundle value) {
      if (appBundleBuilder_ == null) {
        if (appUnderTestCase_ == 8 &&
            appUnderTest_ != com.google.devtools.testing.v1.AppBundle.getDefaultInstance()) {
          appUnderTest_ = com.google.devtools.testing.v1.AppBundle.newBuilder((com.google.devtools.testing.v1.AppBundle) appUnderTest_)
              .mergeFrom(value).buildPartial();
        } else {
          appUnderTest_ = value;
        }
        onChanged();
      } else {
        if (appUnderTestCase_ == 8) {
          appBundleBuilder_.mergeFrom(value);
        } else {
          appBundleBuilder_.setMessage(value);
        }
      }
      appUnderTestCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    public Builder clearAppBundle() {
      if (appBundleBuilder_ == null) {
        if (appUnderTestCase_ == 8) {
          appUnderTestCase_ = 0;
          appUnderTest_ = null;
          onChanged();
        }
      } else {
        if (appUnderTestCase_ == 8) {
          appUnderTestCase_ = 0;
          appUnderTest_ = null;
        }
        appBundleBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    public com.google.devtools.testing.v1.AppBundle.Builder getAppBundleBuilder() {
      return getAppBundleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    @java.lang.Override
    public com.google.devtools.testing.v1.AppBundleOrBuilder getAppBundleOrBuilder() {
      if ((appUnderTestCase_ == 8) && (appBundleBuilder_ != null)) {
        return appBundleBuilder_.getMessageOrBuilder();
      } else {
        if (appUnderTestCase_ == 8) {
          return (com.google.devtools.testing.v1.AppBundle) appUnderTest_;
        }
        return com.google.devtools.testing.v1.AppBundle.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A multi-apk app bundle for the application under test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.AppBundle, com.google.devtools.testing.v1.AppBundle.Builder, com.google.devtools.testing.v1.AppBundleOrBuilder> 
        getAppBundleFieldBuilder() {
      if (appBundleBuilder_ == null) {
        if (!(appUnderTestCase_ == 8)) {
          appUnderTest_ = com.google.devtools.testing.v1.AppBundle.getDefaultInstance();
        }
        appBundleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.AppBundle, com.google.devtools.testing.v1.AppBundle.Builder, com.google.devtools.testing.v1.AppBundleOrBuilder>(
                (com.google.devtools.testing.v1.AppBundle) appUnderTest_,
                getParentForChildren(),
                isClean());
        appUnderTest_ = null;
      }
      appUnderTestCase_ = 8;
      onChanged();;
      return appBundleBuilder_;
    }

    private com.google.devtools.testing.v1.FileReference testApk_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> testApkBuilder_;
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     * @return Whether the testApk field is set.
     */
    public boolean hasTestApk() {
      return testApkBuilder_ != null || testApk_ != null;
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     * @return The testApk.
     */
    public com.google.devtools.testing.v1.FileReference getTestApk() {
      if (testApkBuilder_ == null) {
        return testApk_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testApk_;
      } else {
        return testApkBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    public Builder setTestApk(com.google.devtools.testing.v1.FileReference value) {
      if (testApkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        testApk_ = value;
        onChanged();
      } else {
        testApkBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    public Builder setTestApk(
        com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (testApkBuilder_ == null) {
        testApk_ = builderForValue.build();
        onChanged();
      } else {
        testApkBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    public Builder mergeTestApk(com.google.devtools.testing.v1.FileReference value) {
      if (testApkBuilder_ == null) {
        if (testApk_ != null) {
          testApk_ =
            com.google.devtools.testing.v1.FileReference.newBuilder(testApk_).mergeFrom(value).buildPartial();
        } else {
          testApk_ = value;
        }
        onChanged();
      } else {
        testApkBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    public Builder clearTestApk() {
      if (testApkBuilder_ == null) {
        testApk_ = null;
        onChanged();
      } else {
        testApk_ = null;
        testApkBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder getTestApkBuilder() {
      
      onChanged();
      return getTestApkFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReferenceOrBuilder getTestApkOrBuilder() {
      if (testApkBuilder_ != null) {
        return testApkBuilder_.getMessageOrBuilder();
      } else {
        return testApk_ == null ?
            com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testApk_;
      }
    }
    /**
     * <pre>
     * Required. The APK containing the test code to be executed.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> 
        getTestApkFieldBuilder() {
      if (testApkBuilder_ == null) {
        testApkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder>(
                getTestApk(),
                getParentForChildren(),
                isClean());
        testApk_ = null;
      }
      return testApkBuilder_;
    }

    private java.lang.Object appPackageId_ = "";
    /**
     * <pre>
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string app_package_id = 3;</code>
     * @return The appPackageId.
     */
    public java.lang.String getAppPackageId() {
      java.lang.Object ref = appPackageId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        appPackageId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string app_package_id = 3;</code>
     * @return The bytes for appPackageId.
     */
    public com.google.protobuf.ByteString
        getAppPackageIdBytes() {
      java.lang.Object ref = appPackageId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        appPackageId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string app_package_id = 3;</code>
     * @param value The appPackageId to set.
     * @return This builder for chaining.
     */
    public Builder setAppPackageId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      appPackageId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string app_package_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearAppPackageId() {
      
      appPackageId_ = getDefaultInstance().getAppPackageId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The java package for the application under test.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string app_package_id = 3;</code>
     * @param value The bytes for appPackageId to set.
     * @return This builder for chaining.
     */
    public Builder setAppPackageIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      appPackageId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object testPackageId_ = "";
    /**
     * <pre>
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_package_id = 4;</code>
     * @return The testPackageId.
     */
    public java.lang.String getTestPackageId() {
      java.lang.Object ref = testPackageId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        testPackageId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_package_id = 4;</code>
     * @return The bytes for testPackageId.
     */
    public com.google.protobuf.ByteString
        getTestPackageIdBytes() {
      java.lang.Object ref = testPackageId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        testPackageId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_package_id = 4;</code>
     * @param value The testPackageId to set.
     * @return This builder for chaining.
     */
    public Builder setTestPackageId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      testPackageId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_package_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearTestPackageId() {
      
      testPackageId_ = getDefaultInstance().getTestPackageId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The java package for the test to be executed.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_package_id = 4;</code>
     * @param value The bytes for testPackageId to set.
     * @return This builder for chaining.
     */
    public Builder setTestPackageIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      testPackageId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object testRunnerClass_ = "";
    /**
     * <pre>
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_runner_class = 5;</code>
     * @return The testRunnerClass.
     */
    public java.lang.String getTestRunnerClass() {
      java.lang.Object ref = testRunnerClass_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        testRunnerClass_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_runner_class = 5;</code>
     * @return The bytes for testRunnerClass.
     */
    public com.google.protobuf.ByteString
        getTestRunnerClassBytes() {
      java.lang.Object ref = testRunnerClass_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        testRunnerClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_runner_class = 5;</code>
     * @param value The testRunnerClass to set.
     * @return This builder for chaining.
     */
    public Builder setTestRunnerClass(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      testRunnerClass_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_runner_class = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearTestRunnerClass() {
      
      testRunnerClass_ = getDefaultInstance().getTestRunnerClass();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The InstrumentationTestRunner class.
     * The default value is determined by examining the application's manifest.
     * </pre>
     *
     * <code>string test_runner_class = 5;</code>
     * @param value The bytes for testRunnerClass to set.
     * @return This builder for chaining.
     */
    public Builder setTestRunnerClassBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      testRunnerClass_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList testTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureTestTargetsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        testTargets_ = new com.google.protobuf.LazyStringArrayList(testTargets_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @return A list containing the testTargets.
     */
    public com.google.protobuf.ProtocolStringList
        getTestTargetsList() {
      return testTargets_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @return The count of testTargets.
     */
    public int getTestTargetsCount() {
      return testTargets_.size();
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @param index The index of the element to return.
     * @return The testTargets at the given index.
     */
    public java.lang.String getTestTargets(int index) {
      return testTargets_.get(index);
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the testTargets at the given index.
     */
    public com.google.protobuf.ByteString
        getTestTargetsBytes(int index) {
      return testTargets_.getByteString(index);
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @param index The index to set the value at.
     * @param value The testTargets to set.
     * @return This builder for chaining.
     */
    public Builder setTestTargets(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTestTargetsIsMutable();
      testTargets_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @param value The testTargets to add.
     * @return This builder for chaining.
     */
    public Builder addTestTargets(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTestTargetsIsMutable();
      testTargets_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @param values The testTargets to add.
     * @return This builder for chaining.
     */
    public Builder addAllTestTargets(
        java.lang.Iterable<java.lang.String> values) {
      ensureTestTargetsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, testTargets_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearTestTargets() {
      testTargets_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Each target must be fully qualified with the package name or class name,
     * in one of these formats:
     *  - "package package_name"
     *  - "class package_name.class_name"
     *  - "class package_name.class_name#method_name"
     * If empty, all targets in the module will be run.
     * </pre>
     *
     * <code>repeated string test_targets = 6;</code>
     * @param value The bytes of the testTargets to add.
     * @return This builder for chaining.
     */
    public Builder addTestTargetsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureTestTargetsIsMutable();
      testTargets_.add(value);
      onChanged();
      return this;
    }

    private int orchestratorOption_ = 0;
    /**
     * <pre>
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @return The enum numeric value on the wire for orchestratorOption.
     */
    @java.lang.Override public int getOrchestratorOptionValue() {
      return orchestratorOption_;
    }
    /**
     * <pre>
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @param value The enum numeric value on the wire for orchestratorOption to set.
     * @return This builder for chaining.
     */
    public Builder setOrchestratorOptionValue(int value) {
      
      orchestratorOption_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @return The orchestratorOption.
     */
    @java.lang.Override
    public com.google.devtools.testing.v1.OrchestratorOption getOrchestratorOption() {
      @SuppressWarnings("deprecation")
      com.google.devtools.testing.v1.OrchestratorOption result = com.google.devtools.testing.v1.OrchestratorOption.valueOf(orchestratorOption_);
      return result == null ? com.google.devtools.testing.v1.OrchestratorOption.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @param value The orchestratorOption to set.
     * @return This builder for chaining.
     */
    public Builder setOrchestratorOption(com.google.devtools.testing.v1.OrchestratorOption value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      orchestratorOption_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The option of whether running each test within its own invocation of
     * instrumentation with Android Test Orchestrator or not.
     * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
     * higher! **
     * Orchestrator offers the following benefits:
     *  - No shared state
     *  - Crashes are isolated
     *  - Logs are scoped per test
     * See
     * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
     * for more information about Android Test Orchestrator.
     * If not set, the test will be run without the orchestrator.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearOrchestratorOption() {
      
      orchestratorOption_ = 0;
      onChanged();
      return this;
    }

    private com.google.devtools.testing.v1.ShardingOption shardingOption_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.ShardingOption, com.google.devtools.testing.v1.ShardingOption.Builder, com.google.devtools.testing.v1.ShardingOptionOrBuilder> shardingOptionBuilder_;
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     * @return Whether the shardingOption field is set.
     */
    public boolean hasShardingOption() {
      return shardingOptionBuilder_ != null || shardingOption_ != null;
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     * @return The shardingOption.
     */
    public com.google.devtools.testing.v1.ShardingOption getShardingOption() {
      if (shardingOptionBuilder_ == null) {
        return shardingOption_ == null ? com.google.devtools.testing.v1.ShardingOption.getDefaultInstance() : shardingOption_;
      } else {
        return shardingOptionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    public Builder setShardingOption(com.google.devtools.testing.v1.ShardingOption value) {
      if (shardingOptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shardingOption_ = value;
        onChanged();
      } else {
        shardingOptionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    public Builder setShardingOption(
        com.google.devtools.testing.v1.ShardingOption.Builder builderForValue) {
      if (shardingOptionBuilder_ == null) {
        shardingOption_ = builderForValue.build();
        onChanged();
      } else {
        shardingOptionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    public Builder mergeShardingOption(com.google.devtools.testing.v1.ShardingOption value) {
      if (shardingOptionBuilder_ == null) {
        if (shardingOption_ != null) {
          shardingOption_ =
            com.google.devtools.testing.v1.ShardingOption.newBuilder(shardingOption_).mergeFrom(value).buildPartial();
        } else {
          shardingOption_ = value;
        }
        onChanged();
      } else {
        shardingOptionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    public Builder clearShardingOption() {
      if (shardingOptionBuilder_ == null) {
        shardingOption_ = null;
        onChanged();
      } else {
        shardingOption_ = null;
        shardingOptionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    public com.google.devtools.testing.v1.ShardingOption.Builder getShardingOptionBuilder() {
      
      onChanged();
      return getShardingOptionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    public com.google.devtools.testing.v1.ShardingOptionOrBuilder getShardingOptionOrBuilder() {
      if (shardingOptionBuilder_ != null) {
        return shardingOptionBuilder_.getMessageOrBuilder();
      } else {
        return shardingOption_ == null ?
            com.google.devtools.testing.v1.ShardingOption.getDefaultInstance() : shardingOption_;
      }
    }
    /**
     * <pre>
     * The option to run tests in multiple shards in parallel.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.ShardingOption, com.google.devtools.testing.v1.ShardingOption.Builder, com.google.devtools.testing.v1.ShardingOptionOrBuilder> 
        getShardingOptionFieldBuilder() {
      if (shardingOptionBuilder_ == null) {
        shardingOptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.ShardingOption, com.google.devtools.testing.v1.ShardingOption.Builder, com.google.devtools.testing.v1.ShardingOptionOrBuilder>(
                getShardingOption(),
                getParentForChildren(),
                isClean());
        shardingOption_ = null;
      }
      return shardingOptionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.testing.v1.AndroidInstrumentationTest)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.testing.v1.AndroidInstrumentationTest)
  private static final com.google.devtools.testing.v1.AndroidInstrumentationTest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.testing.v1.AndroidInstrumentationTest();
  }

  public static com.google.devtools.testing.v1.AndroidInstrumentationTest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AndroidInstrumentationTest>
      PARSER = new com.google.protobuf.AbstractParser<AndroidInstrumentationTest>() {
    @java.lang.Override
    public AndroidInstrumentationTest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AndroidInstrumentationTest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AndroidInstrumentationTest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AndroidInstrumentationTest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.testing.v1.AndroidInstrumentationTest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

