// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * A description of how to set up the Android device prior to running the test.
 * </pre>
 *
 * Protobuf type {@code google.devtools.testing.v1.TestSetup}
 */
public final class TestSetup extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.testing.v1.TestSetup)
    TestSetupOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TestSetup.newBuilder() to construct.
  private TestSetup(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TestSetup() {
    filesToPush_ = java.util.Collections.emptyList();
    directoriesToPull_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    additionalApks_ = java.util.Collections.emptyList();
    networkProfile_ = "";
    environmentVariables_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TestSetup();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TestSetup(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              filesToPush_ = new java.util.ArrayList<com.google.devtools.testing.v1.DeviceFile>();
              mutable_bitField0_ |= 0x00000001;
            }
            filesToPush_.add(
                input.readMessage(com.google.devtools.testing.v1.DeviceFile.parser(), extensionRegistry));
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              directoriesToPull_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            directoriesToPull_.add(s);
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              additionalApks_ = new java.util.ArrayList<com.google.devtools.testing.v1.Apk>();
              mutable_bitField0_ |= 0x00000004;
            }
            additionalApks_.add(
                input.readMessage(com.google.devtools.testing.v1.Apk.parser(), extensionRegistry));
            break;
          }
          case 34: {
            com.google.devtools.testing.v1.Account.Builder subBuilder = null;
            if (account_ != null) {
              subBuilder = account_.toBuilder();
            }
            account_ = input.readMessage(com.google.devtools.testing.v1.Account.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(account_);
              account_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            networkProfile_ = s;
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              environmentVariables_ = new java.util.ArrayList<com.google.devtools.testing.v1.EnvironmentVariable>();
              mutable_bitField0_ |= 0x00000008;
            }
            environmentVariables_.add(
                input.readMessage(com.google.devtools.testing.v1.EnvironmentVariable.parser(), extensionRegistry));
            break;
          }
          case 74: {
            com.google.devtools.testing.v1.SystraceSetup.Builder subBuilder = null;
            if (systrace_ != null) {
              subBuilder = systrace_.toBuilder();
            }
            systrace_ = input.readMessage(com.google.devtools.testing.v1.SystraceSetup.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(systrace_);
              systrace_ = subBuilder.buildPartial();
            }

            break;
          }
          case 184: {

            dontAutograntPermissions_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        filesToPush_ = java.util.Collections.unmodifiableList(filesToPush_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        directoriesToPull_ = directoriesToPull_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        additionalApks_ = java.util.Collections.unmodifiableList(additionalApks_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        environmentVariables_ = java.util.Collections.unmodifiableList(environmentVariables_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_TestSetup_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_TestSetup_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.testing.v1.TestSetup.class, com.google.devtools.testing.v1.TestSetup.Builder.class);
  }

  public static final int FILES_TO_PUSH_FIELD_NUMBER = 1;
  private java.util.List<com.google.devtools.testing.v1.DeviceFile> filesToPush_;
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.testing.v1.DeviceFile> getFilesToPushList() {
    return filesToPush_;
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.testing.v1.DeviceFileOrBuilder> 
      getFilesToPushOrBuilderList() {
    return filesToPush_;
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
   */
  @java.lang.Override
  public int getFilesToPushCount() {
    return filesToPush_.size();
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.DeviceFile getFilesToPush(int index) {
    return filesToPush_.get(index);
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.DeviceFileOrBuilder getFilesToPushOrBuilder(
      int index) {
    return filesToPush_.get(index);
  }

  public static final int DIRECTORIES_TO_PULL_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList directoriesToPull_;
  /**
   * <pre>
   * List of directories on the device to upload to GCS at the end of the test;
   * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
   * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
   * Note: The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device.
   * </pre>
   *
   * <code>repeated string directories_to_pull = 2;</code>
   * @return A list containing the directoriesToPull.
   */
  public com.google.protobuf.ProtocolStringList
      getDirectoriesToPullList() {
    return directoriesToPull_;
  }
  /**
   * <pre>
   * List of directories on the device to upload to GCS at the end of the test;
   * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
   * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
   * Note: The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device.
   * </pre>
   *
   * <code>repeated string directories_to_pull = 2;</code>
   * @return The count of directoriesToPull.
   */
  public int getDirectoriesToPullCount() {
    return directoriesToPull_.size();
  }
  /**
   * <pre>
   * List of directories on the device to upload to GCS at the end of the test;
   * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
   * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
   * Note: The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device.
   * </pre>
   *
   * <code>repeated string directories_to_pull = 2;</code>
   * @param index The index of the element to return.
   * @return The directoriesToPull at the given index.
   */
  public java.lang.String getDirectoriesToPull(int index) {
    return directoriesToPull_.get(index);
  }
  /**
   * <pre>
   * List of directories on the device to upload to GCS at the end of the test;
   * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
   * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
   * Note: The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device.
   * </pre>
   *
   * <code>repeated string directories_to_pull = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the directoriesToPull at the given index.
   */
  public com.google.protobuf.ByteString
      getDirectoriesToPullBytes(int index) {
    return directoriesToPull_.getByteString(index);
  }

  public static final int ADDITIONAL_APKS_FIELD_NUMBER = 3;
  private java.util.List<com.google.devtools.testing.v1.Apk> additionalApks_;
  /**
   * <pre>
   * APKs to install in addition to those being directly tested.
   * Currently capped at 100.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.testing.v1.Apk> getAdditionalApksList() {
    return additionalApks_;
  }
  /**
   * <pre>
   * APKs to install in addition to those being directly tested.
   * Currently capped at 100.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.testing.v1.ApkOrBuilder> 
      getAdditionalApksOrBuilderList() {
    return additionalApks_;
  }
  /**
   * <pre>
   * APKs to install in addition to those being directly tested.
   * Currently capped at 100.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
   */
  @java.lang.Override
  public int getAdditionalApksCount() {
    return additionalApks_.size();
  }
  /**
   * <pre>
   * APKs to install in addition to those being directly tested.
   * Currently capped at 100.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.Apk getAdditionalApks(int index) {
    return additionalApks_.get(index);
  }
  /**
   * <pre>
   * APKs to install in addition to those being directly tested.
   * Currently capped at 100.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.ApkOrBuilder getAdditionalApksOrBuilder(
      int index) {
    return additionalApks_.get(index);
  }

  public static final int ACCOUNT_FIELD_NUMBER = 4;
  private com.google.devtools.testing.v1.Account account_;
  /**
   * <pre>
   * The device will be logged in on this account for the duration of the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.Account account = 4;</code>
   * @return Whether the account field is set.
   */
  @java.lang.Override
  public boolean hasAccount() {
    return account_ != null;
  }
  /**
   * <pre>
   * The device will be logged in on this account for the duration of the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.Account account = 4;</code>
   * @return The account.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.Account getAccount() {
    return account_ == null ? com.google.devtools.testing.v1.Account.getDefaultInstance() : account_;
  }
  /**
   * <pre>
   * The device will be logged in on this account for the duration of the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.Account account = 4;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.AccountOrBuilder getAccountOrBuilder() {
    return getAccount();
  }

  public static final int NETWORK_PROFILE_FIELD_NUMBER = 5;
  private volatile java.lang.Object networkProfile_;
  /**
   * <pre>
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * </pre>
   *
   * <code>string network_profile = 5;</code>
   * @return The networkProfile.
   */
  @java.lang.Override
  public java.lang.String getNetworkProfile() {
    java.lang.Object ref = networkProfile_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      networkProfile_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * </pre>
   *
   * <code>string network_profile = 5;</code>
   * @return The bytes for networkProfile.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNetworkProfileBytes() {
    java.lang.Object ref = networkProfile_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      networkProfile_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ENVIRONMENT_VARIABLES_FIELD_NUMBER = 6;
  private java.util.List<com.google.devtools.testing.v1.EnvironmentVariable> environmentVariables_;
  /**
   * <pre>
   * Environment variables to set for the test (only applicable for
   * instrumentation tests).
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.testing.v1.EnvironmentVariable> getEnvironmentVariablesList() {
    return environmentVariables_;
  }
  /**
   * <pre>
   * Environment variables to set for the test (only applicable for
   * instrumentation tests).
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.testing.v1.EnvironmentVariableOrBuilder> 
      getEnvironmentVariablesOrBuilderList() {
    return environmentVariables_;
  }
  /**
   * <pre>
   * Environment variables to set for the test (only applicable for
   * instrumentation tests).
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
   */
  @java.lang.Override
  public int getEnvironmentVariablesCount() {
    return environmentVariables_.size();
  }
  /**
   * <pre>
   * Environment variables to set for the test (only applicable for
   * instrumentation tests).
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.EnvironmentVariable getEnvironmentVariables(int index) {
    return environmentVariables_.get(index);
  }
  /**
   * <pre>
   * Environment variables to set for the test (only applicable for
   * instrumentation tests).
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.EnvironmentVariableOrBuilder getEnvironmentVariablesOrBuilder(
      int index) {
    return environmentVariables_.get(index);
  }

  public static final int SYSTRACE_FIELD_NUMBER = 9;
  private com.google.devtools.testing.v1.SystraceSetup systrace_;
  /**
   * <pre>
   * Systrace configuration for the run.
   * If set a systrace will be taken, starting on test start and lasting for the
   * configured duration. The systrace file thus obtained is put in the results
   * bucket together with the other artifacts from the run.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
   * @return Whether the systrace field is set.
   */
  @java.lang.Override
  public boolean hasSystrace() {
    return systrace_ != null;
  }
  /**
   * <pre>
   * Systrace configuration for the run.
   * If set a systrace will be taken, starting on test start and lasting for the
   * configured duration. The systrace file thus obtained is put in the results
   * bucket together with the other artifacts from the run.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
   * @return The systrace.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.SystraceSetup getSystrace() {
    return systrace_ == null ? com.google.devtools.testing.v1.SystraceSetup.getDefaultInstance() : systrace_;
  }
  /**
   * <pre>
   * Systrace configuration for the run.
   * If set a systrace will be taken, starting on test start and lasting for the
   * configured duration. The systrace file thus obtained is put in the results
   * bucket together with the other artifacts from the run.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.SystraceSetupOrBuilder getSystraceOrBuilder() {
    return getSystrace();
  }

  public static final int DONT_AUTOGRANT_PERMISSIONS_FIELD_NUMBER = 23;
  private boolean dontAutograntPermissions_;
  /**
   * <pre>
   * Whether to prevent all runtime permissions to be granted at app install
   * </pre>
   *
   * <code>bool dont_autogrant_permissions = 23;</code>
   * @return The dontAutograntPermissions.
   */
  @java.lang.Override
  public boolean getDontAutograntPermissions() {
    return dontAutograntPermissions_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < filesToPush_.size(); i++) {
      output.writeMessage(1, filesToPush_.get(i));
    }
    for (int i = 0; i < directoriesToPull_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, directoriesToPull_.getRaw(i));
    }
    for (int i = 0; i < additionalApks_.size(); i++) {
      output.writeMessage(3, additionalApks_.get(i));
    }
    if (account_ != null) {
      output.writeMessage(4, getAccount());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(networkProfile_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, networkProfile_);
    }
    for (int i = 0; i < environmentVariables_.size(); i++) {
      output.writeMessage(6, environmentVariables_.get(i));
    }
    if (systrace_ != null) {
      output.writeMessage(9, getSystrace());
    }
    if (dontAutograntPermissions_ != false) {
      output.writeBool(23, dontAutograntPermissions_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < filesToPush_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, filesToPush_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < directoriesToPull_.size(); i++) {
        dataSize += computeStringSizeNoTag(directoriesToPull_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getDirectoriesToPullList().size();
    }
    for (int i = 0; i < additionalApks_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, additionalApks_.get(i));
    }
    if (account_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getAccount());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(networkProfile_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, networkProfile_);
    }
    for (int i = 0; i < environmentVariables_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, environmentVariables_.get(i));
    }
    if (systrace_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getSystrace());
    }
    if (dontAutograntPermissions_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(23, dontAutograntPermissions_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.testing.v1.TestSetup)) {
      return super.equals(obj);
    }
    com.google.devtools.testing.v1.TestSetup other = (com.google.devtools.testing.v1.TestSetup) obj;

    if (!getFilesToPushList()
        .equals(other.getFilesToPushList())) return false;
    if (!getDirectoriesToPullList()
        .equals(other.getDirectoriesToPullList())) return false;
    if (!getAdditionalApksList()
        .equals(other.getAdditionalApksList())) return false;
    if (hasAccount() != other.hasAccount()) return false;
    if (hasAccount()) {
      if (!getAccount()
          .equals(other.getAccount())) return false;
    }
    if (!getNetworkProfile()
        .equals(other.getNetworkProfile())) return false;
    if (!getEnvironmentVariablesList()
        .equals(other.getEnvironmentVariablesList())) return false;
    if (hasSystrace() != other.hasSystrace()) return false;
    if (hasSystrace()) {
      if (!getSystrace()
          .equals(other.getSystrace())) return false;
    }
    if (getDontAutograntPermissions()
        != other.getDontAutograntPermissions()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getFilesToPushCount() > 0) {
      hash = (37 * hash) + FILES_TO_PUSH_FIELD_NUMBER;
      hash = (53 * hash) + getFilesToPushList().hashCode();
    }
    if (getDirectoriesToPullCount() > 0) {
      hash = (37 * hash) + DIRECTORIES_TO_PULL_FIELD_NUMBER;
      hash = (53 * hash) + getDirectoriesToPullList().hashCode();
    }
    if (getAdditionalApksCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_APKS_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalApksList().hashCode();
    }
    if (hasAccount()) {
      hash = (37 * hash) + ACCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getAccount().hashCode();
    }
    hash = (37 * hash) + NETWORK_PROFILE_FIELD_NUMBER;
    hash = (53 * hash) + getNetworkProfile().hashCode();
    if (getEnvironmentVariablesCount() > 0) {
      hash = (37 * hash) + ENVIRONMENT_VARIABLES_FIELD_NUMBER;
      hash = (53 * hash) + getEnvironmentVariablesList().hashCode();
    }
    if (hasSystrace()) {
      hash = (37 * hash) + SYSTRACE_FIELD_NUMBER;
      hash = (53 * hash) + getSystrace().hashCode();
    }
    hash = (37 * hash) + DONT_AUTOGRANT_PERMISSIONS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDontAutograntPermissions());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.TestSetup parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.TestSetup parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.TestSetup parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.testing.v1.TestSetup prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A description of how to set up the Android device prior to running the test.
   * </pre>
   *
   * Protobuf type {@code google.devtools.testing.v1.TestSetup}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.testing.v1.TestSetup)
      com.google.devtools.testing.v1.TestSetupOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_TestSetup_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_TestSetup_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.testing.v1.TestSetup.class, com.google.devtools.testing.v1.TestSetup.Builder.class);
    }

    // Construct using com.google.devtools.testing.v1.TestSetup.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getFilesToPushFieldBuilder();
        getAdditionalApksFieldBuilder();
        getEnvironmentVariablesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (filesToPushBuilder_ == null) {
        filesToPush_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        filesToPushBuilder_.clear();
      }
      directoriesToPull_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (additionalApksBuilder_ == null) {
        additionalApks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        additionalApksBuilder_.clear();
      }
      if (accountBuilder_ == null) {
        account_ = null;
      } else {
        account_ = null;
        accountBuilder_ = null;
      }
      networkProfile_ = "";

      if (environmentVariablesBuilder_ == null) {
        environmentVariables_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        environmentVariablesBuilder_.clear();
      }
      if (systraceBuilder_ == null) {
        systrace_ = null;
      } else {
        systrace_ = null;
        systraceBuilder_ = null;
      }
      dontAutograntPermissions_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_TestSetup_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.TestSetup getDefaultInstanceForType() {
      return com.google.devtools.testing.v1.TestSetup.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.TestSetup build() {
      com.google.devtools.testing.v1.TestSetup result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.TestSetup buildPartial() {
      com.google.devtools.testing.v1.TestSetup result = new com.google.devtools.testing.v1.TestSetup(this);
      int from_bitField0_ = bitField0_;
      if (filesToPushBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          filesToPush_ = java.util.Collections.unmodifiableList(filesToPush_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.filesToPush_ = filesToPush_;
      } else {
        result.filesToPush_ = filesToPushBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        directoriesToPull_ = directoriesToPull_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.directoriesToPull_ = directoriesToPull_;
      if (additionalApksBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          additionalApks_ = java.util.Collections.unmodifiableList(additionalApks_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.additionalApks_ = additionalApks_;
      } else {
        result.additionalApks_ = additionalApksBuilder_.build();
      }
      if (accountBuilder_ == null) {
        result.account_ = account_;
      } else {
        result.account_ = accountBuilder_.build();
      }
      result.networkProfile_ = networkProfile_;
      if (environmentVariablesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          environmentVariables_ = java.util.Collections.unmodifiableList(environmentVariables_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.environmentVariables_ = environmentVariables_;
      } else {
        result.environmentVariables_ = environmentVariablesBuilder_.build();
      }
      if (systraceBuilder_ == null) {
        result.systrace_ = systrace_;
      } else {
        result.systrace_ = systraceBuilder_.build();
      }
      result.dontAutograntPermissions_ = dontAutograntPermissions_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.testing.v1.TestSetup) {
        return mergeFrom((com.google.devtools.testing.v1.TestSetup)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.testing.v1.TestSetup other) {
      if (other == com.google.devtools.testing.v1.TestSetup.getDefaultInstance()) return this;
      if (filesToPushBuilder_ == null) {
        if (!other.filesToPush_.isEmpty()) {
          if (filesToPush_.isEmpty()) {
            filesToPush_ = other.filesToPush_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFilesToPushIsMutable();
            filesToPush_.addAll(other.filesToPush_);
          }
          onChanged();
        }
      } else {
        if (!other.filesToPush_.isEmpty()) {
          if (filesToPushBuilder_.isEmpty()) {
            filesToPushBuilder_.dispose();
            filesToPushBuilder_ = null;
            filesToPush_ = other.filesToPush_;
            bitField0_ = (bitField0_ & ~0x00000001);
            filesToPushBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFilesToPushFieldBuilder() : null;
          } else {
            filesToPushBuilder_.addAllMessages(other.filesToPush_);
          }
        }
      }
      if (!other.directoriesToPull_.isEmpty()) {
        if (directoriesToPull_.isEmpty()) {
          directoriesToPull_ = other.directoriesToPull_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureDirectoriesToPullIsMutable();
          directoriesToPull_.addAll(other.directoriesToPull_);
        }
        onChanged();
      }
      if (additionalApksBuilder_ == null) {
        if (!other.additionalApks_.isEmpty()) {
          if (additionalApks_.isEmpty()) {
            additionalApks_ = other.additionalApks_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureAdditionalApksIsMutable();
            additionalApks_.addAll(other.additionalApks_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalApks_.isEmpty()) {
          if (additionalApksBuilder_.isEmpty()) {
            additionalApksBuilder_.dispose();
            additionalApksBuilder_ = null;
            additionalApks_ = other.additionalApks_;
            bitField0_ = (bitField0_ & ~0x00000004);
            additionalApksBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAdditionalApksFieldBuilder() : null;
          } else {
            additionalApksBuilder_.addAllMessages(other.additionalApks_);
          }
        }
      }
      if (other.hasAccount()) {
        mergeAccount(other.getAccount());
      }
      if (!other.getNetworkProfile().isEmpty()) {
        networkProfile_ = other.networkProfile_;
        onChanged();
      }
      if (environmentVariablesBuilder_ == null) {
        if (!other.environmentVariables_.isEmpty()) {
          if (environmentVariables_.isEmpty()) {
            environmentVariables_ = other.environmentVariables_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureEnvironmentVariablesIsMutable();
            environmentVariables_.addAll(other.environmentVariables_);
          }
          onChanged();
        }
      } else {
        if (!other.environmentVariables_.isEmpty()) {
          if (environmentVariablesBuilder_.isEmpty()) {
            environmentVariablesBuilder_.dispose();
            environmentVariablesBuilder_ = null;
            environmentVariables_ = other.environmentVariables_;
            bitField0_ = (bitField0_ & ~0x00000008);
            environmentVariablesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEnvironmentVariablesFieldBuilder() : null;
          } else {
            environmentVariablesBuilder_.addAllMessages(other.environmentVariables_);
          }
        }
      }
      if (other.hasSystrace()) {
        mergeSystrace(other.getSystrace());
      }
      if (other.getDontAutograntPermissions() != false) {
        setDontAutograntPermissions(other.getDontAutograntPermissions());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.devtools.testing.v1.TestSetup parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.devtools.testing.v1.TestSetup) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.google.devtools.testing.v1.DeviceFile> filesToPush_ =
      java.util.Collections.emptyList();
    private void ensureFilesToPushIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        filesToPush_ = new java.util.ArrayList<com.google.devtools.testing.v1.DeviceFile>(filesToPush_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.DeviceFile, com.google.devtools.testing.v1.DeviceFile.Builder, com.google.devtools.testing.v1.DeviceFileOrBuilder> filesToPushBuilder_;

    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.DeviceFile> getFilesToPushList() {
      if (filesToPushBuilder_ == null) {
        return java.util.Collections.unmodifiableList(filesToPush_);
      } else {
        return filesToPushBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public int getFilesToPushCount() {
      if (filesToPushBuilder_ == null) {
        return filesToPush_.size();
      } else {
        return filesToPushBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public com.google.devtools.testing.v1.DeviceFile getFilesToPush(int index) {
      if (filesToPushBuilder_ == null) {
        return filesToPush_.get(index);
      } else {
        return filesToPushBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder setFilesToPush(
        int index, com.google.devtools.testing.v1.DeviceFile value) {
      if (filesToPushBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilesToPushIsMutable();
        filesToPush_.set(index, value);
        onChanged();
      } else {
        filesToPushBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder setFilesToPush(
        int index, com.google.devtools.testing.v1.DeviceFile.Builder builderForValue) {
      if (filesToPushBuilder_ == null) {
        ensureFilesToPushIsMutable();
        filesToPush_.set(index, builderForValue.build());
        onChanged();
      } else {
        filesToPushBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder addFilesToPush(com.google.devtools.testing.v1.DeviceFile value) {
      if (filesToPushBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilesToPushIsMutable();
        filesToPush_.add(value);
        onChanged();
      } else {
        filesToPushBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder addFilesToPush(
        int index, com.google.devtools.testing.v1.DeviceFile value) {
      if (filesToPushBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilesToPushIsMutable();
        filesToPush_.add(index, value);
        onChanged();
      } else {
        filesToPushBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder addFilesToPush(
        com.google.devtools.testing.v1.DeviceFile.Builder builderForValue) {
      if (filesToPushBuilder_ == null) {
        ensureFilesToPushIsMutable();
        filesToPush_.add(builderForValue.build());
        onChanged();
      } else {
        filesToPushBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder addFilesToPush(
        int index, com.google.devtools.testing.v1.DeviceFile.Builder builderForValue) {
      if (filesToPushBuilder_ == null) {
        ensureFilesToPushIsMutable();
        filesToPush_.add(index, builderForValue.build());
        onChanged();
      } else {
        filesToPushBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder addAllFilesToPush(
        java.lang.Iterable<? extends com.google.devtools.testing.v1.DeviceFile> values) {
      if (filesToPushBuilder_ == null) {
        ensureFilesToPushIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, filesToPush_);
        onChanged();
      } else {
        filesToPushBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder clearFilesToPush() {
      if (filesToPushBuilder_ == null) {
        filesToPush_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        filesToPushBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public Builder removeFilesToPush(int index) {
      if (filesToPushBuilder_ == null) {
        ensureFilesToPushIsMutable();
        filesToPush_.remove(index);
        onChanged();
      } else {
        filesToPushBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public com.google.devtools.testing.v1.DeviceFile.Builder getFilesToPushBuilder(
        int index) {
      return getFilesToPushFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public com.google.devtools.testing.v1.DeviceFileOrBuilder getFilesToPushOrBuilder(
        int index) {
      if (filesToPushBuilder_ == null) {
        return filesToPush_.get(index);  } else {
        return filesToPushBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public java.util.List<? extends com.google.devtools.testing.v1.DeviceFileOrBuilder> 
         getFilesToPushOrBuilderList() {
      if (filesToPushBuilder_ != null) {
        return filesToPushBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(filesToPush_);
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public com.google.devtools.testing.v1.DeviceFile.Builder addFilesToPushBuilder() {
      return getFilesToPushFieldBuilder().addBuilder(
          com.google.devtools.testing.v1.DeviceFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public com.google.devtools.testing.v1.DeviceFile.Builder addFilesToPushBuilder(
        int index) {
      return getFilesToPushFieldBuilder().addBuilder(
          index, com.google.devtools.testing.v1.DeviceFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.DeviceFile files_to_push = 1;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.DeviceFile.Builder> 
         getFilesToPushBuilderList() {
      return getFilesToPushFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.DeviceFile, com.google.devtools.testing.v1.DeviceFile.Builder, com.google.devtools.testing.v1.DeviceFileOrBuilder> 
        getFilesToPushFieldBuilder() {
      if (filesToPushBuilder_ == null) {
        filesToPushBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.testing.v1.DeviceFile, com.google.devtools.testing.v1.DeviceFile.Builder, com.google.devtools.testing.v1.DeviceFileOrBuilder>(
                filesToPush_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        filesToPush_ = null;
      }
      return filesToPushBuilder_;
    }

    private com.google.protobuf.LazyStringList directoriesToPull_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureDirectoriesToPullIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        directoriesToPull_ = new com.google.protobuf.LazyStringArrayList(directoriesToPull_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @return A list containing the directoriesToPull.
     */
    public com.google.protobuf.ProtocolStringList
        getDirectoriesToPullList() {
      return directoriesToPull_.getUnmodifiableView();
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @return The count of directoriesToPull.
     */
    public int getDirectoriesToPullCount() {
      return directoriesToPull_.size();
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @param index The index of the element to return.
     * @return The directoriesToPull at the given index.
     */
    public java.lang.String getDirectoriesToPull(int index) {
      return directoriesToPull_.get(index);
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the directoriesToPull at the given index.
     */
    public com.google.protobuf.ByteString
        getDirectoriesToPullBytes(int index) {
      return directoriesToPull_.getByteString(index);
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @param index The index to set the value at.
     * @param value The directoriesToPull to set.
     * @return This builder for chaining.
     */
    public Builder setDirectoriesToPull(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDirectoriesToPullIsMutable();
      directoriesToPull_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @param value The directoriesToPull to add.
     * @return This builder for chaining.
     */
    public Builder addDirectoriesToPull(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDirectoriesToPullIsMutable();
      directoriesToPull_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @param values The directoriesToPull to add.
     * @return This builder for chaining.
     */
    public Builder addAllDirectoriesToPull(
        java.lang.Iterable<java.lang.String> values) {
      ensureDirectoriesToPullIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, directoriesToPull_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDirectoriesToPull() {
      directoriesToPull_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to GCS at the end of the test;
     * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
     * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
     * Note: The paths /sdcard and /data will be made available and treated as
     * implicit path substitutions. E.g. if /sdcard on a particular device does
     * not map to external storage, the system will replace it with the external
     * storage path prefix for that device.
     * </pre>
     *
     * <code>repeated string directories_to_pull = 2;</code>
     * @param value The bytes of the directoriesToPull to add.
     * @return This builder for chaining.
     */
    public Builder addDirectoriesToPullBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureDirectoriesToPullIsMutable();
      directoriesToPull_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<com.google.devtools.testing.v1.Apk> additionalApks_ =
      java.util.Collections.emptyList();
    private void ensureAdditionalApksIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        additionalApks_ = new java.util.ArrayList<com.google.devtools.testing.v1.Apk>(additionalApks_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.Apk, com.google.devtools.testing.v1.Apk.Builder, com.google.devtools.testing.v1.ApkOrBuilder> additionalApksBuilder_;

    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.Apk> getAdditionalApksList() {
      if (additionalApksBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalApks_);
      } else {
        return additionalApksBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public int getAdditionalApksCount() {
      if (additionalApksBuilder_ == null) {
        return additionalApks_.size();
      } else {
        return additionalApksBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public com.google.devtools.testing.v1.Apk getAdditionalApks(int index) {
      if (additionalApksBuilder_ == null) {
        return additionalApks_.get(index);
      } else {
        return additionalApksBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder setAdditionalApks(
        int index, com.google.devtools.testing.v1.Apk value) {
      if (additionalApksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalApksIsMutable();
        additionalApks_.set(index, value);
        onChanged();
      } else {
        additionalApksBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder setAdditionalApks(
        int index, com.google.devtools.testing.v1.Apk.Builder builderForValue) {
      if (additionalApksBuilder_ == null) {
        ensureAdditionalApksIsMutable();
        additionalApks_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalApksBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder addAdditionalApks(com.google.devtools.testing.v1.Apk value) {
      if (additionalApksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalApksIsMutable();
        additionalApks_.add(value);
        onChanged();
      } else {
        additionalApksBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder addAdditionalApks(
        int index, com.google.devtools.testing.v1.Apk value) {
      if (additionalApksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalApksIsMutable();
        additionalApks_.add(index, value);
        onChanged();
      } else {
        additionalApksBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder addAdditionalApks(
        com.google.devtools.testing.v1.Apk.Builder builderForValue) {
      if (additionalApksBuilder_ == null) {
        ensureAdditionalApksIsMutable();
        additionalApks_.add(builderForValue.build());
        onChanged();
      } else {
        additionalApksBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder addAdditionalApks(
        int index, com.google.devtools.testing.v1.Apk.Builder builderForValue) {
      if (additionalApksBuilder_ == null) {
        ensureAdditionalApksIsMutable();
        additionalApks_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalApksBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder addAllAdditionalApks(
        java.lang.Iterable<? extends com.google.devtools.testing.v1.Apk> values) {
      if (additionalApksBuilder_ == null) {
        ensureAdditionalApksIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, additionalApks_);
        onChanged();
      } else {
        additionalApksBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder clearAdditionalApks() {
      if (additionalApksBuilder_ == null) {
        additionalApks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        additionalApksBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public Builder removeAdditionalApks(int index) {
      if (additionalApksBuilder_ == null) {
        ensureAdditionalApksIsMutable();
        additionalApks_.remove(index);
        onChanged();
      } else {
        additionalApksBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public com.google.devtools.testing.v1.Apk.Builder getAdditionalApksBuilder(
        int index) {
      return getAdditionalApksFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public com.google.devtools.testing.v1.ApkOrBuilder getAdditionalApksOrBuilder(
        int index) {
      if (additionalApksBuilder_ == null) {
        return additionalApks_.get(index);  } else {
        return additionalApksBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public java.util.List<? extends com.google.devtools.testing.v1.ApkOrBuilder> 
         getAdditionalApksOrBuilderList() {
      if (additionalApksBuilder_ != null) {
        return additionalApksBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalApks_);
      }
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public com.google.devtools.testing.v1.Apk.Builder addAdditionalApksBuilder() {
      return getAdditionalApksFieldBuilder().addBuilder(
          com.google.devtools.testing.v1.Apk.getDefaultInstance());
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public com.google.devtools.testing.v1.Apk.Builder addAdditionalApksBuilder(
        int index) {
      return getAdditionalApksFieldBuilder().addBuilder(
          index, com.google.devtools.testing.v1.Apk.getDefaultInstance());
    }
    /**
     * <pre>
     * APKs to install in addition to those being directly tested.
     * Currently capped at 100.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.Apk additional_apks = 3;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.Apk.Builder> 
         getAdditionalApksBuilderList() {
      return getAdditionalApksFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.Apk, com.google.devtools.testing.v1.Apk.Builder, com.google.devtools.testing.v1.ApkOrBuilder> 
        getAdditionalApksFieldBuilder() {
      if (additionalApksBuilder_ == null) {
        additionalApksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.testing.v1.Apk, com.google.devtools.testing.v1.Apk.Builder, com.google.devtools.testing.v1.ApkOrBuilder>(
                additionalApks_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        additionalApks_ = null;
      }
      return additionalApksBuilder_;
    }

    private com.google.devtools.testing.v1.Account account_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.Account, com.google.devtools.testing.v1.Account.Builder, com.google.devtools.testing.v1.AccountOrBuilder> accountBuilder_;
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     * @return Whether the account field is set.
     */
    public boolean hasAccount() {
      return accountBuilder_ != null || account_ != null;
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     * @return The account.
     */
    public com.google.devtools.testing.v1.Account getAccount() {
      if (accountBuilder_ == null) {
        return account_ == null ? com.google.devtools.testing.v1.Account.getDefaultInstance() : account_;
      } else {
        return accountBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    public Builder setAccount(com.google.devtools.testing.v1.Account value) {
      if (accountBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        account_ = value;
        onChanged();
      } else {
        accountBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    public Builder setAccount(
        com.google.devtools.testing.v1.Account.Builder builderForValue) {
      if (accountBuilder_ == null) {
        account_ = builderForValue.build();
        onChanged();
      } else {
        accountBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    public Builder mergeAccount(com.google.devtools.testing.v1.Account value) {
      if (accountBuilder_ == null) {
        if (account_ != null) {
          account_ =
            com.google.devtools.testing.v1.Account.newBuilder(account_).mergeFrom(value).buildPartial();
        } else {
          account_ = value;
        }
        onChanged();
      } else {
        accountBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    public Builder clearAccount() {
      if (accountBuilder_ == null) {
        account_ = null;
        onChanged();
      } else {
        account_ = null;
        accountBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    public com.google.devtools.testing.v1.Account.Builder getAccountBuilder() {
      
      onChanged();
      return getAccountFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    public com.google.devtools.testing.v1.AccountOrBuilder getAccountOrBuilder() {
      if (accountBuilder_ != null) {
        return accountBuilder_.getMessageOrBuilder();
      } else {
        return account_ == null ?
            com.google.devtools.testing.v1.Account.getDefaultInstance() : account_;
      }
    }
    /**
     * <pre>
     * The device will be logged in on this account for the duration of the test.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.Account account = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.Account, com.google.devtools.testing.v1.Account.Builder, com.google.devtools.testing.v1.AccountOrBuilder> 
        getAccountFieldBuilder() {
      if (accountBuilder_ == null) {
        accountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.Account, com.google.devtools.testing.v1.Account.Builder, com.google.devtools.testing.v1.AccountOrBuilder>(
                getAccount(),
                getParentForChildren(),
                isClean());
        account_ = null;
      }
      return accountBuilder_;
    }

    private java.lang.Object networkProfile_ = "";
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 5;</code>
     * @return The networkProfile.
     */
    public java.lang.String getNetworkProfile() {
      java.lang.Object ref = networkProfile_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        networkProfile_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 5;</code>
     * @return The bytes for networkProfile.
     */
    public com.google.protobuf.ByteString
        getNetworkProfileBytes() {
      java.lang.Object ref = networkProfile_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        networkProfile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 5;</code>
     * @param value The networkProfile to set.
     * @return This builder for chaining.
     */
    public Builder setNetworkProfile(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      networkProfile_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearNetworkProfile() {
      
      networkProfile_ = getDefaultInstance().getNetworkProfile();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 5;</code>
     * @param value The bytes for networkProfile to set.
     * @return This builder for chaining.
     */
    public Builder setNetworkProfileBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      networkProfile_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.google.devtools.testing.v1.EnvironmentVariable> environmentVariables_ =
      java.util.Collections.emptyList();
    private void ensureEnvironmentVariablesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        environmentVariables_ = new java.util.ArrayList<com.google.devtools.testing.v1.EnvironmentVariable>(environmentVariables_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.EnvironmentVariable, com.google.devtools.testing.v1.EnvironmentVariable.Builder, com.google.devtools.testing.v1.EnvironmentVariableOrBuilder> environmentVariablesBuilder_;

    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.EnvironmentVariable> getEnvironmentVariablesList() {
      if (environmentVariablesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(environmentVariables_);
      } else {
        return environmentVariablesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public int getEnvironmentVariablesCount() {
      if (environmentVariablesBuilder_ == null) {
        return environmentVariables_.size();
      } else {
        return environmentVariablesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public com.google.devtools.testing.v1.EnvironmentVariable getEnvironmentVariables(int index) {
      if (environmentVariablesBuilder_ == null) {
        return environmentVariables_.get(index);
      } else {
        return environmentVariablesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder setEnvironmentVariables(
        int index, com.google.devtools.testing.v1.EnvironmentVariable value) {
      if (environmentVariablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.set(index, value);
        onChanged();
      } else {
        environmentVariablesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder setEnvironmentVariables(
        int index, com.google.devtools.testing.v1.EnvironmentVariable.Builder builderForValue) {
      if (environmentVariablesBuilder_ == null) {
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.set(index, builderForValue.build());
        onChanged();
      } else {
        environmentVariablesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder addEnvironmentVariables(com.google.devtools.testing.v1.EnvironmentVariable value) {
      if (environmentVariablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.add(value);
        onChanged();
      } else {
        environmentVariablesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder addEnvironmentVariables(
        int index, com.google.devtools.testing.v1.EnvironmentVariable value) {
      if (environmentVariablesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.add(index, value);
        onChanged();
      } else {
        environmentVariablesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder addEnvironmentVariables(
        com.google.devtools.testing.v1.EnvironmentVariable.Builder builderForValue) {
      if (environmentVariablesBuilder_ == null) {
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.add(builderForValue.build());
        onChanged();
      } else {
        environmentVariablesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder addEnvironmentVariables(
        int index, com.google.devtools.testing.v1.EnvironmentVariable.Builder builderForValue) {
      if (environmentVariablesBuilder_ == null) {
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.add(index, builderForValue.build());
        onChanged();
      } else {
        environmentVariablesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder addAllEnvironmentVariables(
        java.lang.Iterable<? extends com.google.devtools.testing.v1.EnvironmentVariable> values) {
      if (environmentVariablesBuilder_ == null) {
        ensureEnvironmentVariablesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, environmentVariables_);
        onChanged();
      } else {
        environmentVariablesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder clearEnvironmentVariables() {
      if (environmentVariablesBuilder_ == null) {
        environmentVariables_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        environmentVariablesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public Builder removeEnvironmentVariables(int index) {
      if (environmentVariablesBuilder_ == null) {
        ensureEnvironmentVariablesIsMutable();
        environmentVariables_.remove(index);
        onChanged();
      } else {
        environmentVariablesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public com.google.devtools.testing.v1.EnvironmentVariable.Builder getEnvironmentVariablesBuilder(
        int index) {
      return getEnvironmentVariablesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public com.google.devtools.testing.v1.EnvironmentVariableOrBuilder getEnvironmentVariablesOrBuilder(
        int index) {
      if (environmentVariablesBuilder_ == null) {
        return environmentVariables_.get(index);  } else {
        return environmentVariablesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public java.util.List<? extends com.google.devtools.testing.v1.EnvironmentVariableOrBuilder> 
         getEnvironmentVariablesOrBuilderList() {
      if (environmentVariablesBuilder_ != null) {
        return environmentVariablesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(environmentVariables_);
      }
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public com.google.devtools.testing.v1.EnvironmentVariable.Builder addEnvironmentVariablesBuilder() {
      return getEnvironmentVariablesFieldBuilder().addBuilder(
          com.google.devtools.testing.v1.EnvironmentVariable.getDefaultInstance());
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public com.google.devtools.testing.v1.EnvironmentVariable.Builder addEnvironmentVariablesBuilder(
        int index) {
      return getEnvironmentVariablesFieldBuilder().addBuilder(
          index, com.google.devtools.testing.v1.EnvironmentVariable.getDefaultInstance());
    }
    /**
     * <pre>
     * Environment variables to set for the test (only applicable for
     * instrumentation tests).
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.EnvironmentVariable.Builder> 
         getEnvironmentVariablesBuilderList() {
      return getEnvironmentVariablesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.EnvironmentVariable, com.google.devtools.testing.v1.EnvironmentVariable.Builder, com.google.devtools.testing.v1.EnvironmentVariableOrBuilder> 
        getEnvironmentVariablesFieldBuilder() {
      if (environmentVariablesBuilder_ == null) {
        environmentVariablesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.testing.v1.EnvironmentVariable, com.google.devtools.testing.v1.EnvironmentVariable.Builder, com.google.devtools.testing.v1.EnvironmentVariableOrBuilder>(
                environmentVariables_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        environmentVariables_ = null;
      }
      return environmentVariablesBuilder_;
    }

    private com.google.devtools.testing.v1.SystraceSetup systrace_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.SystraceSetup, com.google.devtools.testing.v1.SystraceSetup.Builder, com.google.devtools.testing.v1.SystraceSetupOrBuilder> systraceBuilder_;
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     * @return Whether the systrace field is set.
     */
    public boolean hasSystrace() {
      return systraceBuilder_ != null || systrace_ != null;
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     * @return The systrace.
     */
    public com.google.devtools.testing.v1.SystraceSetup getSystrace() {
      if (systraceBuilder_ == null) {
        return systrace_ == null ? com.google.devtools.testing.v1.SystraceSetup.getDefaultInstance() : systrace_;
      } else {
        return systraceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    public Builder setSystrace(com.google.devtools.testing.v1.SystraceSetup value) {
      if (systraceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        systrace_ = value;
        onChanged();
      } else {
        systraceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    public Builder setSystrace(
        com.google.devtools.testing.v1.SystraceSetup.Builder builderForValue) {
      if (systraceBuilder_ == null) {
        systrace_ = builderForValue.build();
        onChanged();
      } else {
        systraceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    public Builder mergeSystrace(com.google.devtools.testing.v1.SystraceSetup value) {
      if (systraceBuilder_ == null) {
        if (systrace_ != null) {
          systrace_ =
            com.google.devtools.testing.v1.SystraceSetup.newBuilder(systrace_).mergeFrom(value).buildPartial();
        } else {
          systrace_ = value;
        }
        onChanged();
      } else {
        systraceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    public Builder clearSystrace() {
      if (systraceBuilder_ == null) {
        systrace_ = null;
        onChanged();
      } else {
        systrace_ = null;
        systraceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    public com.google.devtools.testing.v1.SystraceSetup.Builder getSystraceBuilder() {
      
      onChanged();
      return getSystraceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    public com.google.devtools.testing.v1.SystraceSetupOrBuilder getSystraceOrBuilder() {
      if (systraceBuilder_ != null) {
        return systraceBuilder_.getMessageOrBuilder();
      } else {
        return systrace_ == null ?
            com.google.devtools.testing.v1.SystraceSetup.getDefaultInstance() : systrace_;
      }
    }
    /**
     * <pre>
     * Systrace configuration for the run.
     * If set a systrace will be taken, starting on test start and lasting for the
     * configured duration. The systrace file thus obtained is put in the results
     * bucket together with the other artifacts from the run.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.SystraceSetup systrace = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.SystraceSetup, com.google.devtools.testing.v1.SystraceSetup.Builder, com.google.devtools.testing.v1.SystraceSetupOrBuilder> 
        getSystraceFieldBuilder() {
      if (systraceBuilder_ == null) {
        systraceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.SystraceSetup, com.google.devtools.testing.v1.SystraceSetup.Builder, com.google.devtools.testing.v1.SystraceSetupOrBuilder>(
                getSystrace(),
                getParentForChildren(),
                isClean());
        systrace_ = null;
      }
      return systraceBuilder_;
    }

    private boolean dontAutograntPermissions_ ;
    /**
     * <pre>
     * Whether to prevent all runtime permissions to be granted at app install
     * </pre>
     *
     * <code>bool dont_autogrant_permissions = 23;</code>
     * @return The dontAutograntPermissions.
     */
    @java.lang.Override
    public boolean getDontAutograntPermissions() {
      return dontAutograntPermissions_;
    }
    /**
     * <pre>
     * Whether to prevent all runtime permissions to be granted at app install
     * </pre>
     *
     * <code>bool dont_autogrant_permissions = 23;</code>
     * @param value The dontAutograntPermissions to set.
     * @return This builder for chaining.
     */
    public Builder setDontAutograntPermissions(boolean value) {
      
      dontAutograntPermissions_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to prevent all runtime permissions to be granted at app install
     * </pre>
     *
     * <code>bool dont_autogrant_permissions = 23;</code>
     * @return This builder for chaining.
     */
    public Builder clearDontAutograntPermissions() {
      
      dontAutograntPermissions_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.testing.v1.TestSetup)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.testing.v1.TestSetup)
  private static final com.google.devtools.testing.v1.TestSetup DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.testing.v1.TestSetup();
  }

  public static com.google.devtools.testing.v1.TestSetup getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TestSetup>
      PARSER = new com.google.protobuf.AbstractParser<TestSetup>() {
    @java.lang.Override
    public TestSetup parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TestSetup(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TestSetup> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TestSetup> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.testing.v1.TestSetup getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

