// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * A test of an iOS application that uses the XCTest framework.
 * Xcode supports the option to "build for testing", which generates an
 * .xctestrun file that contains a test specification (arguments, test methods,
 * etc). This test type accepts a zip file containing the .xctestrun file and
 * the corresponding contents of the Build/Products directory that contains all
 * the binaries needed to run the tests.
 * </pre>
 *
 * Protobuf type {@code google.devtools.testing.v1.IosXcTest}
 */
public final class IosXcTest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.testing.v1.IosXcTest)
    IosXcTestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IosXcTest.newBuilder() to construct.
  private IosXcTest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IosXcTest() {
    xcodeVersion_ = "";
    appBundleId_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new IosXcTest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosXcTest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosXcTest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.testing.v1.IosXcTest.class, com.google.devtools.testing.v1.IosXcTest.Builder.class);
  }

  public static final int TESTS_ZIP_FIELD_NUMBER = 1;
  private com.google.devtools.testing.v1.FileReference testsZip_;
  /**
   * <pre>
   * Required. The .zip containing the .xctestrun file and the contents of the
   * DerivedData/Build/Products directory.
   * The .xctestrun file in this zip is ignored if the xctestrun field is
   * specified.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
   * @return Whether the testsZip field is set.
   */
  @java.lang.Override
  public boolean hasTestsZip() {
    return testsZip_ != null;
  }
  /**
   * <pre>
   * Required. The .zip containing the .xctestrun file and the contents of the
   * DerivedData/Build/Products directory.
   * The .xctestrun file in this zip is ignored if the xctestrun field is
   * specified.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
   * @return The testsZip.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReference getTestsZip() {
    return testsZip_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testsZip_;
  }
  /**
   * <pre>
   * Required. The .zip containing the .xctestrun file and the contents of the
   * DerivedData/Build/Products directory.
   * The .xctestrun file in this zip is ignored if the xctestrun field is
   * specified.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReferenceOrBuilder getTestsZipOrBuilder() {
    return testsZip_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testsZip_;
  }

  public static final int XCTESTRUN_FIELD_NUMBER = 2;
  private com.google.devtools.testing.v1.FileReference xctestrun_;
  /**
   * <pre>
   * An .xctestrun file that will override the .xctestrun file in the
   * tests zip. Because the .xctestrun file contains environment variables along
   * with test methods to run and/or ignore, this can be useful for sharding
   * tests. Default is taken from the tests zip.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
   * @return Whether the xctestrun field is set.
   */
  @java.lang.Override
  public boolean hasXctestrun() {
    return xctestrun_ != null;
  }
  /**
   * <pre>
   * An .xctestrun file that will override the .xctestrun file in the
   * tests zip. Because the .xctestrun file contains environment variables along
   * with test methods to run and/or ignore, this can be useful for sharding
   * tests. Default is taken from the tests zip.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
   * @return The xctestrun.
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReference getXctestrun() {
    return xctestrun_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : xctestrun_;
  }
  /**
   * <pre>
   * An .xctestrun file that will override the .xctestrun file in the
   * tests zip. Because the .xctestrun file contains environment variables along
   * with test methods to run and/or ignore, this can be useful for sharding
   * tests. Default is taken from the tests zip.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReferenceOrBuilder getXctestrunOrBuilder() {
    return xctestrun_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : xctestrun_;
  }

  public static final int XCODE_VERSION_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object xcodeVersion_ = "";
  /**
   * <pre>
   * The Xcode version that should be used for the test.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   * Defaults to the latest Xcode version Firebase Test Lab supports.
   * </pre>
   *
   * <code>string xcode_version = 3;</code>
   * @return The xcodeVersion.
   */
  @java.lang.Override
  public java.lang.String getXcodeVersion() {
    java.lang.Object ref = xcodeVersion_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      xcodeVersion_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The Xcode version that should be used for the test.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   * Defaults to the latest Xcode version Firebase Test Lab supports.
   * </pre>
   *
   * <code>string xcode_version = 3;</code>
   * @return The bytes for xcodeVersion.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getXcodeVersionBytes() {
    java.lang.Object ref = xcodeVersion_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      xcodeVersion_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int APP_BUNDLE_ID_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object appBundleId_ = "";
  /**
   * <pre>
   * Output only. The bundle id for the application under test.
   * </pre>
   *
   * <code>string app_bundle_id = 4;</code>
   * @return The appBundleId.
   */
  @java.lang.Override
  public java.lang.String getAppBundleId() {
    java.lang.Object ref = appBundleId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      appBundleId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Output only. The bundle id for the application under test.
   * </pre>
   *
   * <code>string app_bundle_id = 4;</code>
   * @return The bytes for appBundleId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAppBundleIdBytes() {
    java.lang.Object ref = appBundleId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      appBundleId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TEST_SPECIAL_ENTITLEMENTS_FIELD_NUMBER = 6;
  private boolean testSpecialEntitlements_ = false;
  /**
   * <pre>
   * The option to test special app entitlements. Setting this would re-sign the
   * app having special entitlements with an explicit application-identifier.
   * Currently supports testing aps-environment entitlement.
   * </pre>
   *
   * <code>bool test_special_entitlements = 6;</code>
   * @return The testSpecialEntitlements.
   */
  @java.lang.Override
  public boolean getTestSpecialEntitlements() {
    return testSpecialEntitlements_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (testsZip_ != null) {
      output.writeMessage(1, getTestsZip());
    }
    if (xctestrun_ != null) {
      output.writeMessage(2, getXctestrun());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(xcodeVersion_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, xcodeVersion_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(appBundleId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, appBundleId_);
    }
    if (testSpecialEntitlements_ != false) {
      output.writeBool(6, testSpecialEntitlements_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (testsZip_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTestsZip());
    }
    if (xctestrun_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getXctestrun());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(xcodeVersion_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, xcodeVersion_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(appBundleId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, appBundleId_);
    }
    if (testSpecialEntitlements_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, testSpecialEntitlements_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.testing.v1.IosXcTest)) {
      return super.equals(obj);
    }
    com.google.devtools.testing.v1.IosXcTest other = (com.google.devtools.testing.v1.IosXcTest) obj;

    if (hasTestsZip() != other.hasTestsZip()) return false;
    if (hasTestsZip()) {
      if (!getTestsZip()
          .equals(other.getTestsZip())) return false;
    }
    if (hasXctestrun() != other.hasXctestrun()) return false;
    if (hasXctestrun()) {
      if (!getXctestrun()
          .equals(other.getXctestrun())) return false;
    }
    if (!getXcodeVersion()
        .equals(other.getXcodeVersion())) return false;
    if (!getAppBundleId()
        .equals(other.getAppBundleId())) return false;
    if (getTestSpecialEntitlements()
        != other.getTestSpecialEntitlements()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTestsZip()) {
      hash = (37 * hash) + TESTS_ZIP_FIELD_NUMBER;
      hash = (53 * hash) + getTestsZip().hashCode();
    }
    if (hasXctestrun()) {
      hash = (37 * hash) + XCTESTRUN_FIELD_NUMBER;
      hash = (53 * hash) + getXctestrun().hashCode();
    }
    hash = (37 * hash) + XCODE_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + getXcodeVersion().hashCode();
    hash = (37 * hash) + APP_BUNDLE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getAppBundleId().hashCode();
    hash = (37 * hash) + TEST_SPECIAL_ENTITLEMENTS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getTestSpecialEntitlements());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.IosXcTest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.testing.v1.IosXcTest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A test of an iOS application that uses the XCTest framework.
   * Xcode supports the option to "build for testing", which generates an
   * .xctestrun file that contains a test specification (arguments, test methods,
   * etc). This test type accepts a zip file containing the .xctestrun file and
   * the corresponding contents of the Build/Products directory that contains all
   * the binaries needed to run the tests.
   * </pre>
   *
   * Protobuf type {@code google.devtools.testing.v1.IosXcTest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.testing.v1.IosXcTest)
      com.google.devtools.testing.v1.IosXcTestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosXcTest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosXcTest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.testing.v1.IosXcTest.class, com.google.devtools.testing.v1.IosXcTest.Builder.class);
    }

    // Construct using com.google.devtools.testing.v1.IosXcTest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      testsZip_ = null;
      if (testsZipBuilder_ != null) {
        testsZipBuilder_.dispose();
        testsZipBuilder_ = null;
      }
      xctestrun_ = null;
      if (xctestrunBuilder_ != null) {
        xctestrunBuilder_.dispose();
        xctestrunBuilder_ = null;
      }
      xcodeVersion_ = "";
      appBundleId_ = "";
      testSpecialEntitlements_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosXcTest_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.IosXcTest getDefaultInstanceForType() {
      return com.google.devtools.testing.v1.IosXcTest.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.IosXcTest build() {
      com.google.devtools.testing.v1.IosXcTest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.IosXcTest buildPartial() {
      com.google.devtools.testing.v1.IosXcTest result = new com.google.devtools.testing.v1.IosXcTest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.devtools.testing.v1.IosXcTest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.testsZip_ = testsZipBuilder_ == null
            ? testsZip_
            : testsZipBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.xctestrun_ = xctestrunBuilder_ == null
            ? xctestrun_
            : xctestrunBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.xcodeVersion_ = xcodeVersion_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.appBundleId_ = appBundleId_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.testSpecialEntitlements_ = testSpecialEntitlements_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.testing.v1.IosXcTest) {
        return mergeFrom((com.google.devtools.testing.v1.IosXcTest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.testing.v1.IosXcTest other) {
      if (other == com.google.devtools.testing.v1.IosXcTest.getDefaultInstance()) return this;
      if (other.hasTestsZip()) {
        mergeTestsZip(other.getTestsZip());
      }
      if (other.hasXctestrun()) {
        mergeXctestrun(other.getXctestrun());
      }
      if (!other.getXcodeVersion().isEmpty()) {
        xcodeVersion_ = other.xcodeVersion_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (!other.getAppBundleId().isEmpty()) {
        appBundleId_ = other.appBundleId_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.getTestSpecialEntitlements() != false) {
        setTestSpecialEntitlements(other.getTestSpecialEntitlements());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getTestsZipFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getXctestrunFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              xcodeVersion_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              appBundleId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 48: {
              testSpecialEntitlements_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 48
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.devtools.testing.v1.FileReference testsZip_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> testsZipBuilder_;
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     * @return Whether the testsZip field is set.
     */
    public boolean hasTestsZip() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     * @return The testsZip.
     */
    public com.google.devtools.testing.v1.FileReference getTestsZip() {
      if (testsZipBuilder_ == null) {
        return testsZip_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testsZip_;
      } else {
        return testsZipBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    public Builder setTestsZip(com.google.devtools.testing.v1.FileReference value) {
      if (testsZipBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        testsZip_ = value;
      } else {
        testsZipBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    public Builder setTestsZip(
        com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (testsZipBuilder_ == null) {
        testsZip_ = builderForValue.build();
      } else {
        testsZipBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    public Builder mergeTestsZip(com.google.devtools.testing.v1.FileReference value) {
      if (testsZipBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          testsZip_ != null &&
          testsZip_ != com.google.devtools.testing.v1.FileReference.getDefaultInstance()) {
          getTestsZipBuilder().mergeFrom(value);
        } else {
          testsZip_ = value;
        }
      } else {
        testsZipBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    public Builder clearTestsZip() {
      bitField0_ = (bitField0_ & ~0x00000001);
      testsZip_ = null;
      if (testsZipBuilder_ != null) {
        testsZipBuilder_.dispose();
        testsZipBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder getTestsZipBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getTestsZipFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    public com.google.devtools.testing.v1.FileReferenceOrBuilder getTestsZipOrBuilder() {
      if (testsZipBuilder_ != null) {
        return testsZipBuilder_.getMessageOrBuilder();
      } else {
        return testsZip_ == null ?
            com.google.devtools.testing.v1.FileReference.getDefaultInstance() : testsZip_;
      }
    }
    /**
     * <pre>
     * Required. The .zip containing the .xctestrun file and the contents of the
     * DerivedData/Build/Products directory.
     * The .xctestrun file in this zip is ignored if the xctestrun field is
     * specified.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference tests_zip = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> 
        getTestsZipFieldBuilder() {
      if (testsZipBuilder_ == null) {
        testsZipBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder>(
                getTestsZip(),
                getParentForChildren(),
                isClean());
        testsZip_ = null;
      }
      return testsZipBuilder_;
    }

    private com.google.devtools.testing.v1.FileReference xctestrun_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> xctestrunBuilder_;
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     * @return Whether the xctestrun field is set.
     */
    public boolean hasXctestrun() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     * @return The xctestrun.
     */
    public com.google.devtools.testing.v1.FileReference getXctestrun() {
      if (xctestrunBuilder_ == null) {
        return xctestrun_ == null ? com.google.devtools.testing.v1.FileReference.getDefaultInstance() : xctestrun_;
      } else {
        return xctestrunBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    public Builder setXctestrun(com.google.devtools.testing.v1.FileReference value) {
      if (xctestrunBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        xctestrun_ = value;
      } else {
        xctestrunBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    public Builder setXctestrun(
        com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (xctestrunBuilder_ == null) {
        xctestrun_ = builderForValue.build();
      } else {
        xctestrunBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    public Builder mergeXctestrun(com.google.devtools.testing.v1.FileReference value) {
      if (xctestrunBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          xctestrun_ != null &&
          xctestrun_ != com.google.devtools.testing.v1.FileReference.getDefaultInstance()) {
          getXctestrunBuilder().mergeFrom(value);
        } else {
          xctestrun_ = value;
        }
      } else {
        xctestrunBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    public Builder clearXctestrun() {
      bitField0_ = (bitField0_ & ~0x00000002);
      xctestrun_ = null;
      if (xctestrunBuilder_ != null) {
        xctestrunBuilder_.dispose();
        xctestrunBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder getXctestrunBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getXctestrunFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReferenceOrBuilder getXctestrunOrBuilder() {
      if (xctestrunBuilder_ != null) {
        return xctestrunBuilder_.getMessageOrBuilder();
      } else {
        return xctestrun_ == null ?
            com.google.devtools.testing.v1.FileReference.getDefaultInstance() : xctestrun_;
      }
    }
    /**
     * <pre>
     * An .xctestrun file that will override the .xctestrun file in the
     * tests zip. Because the .xctestrun file contains environment variables along
     * with test methods to run and/or ignore, this can be useful for sharding
     * tests. Default is taken from the tests zip.
     * </pre>
     *
     * <code>.google.devtools.testing.v1.FileReference xctestrun = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> 
        getXctestrunFieldBuilder() {
      if (xctestrunBuilder_ == null) {
        xctestrunBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder>(
                getXctestrun(),
                getParentForChildren(),
                isClean());
        xctestrun_ = null;
      }
      return xctestrunBuilder_;
    }

    private java.lang.Object xcodeVersion_ = "";
    /**
     * <pre>
     * The Xcode version that should be used for the test.
     * Use the TestEnvironmentDiscoveryService to get supported options.
     * Defaults to the latest Xcode version Firebase Test Lab supports.
     * </pre>
     *
     * <code>string xcode_version = 3;</code>
     * @return The xcodeVersion.
     */
    public java.lang.String getXcodeVersion() {
      java.lang.Object ref = xcodeVersion_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        xcodeVersion_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The Xcode version that should be used for the test.
     * Use the TestEnvironmentDiscoveryService to get supported options.
     * Defaults to the latest Xcode version Firebase Test Lab supports.
     * </pre>
     *
     * <code>string xcode_version = 3;</code>
     * @return The bytes for xcodeVersion.
     */
    public com.google.protobuf.ByteString
        getXcodeVersionBytes() {
      java.lang.Object ref = xcodeVersion_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        xcodeVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The Xcode version that should be used for the test.
     * Use the TestEnvironmentDiscoveryService to get supported options.
     * Defaults to the latest Xcode version Firebase Test Lab supports.
     * </pre>
     *
     * <code>string xcode_version = 3;</code>
     * @param value The xcodeVersion to set.
     * @return This builder for chaining.
     */
    public Builder setXcodeVersion(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      xcodeVersion_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Xcode version that should be used for the test.
     * Use the TestEnvironmentDiscoveryService to get supported options.
     * Defaults to the latest Xcode version Firebase Test Lab supports.
     * </pre>
     *
     * <code>string xcode_version = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearXcodeVersion() {
      xcodeVersion_ = getDefaultInstance().getXcodeVersion();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Xcode version that should be used for the test.
     * Use the TestEnvironmentDiscoveryService to get supported options.
     * Defaults to the latest Xcode version Firebase Test Lab supports.
     * </pre>
     *
     * <code>string xcode_version = 3;</code>
     * @param value The bytes for xcodeVersion to set.
     * @return This builder for chaining.
     */
    public Builder setXcodeVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      xcodeVersion_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object appBundleId_ = "";
    /**
     * <pre>
     * Output only. The bundle id for the application under test.
     * </pre>
     *
     * <code>string app_bundle_id = 4;</code>
     * @return The appBundleId.
     */
    public java.lang.String getAppBundleId() {
      java.lang.Object ref = appBundleId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        appBundleId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Output only. The bundle id for the application under test.
     * </pre>
     *
     * <code>string app_bundle_id = 4;</code>
     * @return The bytes for appBundleId.
     */
    public com.google.protobuf.ByteString
        getAppBundleIdBytes() {
      java.lang.Object ref = appBundleId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        appBundleId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Output only. The bundle id for the application under test.
     * </pre>
     *
     * <code>string app_bundle_id = 4;</code>
     * @param value The appBundleId to set.
     * @return This builder for chaining.
     */
    public Builder setAppBundleId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      appBundleId_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. The bundle id for the application under test.
     * </pre>
     *
     * <code>string app_bundle_id = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAppBundleId() {
      appBundleId_ = getDefaultInstance().getAppBundleId();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Output only. The bundle id for the application under test.
     * </pre>
     *
     * <code>string app_bundle_id = 4;</code>
     * @param value The bytes for appBundleId to set.
     * @return This builder for chaining.
     */
    public Builder setAppBundleIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      appBundleId_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private boolean testSpecialEntitlements_ ;
    /**
     * <pre>
     * The option to test special app entitlements. Setting this would re-sign the
     * app having special entitlements with an explicit application-identifier.
     * Currently supports testing aps-environment entitlement.
     * </pre>
     *
     * <code>bool test_special_entitlements = 6;</code>
     * @return The testSpecialEntitlements.
     */
    @java.lang.Override
    public boolean getTestSpecialEntitlements() {
      return testSpecialEntitlements_;
    }
    /**
     * <pre>
     * The option to test special app entitlements. Setting this would re-sign the
     * app having special entitlements with an explicit application-identifier.
     * Currently supports testing aps-environment entitlement.
     * </pre>
     *
     * <code>bool test_special_entitlements = 6;</code>
     * @param value The testSpecialEntitlements to set.
     * @return This builder for chaining.
     */
    public Builder setTestSpecialEntitlements(boolean value) {
      
      testSpecialEntitlements_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The option to test special app entitlements. Setting this would re-sign the
     * app having special entitlements with an explicit application-identifier.
     * Currently supports testing aps-environment entitlement.
     * </pre>
     *
     * <code>bool test_special_entitlements = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearTestSpecialEntitlements() {
      bitField0_ = (bitField0_ & ~0x00000010);
      testSpecialEntitlements_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.testing.v1.IosXcTest)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.testing.v1.IosXcTest)
  private static final com.google.devtools.testing.v1.IosXcTest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.testing.v1.IosXcTest();
  }

  public static com.google.devtools.testing.v1.IosXcTest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IosXcTest>
      PARSER = new com.google.protobuf.AbstractParser<IosXcTest>() {
    @java.lang.Override
    public IosXcTest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<IosXcTest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IosXcTest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.testing.v1.IosXcTest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

