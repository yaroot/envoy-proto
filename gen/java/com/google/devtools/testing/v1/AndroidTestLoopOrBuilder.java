// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

public interface AndroidTestLoopOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.testing.v1.AndroidTestLoop)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   * @return Whether the appApk field is set.
   */
  boolean hasAppApk();
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   * @return The appApk.
   */
  com.google.devtools.testing.v1.FileReference getAppApk();
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   */
  com.google.devtools.testing.v1.FileReferenceOrBuilder getAppApkOrBuilder();

  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 5;</code>
   * @return Whether the appBundle field is set.
   */
  boolean hasAppBundle();
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 5;</code>
   * @return The appBundle.
   */
  com.google.devtools.testing.v1.AppBundle getAppBundle();
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 5;</code>
   */
  com.google.devtools.testing.v1.AppBundleOrBuilder getAppBundleOrBuilder();

  /**
   * <pre>
   * The java package for the application under test.
   * The default is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string app_package_id = 2;</code>
   * @return The appPackageId.
   */
  java.lang.String getAppPackageId();
  /**
   * <pre>
   * The java package for the application under test.
   * The default is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string app_package_id = 2;</code>
   * @return The bytes for appPackageId.
   */
  com.google.protobuf.ByteString
      getAppPackageIdBytes();

  /**
   * <pre>
   * The list of scenarios that should be run during the test.
   * The default is all test loops, derived from the application's
   * manifest.
   * </pre>
   *
   * <code>repeated int32 scenarios = 3;</code>
   * @return A list containing the scenarios.
   */
  java.util.List<java.lang.Integer> getScenariosList();
  /**
   * <pre>
   * The list of scenarios that should be run during the test.
   * The default is all test loops, derived from the application's
   * manifest.
   * </pre>
   *
   * <code>repeated int32 scenarios = 3;</code>
   * @return The count of scenarios.
   */
  int getScenariosCount();
  /**
   * <pre>
   * The list of scenarios that should be run during the test.
   * The default is all test loops, derived from the application's
   * manifest.
   * </pre>
   *
   * <code>repeated int32 scenarios = 3;</code>
   * @param index The index of the element to return.
   * @return The scenarios at the given index.
   */
  int getScenarios(int index);

  /**
   * <pre>
   * The list of scenario labels that should be run during the test.
   * The scenario labels should map to labels defined in the application's
   * manifest. For example, player_experience and
   * com.google.test.loops.player_experience add all of the loops labeled in the
   * manifest with the com.google.test.loops.player_experience name to the
   * execution.
   * Scenarios can also be specified in the scenarios field.
   * </pre>
   *
   * <code>repeated string scenario_labels = 4;</code>
   * @return A list containing the scenarioLabels.
   */
  java.util.List<java.lang.String>
      getScenarioLabelsList();
  /**
   * <pre>
   * The list of scenario labels that should be run during the test.
   * The scenario labels should map to labels defined in the application's
   * manifest. For example, player_experience and
   * com.google.test.loops.player_experience add all of the loops labeled in the
   * manifest with the com.google.test.loops.player_experience name to the
   * execution.
   * Scenarios can also be specified in the scenarios field.
   * </pre>
   *
   * <code>repeated string scenario_labels = 4;</code>
   * @return The count of scenarioLabels.
   */
  int getScenarioLabelsCount();
  /**
   * <pre>
   * The list of scenario labels that should be run during the test.
   * The scenario labels should map to labels defined in the application's
   * manifest. For example, player_experience and
   * com.google.test.loops.player_experience add all of the loops labeled in the
   * manifest with the com.google.test.loops.player_experience name to the
   * execution.
   * Scenarios can also be specified in the scenarios field.
   * </pre>
   *
   * <code>repeated string scenario_labels = 4;</code>
   * @param index The index of the element to return.
   * @return The scenarioLabels at the given index.
   */
  java.lang.String getScenarioLabels(int index);
  /**
   * <pre>
   * The list of scenario labels that should be run during the test.
   * The scenario labels should map to labels defined in the application's
   * manifest. For example, player_experience and
   * com.google.test.loops.player_experience add all of the loops labeled in the
   * manifest with the com.google.test.loops.player_experience name to the
   * execution.
   * Scenarios can also be specified in the scenarios field.
   * </pre>
   *
   * <code>repeated string scenario_labels = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the scenarioLabels at the given index.
   */
  com.google.protobuf.ByteString
      getScenarioLabelsBytes(int index);

  public com.google.devtools.testing.v1.AndroidTestLoop.AppUnderTestCase getAppUnderTestCase();
}
