// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

public interface TestMatrixOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.testing.v1.TestMatrix)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Output only. Unique id set by the service.
   * </pre>
   *
   * <code>string test_matrix_id = 1;</code>
   * @return The testMatrixId.
   */
  java.lang.String getTestMatrixId();
  /**
   * <pre>
   * Output only. Unique id set by the service.
   * </pre>
   *
   * <code>string test_matrix_id = 1;</code>
   * @return The bytes for testMatrixId.
   */
  com.google.protobuf.ByteString
      getTestMatrixIdBytes();

  /**
   * <pre>
   * The cloud project that owns the test matrix.
   * </pre>
   *
   * <code>string project_id = 7;</code>
   * @return The projectId.
   */
  java.lang.String getProjectId();
  /**
   * <pre>
   * The cloud project that owns the test matrix.
   * </pre>
   *
   * <code>string project_id = 7;</code>
   * @return The bytes for projectId.
   */
  com.google.protobuf.ByteString
      getProjectIdBytes();

  /**
   * <pre>
   * Information about the client which invoked the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ClientInfo client_info = 10;</code>
   * @return Whether the clientInfo field is set.
   */
  boolean hasClientInfo();
  /**
   * <pre>
   * Information about the client which invoked the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ClientInfo client_info = 10;</code>
   * @return The clientInfo.
   */
  com.google.devtools.testing.v1.ClientInfo getClientInfo();
  /**
   * <pre>
   * Information about the client which invoked the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ClientInfo client_info = 10;</code>
   */
  com.google.devtools.testing.v1.ClientInfoOrBuilder getClientInfoOrBuilder();

  /**
   * <pre>
   * Required. How to run the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.TestSpecification test_specification = 3;</code>
   * @return Whether the testSpecification field is set.
   */
  boolean hasTestSpecification();
  /**
   * <pre>
   * Required. How to run the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.TestSpecification test_specification = 3;</code>
   * @return The testSpecification.
   */
  com.google.devtools.testing.v1.TestSpecification getTestSpecification();
  /**
   * <pre>
   * Required. How to run the test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.TestSpecification test_specification = 3;</code>
   */
  com.google.devtools.testing.v1.TestSpecificationOrBuilder getTestSpecificationOrBuilder();

  /**
   * <pre>
   * Required. The devices the tests are being executed on.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.EnvironmentMatrix environment_matrix = 4;</code>
   * @return Whether the environmentMatrix field is set.
   */
  boolean hasEnvironmentMatrix();
  /**
   * <pre>
   * Required. The devices the tests are being executed on.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.EnvironmentMatrix environment_matrix = 4;</code>
   * @return The environmentMatrix.
   */
  com.google.devtools.testing.v1.EnvironmentMatrix getEnvironmentMatrix();
  /**
   * <pre>
   * Required. The devices the tests are being executed on.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.EnvironmentMatrix environment_matrix = 4;</code>
   */
  com.google.devtools.testing.v1.EnvironmentMatrixOrBuilder getEnvironmentMatrixOrBuilder();

  /**
   * <pre>
   * Output only. The list of test executions that the service creates for
   * this matrix.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.TestExecution test_executions = 5;</code>
   */
  java.util.List<com.google.devtools.testing.v1.TestExecution> 
      getTestExecutionsList();
  /**
   * <pre>
   * Output only. The list of test executions that the service creates for
   * this matrix.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.TestExecution test_executions = 5;</code>
   */
  com.google.devtools.testing.v1.TestExecution getTestExecutions(int index);
  /**
   * <pre>
   * Output only. The list of test executions that the service creates for
   * this matrix.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.TestExecution test_executions = 5;</code>
   */
  int getTestExecutionsCount();
  /**
   * <pre>
   * Output only. The list of test executions that the service creates for
   * this matrix.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.TestExecution test_executions = 5;</code>
   */
  java.util.List<? extends com.google.devtools.testing.v1.TestExecutionOrBuilder> 
      getTestExecutionsOrBuilderList();
  /**
   * <pre>
   * Output only. The list of test executions that the service creates for
   * this matrix.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.TestExecution test_executions = 5;</code>
   */
  com.google.devtools.testing.v1.TestExecutionOrBuilder getTestExecutionsOrBuilder(
      int index);

  /**
   * <pre>
   * Required. Where the results for the matrix are written.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ResultStorage result_storage = 6;</code>
   * @return Whether the resultStorage field is set.
   */
  boolean hasResultStorage();
  /**
   * <pre>
   * Required. Where the results for the matrix are written.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ResultStorage result_storage = 6;</code>
   * @return The resultStorage.
   */
  com.google.devtools.testing.v1.ResultStorage getResultStorage();
  /**
   * <pre>
   * Required. Where the results for the matrix are written.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ResultStorage result_storage = 6;</code>
   */
  com.google.devtools.testing.v1.ResultStorageOrBuilder getResultStorageOrBuilder();

  /**
   * <pre>
   * Output only. Indicates the current progress of the test matrix.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.TestState state = 8;</code>
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();
  /**
   * <pre>
   * Output only. Indicates the current progress of the test matrix.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.TestState state = 8;</code>
   * @return The state.
   */
  com.google.devtools.testing.v1.TestState getState();

  /**
   * <pre>
   * Output only. The time this test matrix was initially created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp timestamp = 9;</code>
   * @return Whether the timestamp field is set.
   */
  boolean hasTimestamp();
  /**
   * <pre>
   * Output only. The time this test matrix was initially created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp timestamp = 9;</code>
   * @return The timestamp.
   */
  com.google.protobuf.Timestamp getTimestamp();
  /**
   * <pre>
   * Output only. The time this test matrix was initially created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp timestamp = 9;</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimestampOrBuilder();

  /**
   * <pre>
   * Output only. Describes why the matrix is considered invalid.
   * Only useful for matrices in the INVALID state.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.InvalidMatrixDetails invalid_matrix_details = 11;</code>
   * @return The enum numeric value on the wire for invalidMatrixDetails.
   */
  int getInvalidMatrixDetailsValue();
  /**
   * <pre>
   * Output only. Describes why the matrix is considered invalid.
   * Only useful for matrices in the INVALID state.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.InvalidMatrixDetails invalid_matrix_details = 11;</code>
   * @return The invalidMatrixDetails.
   */
  com.google.devtools.testing.v1.InvalidMatrixDetails getInvalidMatrixDetails();

  /**
   * <pre>
   * The number of times a TestExecution should be re-attempted if one or more
   * of its test cases fail for any reason.
   * The maximum number of reruns allowed is 10.
   * Default is 0, which implies no reruns.
   * </pre>
   *
   * <code>int32 flaky_test_attempts = 13;</code>
   * @return The flakyTestAttempts.
   */
  int getFlakyTestAttempts();

  /**
   * <pre>
   * Output Only. The overall outcome of the test.
   * Only set when the test matrix state is FINISHED.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.OutcomeSummary outcome_summary = 14;</code>
   * @return The enum numeric value on the wire for outcomeSummary.
   */
  int getOutcomeSummaryValue();
  /**
   * <pre>
   * Output Only. The overall outcome of the test.
   * Only set when the test matrix state is FINISHED.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.OutcomeSummary outcome_summary = 14;</code>
   * @return The outcomeSummary.
   */
  com.google.devtools.testing.v1.OutcomeSummary getOutcomeSummary();

  /**
   * <pre>
   * If true, only a single attempt at most will be made to run each
   * execution/shard in the matrix. Flaky test attempts are not affected.
   * Normally, 2 or more attempts are made if a potential infrastructure issue
   * is detected.
   * This feature is for latency sensitive workloads. The incidence of
   * execution failures may be significantly greater for fail-fast matrices
   * and support is more limited because of that expectation.
   * </pre>
   *
   * <code>bool fail_fast = 17;</code>
   * @return The failFast.
   */
  boolean getFailFast();
}
