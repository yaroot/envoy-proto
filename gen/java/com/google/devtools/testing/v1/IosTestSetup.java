// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

/**
 * <pre>
 * A description of how to set up an iOS device prior to running the test.
 * </pre>
 *
 * Protobuf type {@code google.devtools.testing.v1.IosTestSetup}
 */
public final class IosTestSetup extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.devtools.testing.v1.IosTestSetup)
    IosTestSetupOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IosTestSetup.newBuilder() to construct.
  private IosTestSetup(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IosTestSetup() {
    networkProfile_ = "";
    additionalIpas_ = java.util.Collections.emptyList();
    pushFiles_ = java.util.Collections.emptyList();
    pullDirectories_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new IosTestSetup();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosTestSetup_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosTestSetup_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.devtools.testing.v1.IosTestSetup.class, com.google.devtools.testing.v1.IosTestSetup.Builder.class);
  }

  public static final int NETWORK_PROFILE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object networkProfile_ = "";
  /**
   * <pre>
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * </pre>
   *
   * <code>string network_profile = 1;</code>
   * @return The networkProfile.
   */
  @java.lang.Override
  public java.lang.String getNetworkProfile() {
    java.lang.Object ref = networkProfile_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      networkProfile_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   * </pre>
   *
   * <code>string network_profile = 1;</code>
   * @return The bytes for networkProfile.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNetworkProfileBytes() {
    java.lang.Object ref = networkProfile_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      networkProfile_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ADDITIONAL_IPAS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.google.devtools.testing.v1.FileReference> additionalIpas_;
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.testing.v1.FileReference> getAdditionalIpasList() {
    return additionalIpas_;
  }
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.testing.v1.FileReferenceOrBuilder> 
      getAdditionalIpasOrBuilderList() {
    return additionalIpas_;
  }
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  @java.lang.Override
  public int getAdditionalIpasCount() {
    return additionalIpas_.size();
  }
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReference getAdditionalIpas(int index) {
    return additionalIpas_.get(index);
  }
  /**
   * <pre>
   * iOS apps to install in addition to those being directly tested.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.FileReferenceOrBuilder getAdditionalIpasOrBuilder(
      int index) {
    return additionalIpas_.get(index);
  }

  public static final int PUSH_FILES_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.google.devtools.testing.v1.IosDeviceFile> pushFiles_;
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.testing.v1.IosDeviceFile> getPushFilesList() {
    return pushFiles_;
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
      getPushFilesOrBuilderList() {
    return pushFiles_;
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  @java.lang.Override
  public int getPushFilesCount() {
    return pushFiles_.size();
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.IosDeviceFile getPushFiles(int index) {
    return pushFiles_.get(index);
  }
  /**
   * <pre>
   * List of files to push to the device before starting the test.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.IosDeviceFileOrBuilder getPushFilesOrBuilder(
      int index) {
    return pushFiles_.get(index);
  }

  public static final int PULL_DIRECTORIES_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.google.devtools.testing.v1.IosDeviceFile> pullDirectories_;
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.devtools.testing.v1.IosDeviceFile> getPullDirectoriesList() {
    return pullDirectories_;
  }
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
      getPullDirectoriesOrBuilderList() {
    return pullDirectories_;
  }
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  @java.lang.Override
  public int getPullDirectoriesCount() {
    return pullDirectories_.size();
  }
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.IosDeviceFile getPullDirectories(int index) {
    return pullDirectories_.get(index);
  }
  /**
   * <pre>
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   * Directories should either be in a shared directory
   * (e.g. /private/var/mobile/Media) or within an accessible directory inside
   * the app's filesystem (e.g. /Documents) by specifying the bundle id.
   * </pre>
   *
   * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
   */
  @java.lang.Override
  public com.google.devtools.testing.v1.IosDeviceFileOrBuilder getPullDirectoriesOrBuilder(
      int index) {
    return pullDirectories_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(networkProfile_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, networkProfile_);
    }
    for (int i = 0; i < additionalIpas_.size(); i++) {
      output.writeMessage(2, additionalIpas_.get(i));
    }
    for (int i = 0; i < pushFiles_.size(); i++) {
      output.writeMessage(3, pushFiles_.get(i));
    }
    for (int i = 0; i < pullDirectories_.size(); i++) {
      output.writeMessage(4, pullDirectories_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(networkProfile_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, networkProfile_);
    }
    for (int i = 0; i < additionalIpas_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, additionalIpas_.get(i));
    }
    for (int i = 0; i < pushFiles_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, pushFiles_.get(i));
    }
    for (int i = 0; i < pullDirectories_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, pullDirectories_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.devtools.testing.v1.IosTestSetup)) {
      return super.equals(obj);
    }
    com.google.devtools.testing.v1.IosTestSetup other = (com.google.devtools.testing.v1.IosTestSetup) obj;

    if (!getNetworkProfile()
        .equals(other.getNetworkProfile())) return false;
    if (!getAdditionalIpasList()
        .equals(other.getAdditionalIpasList())) return false;
    if (!getPushFilesList()
        .equals(other.getPushFilesList())) return false;
    if (!getPullDirectoriesList()
        .equals(other.getPullDirectoriesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NETWORK_PROFILE_FIELD_NUMBER;
    hash = (53 * hash) + getNetworkProfile().hashCode();
    if (getAdditionalIpasCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_IPAS_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalIpasList().hashCode();
    }
    if (getPushFilesCount() > 0) {
      hash = (37 * hash) + PUSH_FILES_FIELD_NUMBER;
      hash = (53 * hash) + getPushFilesList().hashCode();
    }
    if (getPullDirectoriesCount() > 0) {
      hash = (37 * hash) + PULL_DIRECTORIES_FIELD_NUMBER;
      hash = (53 * hash) + getPullDirectoriesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.devtools.testing.v1.IosTestSetup parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.devtools.testing.v1.IosTestSetup prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A description of how to set up an iOS device prior to running the test.
   * </pre>
   *
   * Protobuf type {@code google.devtools.testing.v1.IosTestSetup}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.devtools.testing.v1.IosTestSetup)
      com.google.devtools.testing.v1.IosTestSetupOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosTestSetup_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosTestSetup_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.devtools.testing.v1.IosTestSetup.class, com.google.devtools.testing.v1.IosTestSetup.Builder.class);
    }

    // Construct using com.google.devtools.testing.v1.IosTestSetup.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      networkProfile_ = "";
      if (additionalIpasBuilder_ == null) {
        additionalIpas_ = java.util.Collections.emptyList();
      } else {
        additionalIpas_ = null;
        additionalIpasBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (pushFilesBuilder_ == null) {
        pushFiles_ = java.util.Collections.emptyList();
      } else {
        pushFiles_ = null;
        pushFilesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (pullDirectoriesBuilder_ == null) {
        pullDirectories_ = java.util.Collections.emptyList();
      } else {
        pullDirectories_ = null;
        pullDirectoriesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.devtools.testing.v1.TestExecutionProto.internal_static_google_devtools_testing_v1_IosTestSetup_descriptor;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.IosTestSetup getDefaultInstanceForType() {
      return com.google.devtools.testing.v1.IosTestSetup.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.IosTestSetup build() {
      com.google.devtools.testing.v1.IosTestSetup result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.devtools.testing.v1.IosTestSetup buildPartial() {
      com.google.devtools.testing.v1.IosTestSetup result = new com.google.devtools.testing.v1.IosTestSetup(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.devtools.testing.v1.IosTestSetup result) {
      if (additionalIpasBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          additionalIpas_ = java.util.Collections.unmodifiableList(additionalIpas_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.additionalIpas_ = additionalIpas_;
      } else {
        result.additionalIpas_ = additionalIpasBuilder_.build();
      }
      if (pushFilesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          pushFiles_ = java.util.Collections.unmodifiableList(pushFiles_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.pushFiles_ = pushFiles_;
      } else {
        result.pushFiles_ = pushFilesBuilder_.build();
      }
      if (pullDirectoriesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          pullDirectories_ = java.util.Collections.unmodifiableList(pullDirectories_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.pullDirectories_ = pullDirectories_;
      } else {
        result.pullDirectories_ = pullDirectoriesBuilder_.build();
      }
    }

    private void buildPartial0(com.google.devtools.testing.v1.IosTestSetup result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.networkProfile_ = networkProfile_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.devtools.testing.v1.IosTestSetup) {
        return mergeFrom((com.google.devtools.testing.v1.IosTestSetup)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.devtools.testing.v1.IosTestSetup other) {
      if (other == com.google.devtools.testing.v1.IosTestSetup.getDefaultInstance()) return this;
      if (!other.getNetworkProfile().isEmpty()) {
        networkProfile_ = other.networkProfile_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (additionalIpasBuilder_ == null) {
        if (!other.additionalIpas_.isEmpty()) {
          if (additionalIpas_.isEmpty()) {
            additionalIpas_ = other.additionalIpas_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAdditionalIpasIsMutable();
            additionalIpas_.addAll(other.additionalIpas_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalIpas_.isEmpty()) {
          if (additionalIpasBuilder_.isEmpty()) {
            additionalIpasBuilder_.dispose();
            additionalIpasBuilder_ = null;
            additionalIpas_ = other.additionalIpas_;
            bitField0_ = (bitField0_ & ~0x00000002);
            additionalIpasBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAdditionalIpasFieldBuilder() : null;
          } else {
            additionalIpasBuilder_.addAllMessages(other.additionalIpas_);
          }
        }
      }
      if (pushFilesBuilder_ == null) {
        if (!other.pushFiles_.isEmpty()) {
          if (pushFiles_.isEmpty()) {
            pushFiles_ = other.pushFiles_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensurePushFilesIsMutable();
            pushFiles_.addAll(other.pushFiles_);
          }
          onChanged();
        }
      } else {
        if (!other.pushFiles_.isEmpty()) {
          if (pushFilesBuilder_.isEmpty()) {
            pushFilesBuilder_.dispose();
            pushFilesBuilder_ = null;
            pushFiles_ = other.pushFiles_;
            bitField0_ = (bitField0_ & ~0x00000004);
            pushFilesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPushFilesFieldBuilder() : null;
          } else {
            pushFilesBuilder_.addAllMessages(other.pushFiles_);
          }
        }
      }
      if (pullDirectoriesBuilder_ == null) {
        if (!other.pullDirectories_.isEmpty()) {
          if (pullDirectories_.isEmpty()) {
            pullDirectories_ = other.pullDirectories_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePullDirectoriesIsMutable();
            pullDirectories_.addAll(other.pullDirectories_);
          }
          onChanged();
        }
      } else {
        if (!other.pullDirectories_.isEmpty()) {
          if (pullDirectoriesBuilder_.isEmpty()) {
            pullDirectoriesBuilder_.dispose();
            pullDirectoriesBuilder_ = null;
            pullDirectories_ = other.pullDirectories_;
            bitField0_ = (bitField0_ & ~0x00000008);
            pullDirectoriesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPullDirectoriesFieldBuilder() : null;
          } else {
            pullDirectoriesBuilder_.addAllMessages(other.pullDirectories_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              networkProfile_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.devtools.testing.v1.FileReference m =
                  input.readMessage(
                      com.google.devtools.testing.v1.FileReference.parser(),
                      extensionRegistry);
              if (additionalIpasBuilder_ == null) {
                ensureAdditionalIpasIsMutable();
                additionalIpas_.add(m);
              } else {
                additionalIpasBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              com.google.devtools.testing.v1.IosDeviceFile m =
                  input.readMessage(
                      com.google.devtools.testing.v1.IosDeviceFile.parser(),
                      extensionRegistry);
              if (pushFilesBuilder_ == null) {
                ensurePushFilesIsMutable();
                pushFiles_.add(m);
              } else {
                pushFilesBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              com.google.devtools.testing.v1.IosDeviceFile m =
                  input.readMessage(
                      com.google.devtools.testing.v1.IosDeviceFile.parser(),
                      extensionRegistry);
              if (pullDirectoriesBuilder_ == null) {
                ensurePullDirectoriesIsMutable();
                pullDirectories_.add(m);
              } else {
                pullDirectoriesBuilder_.addMessage(m);
              }
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object networkProfile_ = "";
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 1;</code>
     * @return The networkProfile.
     */
    public java.lang.String getNetworkProfile() {
      java.lang.Object ref = networkProfile_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        networkProfile_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 1;</code>
     * @return The bytes for networkProfile.
     */
    public com.google.protobuf.ByteString
        getNetworkProfileBytes() {
      java.lang.Object ref = networkProfile_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        networkProfile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 1;</code>
     * @param value The networkProfile to set.
     * @return This builder for chaining.
     */
    public Builder setNetworkProfile(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      networkProfile_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNetworkProfile() {
      networkProfile_ = getDefaultInstance().getNetworkProfile();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The network traffic profile used for running the test.
     * Available network profiles can be queried by using the
     * NETWORK_CONFIGURATION environment type when calling
     * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * </pre>
     *
     * <code>string network_profile = 1;</code>
     * @param value The bytes for networkProfile to set.
     * @return This builder for chaining.
     */
    public Builder setNetworkProfileBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      networkProfile_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.google.devtools.testing.v1.FileReference> additionalIpas_ =
      java.util.Collections.emptyList();
    private void ensureAdditionalIpasIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        additionalIpas_ = new java.util.ArrayList<com.google.devtools.testing.v1.FileReference>(additionalIpas_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> additionalIpasBuilder_;

    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.FileReference> getAdditionalIpasList() {
      if (additionalIpasBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalIpas_);
      } else {
        return additionalIpasBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public int getAdditionalIpasCount() {
      if (additionalIpasBuilder_ == null) {
        return additionalIpas_.size();
      } else {
        return additionalIpasBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReference getAdditionalIpas(int index) {
      if (additionalIpasBuilder_ == null) {
        return additionalIpas_.get(index);
      } else {
        return additionalIpasBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder setAdditionalIpas(
        int index, com.google.devtools.testing.v1.FileReference value) {
      if (additionalIpasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalIpasIsMutable();
        additionalIpas_.set(index, value);
        onChanged();
      } else {
        additionalIpasBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder setAdditionalIpas(
        int index, com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (additionalIpasBuilder_ == null) {
        ensureAdditionalIpasIsMutable();
        additionalIpas_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalIpasBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder addAdditionalIpas(com.google.devtools.testing.v1.FileReference value) {
      if (additionalIpasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalIpasIsMutable();
        additionalIpas_.add(value);
        onChanged();
      } else {
        additionalIpasBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder addAdditionalIpas(
        int index, com.google.devtools.testing.v1.FileReference value) {
      if (additionalIpasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalIpasIsMutable();
        additionalIpas_.add(index, value);
        onChanged();
      } else {
        additionalIpasBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder addAdditionalIpas(
        com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (additionalIpasBuilder_ == null) {
        ensureAdditionalIpasIsMutable();
        additionalIpas_.add(builderForValue.build());
        onChanged();
      } else {
        additionalIpasBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder addAdditionalIpas(
        int index, com.google.devtools.testing.v1.FileReference.Builder builderForValue) {
      if (additionalIpasBuilder_ == null) {
        ensureAdditionalIpasIsMutable();
        additionalIpas_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalIpasBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder addAllAdditionalIpas(
        java.lang.Iterable<? extends com.google.devtools.testing.v1.FileReference> values) {
      if (additionalIpasBuilder_ == null) {
        ensureAdditionalIpasIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, additionalIpas_);
        onChanged();
      } else {
        additionalIpasBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder clearAdditionalIpas() {
      if (additionalIpasBuilder_ == null) {
        additionalIpas_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        additionalIpasBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public Builder removeAdditionalIpas(int index) {
      if (additionalIpasBuilder_ == null) {
        ensureAdditionalIpasIsMutable();
        additionalIpas_.remove(index);
        onChanged();
      } else {
        additionalIpasBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder getAdditionalIpasBuilder(
        int index) {
      return getAdditionalIpasFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReferenceOrBuilder getAdditionalIpasOrBuilder(
        int index) {
      if (additionalIpasBuilder_ == null) {
        return additionalIpas_.get(index);  } else {
        return additionalIpasBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public java.util.List<? extends com.google.devtools.testing.v1.FileReferenceOrBuilder> 
         getAdditionalIpasOrBuilderList() {
      if (additionalIpasBuilder_ != null) {
        return additionalIpasBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalIpas_);
      }
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder addAdditionalIpasBuilder() {
      return getAdditionalIpasFieldBuilder().addBuilder(
          com.google.devtools.testing.v1.FileReference.getDefaultInstance());
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public com.google.devtools.testing.v1.FileReference.Builder addAdditionalIpasBuilder(
        int index) {
      return getAdditionalIpasFieldBuilder().addBuilder(
          index, com.google.devtools.testing.v1.FileReference.getDefaultInstance());
    }
    /**
     * <pre>
     * iOS apps to install in addition to those being directly tested.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.FileReference additional_ipas = 2;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.FileReference.Builder> 
         getAdditionalIpasBuilderList() {
      return getAdditionalIpasFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder> 
        getAdditionalIpasFieldBuilder() {
      if (additionalIpasBuilder_ == null) {
        additionalIpasBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.testing.v1.FileReference, com.google.devtools.testing.v1.FileReference.Builder, com.google.devtools.testing.v1.FileReferenceOrBuilder>(
                additionalIpas_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        additionalIpas_ = null;
      }
      return additionalIpasBuilder_;
    }

    private java.util.List<com.google.devtools.testing.v1.IosDeviceFile> pushFiles_ =
      java.util.Collections.emptyList();
    private void ensurePushFilesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        pushFiles_ = new java.util.ArrayList<com.google.devtools.testing.v1.IosDeviceFile>(pushFiles_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.IosDeviceFile, com.google.devtools.testing.v1.IosDeviceFile.Builder, com.google.devtools.testing.v1.IosDeviceFileOrBuilder> pushFilesBuilder_;

    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.IosDeviceFile> getPushFilesList() {
      if (pushFilesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pushFiles_);
      } else {
        return pushFilesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public int getPushFilesCount() {
      if (pushFilesBuilder_ == null) {
        return pushFiles_.size();
      } else {
        return pushFilesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile getPushFiles(int index) {
      if (pushFilesBuilder_ == null) {
        return pushFiles_.get(index);
      } else {
        return pushFilesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder setPushFiles(
        int index, com.google.devtools.testing.v1.IosDeviceFile value) {
      if (pushFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePushFilesIsMutable();
        pushFiles_.set(index, value);
        onChanged();
      } else {
        pushFilesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder setPushFiles(
        int index, com.google.devtools.testing.v1.IosDeviceFile.Builder builderForValue) {
      if (pushFilesBuilder_ == null) {
        ensurePushFilesIsMutable();
        pushFiles_.set(index, builderForValue.build());
        onChanged();
      } else {
        pushFilesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder addPushFiles(com.google.devtools.testing.v1.IosDeviceFile value) {
      if (pushFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePushFilesIsMutable();
        pushFiles_.add(value);
        onChanged();
      } else {
        pushFilesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder addPushFiles(
        int index, com.google.devtools.testing.v1.IosDeviceFile value) {
      if (pushFilesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePushFilesIsMutable();
        pushFiles_.add(index, value);
        onChanged();
      } else {
        pushFilesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder addPushFiles(
        com.google.devtools.testing.v1.IosDeviceFile.Builder builderForValue) {
      if (pushFilesBuilder_ == null) {
        ensurePushFilesIsMutable();
        pushFiles_.add(builderForValue.build());
        onChanged();
      } else {
        pushFilesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder addPushFiles(
        int index, com.google.devtools.testing.v1.IosDeviceFile.Builder builderForValue) {
      if (pushFilesBuilder_ == null) {
        ensurePushFilesIsMutable();
        pushFiles_.add(index, builderForValue.build());
        onChanged();
      } else {
        pushFilesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder addAllPushFiles(
        java.lang.Iterable<? extends com.google.devtools.testing.v1.IosDeviceFile> values) {
      if (pushFilesBuilder_ == null) {
        ensurePushFilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pushFiles_);
        onChanged();
      } else {
        pushFilesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder clearPushFiles() {
      if (pushFilesBuilder_ == null) {
        pushFiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        pushFilesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public Builder removePushFiles(int index) {
      if (pushFilesBuilder_ == null) {
        ensurePushFilesIsMutable();
        pushFiles_.remove(index);
        onChanged();
      } else {
        pushFilesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile.Builder getPushFilesBuilder(
        int index) {
      return getPushFilesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFileOrBuilder getPushFilesOrBuilder(
        int index) {
      if (pushFilesBuilder_ == null) {
        return pushFiles_.get(index);  } else {
        return pushFilesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public java.util.List<? extends com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
         getPushFilesOrBuilderList() {
      if (pushFilesBuilder_ != null) {
        return pushFilesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pushFiles_);
      }
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile.Builder addPushFilesBuilder() {
      return getPushFilesFieldBuilder().addBuilder(
          com.google.devtools.testing.v1.IosDeviceFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile.Builder addPushFilesBuilder(
        int index) {
      return getPushFilesFieldBuilder().addBuilder(
          index, com.google.devtools.testing.v1.IosDeviceFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of files to push to the device before starting the test.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile push_files = 3;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.IosDeviceFile.Builder> 
         getPushFilesBuilderList() {
      return getPushFilesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.IosDeviceFile, com.google.devtools.testing.v1.IosDeviceFile.Builder, com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
        getPushFilesFieldBuilder() {
      if (pushFilesBuilder_ == null) {
        pushFilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.testing.v1.IosDeviceFile, com.google.devtools.testing.v1.IosDeviceFile.Builder, com.google.devtools.testing.v1.IosDeviceFileOrBuilder>(
                pushFiles_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        pushFiles_ = null;
      }
      return pushFilesBuilder_;
    }

    private java.util.List<com.google.devtools.testing.v1.IosDeviceFile> pullDirectories_ =
      java.util.Collections.emptyList();
    private void ensurePullDirectoriesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        pullDirectories_ = new java.util.ArrayList<com.google.devtools.testing.v1.IosDeviceFile>(pullDirectories_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.IosDeviceFile, com.google.devtools.testing.v1.IosDeviceFile.Builder, com.google.devtools.testing.v1.IosDeviceFileOrBuilder> pullDirectoriesBuilder_;

    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.IosDeviceFile> getPullDirectoriesList() {
      if (pullDirectoriesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(pullDirectories_);
      } else {
        return pullDirectoriesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public int getPullDirectoriesCount() {
      if (pullDirectoriesBuilder_ == null) {
        return pullDirectories_.size();
      } else {
        return pullDirectoriesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile getPullDirectories(int index) {
      if (pullDirectoriesBuilder_ == null) {
        return pullDirectories_.get(index);
      } else {
        return pullDirectoriesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder setPullDirectories(
        int index, com.google.devtools.testing.v1.IosDeviceFile value) {
      if (pullDirectoriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePullDirectoriesIsMutable();
        pullDirectories_.set(index, value);
        onChanged();
      } else {
        pullDirectoriesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder setPullDirectories(
        int index, com.google.devtools.testing.v1.IosDeviceFile.Builder builderForValue) {
      if (pullDirectoriesBuilder_ == null) {
        ensurePullDirectoriesIsMutable();
        pullDirectories_.set(index, builderForValue.build());
        onChanged();
      } else {
        pullDirectoriesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder addPullDirectories(com.google.devtools.testing.v1.IosDeviceFile value) {
      if (pullDirectoriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePullDirectoriesIsMutable();
        pullDirectories_.add(value);
        onChanged();
      } else {
        pullDirectoriesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder addPullDirectories(
        int index, com.google.devtools.testing.v1.IosDeviceFile value) {
      if (pullDirectoriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePullDirectoriesIsMutable();
        pullDirectories_.add(index, value);
        onChanged();
      } else {
        pullDirectoriesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder addPullDirectories(
        com.google.devtools.testing.v1.IosDeviceFile.Builder builderForValue) {
      if (pullDirectoriesBuilder_ == null) {
        ensurePullDirectoriesIsMutable();
        pullDirectories_.add(builderForValue.build());
        onChanged();
      } else {
        pullDirectoriesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder addPullDirectories(
        int index, com.google.devtools.testing.v1.IosDeviceFile.Builder builderForValue) {
      if (pullDirectoriesBuilder_ == null) {
        ensurePullDirectoriesIsMutable();
        pullDirectories_.add(index, builderForValue.build());
        onChanged();
      } else {
        pullDirectoriesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder addAllPullDirectories(
        java.lang.Iterable<? extends com.google.devtools.testing.v1.IosDeviceFile> values) {
      if (pullDirectoriesBuilder_ == null) {
        ensurePullDirectoriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pullDirectories_);
        onChanged();
      } else {
        pullDirectoriesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder clearPullDirectories() {
      if (pullDirectoriesBuilder_ == null) {
        pullDirectories_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        pullDirectoriesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public Builder removePullDirectories(int index) {
      if (pullDirectoriesBuilder_ == null) {
        ensurePullDirectoriesIsMutable();
        pullDirectories_.remove(index);
        onChanged();
      } else {
        pullDirectoriesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile.Builder getPullDirectoriesBuilder(
        int index) {
      return getPullDirectoriesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFileOrBuilder getPullDirectoriesOrBuilder(
        int index) {
      if (pullDirectoriesBuilder_ == null) {
        return pullDirectories_.get(index);  } else {
        return pullDirectoriesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public java.util.List<? extends com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
         getPullDirectoriesOrBuilderList() {
      if (pullDirectoriesBuilder_ != null) {
        return pullDirectoriesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(pullDirectories_);
      }
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile.Builder addPullDirectoriesBuilder() {
      return getPullDirectoriesFieldBuilder().addBuilder(
          com.google.devtools.testing.v1.IosDeviceFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public com.google.devtools.testing.v1.IosDeviceFile.Builder addPullDirectoriesBuilder(
        int index) {
      return getPullDirectoriesFieldBuilder().addBuilder(
          index, com.google.devtools.testing.v1.IosDeviceFile.getDefaultInstance());
    }
    /**
     * <pre>
     * List of directories on the device to upload to Cloud Storage at the end of
     * the test.
     * Directories should either be in a shared directory
     * (e.g. /private/var/mobile/Media) or within an accessible directory inside
     * the app's filesystem (e.g. /Documents) by specifying the bundle id.
     * </pre>
     *
     * <code>repeated .google.devtools.testing.v1.IosDeviceFile pull_directories = 4;</code>
     */
    public java.util.List<com.google.devtools.testing.v1.IosDeviceFile.Builder> 
         getPullDirectoriesBuilderList() {
      return getPullDirectoriesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.devtools.testing.v1.IosDeviceFile, com.google.devtools.testing.v1.IosDeviceFile.Builder, com.google.devtools.testing.v1.IosDeviceFileOrBuilder> 
        getPullDirectoriesFieldBuilder() {
      if (pullDirectoriesBuilder_ == null) {
        pullDirectoriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.devtools.testing.v1.IosDeviceFile, com.google.devtools.testing.v1.IosDeviceFile.Builder, com.google.devtools.testing.v1.IosDeviceFileOrBuilder>(
                pullDirectories_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        pullDirectories_ = null;
      }
      return pullDirectoriesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.devtools.testing.v1.IosTestSetup)
  }

  // @@protoc_insertion_point(class_scope:google.devtools.testing.v1.IosTestSetup)
  private static final com.google.devtools.testing.v1.IosTestSetup DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.devtools.testing.v1.IosTestSetup();
  }

  public static com.google.devtools.testing.v1.IosTestSetup getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IosTestSetup>
      PARSER = new com.google.protobuf.AbstractParser<IosTestSetup>() {
    @java.lang.Override
    public IosTestSetup parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<IosTestSetup> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IosTestSetup> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.devtools.testing.v1.IosTestSetup getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

