// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/testing/v1/test_execution.proto

package com.google.devtools.testing.v1;

public interface AndroidInstrumentationTestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.devtools.testing.v1.AndroidInstrumentationTest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   * @return Whether the appApk field is set.
   */
  boolean hasAppApk();
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   * @return The appApk.
   */
  com.google.devtools.testing.v1.FileReference getAppApk();
  /**
   * <pre>
   * The APK for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference app_apk = 1;</code>
   */
  com.google.devtools.testing.v1.FileReferenceOrBuilder getAppApkOrBuilder();

  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
   * @return Whether the appBundle field is set.
   */
  boolean hasAppBundle();
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
   * @return The appBundle.
   */
  com.google.devtools.testing.v1.AppBundle getAppBundle();
  /**
   * <pre>
   * A multi-apk app bundle for the application under test.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.AppBundle app_bundle = 8;</code>
   */
  com.google.devtools.testing.v1.AppBundleOrBuilder getAppBundleOrBuilder();

  /**
   * <pre>
   * Required. The APK containing the test code to be executed.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
   * @return Whether the testApk field is set.
   */
  boolean hasTestApk();
  /**
   * <pre>
   * Required. The APK containing the test code to be executed.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
   * @return The testApk.
   */
  com.google.devtools.testing.v1.FileReference getTestApk();
  /**
   * <pre>
   * Required. The APK containing the test code to be executed.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.FileReference test_apk = 2;</code>
   */
  com.google.devtools.testing.v1.FileReferenceOrBuilder getTestApkOrBuilder();

  /**
   * <pre>
   * The java package for the application under test.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string app_package_id = 3;</code>
   * @return The appPackageId.
   */
  java.lang.String getAppPackageId();
  /**
   * <pre>
   * The java package for the application under test.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string app_package_id = 3;</code>
   * @return The bytes for appPackageId.
   */
  com.google.protobuf.ByteString
      getAppPackageIdBytes();

  /**
   * <pre>
   * The java package for the test to be executed.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_package_id = 4;</code>
   * @return The testPackageId.
   */
  java.lang.String getTestPackageId();
  /**
   * <pre>
   * The java package for the test to be executed.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_package_id = 4;</code>
   * @return The bytes for testPackageId.
   */
  com.google.protobuf.ByteString
      getTestPackageIdBytes();

  /**
   * <pre>
   * The InstrumentationTestRunner class.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_runner_class = 5;</code>
   * @return The testRunnerClass.
   */
  java.lang.String getTestRunnerClass();
  /**
   * <pre>
   * The InstrumentationTestRunner class.
   * The default value is determined by examining the application's manifest.
   * </pre>
   *
   * <code>string test_runner_class = 5;</code>
   * @return The bytes for testRunnerClass.
   */
  com.google.protobuf.ByteString
      getTestRunnerClassBytes();

  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @return A list containing the testTargets.
   */
  java.util.List<java.lang.String>
      getTestTargetsList();
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @return The count of testTargets.
   */
  int getTestTargetsCount();
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @param index The index of the element to return.
   * @return The testTargets at the given index.
   */
  java.lang.String getTestTargets(int index);
  /**
   * <pre>
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   * If empty, all targets in the module will be run.
   * </pre>
   *
   * <code>repeated string test_targets = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the testTargets at the given index.
   */
  com.google.protobuf.ByteString
      getTestTargetsBytes(int index);

  /**
   * <pre>
   * The option of whether running each test within its own invocation of
   * instrumentation with Android Test Orchestrator or not.
   * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
   * higher! **
   * Orchestrator offers the following benefits:
   *  - No shared state
   *  - Crashes are isolated
   *  - Logs are scoped per test
   * See
   * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
   * for more information about Android Test Orchestrator.
   * If not set, the test will be run without the orchestrator.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
   * @return The enum numeric value on the wire for orchestratorOption.
   */
  int getOrchestratorOptionValue();
  /**
   * <pre>
   * The option of whether running each test within its own invocation of
   * instrumentation with Android Test Orchestrator or not.
   * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.0 or
   * higher! **
   * Orchestrator offers the following benefits:
   *  - No shared state
   *  - Crashes are isolated
   *  - Logs are scoped per test
   * See
   * &lt;https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator&gt;
   * for more information about Android Test Orchestrator.
   * If not set, the test will be run without the orchestrator.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;</code>
   * @return The orchestratorOption.
   */
  com.google.devtools.testing.v1.OrchestratorOption getOrchestratorOption();

  /**
   * <pre>
   * The option to run tests in multiple shards in parallel.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
   * @return Whether the shardingOption field is set.
   */
  boolean hasShardingOption();
  /**
   * <pre>
   * The option to run tests in multiple shards in parallel.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
   * @return The shardingOption.
   */
  com.google.devtools.testing.v1.ShardingOption getShardingOption();
  /**
   * <pre>
   * The option to run tests in multiple shards in parallel.
   * </pre>
   *
   * <code>.google.devtools.testing.v1.ShardingOption sharding_option = 9;</code>
   */
  com.google.devtools.testing.v1.ShardingOptionOrBuilder getShardingOptionOrBuilder();

  public com.google.devtools.testing.v1.AndroidInstrumentationTest.AppUnderTestCase getAppUnderTestCase();
}
