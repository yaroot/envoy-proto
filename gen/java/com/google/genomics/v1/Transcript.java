// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/annotations.proto

package com.google.genomics.v1;

/**
 * <pre>
 * A transcript represents the assertion that a particular region of the
 * reference genome may be transcribed as RNA.
 * </pre>
 *
 * Protobuf type {@code google.genomics.v1.Transcript}
 */
public final class Transcript extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.genomics.v1.Transcript)
    TranscriptOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Transcript.newBuilder() to construct.
  private Transcript(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Transcript() {
    geneId_ = "";
    exons_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Transcript();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.genomics.v1.Transcript.class, com.google.genomics.v1.Transcript.Builder.class);
  }

  public interface ExonOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.genomics.v1.Transcript.Exon)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The start position of the exon on this annotation's reference sequence,
     * 0-based inclusive. Note that this is relative to the reference start, and
     * **not** the containing annotation start.
     * </pre>
     *
     * <code>int64 start = 1;</code>
     * @return The start.
     */
    long getStart();

    /**
     * <pre>
     * The end position of the exon on this annotation's reference sequence,
     * 0-based exclusive. Note that this is relative to the reference start, and
     * *not* the containing annotation start.
     * </pre>
     *
     * <code>int64 end = 2;</code>
     * @return The end.
     */
    long getEnd();

    /**
     * <pre>
     * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
     * the offset of the first coding base of the exon within the reading frame
     * of the coding DNA sequence, if any. This field is dependent on the
     * strandedness of this annotation (see
     * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
     * For forward stranded annotations, this offset is relative to the
     * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
     * strand annotations, this offset is relative to the
     * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
     * Unset if this exon does not intersect the coding sequence. Upon creation
     * of a transcript, the frame must be populated for all or none of the
     * coding exons.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value frame = 3;</code>
     * @return Whether the frame field is set.
     */
    boolean hasFrame();
    /**
     * <pre>
     * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
     * the offset of the first coding base of the exon within the reading frame
     * of the coding DNA sequence, if any. This field is dependent on the
     * strandedness of this annotation (see
     * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
     * For forward stranded annotations, this offset is relative to the
     * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
     * strand annotations, this offset is relative to the
     * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
     * Unset if this exon does not intersect the coding sequence. Upon creation
     * of a transcript, the frame must be populated for all or none of the
     * coding exons.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value frame = 3;</code>
     * @return The frame.
     */
    com.google.protobuf.Int32Value getFrame();
    /**
     * <pre>
     * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
     * the offset of the first coding base of the exon within the reading frame
     * of the coding DNA sequence, if any. This field is dependent on the
     * strandedness of this annotation (see
     * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
     * For forward stranded annotations, this offset is relative to the
     * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
     * strand annotations, this offset is relative to the
     * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
     * Unset if this exon does not intersect the coding sequence. Upon creation
     * of a transcript, the frame must be populated for all or none of the
     * coding exons.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value frame = 3;</code>
     */
    com.google.protobuf.Int32ValueOrBuilder getFrameOrBuilder();
  }
  /**
   * Protobuf type {@code google.genomics.v1.Transcript.Exon}
   */
  public static final class Exon extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.genomics.v1.Transcript.Exon)
      ExonOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Exon.newBuilder() to construct.
    private Exon(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exon() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Exon();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_Exon_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_Exon_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.genomics.v1.Transcript.Exon.class, com.google.genomics.v1.Transcript.Exon.Builder.class);
    }

    public static final int START_FIELD_NUMBER = 1;
    private long start_ = 0L;
    /**
     * <pre>
     * The start position of the exon on this annotation's reference sequence,
     * 0-based inclusive. Note that this is relative to the reference start, and
     * **not** the containing annotation start.
     * </pre>
     *
     * <code>int64 start = 1;</code>
     * @return The start.
     */
    @java.lang.Override
    public long getStart() {
      return start_;
    }

    public static final int END_FIELD_NUMBER = 2;
    private long end_ = 0L;
    /**
     * <pre>
     * The end position of the exon on this annotation's reference sequence,
     * 0-based exclusive. Note that this is relative to the reference start, and
     * *not* the containing annotation start.
     * </pre>
     *
     * <code>int64 end = 2;</code>
     * @return The end.
     */
    @java.lang.Override
    public long getEnd() {
      return end_;
    }

    public static final int FRAME_FIELD_NUMBER = 3;
    private com.google.protobuf.Int32Value frame_;
    /**
     * <pre>
     * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
     * the offset of the first coding base of the exon within the reading frame
     * of the coding DNA sequence, if any. This field is dependent on the
     * strandedness of this annotation (see
     * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
     * For forward stranded annotations, this offset is relative to the
     * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
     * strand annotations, this offset is relative to the
     * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
     * Unset if this exon does not intersect the coding sequence. Upon creation
     * of a transcript, the frame must be populated for all or none of the
     * coding exons.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value frame = 3;</code>
     * @return Whether the frame field is set.
     */
    @java.lang.Override
    public boolean hasFrame() {
      return frame_ != null;
    }
    /**
     * <pre>
     * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
     * the offset of the first coding base of the exon within the reading frame
     * of the coding DNA sequence, if any. This field is dependent on the
     * strandedness of this annotation (see
     * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
     * For forward stranded annotations, this offset is relative to the
     * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
     * strand annotations, this offset is relative to the
     * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
     * Unset if this exon does not intersect the coding sequence. Upon creation
     * of a transcript, the frame must be populated for all or none of the
     * coding exons.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value frame = 3;</code>
     * @return The frame.
     */
    @java.lang.Override
    public com.google.protobuf.Int32Value getFrame() {
      return frame_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : frame_;
    }
    /**
     * <pre>
     * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
     * the offset of the first coding base of the exon within the reading frame
     * of the coding DNA sequence, if any. This field is dependent on the
     * strandedness of this annotation (see
     * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
     * For forward stranded annotations, this offset is relative to the
     * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
     * strand annotations, this offset is relative to the
     * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
     * Unset if this exon does not intersect the coding sequence. Upon creation
     * of a transcript, the frame must be populated for all or none of the
     * coding exons.
     * </pre>
     *
     * <code>.google.protobuf.Int32Value frame = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Int32ValueOrBuilder getFrameOrBuilder() {
      return frame_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : frame_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (start_ != 0L) {
        output.writeInt64(1, start_);
      }
      if (end_ != 0L) {
        output.writeInt64(2, end_);
      }
      if (frame_ != null) {
        output.writeMessage(3, getFrame());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (start_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, start_);
      }
      if (end_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, end_);
      }
      if (frame_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getFrame());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.genomics.v1.Transcript.Exon)) {
        return super.equals(obj);
      }
      com.google.genomics.v1.Transcript.Exon other = (com.google.genomics.v1.Transcript.Exon) obj;

      if (getStart()
          != other.getStart()) return false;
      if (getEnd()
          != other.getEnd()) return false;
      if (hasFrame() != other.hasFrame()) return false;
      if (hasFrame()) {
        if (!getFrame()
            .equals(other.getFrame())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStart());
      hash = (37 * hash) + END_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getEnd());
      if (hasFrame()) {
        hash = (37 * hash) + FRAME_FIELD_NUMBER;
        hash = (53 * hash) + getFrame().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.Exon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.genomics.v1.Transcript.Exon parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.genomics.v1.Transcript.Exon parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.genomics.v1.Transcript.Exon prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code google.genomics.v1.Transcript.Exon}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.genomics.v1.Transcript.Exon)
        com.google.genomics.v1.Transcript.ExonOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_Exon_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_Exon_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.genomics.v1.Transcript.Exon.class, com.google.genomics.v1.Transcript.Exon.Builder.class);
      }

      // Construct using com.google.genomics.v1.Transcript.Exon.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        start_ = 0L;
        end_ = 0L;
        frame_ = null;
        if (frameBuilder_ != null) {
          frameBuilder_.dispose();
          frameBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_Exon_descriptor;
      }

      @java.lang.Override
      public com.google.genomics.v1.Transcript.Exon getDefaultInstanceForType() {
        return com.google.genomics.v1.Transcript.Exon.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.genomics.v1.Transcript.Exon build() {
        com.google.genomics.v1.Transcript.Exon result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.genomics.v1.Transcript.Exon buildPartial() {
        com.google.genomics.v1.Transcript.Exon result = new com.google.genomics.v1.Transcript.Exon(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.genomics.v1.Transcript.Exon result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.start_ = start_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.end_ = end_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.frame_ = frameBuilder_ == null
              ? frame_
              : frameBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.genomics.v1.Transcript.Exon) {
          return mergeFrom((com.google.genomics.v1.Transcript.Exon)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.genomics.v1.Transcript.Exon other) {
        if (other == com.google.genomics.v1.Transcript.Exon.getDefaultInstance()) return this;
        if (other.getStart() != 0L) {
          setStart(other.getStart());
        }
        if (other.getEnd() != 0L) {
          setEnd(other.getEnd());
        }
        if (other.hasFrame()) {
          mergeFrame(other.getFrame());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                start_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                end_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                input.readMessage(
                    getFrameFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long start_ ;
      /**
       * <pre>
       * The start position of the exon on this annotation's reference sequence,
       * 0-based inclusive. Note that this is relative to the reference start, and
       * **not** the containing annotation start.
       * </pre>
       *
       * <code>int64 start = 1;</code>
       * @return The start.
       */
      @java.lang.Override
      public long getStart() {
        return start_;
      }
      /**
       * <pre>
       * The start position of the exon on this annotation's reference sequence,
       * 0-based inclusive. Note that this is relative to the reference start, and
       * **not** the containing annotation start.
       * </pre>
       *
       * <code>int64 start = 1;</code>
       * @param value The start to set.
       * @return This builder for chaining.
       */
      public Builder setStart(long value) {
        
        start_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The start position of the exon on this annotation's reference sequence,
       * 0-based inclusive. Note that this is relative to the reference start, and
       * **not** the containing annotation start.
       * </pre>
       *
       * <code>int64 start = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStart() {
        bitField0_ = (bitField0_ & ~0x00000001);
        start_ = 0L;
        onChanged();
        return this;
      }

      private long end_ ;
      /**
       * <pre>
       * The end position of the exon on this annotation's reference sequence,
       * 0-based exclusive. Note that this is relative to the reference start, and
       * *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 end = 2;</code>
       * @return The end.
       */
      @java.lang.Override
      public long getEnd() {
        return end_;
      }
      /**
       * <pre>
       * The end position of the exon on this annotation's reference sequence,
       * 0-based exclusive. Note that this is relative to the reference start, and
       * *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 end = 2;</code>
       * @param value The end to set.
       * @return This builder for chaining.
       */
      public Builder setEnd(long value) {
        
        end_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The end position of the exon on this annotation's reference sequence,
       * 0-based exclusive. Note that this is relative to the reference start, and
       * *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 end = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        end_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Int32Value frame_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> frameBuilder_;
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       * @return Whether the frame field is set.
       */
      public boolean hasFrame() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       * @return The frame.
       */
      public com.google.protobuf.Int32Value getFrame() {
        if (frameBuilder_ == null) {
          return frame_ == null ? com.google.protobuf.Int32Value.getDefaultInstance() : frame_;
        } else {
          return frameBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      public Builder setFrame(com.google.protobuf.Int32Value value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          frame_ = value;
        } else {
          frameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      public Builder setFrame(
          com.google.protobuf.Int32Value.Builder builderForValue) {
        if (frameBuilder_ == null) {
          frame_ = builderForValue.build();
        } else {
          frameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      public Builder mergeFrame(com.google.protobuf.Int32Value value) {
        if (frameBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            frame_ != null &&
            frame_ != com.google.protobuf.Int32Value.getDefaultInstance()) {
            getFrameBuilder().mergeFrom(value);
          } else {
            frame_ = value;
          }
        } else {
          frameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      public Builder clearFrame() {
        bitField0_ = (bitField0_ & ~0x00000004);
        frame_ = null;
        if (frameBuilder_ != null) {
          frameBuilder_.dispose();
          frameBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      public com.google.protobuf.Int32Value.Builder getFrameBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFrameFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      public com.google.protobuf.Int32ValueOrBuilder getFrameOrBuilder() {
        if (frameBuilder_ != null) {
          return frameBuilder_.getMessageOrBuilder();
        } else {
          return frame_ == null ?
              com.google.protobuf.Int32Value.getDefaultInstance() : frame_;
        }
      }
      /**
       * <pre>
       * The frame of this exon. Contains a value of 0, 1, or 2, which indicates
       * the offset of the first coding base of the exon within the reading frame
       * of the coding DNA sequence, if any. This field is dependent on the
       * strandedness of this annotation (see
       * [Annotation.reverse_strand][google.genomics.v1.Annotation.reverse_strand]).
       * For forward stranded annotations, this offset is relative to the
       * [exon.start][google.genomics.v1.Transcript.Exon.start]. For reverse
       * strand annotations, this offset is relative to the
       * [exon.end][google.genomics.v1.Transcript.Exon.end] `- 1`.
       * Unset if this exon does not intersect the coding sequence. Upon creation
       * of a transcript, the frame must be populated for all or none of the
       * coding exons.
       * </pre>
       *
       * <code>.google.protobuf.Int32Value frame = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder> 
          getFrameFieldBuilder() {
        if (frameBuilder_ == null) {
          frameBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Int32Value, com.google.protobuf.Int32Value.Builder, com.google.protobuf.Int32ValueOrBuilder>(
                  getFrame(),
                  getParentForChildren(),
                  isClean());
          frame_ = null;
        }
        return frameBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.genomics.v1.Transcript.Exon)
    }

    // @@protoc_insertion_point(class_scope:google.genomics.v1.Transcript.Exon)
    private static final com.google.genomics.v1.Transcript.Exon DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.genomics.v1.Transcript.Exon();
    }

    public static com.google.genomics.v1.Transcript.Exon getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exon>
        PARSER = new com.google.protobuf.AbstractParser<Exon>() {
      @java.lang.Override
      public Exon parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Exon> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exon> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.genomics.v1.Transcript.Exon getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CodingSequenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.genomics.v1.Transcript.CodingSequence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The start of the coding sequence on this annotation's reference sequence,
     * 0-based inclusive. Note that this position is relative to the reference
     * start, and *not* the containing annotation start.
     * </pre>
     *
     * <code>int64 start = 1;</code>
     * @return The start.
     */
    long getStart();

    /**
     * <pre>
     * The end of the coding sequence on this annotation's reference sequence,
     * 0-based exclusive. Note that this position is relative to the reference
     * start, and *not* the containing annotation start.
     * </pre>
     *
     * <code>int64 end = 2;</code>
     * @return The end.
     */
    long getEnd();
  }
  /**
   * Protobuf type {@code google.genomics.v1.Transcript.CodingSequence}
   */
  public static final class CodingSequence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.genomics.v1.Transcript.CodingSequence)
      CodingSequenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CodingSequence.newBuilder() to construct.
    private CodingSequence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CodingSequence() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CodingSequence();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_CodingSequence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_CodingSequence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.genomics.v1.Transcript.CodingSequence.class, com.google.genomics.v1.Transcript.CodingSequence.Builder.class);
    }

    public static final int START_FIELD_NUMBER = 1;
    private long start_ = 0L;
    /**
     * <pre>
     * The start of the coding sequence on this annotation's reference sequence,
     * 0-based inclusive. Note that this position is relative to the reference
     * start, and *not* the containing annotation start.
     * </pre>
     *
     * <code>int64 start = 1;</code>
     * @return The start.
     */
    @java.lang.Override
    public long getStart() {
      return start_;
    }

    public static final int END_FIELD_NUMBER = 2;
    private long end_ = 0L;
    /**
     * <pre>
     * The end of the coding sequence on this annotation's reference sequence,
     * 0-based exclusive. Note that this position is relative to the reference
     * start, and *not* the containing annotation start.
     * </pre>
     *
     * <code>int64 end = 2;</code>
     * @return The end.
     */
    @java.lang.Override
    public long getEnd() {
      return end_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (start_ != 0L) {
        output.writeInt64(1, start_);
      }
      if (end_ != 0L) {
        output.writeInt64(2, end_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (start_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, start_);
      }
      if (end_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, end_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.genomics.v1.Transcript.CodingSequence)) {
        return super.equals(obj);
      }
      com.google.genomics.v1.Transcript.CodingSequence other = (com.google.genomics.v1.Transcript.CodingSequence) obj;

      if (getStart()
          != other.getStart()) return false;
      if (getEnd()
          != other.getEnd()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStart());
      hash = (37 * hash) + END_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getEnd());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.genomics.v1.Transcript.CodingSequence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.genomics.v1.Transcript.CodingSequence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code google.genomics.v1.Transcript.CodingSequence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.genomics.v1.Transcript.CodingSequence)
        com.google.genomics.v1.Transcript.CodingSequenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_CodingSequence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_CodingSequence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.genomics.v1.Transcript.CodingSequence.class, com.google.genomics.v1.Transcript.CodingSequence.Builder.class);
      }

      // Construct using com.google.genomics.v1.Transcript.CodingSequence.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        start_ = 0L;
        end_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_CodingSequence_descriptor;
      }

      @java.lang.Override
      public com.google.genomics.v1.Transcript.CodingSequence getDefaultInstanceForType() {
        return com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.genomics.v1.Transcript.CodingSequence build() {
        com.google.genomics.v1.Transcript.CodingSequence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.genomics.v1.Transcript.CodingSequence buildPartial() {
        com.google.genomics.v1.Transcript.CodingSequence result = new com.google.genomics.v1.Transcript.CodingSequence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.genomics.v1.Transcript.CodingSequence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.start_ = start_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.end_ = end_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.genomics.v1.Transcript.CodingSequence) {
          return mergeFrom((com.google.genomics.v1.Transcript.CodingSequence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.genomics.v1.Transcript.CodingSequence other) {
        if (other == com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance()) return this;
        if (other.getStart() != 0L) {
          setStart(other.getStart());
        }
        if (other.getEnd() != 0L) {
          setEnd(other.getEnd());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                start_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                end_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long start_ ;
      /**
       * <pre>
       * The start of the coding sequence on this annotation's reference sequence,
       * 0-based inclusive. Note that this position is relative to the reference
       * start, and *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 start = 1;</code>
       * @return The start.
       */
      @java.lang.Override
      public long getStart() {
        return start_;
      }
      /**
       * <pre>
       * The start of the coding sequence on this annotation's reference sequence,
       * 0-based inclusive. Note that this position is relative to the reference
       * start, and *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 start = 1;</code>
       * @param value The start to set.
       * @return This builder for chaining.
       */
      public Builder setStart(long value) {
        
        start_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The start of the coding sequence on this annotation's reference sequence,
       * 0-based inclusive. Note that this position is relative to the reference
       * start, and *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 start = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStart() {
        bitField0_ = (bitField0_ & ~0x00000001);
        start_ = 0L;
        onChanged();
        return this;
      }

      private long end_ ;
      /**
       * <pre>
       * The end of the coding sequence on this annotation's reference sequence,
       * 0-based exclusive. Note that this position is relative to the reference
       * start, and *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 end = 2;</code>
       * @return The end.
       */
      @java.lang.Override
      public long getEnd() {
        return end_;
      }
      /**
       * <pre>
       * The end of the coding sequence on this annotation's reference sequence,
       * 0-based exclusive. Note that this position is relative to the reference
       * start, and *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 end = 2;</code>
       * @param value The end to set.
       * @return This builder for chaining.
       */
      public Builder setEnd(long value) {
        
        end_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The end of the coding sequence on this annotation's reference sequence,
       * 0-based exclusive. Note that this position is relative to the reference
       * start, and *not* the containing annotation start.
       * </pre>
       *
       * <code>int64 end = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        end_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.genomics.v1.Transcript.CodingSequence)
    }

    // @@protoc_insertion_point(class_scope:google.genomics.v1.Transcript.CodingSequence)
    private static final com.google.genomics.v1.Transcript.CodingSequence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.genomics.v1.Transcript.CodingSequence();
    }

    public static com.google.genomics.v1.Transcript.CodingSequence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CodingSequence>
        PARSER = new com.google.protobuf.AbstractParser<CodingSequence>() {
      @java.lang.Override
      public CodingSequence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CodingSequence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CodingSequence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.genomics.v1.Transcript.CodingSequence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int GENE_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object geneId_ = "";
  /**
   * <pre>
   * The annotation ID of the gene from which this transcript is transcribed.
   * </pre>
   *
   * <code>string gene_id = 1;</code>
   * @return The geneId.
   */
  @java.lang.Override
  public java.lang.String getGeneId() {
    java.lang.Object ref = geneId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      geneId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The annotation ID of the gene from which this transcript is transcribed.
   * </pre>
   *
   * <code>string gene_id = 1;</code>
   * @return The bytes for geneId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getGeneIdBytes() {
    java.lang.Object ref = geneId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      geneId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int EXONS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.google.genomics.v1.Transcript.Exon> exons_;
  /**
   * <pre>
   * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
   * this transcript. This field should be unset for genomes where transcript
   * splicing does not occur, for example prokaryotes.
   * Introns are regions of the transcript that are not included in the
   * spliced RNA product. Though not explicitly modeled here, intron ranges can
   * be deduced; all regions of this transcript that are not exons are introns.
   * Exonic sequences do not necessarily code for a translational product
   * (amino acids). Only the regions of exons bounded by the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
   * to coding DNA sequence.
   * Exons are ordered by start position and may not overlap.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.genomics.v1.Transcript.Exon> getExonsList() {
    return exons_;
  }
  /**
   * <pre>
   * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
   * this transcript. This field should be unset for genomes where transcript
   * splicing does not occur, for example prokaryotes.
   * Introns are regions of the transcript that are not included in the
   * spliced RNA product. Though not explicitly modeled here, intron ranges can
   * be deduced; all regions of this transcript that are not exons are introns.
   * Exonic sequences do not necessarily code for a translational product
   * (amino acids). Only the regions of exons bounded by the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
   * to coding DNA sequence.
   * Exons are ordered by start position and may not overlap.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.genomics.v1.Transcript.ExonOrBuilder> 
      getExonsOrBuilderList() {
    return exons_;
  }
  /**
   * <pre>
   * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
   * this transcript. This field should be unset for genomes where transcript
   * splicing does not occur, for example prokaryotes.
   * Introns are regions of the transcript that are not included in the
   * spliced RNA product. Though not explicitly modeled here, intron ranges can
   * be deduced; all regions of this transcript that are not exons are introns.
   * Exonic sequences do not necessarily code for a translational product
   * (amino acids). Only the regions of exons bounded by the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
   * to coding DNA sequence.
   * Exons are ordered by start position and may not overlap.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
   */
  @java.lang.Override
  public int getExonsCount() {
    return exons_.size();
  }
  /**
   * <pre>
   * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
   * this transcript. This field should be unset for genomes where transcript
   * splicing does not occur, for example prokaryotes.
   * Introns are regions of the transcript that are not included in the
   * spliced RNA product. Though not explicitly modeled here, intron ranges can
   * be deduced; all regions of this transcript that are not exons are introns.
   * Exonic sequences do not necessarily code for a translational product
   * (amino acids). Only the regions of exons bounded by the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
   * to coding DNA sequence.
   * Exons are ordered by start position and may not overlap.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
   */
  @java.lang.Override
  public com.google.genomics.v1.Transcript.Exon getExons(int index) {
    return exons_.get(index);
  }
  /**
   * <pre>
   * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
   * this transcript. This field should be unset for genomes where transcript
   * splicing does not occur, for example prokaryotes.
   * Introns are regions of the transcript that are not included in the
   * spliced RNA product. Though not explicitly modeled here, intron ranges can
   * be deduced; all regions of this transcript that are not exons are introns.
   * Exonic sequences do not necessarily code for a translational product
   * (amino acids). Only the regions of exons bounded by the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
   * to coding DNA sequence.
   * Exons are ordered by start position and may not overlap.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
   */
  @java.lang.Override
  public com.google.genomics.v1.Transcript.ExonOrBuilder getExonsOrBuilder(
      int index) {
    return exons_.get(index);
  }

  public static final int CODING_SEQUENCE_FIELD_NUMBER = 3;
  private com.google.genomics.v1.Transcript.CodingSequence codingSequence_;
  /**
   * <pre>
   * The range of the coding sequence for this transcript, if any. To determine
   * the exact ranges of coding sequence, intersect this range with those of the
   * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
   * [exons][google.genomics.v1.Transcript.exons], the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
   * and end within them.
   * Note that in some cases, the reference genome will not exactly match the
   * observed mRNA transcript e.g. due to variance in the source genome from
   * reference. In these cases,
   * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
   * match the expected reference reading frame and coding exon reference bases
   * cannot necessarily be concatenated to produce the original transcript mRNA.
   * </pre>
   *
   * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
   * @return Whether the codingSequence field is set.
   */
  @java.lang.Override
  public boolean hasCodingSequence() {
    return codingSequence_ != null;
  }
  /**
   * <pre>
   * The range of the coding sequence for this transcript, if any. To determine
   * the exact ranges of coding sequence, intersect this range with those of the
   * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
   * [exons][google.genomics.v1.Transcript.exons], the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
   * and end within them.
   * Note that in some cases, the reference genome will not exactly match the
   * observed mRNA transcript e.g. due to variance in the source genome from
   * reference. In these cases,
   * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
   * match the expected reference reading frame and coding exon reference bases
   * cannot necessarily be concatenated to produce the original transcript mRNA.
   * </pre>
   *
   * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
   * @return The codingSequence.
   */
  @java.lang.Override
  public com.google.genomics.v1.Transcript.CodingSequence getCodingSequence() {
    return codingSequence_ == null ? com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance() : codingSequence_;
  }
  /**
   * <pre>
   * The range of the coding sequence for this transcript, if any. To determine
   * the exact ranges of coding sequence, intersect this range with those of the
   * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
   * [exons][google.genomics.v1.Transcript.exons], the
   * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
   * and end within them.
   * Note that in some cases, the reference genome will not exactly match the
   * observed mRNA transcript e.g. due to variance in the source genome from
   * reference. In these cases,
   * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
   * match the expected reference reading frame and coding exon reference bases
   * cannot necessarily be concatenated to produce the original transcript mRNA.
   * </pre>
   *
   * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
   */
  @java.lang.Override
  public com.google.genomics.v1.Transcript.CodingSequenceOrBuilder getCodingSequenceOrBuilder() {
    return codingSequence_ == null ? com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance() : codingSequence_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(geneId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, geneId_);
    }
    for (int i = 0; i < exons_.size(); i++) {
      output.writeMessage(2, exons_.get(i));
    }
    if (codingSequence_ != null) {
      output.writeMessage(3, getCodingSequence());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(geneId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, geneId_);
    }
    for (int i = 0; i < exons_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, exons_.get(i));
    }
    if (codingSequence_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getCodingSequence());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.genomics.v1.Transcript)) {
      return super.equals(obj);
    }
    com.google.genomics.v1.Transcript other = (com.google.genomics.v1.Transcript) obj;

    if (!getGeneId()
        .equals(other.getGeneId())) return false;
    if (!getExonsList()
        .equals(other.getExonsList())) return false;
    if (hasCodingSequence() != other.hasCodingSequence()) return false;
    if (hasCodingSequence()) {
      if (!getCodingSequence()
          .equals(other.getCodingSequence())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + GENE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getGeneId().hashCode();
    if (getExonsCount() > 0) {
      hash = (37 * hash) + EXONS_FIELD_NUMBER;
      hash = (53 * hash) + getExonsList().hashCode();
    }
    if (hasCodingSequence()) {
      hash = (37 * hash) + CODING_SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getCodingSequence().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.genomics.v1.Transcript parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.Transcript parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.Transcript parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.genomics.v1.Transcript parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.Transcript parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.Transcript parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.genomics.v1.Transcript prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A transcript represents the assertion that a particular region of the
   * reference genome may be transcribed as RNA.
   * </pre>
   *
   * Protobuf type {@code google.genomics.v1.Transcript}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.genomics.v1.Transcript)
      com.google.genomics.v1.TranscriptOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.genomics.v1.Transcript.class, com.google.genomics.v1.Transcript.Builder.class);
    }

    // Construct using com.google.genomics.v1.Transcript.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      geneId_ = "";
      if (exonsBuilder_ == null) {
        exons_ = java.util.Collections.emptyList();
      } else {
        exons_ = null;
        exonsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      codingSequence_ = null;
      if (codingSequenceBuilder_ != null) {
        codingSequenceBuilder_.dispose();
        codingSequenceBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.genomics.v1.AnnotationsProto.internal_static_google_genomics_v1_Transcript_descriptor;
    }

    @java.lang.Override
    public com.google.genomics.v1.Transcript getDefaultInstanceForType() {
      return com.google.genomics.v1.Transcript.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.genomics.v1.Transcript build() {
      com.google.genomics.v1.Transcript result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.genomics.v1.Transcript buildPartial() {
      com.google.genomics.v1.Transcript result = new com.google.genomics.v1.Transcript(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.google.genomics.v1.Transcript result) {
      if (exonsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          exons_ = java.util.Collections.unmodifiableList(exons_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.exons_ = exons_;
      } else {
        result.exons_ = exonsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.genomics.v1.Transcript result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.geneId_ = geneId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.codingSequence_ = codingSequenceBuilder_ == null
            ? codingSequence_
            : codingSequenceBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.genomics.v1.Transcript) {
        return mergeFrom((com.google.genomics.v1.Transcript)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.genomics.v1.Transcript other) {
      if (other == com.google.genomics.v1.Transcript.getDefaultInstance()) return this;
      if (!other.getGeneId().isEmpty()) {
        geneId_ = other.geneId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (exonsBuilder_ == null) {
        if (!other.exons_.isEmpty()) {
          if (exons_.isEmpty()) {
            exons_ = other.exons_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureExonsIsMutable();
            exons_.addAll(other.exons_);
          }
          onChanged();
        }
      } else {
        if (!other.exons_.isEmpty()) {
          if (exonsBuilder_.isEmpty()) {
            exonsBuilder_.dispose();
            exonsBuilder_ = null;
            exons_ = other.exons_;
            bitField0_ = (bitField0_ & ~0x00000002);
            exonsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getExonsFieldBuilder() : null;
          } else {
            exonsBuilder_.addAllMessages(other.exons_);
          }
        }
      }
      if (other.hasCodingSequence()) {
        mergeCodingSequence(other.getCodingSequence());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              geneId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.genomics.v1.Transcript.Exon m =
                  input.readMessage(
                      com.google.genomics.v1.Transcript.Exon.parser(),
                      extensionRegistry);
              if (exonsBuilder_ == null) {
                ensureExonsIsMutable();
                exons_.add(m);
              } else {
                exonsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getCodingSequenceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object geneId_ = "";
    /**
     * <pre>
     * The annotation ID of the gene from which this transcript is transcribed.
     * </pre>
     *
     * <code>string gene_id = 1;</code>
     * @return The geneId.
     */
    public java.lang.String getGeneId() {
      java.lang.Object ref = geneId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        geneId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The annotation ID of the gene from which this transcript is transcribed.
     * </pre>
     *
     * <code>string gene_id = 1;</code>
     * @return The bytes for geneId.
     */
    public com.google.protobuf.ByteString
        getGeneIdBytes() {
      java.lang.Object ref = geneId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        geneId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The annotation ID of the gene from which this transcript is transcribed.
     * </pre>
     *
     * <code>string gene_id = 1;</code>
     * @param value The geneId to set.
     * @return This builder for chaining.
     */
    public Builder setGeneId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      geneId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The annotation ID of the gene from which this transcript is transcribed.
     * </pre>
     *
     * <code>string gene_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearGeneId() {
      geneId_ = getDefaultInstance().getGeneId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The annotation ID of the gene from which this transcript is transcribed.
     * </pre>
     *
     * <code>string gene_id = 1;</code>
     * @param value The bytes for geneId to set.
     * @return This builder for chaining.
     */
    public Builder setGeneIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      geneId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.google.genomics.v1.Transcript.Exon> exons_ =
      java.util.Collections.emptyList();
    private void ensureExonsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        exons_ = new java.util.ArrayList<com.google.genomics.v1.Transcript.Exon>(exons_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.genomics.v1.Transcript.Exon, com.google.genomics.v1.Transcript.Exon.Builder, com.google.genomics.v1.Transcript.ExonOrBuilder> exonsBuilder_;

    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public java.util.List<com.google.genomics.v1.Transcript.Exon> getExonsList() {
      if (exonsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(exons_);
      } else {
        return exonsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public int getExonsCount() {
      if (exonsBuilder_ == null) {
        return exons_.size();
      } else {
        return exonsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public com.google.genomics.v1.Transcript.Exon getExons(int index) {
      if (exonsBuilder_ == null) {
        return exons_.get(index);
      } else {
        return exonsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder setExons(
        int index, com.google.genomics.v1.Transcript.Exon value) {
      if (exonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExonsIsMutable();
        exons_.set(index, value);
        onChanged();
      } else {
        exonsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder setExons(
        int index, com.google.genomics.v1.Transcript.Exon.Builder builderForValue) {
      if (exonsBuilder_ == null) {
        ensureExonsIsMutable();
        exons_.set(index, builderForValue.build());
        onChanged();
      } else {
        exonsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder addExons(com.google.genomics.v1.Transcript.Exon value) {
      if (exonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExonsIsMutable();
        exons_.add(value);
        onChanged();
      } else {
        exonsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder addExons(
        int index, com.google.genomics.v1.Transcript.Exon value) {
      if (exonsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExonsIsMutable();
        exons_.add(index, value);
        onChanged();
      } else {
        exonsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder addExons(
        com.google.genomics.v1.Transcript.Exon.Builder builderForValue) {
      if (exonsBuilder_ == null) {
        ensureExonsIsMutable();
        exons_.add(builderForValue.build());
        onChanged();
      } else {
        exonsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder addExons(
        int index, com.google.genomics.v1.Transcript.Exon.Builder builderForValue) {
      if (exonsBuilder_ == null) {
        ensureExonsIsMutable();
        exons_.add(index, builderForValue.build());
        onChanged();
      } else {
        exonsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder addAllExons(
        java.lang.Iterable<? extends com.google.genomics.v1.Transcript.Exon> values) {
      if (exonsBuilder_ == null) {
        ensureExonsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, exons_);
        onChanged();
      } else {
        exonsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder clearExons() {
      if (exonsBuilder_ == null) {
        exons_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        exonsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public Builder removeExons(int index) {
      if (exonsBuilder_ == null) {
        ensureExonsIsMutable();
        exons_.remove(index);
        onChanged();
      } else {
        exonsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public com.google.genomics.v1.Transcript.Exon.Builder getExonsBuilder(
        int index) {
      return getExonsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public com.google.genomics.v1.Transcript.ExonOrBuilder getExonsOrBuilder(
        int index) {
      if (exonsBuilder_ == null) {
        return exons_.get(index);  } else {
        return exonsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public java.util.List<? extends com.google.genomics.v1.Transcript.ExonOrBuilder> 
         getExonsOrBuilderList() {
      if (exonsBuilder_ != null) {
        return exonsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(exons_);
      }
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public com.google.genomics.v1.Transcript.Exon.Builder addExonsBuilder() {
      return getExonsFieldBuilder().addBuilder(
          com.google.genomics.v1.Transcript.Exon.getDefaultInstance());
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public com.google.genomics.v1.Transcript.Exon.Builder addExonsBuilder(
        int index) {
      return getExonsFieldBuilder().addBuilder(
          index, com.google.genomics.v1.Transcript.Exon.getDefaultInstance());
    }
    /**
     * <pre>
     * The &lt;a href="http://en.wikipedia.org/wiki/Exon"&gt;exons&lt;/a&gt; that compose
     * this transcript. This field should be unset for genomes where transcript
     * splicing does not occur, for example prokaryotes.
     * Introns are regions of the transcript that are not included in the
     * spliced RNA product. Though not explicitly modeled here, intron ranges can
     * be deduced; all regions of this transcript that are not exons are introns.
     * Exonic sequences do not necessarily code for a translational product
     * (amino acids). Only the regions of exons bounded by the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] correspond
     * to coding DNA sequence.
     * Exons are ordered by start position and may not overlap.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Transcript.Exon exons = 2;</code>
     */
    public java.util.List<com.google.genomics.v1.Transcript.Exon.Builder> 
         getExonsBuilderList() {
      return getExonsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.google.genomics.v1.Transcript.Exon, com.google.genomics.v1.Transcript.Exon.Builder, com.google.genomics.v1.Transcript.ExonOrBuilder> 
        getExonsFieldBuilder() {
      if (exonsBuilder_ == null) {
        exonsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.genomics.v1.Transcript.Exon, com.google.genomics.v1.Transcript.Exon.Builder, com.google.genomics.v1.Transcript.ExonOrBuilder>(
                exons_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        exons_ = null;
      }
      return exonsBuilder_;
    }

    private com.google.genomics.v1.Transcript.CodingSequence codingSequence_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.genomics.v1.Transcript.CodingSequence, com.google.genomics.v1.Transcript.CodingSequence.Builder, com.google.genomics.v1.Transcript.CodingSequenceOrBuilder> codingSequenceBuilder_;
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     * @return Whether the codingSequence field is set.
     */
    public boolean hasCodingSequence() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     * @return The codingSequence.
     */
    public com.google.genomics.v1.Transcript.CodingSequence getCodingSequence() {
      if (codingSequenceBuilder_ == null) {
        return codingSequence_ == null ? com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance() : codingSequence_;
      } else {
        return codingSequenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    public Builder setCodingSequence(com.google.genomics.v1.Transcript.CodingSequence value) {
      if (codingSequenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        codingSequence_ = value;
      } else {
        codingSequenceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    public Builder setCodingSequence(
        com.google.genomics.v1.Transcript.CodingSequence.Builder builderForValue) {
      if (codingSequenceBuilder_ == null) {
        codingSequence_ = builderForValue.build();
      } else {
        codingSequenceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    public Builder mergeCodingSequence(com.google.genomics.v1.Transcript.CodingSequence value) {
      if (codingSequenceBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          codingSequence_ != null &&
          codingSequence_ != com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance()) {
          getCodingSequenceBuilder().mergeFrom(value);
        } else {
          codingSequence_ = value;
        }
      } else {
        codingSequenceBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    public Builder clearCodingSequence() {
      bitField0_ = (bitField0_ & ~0x00000004);
      codingSequence_ = null;
      if (codingSequenceBuilder_ != null) {
        codingSequenceBuilder_.dispose();
        codingSequenceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    public com.google.genomics.v1.Transcript.CodingSequence.Builder getCodingSequenceBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getCodingSequenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    public com.google.genomics.v1.Transcript.CodingSequenceOrBuilder getCodingSequenceOrBuilder() {
      if (codingSequenceBuilder_ != null) {
        return codingSequenceBuilder_.getMessageOrBuilder();
      } else {
        return codingSequence_ == null ?
            com.google.genomics.v1.Transcript.CodingSequence.getDefaultInstance() : codingSequence_;
      }
    }
    /**
     * <pre>
     * The range of the coding sequence for this transcript, if any. To determine
     * the exact ranges of coding sequence, intersect this range with those of the
     * [exons][google.genomics.v1.Transcript.exons], if any. If there are any
     * [exons][google.genomics.v1.Transcript.exons], the
     * [codingSequence][google.genomics.v1.Transcript.coding_sequence] must start
     * and end within them.
     * Note that in some cases, the reference genome will not exactly match the
     * observed mRNA transcript e.g. due to variance in the source genome from
     * reference. In these cases,
     * [exon.frame][google.genomics.v1.Transcript.Exon.frame] will not necessarily
     * match the expected reference reading frame and coding exon reference bases
     * cannot necessarily be concatenated to produce the original transcript mRNA.
     * </pre>
     *
     * <code>.google.genomics.v1.Transcript.CodingSequence coding_sequence = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.genomics.v1.Transcript.CodingSequence, com.google.genomics.v1.Transcript.CodingSequence.Builder, com.google.genomics.v1.Transcript.CodingSequenceOrBuilder> 
        getCodingSequenceFieldBuilder() {
      if (codingSequenceBuilder_ == null) {
        codingSequenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.genomics.v1.Transcript.CodingSequence, com.google.genomics.v1.Transcript.CodingSequence.Builder, com.google.genomics.v1.Transcript.CodingSequenceOrBuilder>(
                getCodingSequence(),
                getParentForChildren(),
                isClean());
        codingSequence_ = null;
      }
      return codingSequenceBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.genomics.v1.Transcript)
  }

  // @@protoc_insertion_point(class_scope:google.genomics.v1.Transcript)
  private static final com.google.genomics.v1.Transcript DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.genomics.v1.Transcript();
  }

  public static com.google.genomics.v1.Transcript getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Transcript>
      PARSER = new com.google.protobuf.AbstractParser<Transcript>() {
    @java.lang.Override
    public Transcript parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Transcript> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Transcript> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.genomics.v1.Transcript getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

