// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

package com.google.genomics.v1;

/**
 * <pre>
 * A call represents the determination of genotype with respect to a particular
 * variant. It may include associated information such as quality and phasing.
 * For example, a call might assign a probability of 0.32 to the occurrence of
 * a SNP named rs1234 in a call set with the name NA12345.
 * </pre>
 *
 * Protobuf type {@code google.genomics.v1.VariantCall}
 */
public final class VariantCall extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.genomics.v1.VariantCall)
    VariantCallOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VariantCall.newBuilder() to construct.
  private VariantCall(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private VariantCall() {
    callSetId_ = "";
    callSetName_ = "";
    genotype_ = emptyIntList();
    phaseset_ = "";
    genotypeLikelihood_ = emptyDoubleList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new VariantCall();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private VariantCall(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 18: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              info_ = com.google.protobuf.MapField.newMapField(
                  InfoDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ListValue>
            info__ = input.readMessage(
                InfoDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            info_.getMutableMap().put(
                info__.getKey(), info__.getValue());
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            phaseset_ = s;
            break;
          }
          case 49: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              genotypeLikelihood_ = newDoubleList();
              mutable_bitField0_ |= 0x00000002;
            }
            genotypeLikelihood_.addDouble(input.readDouble());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
              genotypeLikelihood_ = newDoubleList();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              genotypeLikelihood_.addDouble(input.readDouble());
            }
            input.popLimit(limit);
            break;
          }
          case 56: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              genotype_ = newIntList();
              mutable_bitField0_ |= 0x00000001;
            }
            genotype_.addInt(input.readInt32());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
              genotype_ = newIntList();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              genotype_.addInt(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();

            callSetId_ = s;
            break;
          }
          case 74: {
            java.lang.String s = input.readStringRequireUtf8();

            callSetName_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        genotypeLikelihood_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        genotype_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetInfo();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.genomics.v1.VariantCall.class, com.google.genomics.v1.VariantCall.Builder.class);
  }

  public static final int CALL_SET_ID_FIELD_NUMBER = 8;
  private volatile java.lang.Object callSetId_;
  /**
   * <pre>
   * The ID of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_id = 8;</code>
   * @return The callSetId.
   */
  @java.lang.Override
  public java.lang.String getCallSetId() {
    java.lang.Object ref = callSetId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      callSetId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The ID of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_id = 8;</code>
   * @return The bytes for callSetId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCallSetIdBytes() {
    java.lang.Object ref = callSetId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      callSetId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CALL_SET_NAME_FIELD_NUMBER = 9;
  private volatile java.lang.Object callSetName_;
  /**
   * <pre>
   * The name of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_name = 9;</code>
   * @return The callSetName.
   */
  @java.lang.Override
  public java.lang.String getCallSetName() {
    java.lang.Object ref = callSetName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      callSetName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_name = 9;</code>
   * @return The bytes for callSetName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCallSetNameBytes() {
    java.lang.Object ref = callSetName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      callSetName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GENOTYPE_FIELD_NUMBER = 7;
  private com.google.protobuf.Internal.IntList genotype_;
  /**
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   *
   * <code>repeated int32 genotype = 7;</code>
   * @return A list containing the genotype.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getGenotypeList() {
    return genotype_;
  }
  /**
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   *
   * <code>repeated int32 genotype = 7;</code>
   * @return The count of genotype.
   */
  public int getGenotypeCount() {
    return genotype_.size();
  }
  /**
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   *
   * <code>repeated int32 genotype = 7;</code>
   * @param index The index of the element to return.
   * @return The genotype at the given index.
   */
  public int getGenotype(int index) {
    return genotype_.getInt(index);
  }
  private int genotypeMemoizedSerializedSize = -1;

  public static final int PHASESET_FIELD_NUMBER = 5;
  private volatile java.lang.Object phaseset_;
  /**
   * <pre>
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   * </pre>
   *
   * <code>string phaseset = 5;</code>
   * @return The phaseset.
   */
  @java.lang.Override
  public java.lang.String getPhaseset() {
    java.lang.Object ref = phaseset_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      phaseset_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   * </pre>
   *
   * <code>string phaseset = 5;</code>
   * @return The bytes for phaseset.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPhasesetBytes() {
    java.lang.Object ref = phaseset_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      phaseset_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int GENOTYPE_LIKELIHOOD_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.DoubleList genotypeLikelihood_;
  /**
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   *
   * <code>repeated double genotype_likelihood = 6;</code>
   * @return A list containing the genotypeLikelihood.
   */
  @java.lang.Override
  public java.util.List<java.lang.Double>
      getGenotypeLikelihoodList() {
    return genotypeLikelihood_;
  }
  /**
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   *
   * <code>repeated double genotype_likelihood = 6;</code>
   * @return The count of genotypeLikelihood.
   */
  public int getGenotypeLikelihoodCount() {
    return genotypeLikelihood_.size();
  }
  /**
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   *
   * <code>repeated double genotype_likelihood = 6;</code>
   * @param index The index of the element to return.
   * @return The genotypeLikelihood at the given index.
   */
  public double getGenotypeLikelihood(int index) {
    return genotypeLikelihood_.getDouble(index);
  }
  private int genotypeLikelihoodMemoizedSerializedSize = -1;

  public static final int INFO_FIELD_NUMBER = 2;
  private static final class InfoDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.protobuf.ListValue> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.protobuf.ListValue>newDefaultInstance(
                com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_InfoEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.protobuf.ListValue.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.protobuf.ListValue> info_;
  private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ListValue>
  internalGetInfo() {
    if (info_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          InfoDefaultEntryHolder.defaultEntry);
    }
    return info_;
  }

  public int getInfoCount() {
    return internalGetInfo().getMap().size();
  }
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */

  @java.lang.Override
  public boolean containsInfo(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetInfo().getMap().containsKey(key);
  }
  /**
   * Use {@link #getInfoMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.google.protobuf.ListValue> getInfo() {
    return getInfoMap();
  }
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.google.protobuf.ListValue> getInfoMap() {
    return internalGetInfo().getMap();
  }
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */
  @java.lang.Override

  public com.google.protobuf.ListValue getInfoOrDefault(
      java.lang.String key,
      com.google.protobuf.ListValue defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.google.protobuf.ListValue> map =
        internalGetInfo().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */
  @java.lang.Override

  public com.google.protobuf.ListValue getInfoOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.google.protobuf.ListValue> map =
        internalGetInfo().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetInfo(),
        InfoDefaultEntryHolder.defaultEntry,
        2);
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(phaseset_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, phaseset_);
    }
    if (getGenotypeLikelihoodList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(genotypeLikelihoodMemoizedSerializedSize);
    }
    for (int i = 0; i < genotypeLikelihood_.size(); i++) {
      output.writeDoubleNoTag(genotypeLikelihood_.getDouble(i));
    }
    if (getGenotypeList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(genotypeMemoizedSerializedSize);
    }
    for (int i = 0; i < genotype_.size(); i++) {
      output.writeInt32NoTag(genotype_.getInt(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(callSetId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, callSetId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(callSetName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, callSetName_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, com.google.protobuf.ListValue> entry
         : internalGetInfo().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.ListValue>
      info__ = InfoDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, info__);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(phaseset_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, phaseset_);
    }
    {
      int dataSize = 0;
      dataSize = 8 * getGenotypeLikelihoodList().size();
      size += dataSize;
      if (!getGenotypeLikelihoodList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      genotypeLikelihoodMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < genotype_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(genotype_.getInt(i));
      }
      size += dataSize;
      if (!getGenotypeList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      genotypeMemoizedSerializedSize = dataSize;
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(callSetId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, callSetId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(callSetName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, callSetName_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.genomics.v1.VariantCall)) {
      return super.equals(obj);
    }
    com.google.genomics.v1.VariantCall other = (com.google.genomics.v1.VariantCall) obj;

    if (!getCallSetId()
        .equals(other.getCallSetId())) return false;
    if (!getCallSetName()
        .equals(other.getCallSetName())) return false;
    if (!getGenotypeList()
        .equals(other.getGenotypeList())) return false;
    if (!getPhaseset()
        .equals(other.getPhaseset())) return false;
    if (!getGenotypeLikelihoodList()
        .equals(other.getGenotypeLikelihoodList())) return false;
    if (!internalGetInfo().equals(
        other.internalGetInfo())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CALL_SET_ID_FIELD_NUMBER;
    hash = (53 * hash) + getCallSetId().hashCode();
    hash = (37 * hash) + CALL_SET_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getCallSetName().hashCode();
    if (getGenotypeCount() > 0) {
      hash = (37 * hash) + GENOTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getGenotypeList().hashCode();
    }
    hash = (37 * hash) + PHASESET_FIELD_NUMBER;
    hash = (53 * hash) + getPhaseset().hashCode();
    if (getGenotypeLikelihoodCount() > 0) {
      hash = (37 * hash) + GENOTYPE_LIKELIHOOD_FIELD_NUMBER;
      hash = (53 * hash) + getGenotypeLikelihoodList().hashCode();
    }
    if (!internalGetInfo().getMap().isEmpty()) {
      hash = (37 * hash) + INFO_FIELD_NUMBER;
      hash = (53 * hash) + internalGetInfo().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.genomics.v1.VariantCall parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.VariantCall parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.genomics.v1.VariantCall parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.genomics.v1.VariantCall prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A call represents the determination of genotype with respect to a particular
   * variant. It may include associated information such as quality and phasing.
   * For example, a call might assign a probability of 0.32 to the occurrence of
   * a SNP named rs1234 in a call set with the name NA12345.
   * </pre>
   *
   * Protobuf type {@code google.genomics.v1.VariantCall}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.genomics.v1.VariantCall)
      com.google.genomics.v1.VariantCallOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetInfo();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableInfo();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.genomics.v1.VariantCall.class, com.google.genomics.v1.VariantCall.Builder.class);
    }

    // Construct using com.google.genomics.v1.VariantCall.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      callSetId_ = "";

      callSetName_ = "";

      genotype_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      phaseset_ = "";

      genotypeLikelihood_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableInfo().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.genomics.v1.VariantsProto.internal_static_google_genomics_v1_VariantCall_descriptor;
    }

    @java.lang.Override
    public com.google.genomics.v1.VariantCall getDefaultInstanceForType() {
      return com.google.genomics.v1.VariantCall.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.genomics.v1.VariantCall build() {
      com.google.genomics.v1.VariantCall result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.genomics.v1.VariantCall buildPartial() {
      com.google.genomics.v1.VariantCall result = new com.google.genomics.v1.VariantCall(this);
      int from_bitField0_ = bitField0_;
      result.callSetId_ = callSetId_;
      result.callSetName_ = callSetName_;
      if (((bitField0_ & 0x00000001) != 0)) {
        genotype_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.genotype_ = genotype_;
      result.phaseset_ = phaseset_;
      if (((bitField0_ & 0x00000002) != 0)) {
        genotypeLikelihood_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.genotypeLikelihood_ = genotypeLikelihood_;
      result.info_ = internalGetInfo();
      result.info_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.genomics.v1.VariantCall) {
        return mergeFrom((com.google.genomics.v1.VariantCall)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.genomics.v1.VariantCall other) {
      if (other == com.google.genomics.v1.VariantCall.getDefaultInstance()) return this;
      if (!other.getCallSetId().isEmpty()) {
        callSetId_ = other.callSetId_;
        onChanged();
      }
      if (!other.getCallSetName().isEmpty()) {
        callSetName_ = other.callSetName_;
        onChanged();
      }
      if (!other.genotype_.isEmpty()) {
        if (genotype_.isEmpty()) {
          genotype_ = other.genotype_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureGenotypeIsMutable();
          genotype_.addAll(other.genotype_);
        }
        onChanged();
      }
      if (!other.getPhaseset().isEmpty()) {
        phaseset_ = other.phaseset_;
        onChanged();
      }
      if (!other.genotypeLikelihood_.isEmpty()) {
        if (genotypeLikelihood_.isEmpty()) {
          genotypeLikelihood_ = other.genotypeLikelihood_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureGenotypeLikelihoodIsMutable();
          genotypeLikelihood_.addAll(other.genotypeLikelihood_);
        }
        onChanged();
      }
      internalGetMutableInfo().mergeFrom(
          other.internalGetInfo());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.genomics.v1.VariantCall parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.google.genomics.v1.VariantCall) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object callSetId_ = "";
    /**
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_id = 8;</code>
     * @return The callSetId.
     */
    public java.lang.String getCallSetId() {
      java.lang.Object ref = callSetId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        callSetId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_id = 8;</code>
     * @return The bytes for callSetId.
     */
    public com.google.protobuf.ByteString
        getCallSetIdBytes() {
      java.lang.Object ref = callSetId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        callSetId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_id = 8;</code>
     * @param value The callSetId to set.
     * @return This builder for chaining.
     */
    public Builder setCallSetId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      callSetId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_id = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearCallSetId() {
      
      callSetId_ = getDefaultInstance().getCallSetId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The ID of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_id = 8;</code>
     * @param value The bytes for callSetId to set.
     * @return This builder for chaining.
     */
    public Builder setCallSetIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      callSetId_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object callSetName_ = "";
    /**
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_name = 9;</code>
     * @return The callSetName.
     */
    public java.lang.String getCallSetName() {
      java.lang.Object ref = callSetName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        callSetName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_name = 9;</code>
     * @return The bytes for callSetName.
     */
    public com.google.protobuf.ByteString
        getCallSetNameBytes() {
      java.lang.Object ref = callSetName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        callSetName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_name = 9;</code>
     * @param value The callSetName to set.
     * @return This builder for chaining.
     */
    public Builder setCallSetName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      callSetName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_name = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearCallSetName() {
      
      callSetName_ = getDefaultInstance().getCallSetName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the call set this variant call belongs to.
     * </pre>
     *
     * <code>string call_set_name = 9;</code>
     * @param value The bytes for callSetName to set.
     * @return This builder for chaining.
     */
    public Builder setCallSetNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      callSetName_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.IntList genotype_ = emptyIntList();
    private void ensureGenotypeIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        genotype_ = mutableCopy(genotype_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @return A list containing the genotype.
     */
    public java.util.List<java.lang.Integer>
        getGenotypeList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(genotype_) : genotype_;
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @return The count of genotype.
     */
    public int getGenotypeCount() {
      return genotype_.size();
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @param index The index of the element to return.
     * @return The genotype at the given index.
     */
    public int getGenotype(int index) {
      return genotype_.getInt(index);
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @param index The index to set the value at.
     * @param value The genotype to set.
     * @return This builder for chaining.
     */
    public Builder setGenotype(
        int index, int value) {
      ensureGenotypeIsMutable();
      genotype_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @param value The genotype to add.
     * @return This builder for chaining.
     */
    public Builder addGenotype(int value) {
      ensureGenotypeIsMutable();
      genotype_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @param values The genotype to add.
     * @return This builder for chaining.
     */
    public Builder addAllGenotype(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureGenotypeIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, genotype_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The genotype of this variant call. Each value represents either the value
     * of the `referenceBases` field or a 1-based index into
     * `alternateBases`. If a variant had a `referenceBases`
     * value of `T` and an `alternateBases`
     * value of `["A", "C"]`, and the `genotype` was
     * `[2, 1]`, that would mean the call
     * represented the heterozygous value `CA` for this variant.
     * If the `genotype` was instead `[0, 1]`, the
     * represented value would be `TA`. Ordering of the
     * genotype values is important if the `phaseset` is present.
     * If a genotype is not called (that is, a `.` is present in the
     * GT string) -1 is returned.
     * </pre>
     *
     * <code>repeated int32 genotype = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearGenotype() {
      genotype_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private java.lang.Object phaseset_ = "";
    /**
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     *
     * <code>string phaseset = 5;</code>
     * @return The phaseset.
     */
    public java.lang.String getPhaseset() {
      java.lang.Object ref = phaseset_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        phaseset_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     *
     * <code>string phaseset = 5;</code>
     * @return The bytes for phaseset.
     */
    public com.google.protobuf.ByteString
        getPhasesetBytes() {
      java.lang.Object ref = phaseset_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        phaseset_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     *
     * <code>string phaseset = 5;</code>
     * @param value The phaseset to set.
     * @return This builder for chaining.
     */
    public Builder setPhaseset(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      phaseset_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     *
     * <code>string phaseset = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearPhaseset() {
      
      phaseset_ = getDefaultInstance().getPhaseset();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If this field is present, this variant call's genotype ordering implies
     * the phase of the bases and is consistent with any other variant calls in
     * the same reference sequence which have the same phaseset value.
     * When importing data from VCF, if the genotype data was phased but no
     * phase set was specified this field will be set to `*`.
     * </pre>
     *
     * <code>string phaseset = 5;</code>
     * @param value The bytes for phaseset to set.
     * @return This builder for chaining.
     */
    public Builder setPhasesetBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      phaseset_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.DoubleList genotypeLikelihood_ = emptyDoubleList();
    private void ensureGenotypeLikelihoodIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        genotypeLikelihood_ = mutableCopy(genotypeLikelihood_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @return A list containing the genotypeLikelihood.
     */
    public java.util.List<java.lang.Double>
        getGenotypeLikelihoodList() {
      return ((bitField0_ & 0x00000002) != 0) ?
               java.util.Collections.unmodifiableList(genotypeLikelihood_) : genotypeLikelihood_;
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @return The count of genotypeLikelihood.
     */
    public int getGenotypeLikelihoodCount() {
      return genotypeLikelihood_.size();
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @param index The index of the element to return.
     * @return The genotypeLikelihood at the given index.
     */
    public double getGenotypeLikelihood(int index) {
      return genotypeLikelihood_.getDouble(index);
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @param index The index to set the value at.
     * @param value The genotypeLikelihood to set.
     * @return This builder for chaining.
     */
    public Builder setGenotypeLikelihood(
        int index, double value) {
      ensureGenotypeLikelihoodIsMutable();
      genotypeLikelihood_.setDouble(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @param value The genotypeLikelihood to add.
     * @return This builder for chaining.
     */
    public Builder addGenotypeLikelihood(double value) {
      ensureGenotypeLikelihoodIsMutable();
      genotypeLikelihood_.addDouble(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @param values The genotypeLikelihood to add.
     * @return This builder for chaining.
     */
    public Builder addAllGenotypeLikelihood(
        java.lang.Iterable<? extends java.lang.Double> values) {
      ensureGenotypeLikelihoodIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, genotypeLikelihood_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The genotype likelihoods for this variant call. Each array entry
     * represents how likely a specific genotype is for this call. The value
     * ordering is defined by the GL tag in the VCF spec.
     * If Phred-scaled genotype likelihood scores (PL) are available and
     * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
     * to GL scores.  If both are available, PL scores are stored in `info`.
     * </pre>
     *
     * <code>repeated double genotype_likelihood = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearGenotypeLikelihood() {
      genotypeLikelihood_ = emptyDoubleList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.ListValue> info_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ListValue>
    internalGetInfo() {
      if (info_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            InfoDefaultEntryHolder.defaultEntry);
      }
      return info_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.ListValue>
    internalGetMutableInfo() {
      onChanged();;
      if (info_ == null) {
        info_ = com.google.protobuf.MapField.newMapField(
            InfoDefaultEntryHolder.defaultEntry);
      }
      if (!info_.isMutable()) {
        info_ = info_.copy();
      }
      return info_;
    }

    public int getInfoCount() {
      return internalGetInfo().getMap().size();
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */

    @java.lang.Override
    public boolean containsInfo(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetInfo().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInfoMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ListValue> getInfo() {
      return getInfoMap();
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ListValue> getInfoMap() {
      return internalGetInfo().getMap();
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ListValue getInfoOrDefault(
        java.lang.String key,
        com.google.protobuf.ListValue defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ListValue> map =
          internalGetInfo().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ListValue getInfoOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.ListValue> map =
          internalGetInfo().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearInfo() {
      internalGetMutableInfo().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */

    public Builder removeInfo(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableInfo().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ListValue>
    getMutableInfo() {
      return internalGetMutableInfo().getMutableMap();
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */
    public Builder putInfo(
        java.lang.String key,
        com.google.protobuf.ListValue value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableInfo().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * A map of additional variant call information. This must be of the form
     * map&lt;string, string[]&gt; (string key mapping to a list of string values).
     * </pre>
     *
     * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
     */

    public Builder putAllInfo(
        java.util.Map<java.lang.String, com.google.protobuf.ListValue> values) {
      internalGetMutableInfo().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.genomics.v1.VariantCall)
  }

  // @@protoc_insertion_point(class_scope:google.genomics.v1.VariantCall)
  private static final com.google.genomics.v1.VariantCall DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.genomics.v1.VariantCall();
  }

  public static com.google.genomics.v1.VariantCall getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<VariantCall>
      PARSER = new com.google.protobuf.AbstractParser<VariantCall>() {
    @java.lang.Override
    public VariantCall parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new VariantCall(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<VariantCall> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VariantCall> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.genomics.v1.VariantCall getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

