// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/annotations.proto

package com.google.genomics.v1;

public interface BatchCreateAnnotationsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.genomics.v1.BatchCreateAnnotationsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The annotations to be created. At most 4096 can be specified in a single
   * request.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
   */
  java.util.List<com.google.genomics.v1.Annotation> 
      getAnnotationsList();
  /**
   * <pre>
   * The annotations to be created. At most 4096 can be specified in a single
   * request.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
   */
  com.google.genomics.v1.Annotation getAnnotations(int index);
  /**
   * <pre>
   * The annotations to be created. At most 4096 can be specified in a single
   * request.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
   */
  int getAnnotationsCount();
  /**
   * <pre>
   * The annotations to be created. At most 4096 can be specified in a single
   * request.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
   */
  java.util.List<? extends com.google.genomics.v1.AnnotationOrBuilder> 
      getAnnotationsOrBuilderList();
  /**
   * <pre>
   * The annotations to be created. At most 4096 can be specified in a single
   * request.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
   */
  com.google.genomics.v1.AnnotationOrBuilder getAnnotationsOrBuilder(
      int index);

  /**
   * <pre>
   * A unique request ID which enables the server to detect duplicated requests.
   * If provided, duplicated requests will result in the same response; if not
   * provided, duplicated requests may result in duplicated data. For a given
   * annotation set, callers should not reuse `request_id`s when writing
   * different batches of annotations - behavior in this case is undefined.
   * A common approach is to use a UUID. For batch jobs where worker crashes are
   * a possibility, consider using some unique variant of a worker or run ID.
   * </pre>
   *
   * <code>string request_id = 2;</code>
   * @return The requestId.
   */
  java.lang.String getRequestId();
  /**
   * <pre>
   * A unique request ID which enables the server to detect duplicated requests.
   * If provided, duplicated requests will result in the same response; if not
   * provided, duplicated requests may result in duplicated data. For a given
   * annotation set, callers should not reuse `request_id`s when writing
   * different batches of annotations - behavior in this case is undefined.
   * A common approach is to use a UUID. For batch jobs where worker crashes are
   * a possibility, consider using some unique variant of a worker or run ID.
   * </pre>
   *
   * <code>string request_id = 2;</code>
   * @return The bytes for requestId.
   */
  com.google.protobuf.ByteString
      getRequestIdBytes();
}
