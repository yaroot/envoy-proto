// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

package com.google.genomics.v1;

public interface VariantOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.genomics.v1.Variant)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ID of the variant set this variant belongs to.
   * </pre>
   *
   * <code>string variant_set_id = 15;</code>
   * @return The variantSetId.
   */
  java.lang.String getVariantSetId();
  /**
   * <pre>
   * The ID of the variant set this variant belongs to.
   * </pre>
   *
   * <code>string variant_set_id = 15;</code>
   * @return The bytes for variantSetId.
   */
  com.google.protobuf.ByteString
      getVariantSetIdBytes();

  /**
   * <pre>
   * The server-generated variant ID, unique across all variants.
   * </pre>
   *
   * <code>string id = 2;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * The server-generated variant ID, unique across all variants.
   * </pre>
   *
   * <code>string id = 2;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * Names for the variant, for example a RefSNP ID.
   * </pre>
   *
   * <code>repeated string names = 3;</code>
   * @return A list containing the names.
   */
  java.util.List<java.lang.String>
      getNamesList();
  /**
   * <pre>
   * Names for the variant, for example a RefSNP ID.
   * </pre>
   *
   * <code>repeated string names = 3;</code>
   * @return The count of names.
   */
  int getNamesCount();
  /**
   * <pre>
   * Names for the variant, for example a RefSNP ID.
   * </pre>
   *
   * <code>repeated string names = 3;</code>
   * @param index The index of the element to return.
   * @return The names at the given index.
   */
  java.lang.String getNames(int index);
  /**
   * <pre>
   * Names for the variant, for example a RefSNP ID.
   * </pre>
   *
   * <code>repeated string names = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the names at the given index.
   */
  com.google.protobuf.ByteString
      getNamesBytes(int index);

  /**
   * <pre>
   * The date this variant was created, in milliseconds from the epoch.
   * </pre>
   *
   * <code>int64 created = 12;</code>
   * @return The created.
   */
  long getCreated();

  /**
   * <pre>
   * The reference on which this variant occurs.
   * (such as `chr20` or `X`)
   * </pre>
   *
   * <code>string reference_name = 14;</code>
   * @return The referenceName.
   */
  java.lang.String getReferenceName();
  /**
   * <pre>
   * The reference on which this variant occurs.
   * (such as `chr20` or `X`)
   * </pre>
   *
   * <code>string reference_name = 14;</code>
   * @return The bytes for referenceName.
   */
  com.google.protobuf.ByteString
      getReferenceNameBytes();

  /**
   * <pre>
   * The position at which this variant occurs (0-based).
   * This corresponds to the first base of the string of reference bases.
   * </pre>
   *
   * <code>int64 start = 16;</code>
   * @return The start.
   */
  long getStart();

  /**
   * <pre>
   * The end position (0-based) of this variant. This corresponds to the first
   * base after the last base in the reference allele. So, the length of
   * the reference allele is (end - start). This is useful for variants
   * that don't explicitly give alternate bases, for example large deletions.
   * </pre>
   *
   * <code>int64 end = 13;</code>
   * @return The end.
   */
  long getEnd();

  /**
   * <pre>
   * The reference bases for this variant. They start at the given
   * position.
   * </pre>
   *
   * <code>string reference_bases = 6;</code>
   * @return The referenceBases.
   */
  java.lang.String getReferenceBases();
  /**
   * <pre>
   * The reference bases for this variant. They start at the given
   * position.
   * </pre>
   *
   * <code>string reference_bases = 6;</code>
   * @return The bytes for referenceBases.
   */
  com.google.protobuf.ByteString
      getReferenceBasesBytes();

  /**
   * <pre>
   * The bases that appear instead of the reference bases.
   * </pre>
   *
   * <code>repeated string alternate_bases = 7;</code>
   * @return A list containing the alternateBases.
   */
  java.util.List<java.lang.String>
      getAlternateBasesList();
  /**
   * <pre>
   * The bases that appear instead of the reference bases.
   * </pre>
   *
   * <code>repeated string alternate_bases = 7;</code>
   * @return The count of alternateBases.
   */
  int getAlternateBasesCount();
  /**
   * <pre>
   * The bases that appear instead of the reference bases.
   * </pre>
   *
   * <code>repeated string alternate_bases = 7;</code>
   * @param index The index of the element to return.
   * @return The alternateBases at the given index.
   */
  java.lang.String getAlternateBases(int index);
  /**
   * <pre>
   * The bases that appear instead of the reference bases.
   * </pre>
   *
   * <code>repeated string alternate_bases = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the alternateBases at the given index.
   */
  com.google.protobuf.ByteString
      getAlternateBasesBytes(int index);

  /**
   * <pre>
   * A measure of how likely this variant is to be real.
   * A higher value is better.
   * </pre>
   *
   * <code>double quality = 8;</code>
   * @return The quality.
   */
  double getQuality();

  /**
   * <pre>
   * A list of filters (normally quality filters) this variant has failed.
   * `PASS` indicates this variant has passed all filters.
   * </pre>
   *
   * <code>repeated string filter = 9;</code>
   * @return A list containing the filter.
   */
  java.util.List<java.lang.String>
      getFilterList();
  /**
   * <pre>
   * A list of filters (normally quality filters) this variant has failed.
   * `PASS` indicates this variant has passed all filters.
   * </pre>
   *
   * <code>repeated string filter = 9;</code>
   * @return The count of filter.
   */
  int getFilterCount();
  /**
   * <pre>
   * A list of filters (normally quality filters) this variant has failed.
   * `PASS` indicates this variant has passed all filters.
   * </pre>
   *
   * <code>repeated string filter = 9;</code>
   * @param index The index of the element to return.
   * @return The filter at the given index.
   */
  java.lang.String getFilter(int index);
  /**
   * <pre>
   * A list of filters (normally quality filters) this variant has failed.
   * `PASS` indicates this variant has passed all filters.
   * </pre>
   *
   * <code>repeated string filter = 9;</code>
   * @param index The index of the value to return.
   * @return The bytes of the filter at the given index.
   */
  com.google.protobuf.ByteString
      getFilterBytes(int index);

  /**
   * <pre>
   * A map of additional variant information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 10;</code>
   */
  int getInfoCount();
  /**
   * <pre>
   * A map of additional variant information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 10;</code>
   */
  boolean containsInfo(
      java.lang.String key);
  /**
   * Use {@link #getInfoMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.protobuf.ListValue>
  getInfo();
  /**
   * <pre>
   * A map of additional variant information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 10;</code>
   */
  java.util.Map<java.lang.String, com.google.protobuf.ListValue>
  getInfoMap();
  /**
   * <pre>
   * A map of additional variant information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 10;</code>
   */
  /* nullable */
com.google.protobuf.ListValue getInfoOrDefault(
      java.lang.String key,
      /* nullable */
com.google.protobuf.ListValue defaultValue);
  /**
   * <pre>
   * A map of additional variant information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 10;</code>
   */
  com.google.protobuf.ListValue getInfoOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The variant calls for this particular variant. Each one represents the
   * determination of genotype with respect to this variant.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.VariantCall calls = 11;</code>
   */
  java.util.List<com.google.genomics.v1.VariantCall> 
      getCallsList();
  /**
   * <pre>
   * The variant calls for this particular variant. Each one represents the
   * determination of genotype with respect to this variant.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.VariantCall calls = 11;</code>
   */
  com.google.genomics.v1.VariantCall getCalls(int index);
  /**
   * <pre>
   * The variant calls for this particular variant. Each one represents the
   * determination of genotype with respect to this variant.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.VariantCall calls = 11;</code>
   */
  int getCallsCount();
  /**
   * <pre>
   * The variant calls for this particular variant. Each one represents the
   * determination of genotype with respect to this variant.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.VariantCall calls = 11;</code>
   */
  java.util.List<? extends com.google.genomics.v1.VariantCallOrBuilder> 
      getCallsOrBuilderList();
  /**
   * <pre>
   * The variant calls for this particular variant. Each one represents the
   * determination of genotype with respect to this variant.
   * </pre>
   *
   * <code>repeated .google.genomics.v1.VariantCall calls = 11;</code>
   */
  com.google.genomics.v1.VariantCallOrBuilder getCallsOrBuilder(
      int index);
}
