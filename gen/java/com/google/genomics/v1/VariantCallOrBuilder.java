// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/genomics/v1/variants.proto

package com.google.genomics.v1;

public interface VariantCallOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.genomics.v1.VariantCall)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ID of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_id = 8;</code>
   * @return The callSetId.
   */
  java.lang.String getCallSetId();
  /**
   * <pre>
   * The ID of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_id = 8;</code>
   * @return The bytes for callSetId.
   */
  com.google.protobuf.ByteString
      getCallSetIdBytes();

  /**
   * <pre>
   * The name of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_name = 9;</code>
   * @return The callSetName.
   */
  java.lang.String getCallSetName();
  /**
   * <pre>
   * The name of the call set this variant call belongs to.
   * </pre>
   *
   * <code>string call_set_name = 9;</code>
   * @return The bytes for callSetName.
   */
  com.google.protobuf.ByteString
      getCallSetNameBytes();

  /**
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   *
   * <code>repeated int32 genotype = 7;</code>
   * @return A list containing the genotype.
   */
  java.util.List<java.lang.Integer> getGenotypeList();
  /**
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   *
   * <code>repeated int32 genotype = 7;</code>
   * @return The count of genotype.
   */
  int getGenotypeCount();
  /**
   * <pre>
   * The genotype of this variant call. Each value represents either the value
   * of the `referenceBases` field or a 1-based index into
   * `alternateBases`. If a variant had a `referenceBases`
   * value of `T` and an `alternateBases`
   * value of `["A", "C"]`, and the `genotype` was
   * `[2, 1]`, that would mean the call
   * represented the heterozygous value `CA` for this variant.
   * If the `genotype` was instead `[0, 1]`, the
   * represented value would be `TA`. Ordering of the
   * genotype values is important if the `phaseset` is present.
   * If a genotype is not called (that is, a `.` is present in the
   * GT string) -1 is returned.
   * </pre>
   *
   * <code>repeated int32 genotype = 7;</code>
   * @param index The index of the element to return.
   * @return The genotype at the given index.
   */
  int getGenotype(int index);

  /**
   * <pre>
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   * </pre>
   *
   * <code>string phaseset = 5;</code>
   * @return The phaseset.
   */
  java.lang.String getPhaseset();
  /**
   * <pre>
   * If this field is present, this variant call's genotype ordering implies
   * the phase of the bases and is consistent with any other variant calls in
   * the same reference sequence which have the same phaseset value.
   * When importing data from VCF, if the genotype data was phased but no
   * phase set was specified this field will be set to `*`.
   * </pre>
   *
   * <code>string phaseset = 5;</code>
   * @return The bytes for phaseset.
   */
  com.google.protobuf.ByteString
      getPhasesetBytes();

  /**
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   *
   * <code>repeated double genotype_likelihood = 6;</code>
   * @return A list containing the genotypeLikelihood.
   */
  java.util.List<java.lang.Double> getGenotypeLikelihoodList();
  /**
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   *
   * <code>repeated double genotype_likelihood = 6;</code>
   * @return The count of genotypeLikelihood.
   */
  int getGenotypeLikelihoodCount();
  /**
   * <pre>
   * The genotype likelihoods for this variant call. Each array entry
   * represents how likely a specific genotype is for this call. The value
   * ordering is defined by the GL tag in the VCF spec.
   * If Phred-scaled genotype likelihood scores (PL) are available and
   * log10(P) genotype likelihood scores (GL) are not, PL scores are converted
   * to GL scores.  If both are available, PL scores are stored in `info`.
   * </pre>
   *
   * <code>repeated double genotype_likelihood = 6;</code>
   * @param index The index of the element to return.
   * @return The genotypeLikelihood at the given index.
   */
  double getGenotypeLikelihood(int index);

  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */
  int getInfoCount();
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */
  boolean containsInfo(
      java.lang.String key);
  /**
   * Use {@link #getInfoMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.protobuf.ListValue>
  getInfo();
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */
  java.util.Map<java.lang.String, com.google.protobuf.ListValue>
  getInfoMap();
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */

  /* nullable */
com.google.protobuf.ListValue getInfoOrDefault(
      java.lang.String key,
      /* nullable */
com.google.protobuf.ListValue defaultValue);
  /**
   * <pre>
   * A map of additional variant call information. This must be of the form
   * map&lt;string, string[]&gt; (string key mapping to a list of string values).
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.ListValue&gt; info = 2;</code>
   */

  com.google.protobuf.ListValue getInfoOrThrow(
      java.lang.String key);
}
