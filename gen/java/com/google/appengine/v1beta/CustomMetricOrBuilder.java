// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/appengine/v1beta/version.proto

package com.google.appengine.v1beta;

public interface CustomMetricOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.appengine.v1beta.CustomMetric)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the metric.
   * </pre>
   *
   * <code>string metric_name = 1;</code>
   * @return The metricName.
   */
  java.lang.String getMetricName();
  /**
   * <pre>
   * The name of the metric.
   * </pre>
   *
   * <code>string metric_name = 1;</code>
   * @return The bytes for metricName.
   */
  com.google.protobuf.ByteString
      getMetricNameBytes();

  /**
   * <pre>
   * The type of the metric. Must be a string representing a Stackdriver
   * metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
   * </pre>
   *
   * <code>string target_type = 2;</code>
   * @return The targetType.
   */
  java.lang.String getTargetType();
  /**
   * <pre>
   * The type of the metric. Must be a string representing a Stackdriver
   * metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
   * </pre>
   *
   * <code>string target_type = 2;</code>
   * @return The bytes for targetType.
   */
  com.google.protobuf.ByteString
      getTargetTypeBytes();

  /**
   * <pre>
   * The target value for the metric.
   * </pre>
   *
   * <code>double target_utilization = 3;</code>
   * @return Whether the targetUtilization field is set.
   */
  boolean hasTargetUtilization();
  /**
   * <pre>
   * The target value for the metric.
   * </pre>
   *
   * <code>double target_utilization = 3;</code>
   * @return The targetUtilization.
   */
  double getTargetUtilization();

  /**
   * <pre>
   * May be used instead of `target_utilization` when an instance can handle a
   * specific amount of work/resources and the metric value is equal to the
   * current amount of work remaining. The autoscaler will try to keep the
   * number of instances equal to the metric value divided by
   * `single_instance_assignment`.
   * </pre>
   *
   * <code>double single_instance_assignment = 4;</code>
   * @return Whether the singleInstanceAssignment field is set.
   */
  boolean hasSingleInstanceAssignment();
  /**
   * <pre>
   * May be used instead of `target_utilization` when an instance can handle a
   * specific amount of work/resources and the metric value is equal to the
   * current amount of work remaining. The autoscaler will try to keep the
   * number of instances equal to the metric value divided by
   * `single_instance_assignment`.
   * </pre>
   *
   * <code>double single_instance_assignment = 4;</code>
   * @return The singleInstanceAssignment.
   */
  double getSingleInstanceAssignment();

  /**
   * <pre>
   * Allows filtering on the metric's fields.
   * </pre>
   *
   * <code>string filter = 5;</code>
   * @return The filter.
   */
  java.lang.String getFilter();
  /**
   * <pre>
   * Allows filtering on the metric's fields.
   * </pre>
   *
   * <code>string filter = 5;</code>
   * @return The bytes for filter.
   */
  com.google.protobuf.ByteString
      getFilterBytes();

  public com.google.appengine.v1beta.CustomMetric.TargetSpecCase getTargetSpecCase();
}
