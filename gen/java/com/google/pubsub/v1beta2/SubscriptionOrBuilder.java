// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1beta2/pubsub.proto

package com.google.pubsub.v1beta2;

public interface SubscriptionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.pubsub.v1beta2.Subscription)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Name of the subscription.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Name of the subscription.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The name of the topic from which this subscription is receiving messages.
   * This will be present if and only if the subscription has not been detached
   * from its topic.
   * </pre>
   *
   * <code>string topic = 2;</code>
   * @return The topic.
   */
  java.lang.String getTopic();
  /**
   * <pre>
   * The name of the topic from which this subscription is receiving messages.
   * This will be present if and only if the subscription has not been detached
   * from its topic.
   * </pre>
   *
   * <code>string topic = 2;</code>
   * @return The bytes for topic.
   */
  com.google.protobuf.ByteString
      getTopicBytes();

  /**
   * <pre>
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   * </pre>
   *
   * <code>.google.pubsub.v1beta2.PushConfig push_config = 4;</code>
   * @return Whether the pushConfig field is set.
   */
  boolean hasPushConfig();
  /**
   * <pre>
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   * </pre>
   *
   * <code>.google.pubsub.v1beta2.PushConfig push_config = 4;</code>
   * @return The pushConfig.
   */
  com.google.pubsub.v1beta2.PushConfig getPushConfig();
  /**
   * <pre>
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty pushConfig signifies that the subscriber
   * will pull and ack messages using API methods.
   * </pre>
   *
   * <code>.google.pubsub.v1beta2.PushConfig push_config = 4;</code>
   */
  com.google.pubsub.v1beta2.PushConfigOrBuilder getPushConfigOrBuilder();

  /**
   * <pre>
   * This value is the maximum time after a subscriber receives a message
   * before the subscriber should acknowledge the message. After message
   * delivery but before the ack deadline expires and before the message is
   * acknowledged, it is an outstanding message and will not be delivered
   * again during that time (on a best-effort basis).
   * For pull delivery this value
   * is used as the initial value for the ack deadline. It may be overridden
   * for a specific message by calling ModifyAckDeadline.
   * For push delivery, this value is also used to set the request timeout for
   * the call to the push endpoint.
   * If the subscriber never acknowledges the message, the Pub/Sub
   * system will eventually redeliver the message.
   * </pre>
   *
   * <code>int32 ack_deadline_seconds = 5;</code>
   * @return The ackDeadlineSeconds.
   */
  int getAckDeadlineSeconds();
}
