// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/eval.proto

package com.google.api.expr.v1alpha1;

/**
 * <pre>
 * The value of an evaluated expression.
 * </pre>
 *
 * Protobuf type {@code google.api.expr.v1alpha1.ExprValue}
 */
public final class ExprValue extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:google.api.expr.v1alpha1.ExprValue)
    ExprValueOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ExprValue.newBuilder() to construct.
  private ExprValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExprValue() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ExprValue();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.google.api.expr.v1alpha1.EvalProto.internal_static_google_api_expr_v1alpha1_ExprValue_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.api.expr.v1alpha1.EvalProto.internal_static_google_api_expr_v1alpha1_ExprValue_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.api.expr.v1alpha1.ExprValue.class, com.google.api.expr.v1alpha1.ExprValue.Builder.class);
  }

  private int kindCase_ = 0;
  private java.lang.Object kind_;
  public enum KindCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    VALUE(1),
    ERROR(2),
    UNKNOWN(3),
    KIND_NOT_SET(0);
    private final int value;
    private KindCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KindCase valueOf(int value) {
      return forNumber(value);
    }

    public static KindCase forNumber(int value) {
      switch (value) {
        case 1: return VALUE;
        case 2: return ERROR;
        case 3: return UNKNOWN;
        case 0: return KIND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public KindCase
  getKindCase() {
    return KindCase.forNumber(
        kindCase_);
  }

  public static final int VALUE_FIELD_NUMBER = 1;
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
   * @return Whether the value field is set.
   */
  @java.lang.Override
  public boolean hasValue() {
    return kindCase_ == 1;
  }
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
   * @return The value.
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.Value getValue() {
    if (kindCase_ == 1) {
       return (com.google.api.expr.v1alpha1.Value) kind_;
    }
    return com.google.api.expr.v1alpha1.Value.getDefaultInstance();
  }
  /**
   * <pre>
   * A concrete value.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.ValueOrBuilder getValueOrBuilder() {
    if (kindCase_ == 1) {
       return (com.google.api.expr.v1alpha1.Value) kind_;
    }
    return com.google.api.expr.v1alpha1.Value.getDefaultInstance();
  }

  public static final int ERROR_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
   * @return Whether the error field is set.
   */
  @java.lang.Override
  public boolean hasError() {
    return kindCase_ == 2;
  }
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
   * @return The error.
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.ErrorSet getError() {
    if (kindCase_ == 2) {
       return (com.google.api.expr.v1alpha1.ErrorSet) kind_;
    }
    return com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
  }
  /**
   * <pre>
   * The set of errors in the critical path of evalution.
   * Only errors in the critical path are included. For example,
   * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
   * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
   * `&lt;error2&gt;`.
   * Errors cause by the presence of other errors are not included in the
   * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
   * only result in `&lt;error1&gt;`.
   * Multiple errors *might* be included when evaluation could result
   * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
   * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
   * The exact subset of errors included for this case is unspecified and
   * depends on the implementation details of the evaluator.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.ErrorSetOrBuilder getErrorOrBuilder() {
    if (kindCase_ == 2) {
       return (com.google.api.expr.v1alpha1.ErrorSet) kind_;
    }
    return com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
  }

  public static final int UNKNOWN_FIELD_NUMBER = 3;
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * Errors take precidence in all other cases:
   *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
   * @return Whether the unknown field is set.
   */
  @java.lang.Override
  public boolean hasUnknown() {
    return kindCase_ == 3;
  }
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * Errors take precidence in all other cases:
   *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
   * @return The unknown.
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.UnknownSet getUnknown() {
    if (kindCase_ == 3) {
       return (com.google.api.expr.v1alpha1.UnknownSet) kind_;
    }
    return com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
  }
  /**
   * <pre>
   * The set of unknowns in the critical path of evaluation.
   * Unknown behaves identically to Error with regards to propagation.
   * Specifically, only unknowns in the critical path are included, unknowns
   * caused by the presence of other unknowns are not included, and multiple
   * unknowns *might* be included included when evaluation could result in
   * different unknowns. For example:
   *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
   *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
   *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
   *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
   *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
   * Unknown takes precidence over Error in cases where a `Value` can short
   * circuit the result:
   *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
   *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
   * Errors take precidence in all other cases:
   *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
   *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
   */
  @java.lang.Override
  public com.google.api.expr.v1alpha1.UnknownSetOrBuilder getUnknownOrBuilder() {
    if (kindCase_ == 3) {
       return (com.google.api.expr.v1alpha1.UnknownSet) kind_;
    }
    return com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (kindCase_ == 1) {
      output.writeMessage(1, (com.google.api.expr.v1alpha1.Value) kind_);
    }
    if (kindCase_ == 2) {
      output.writeMessage(2, (com.google.api.expr.v1alpha1.ErrorSet) kind_);
    }
    if (kindCase_ == 3) {
      output.writeMessage(3, (com.google.api.expr.v1alpha1.UnknownSet) kind_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (kindCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.google.api.expr.v1alpha1.Value) kind_);
    }
    if (kindCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.google.api.expr.v1alpha1.ErrorSet) kind_);
    }
    if (kindCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.google.api.expr.v1alpha1.UnknownSet) kind_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.google.api.expr.v1alpha1.ExprValue)) {
      return super.equals(obj);
    }
    com.google.api.expr.v1alpha1.ExprValue other = (com.google.api.expr.v1alpha1.ExprValue) obj;

    if (!getKindCase().equals(other.getKindCase())) return false;
    switch (kindCase_) {
      case 1:
        if (!getValue()
            .equals(other.getValue())) return false;
        break;
      case 2:
        if (!getError()
            .equals(other.getError())) return false;
        break;
      case 3:
        if (!getUnknown()
            .equals(other.getUnknown())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (kindCase_) {
      case 1:
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
        break;
      case 2:
        hash = (37 * hash) + ERROR_FIELD_NUMBER;
        hash = (53 * hash) + getError().hashCode();
        break;
      case 3:
        hash = (37 * hash) + UNKNOWN_FIELD_NUMBER;
        hash = (53 * hash) + getUnknown().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.google.api.expr.v1alpha1.ExprValue parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.google.api.expr.v1alpha1.ExprValue prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The value of an evaluated expression.
   * </pre>
   *
   * Protobuf type {@code google.api.expr.v1alpha1.ExprValue}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.expr.v1alpha1.ExprValue)
      com.google.api.expr.v1alpha1.ExprValueOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.api.expr.v1alpha1.EvalProto.internal_static_google_api_expr_v1alpha1_ExprValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.api.expr.v1alpha1.EvalProto.internal_static_google_api_expr_v1alpha1_ExprValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.api.expr.v1alpha1.ExprValue.class, com.google.api.expr.v1alpha1.ExprValue.Builder.class);
    }

    // Construct using com.google.api.expr.v1alpha1.ExprValue.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (valueBuilder_ != null) {
        valueBuilder_.clear();
      }
      if (errorBuilder_ != null) {
        errorBuilder_.clear();
      }
      if (unknownBuilder_ != null) {
        unknownBuilder_.clear();
      }
      kindCase_ = 0;
      kind_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.google.api.expr.v1alpha1.EvalProto.internal_static_google_api_expr_v1alpha1_ExprValue_descriptor;
    }

    @java.lang.Override
    public com.google.api.expr.v1alpha1.ExprValue getDefaultInstanceForType() {
      return com.google.api.expr.v1alpha1.ExprValue.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.api.expr.v1alpha1.ExprValue build() {
      com.google.api.expr.v1alpha1.ExprValue result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.api.expr.v1alpha1.ExprValue buildPartial() {
      com.google.api.expr.v1alpha1.ExprValue result = new com.google.api.expr.v1alpha1.ExprValue(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.api.expr.v1alpha1.ExprValue result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(com.google.api.expr.v1alpha1.ExprValue result) {
      result.kindCase_ = kindCase_;
      result.kind_ = this.kind_;
      if (kindCase_ == 1 &&
          valueBuilder_ != null) {
        result.kind_ = valueBuilder_.build();
      }
      if (kindCase_ == 2 &&
          errorBuilder_ != null) {
        result.kind_ = errorBuilder_.build();
      }
      if (kindCase_ == 3 &&
          unknownBuilder_ != null) {
        result.kind_ = unknownBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.api.expr.v1alpha1.ExprValue) {
        return mergeFrom((com.google.api.expr.v1alpha1.ExprValue)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.api.expr.v1alpha1.ExprValue other) {
      if (other == com.google.api.expr.v1alpha1.ExprValue.getDefaultInstance()) return this;
      switch (other.getKindCase()) {
        case VALUE: {
          mergeValue(other.getValue());
          break;
        }
        case ERROR: {
          mergeError(other.getError());
          break;
        }
        case UNKNOWN: {
          mergeUnknown(other.getUnknown());
          break;
        }
        case KIND_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getValueFieldBuilder().getBuilder(),
                  extensionRegistry);
              kindCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getErrorFieldBuilder().getBuilder(),
                  extensionRegistry);
              kindCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getUnknownFieldBuilder().getBuilder(),
                  extensionRegistry);
              kindCase_ = 3;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public KindCase
        getKindCase() {
      return KindCase.forNumber(
          kindCase_);
    }

    public Builder clearKind() {
      kindCase_ = 0;
      kind_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.api.expr.v1alpha1.Value, com.google.api.expr.v1alpha1.Value.Builder, com.google.api.expr.v1alpha1.ValueOrBuilder> valueBuilder_;
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return kindCase_ == 1;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.Value getValue() {
      if (valueBuilder_ == null) {
        if (kindCase_ == 1) {
          return (com.google.api.expr.v1alpha1.Value) kind_;
        }
        return com.google.api.expr.v1alpha1.Value.getDefaultInstance();
      } else {
        if (kindCase_ == 1) {
          return valueBuilder_.getMessage();
        }
        return com.google.api.expr.v1alpha1.Value.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    public Builder setValue(com.google.api.expr.v1alpha1.Value value) {
      if (valueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;
        onChanged();
      } else {
        valueBuilder_.setMessage(value);
      }
      kindCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    public Builder setValue(
        com.google.api.expr.v1alpha1.Value.Builder builderForValue) {
      if (valueBuilder_ == null) {
        kind_ = builderForValue.build();
        onChanged();
      } else {
        valueBuilder_.setMessage(builderForValue.build());
      }
      kindCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    public Builder mergeValue(com.google.api.expr.v1alpha1.Value value) {
      if (valueBuilder_ == null) {
        if (kindCase_ == 1 &&
            kind_ != com.google.api.expr.v1alpha1.Value.getDefaultInstance()) {
          kind_ = com.google.api.expr.v1alpha1.Value.newBuilder((com.google.api.expr.v1alpha1.Value) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }
        onChanged();
      } else {
        if (kindCase_ == 1) {
          valueBuilder_.mergeFrom(value);
        } else {
          valueBuilder_.setMessage(value);
        }
      }
      kindCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    public Builder clearValue() {
      if (valueBuilder_ == null) {
        if (kindCase_ == 1) {
          kindCase_ = 0;
          kind_ = null;
          onChanged();
        }
      } else {
        if (kindCase_ == 1) {
          kindCase_ = 0;
          kind_ = null;
        }
        valueBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    public com.google.api.expr.v1alpha1.Value.Builder getValueBuilder() {
      return getValueFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.ValueOrBuilder getValueOrBuilder() {
      if ((kindCase_ == 1) && (valueBuilder_ != null)) {
        return valueBuilder_.getMessageOrBuilder();
      } else {
        if (kindCase_ == 1) {
          return (com.google.api.expr.v1alpha1.Value) kind_;
        }
        return com.google.api.expr.v1alpha1.Value.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A concrete value.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.Value value = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.api.expr.v1alpha1.Value, com.google.api.expr.v1alpha1.Value.Builder, com.google.api.expr.v1alpha1.ValueOrBuilder> 
        getValueFieldBuilder() {
      if (valueBuilder_ == null) {
        if (!(kindCase_ == 1)) {
          kind_ = com.google.api.expr.v1alpha1.Value.getDefaultInstance();
        }
        valueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.api.expr.v1alpha1.Value, com.google.api.expr.v1alpha1.Value.Builder, com.google.api.expr.v1alpha1.ValueOrBuilder>(
                (com.google.api.expr.v1alpha1.Value) kind_,
                getParentForChildren(),
                isClean());
        kind_ = null;
      }
      kindCase_ = 1;
      onChanged();
      return valueBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.api.expr.v1alpha1.ErrorSet, com.google.api.expr.v1alpha1.ErrorSet.Builder, com.google.api.expr.v1alpha1.ErrorSetOrBuilder> errorBuilder_;
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     * @return Whether the error field is set.
     */
    @java.lang.Override
    public boolean hasError() {
      return kindCase_ == 2;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     * @return The error.
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.ErrorSet getError() {
      if (errorBuilder_ == null) {
        if (kindCase_ == 2) {
          return (com.google.api.expr.v1alpha1.ErrorSet) kind_;
        }
        return com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
      } else {
        if (kindCase_ == 2) {
          return errorBuilder_.getMessage();
        }
        return com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    public Builder setError(com.google.api.expr.v1alpha1.ErrorSet value) {
      if (errorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;
        onChanged();
      } else {
        errorBuilder_.setMessage(value);
      }
      kindCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    public Builder setError(
        com.google.api.expr.v1alpha1.ErrorSet.Builder builderForValue) {
      if (errorBuilder_ == null) {
        kind_ = builderForValue.build();
        onChanged();
      } else {
        errorBuilder_.setMessage(builderForValue.build());
      }
      kindCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    public Builder mergeError(com.google.api.expr.v1alpha1.ErrorSet value) {
      if (errorBuilder_ == null) {
        if (kindCase_ == 2 &&
            kind_ != com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance()) {
          kind_ = com.google.api.expr.v1alpha1.ErrorSet.newBuilder((com.google.api.expr.v1alpha1.ErrorSet) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }
        onChanged();
      } else {
        if (kindCase_ == 2) {
          errorBuilder_.mergeFrom(value);
        } else {
          errorBuilder_.setMessage(value);
        }
      }
      kindCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    public Builder clearError() {
      if (errorBuilder_ == null) {
        if (kindCase_ == 2) {
          kindCase_ = 0;
          kind_ = null;
          onChanged();
        }
      } else {
        if (kindCase_ == 2) {
          kindCase_ = 0;
          kind_ = null;
        }
        errorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    public com.google.api.expr.v1alpha1.ErrorSet.Builder getErrorBuilder() {
      return getErrorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.ErrorSetOrBuilder getErrorOrBuilder() {
      if ((kindCase_ == 2) && (errorBuilder_ != null)) {
        return errorBuilder_.getMessageOrBuilder();
      } else {
        if (kindCase_ == 2) {
          return (com.google.api.expr.v1alpha1.ErrorSet) kind_;
        }
        return com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The set of errors in the critical path of evalution.
     * Only errors in the critical path are included. For example,
     * `(&lt;error1&gt; || true) &amp;&amp; &lt;error2&gt;` will only result in `&lt;error2&gt;`,
     * while `&lt;error1&gt; || &lt;error2&gt;` will result in both `&lt;error1&gt;` and
     * `&lt;error2&gt;`.
     * Errors cause by the presence of other errors are not included in the
     * set. For example `&lt;error1&gt;.foo`, `foo(&lt;error1&gt;)`, and `&lt;error1&gt; + 1` will
     * only result in `&lt;error1&gt;`.
     * Multiple errors *might* be included when evaluation could result
     * in different errors. For example `&lt;error1&gt; + &lt;error2&gt;` and
     * `foo(&lt;error1&gt;, &lt;error2&gt;)` may result in `&lt;error1&gt;`, `&lt;error2&gt;` or both.
     * The exact subset of errors included for this case is unspecified and
     * depends on the implementation details of the evaluator.
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.ErrorSet error = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.api.expr.v1alpha1.ErrorSet, com.google.api.expr.v1alpha1.ErrorSet.Builder, com.google.api.expr.v1alpha1.ErrorSetOrBuilder> 
        getErrorFieldBuilder() {
      if (errorBuilder_ == null) {
        if (!(kindCase_ == 2)) {
          kind_ = com.google.api.expr.v1alpha1.ErrorSet.getDefaultInstance();
        }
        errorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.api.expr.v1alpha1.ErrorSet, com.google.api.expr.v1alpha1.ErrorSet.Builder, com.google.api.expr.v1alpha1.ErrorSetOrBuilder>(
                (com.google.api.expr.v1alpha1.ErrorSet) kind_,
                getParentForChildren(),
                isClean());
        kind_ = null;
      }
      kindCase_ = 2;
      onChanged();
      return errorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.api.expr.v1alpha1.UnknownSet, com.google.api.expr.v1alpha1.UnknownSet.Builder, com.google.api.expr.v1alpha1.UnknownSetOrBuilder> unknownBuilder_;
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     * @return Whether the unknown field is set.
     */
    @java.lang.Override
    public boolean hasUnknown() {
      return kindCase_ == 3;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     * @return The unknown.
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.UnknownSet getUnknown() {
      if (unknownBuilder_ == null) {
        if (kindCase_ == 3) {
          return (com.google.api.expr.v1alpha1.UnknownSet) kind_;
        }
        return com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
      } else {
        if (kindCase_ == 3) {
          return unknownBuilder_.getMessage();
        }
        return com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    public Builder setUnknown(com.google.api.expr.v1alpha1.UnknownSet value) {
      if (unknownBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;
        onChanged();
      } else {
        unknownBuilder_.setMessage(value);
      }
      kindCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    public Builder setUnknown(
        com.google.api.expr.v1alpha1.UnknownSet.Builder builderForValue) {
      if (unknownBuilder_ == null) {
        kind_ = builderForValue.build();
        onChanged();
      } else {
        unknownBuilder_.setMessage(builderForValue.build());
      }
      kindCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    public Builder mergeUnknown(com.google.api.expr.v1alpha1.UnknownSet value) {
      if (unknownBuilder_ == null) {
        if (kindCase_ == 3 &&
            kind_ != com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance()) {
          kind_ = com.google.api.expr.v1alpha1.UnknownSet.newBuilder((com.google.api.expr.v1alpha1.UnknownSet) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }
        onChanged();
      } else {
        if (kindCase_ == 3) {
          unknownBuilder_.mergeFrom(value);
        } else {
          unknownBuilder_.setMessage(value);
        }
      }
      kindCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    public Builder clearUnknown() {
      if (unknownBuilder_ == null) {
        if (kindCase_ == 3) {
          kindCase_ = 0;
          kind_ = null;
          onChanged();
        }
      } else {
        if (kindCase_ == 3) {
          kindCase_ = 0;
          kind_ = null;
        }
        unknownBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    public com.google.api.expr.v1alpha1.UnknownSet.Builder getUnknownBuilder() {
      return getUnknownFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    @java.lang.Override
    public com.google.api.expr.v1alpha1.UnknownSetOrBuilder getUnknownOrBuilder() {
      if ((kindCase_ == 3) && (unknownBuilder_ != null)) {
        return unknownBuilder_.getMessageOrBuilder();
      } else {
        if (kindCase_ == 3) {
          return (com.google.api.expr.v1alpha1.UnknownSet) kind_;
        }
        return com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The set of unknowns in the critical path of evaluation.
     * Unknown behaves identically to Error with regards to propagation.
     * Specifically, only unknowns in the critical path are included, unknowns
     * caused by the presence of other unknowns are not included, and multiple
     * unknowns *might* be included included when evaluation could result in
     * different unknowns. For example:
     *     (&lt;unknown[1]&gt; || true) &amp;&amp; &lt;unknown[2]&gt; -&gt; &lt;unknown[2]&gt;
     *     &lt;unknown[1]&gt; || &lt;unknown[2]&gt; -&gt; &lt;unknown[1,2]&gt;
     *     &lt;unknown[1]&gt;.foo -&gt; &lt;unknown[1]&gt;
     *     foo(&lt;unknown[1]&gt;) -&gt; &lt;unknown[1]&gt;
     *     &lt;unknown[1]&gt; + &lt;unknown[2]&gt; -&gt; &lt;unknown[1]&gt; or &lt;unknown[2[&gt;
     * Unknown takes precidence over Error in cases where a `Value` can short
     * circuit the result:
     *     &lt;error&gt; || &lt;unknown&gt; -&gt; &lt;unknown&gt;
     *     &lt;error&gt; &amp;&amp; &lt;unknown&gt; -&gt; &lt;unknown&gt;
     * Errors take precidence in all other cases:
     *     &lt;unknown&gt; + &lt;error&gt; -&gt; &lt;error&gt;
     *     foo(&lt;unknown&gt;, &lt;error&gt;) -&gt; &lt;error&gt;
     * </pre>
     *
     * <code>.google.api.expr.v1alpha1.UnknownSet unknown = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.api.expr.v1alpha1.UnknownSet, com.google.api.expr.v1alpha1.UnknownSet.Builder, com.google.api.expr.v1alpha1.UnknownSetOrBuilder> 
        getUnknownFieldBuilder() {
      if (unknownBuilder_ == null) {
        if (!(kindCase_ == 3)) {
          kind_ = com.google.api.expr.v1alpha1.UnknownSet.getDefaultInstance();
        }
        unknownBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.api.expr.v1alpha1.UnknownSet, com.google.api.expr.v1alpha1.UnknownSet.Builder, com.google.api.expr.v1alpha1.UnknownSetOrBuilder>(
                (com.google.api.expr.v1alpha1.UnknownSet) kind_,
                getParentForChildren(),
                isClean());
        kind_ = null;
      }
      kindCase_ = 3;
      onChanged();
      return unknownBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:google.api.expr.v1alpha1.ExprValue)
  }

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ExprValue)
  private static final com.google.api.expr.v1alpha1.ExprValue DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.google.api.expr.v1alpha1.ExprValue();
  }

  public static com.google.api.expr.v1alpha1.ExprValue getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExprValue>
      PARSER = new com.google.protobuf.AbstractParser<ExprValue>() {
    @java.lang.Override
    public ExprValue parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ExprValue> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ExprValue> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.api.expr.v1alpha1.ExprValue getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

