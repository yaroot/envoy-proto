// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/actions/sdk/v2/interactionmodel/type/type.proto

package com.google.actions.sdk.v2.interactionmodel.type;

public interface TypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.actions.sdk.v2.interactionmodel.type.Type)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Synonyms type, which is essentially an enum.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.SynonymType synonym = 1;</code>
   * @return Whether the synonym field is set.
   */
  boolean hasSynonym();
  /**
   * <pre>
   * Synonyms type, which is essentially an enum.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.SynonymType synonym = 1;</code>
   * @return The synonym.
   */
  com.google.actions.sdk.v2.interactionmodel.type.SynonymType getSynonym();
  /**
   * <pre>
   * Synonyms type, which is essentially an enum.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.SynonymType synonym = 1;</code>
   */
  com.google.actions.sdk.v2.interactionmodel.type.SynonymTypeOrBuilder getSynonymOrBuilder();

  /**
   * <pre>
   * Regex type, allows regular expression matching.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.RegularExpressionType regular_expression = 2;</code>
   * @return Whether the regularExpression field is set.
   */
  boolean hasRegularExpression();
  /**
   * <pre>
   * Regex type, allows regular expression matching.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.RegularExpressionType regular_expression = 2;</code>
   * @return The regularExpression.
   */
  com.google.actions.sdk.v2.interactionmodel.type.RegularExpressionType getRegularExpression();
  /**
   * <pre>
   * Regex type, allows regular expression matching.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.RegularExpressionType regular_expression = 2;</code>
   */
  com.google.actions.sdk.v2.interactionmodel.type.RegularExpressionTypeOrBuilder getRegularExpressionOrBuilder();

  /**
   * <pre>
   * FreeText type.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.FreeTextType free_text = 3;</code>
   * @return Whether the freeText field is set.
   */
  boolean hasFreeText();
  /**
   * <pre>
   * FreeText type.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.FreeTextType free_text = 3;</code>
   * @return The freeText.
   */
  com.google.actions.sdk.v2.interactionmodel.type.FreeTextType getFreeText();
  /**
   * <pre>
   * FreeText type.
   * </pre>
   *
   * <code>.google.actions.sdk.v2.interactionmodel.type.FreeTextType free_text = 3;</code>
   */
  com.google.actions.sdk.v2.interactionmodel.type.FreeTextTypeOrBuilder getFreeTextOrBuilder();

  /**
   * <pre>
   * Set of exceptional words/phrases that shouldn't be matched by type.
   * Note: If word/phrase is matched by the type but listed as an exclusion it
   * won't be returned in parameter extraction result.
   * **This field is localizable.**
   * </pre>
   *
   * <code>repeated string exclusions = 4;</code>
   * @return A list containing the exclusions.
   */
  java.util.List<java.lang.String>
      getExclusionsList();
  /**
   * <pre>
   * Set of exceptional words/phrases that shouldn't be matched by type.
   * Note: If word/phrase is matched by the type but listed as an exclusion it
   * won't be returned in parameter extraction result.
   * **This field is localizable.**
   * </pre>
   *
   * <code>repeated string exclusions = 4;</code>
   * @return The count of exclusions.
   */
  int getExclusionsCount();
  /**
   * <pre>
   * Set of exceptional words/phrases that shouldn't be matched by type.
   * Note: If word/phrase is matched by the type but listed as an exclusion it
   * won't be returned in parameter extraction result.
   * **This field is localizable.**
   * </pre>
   *
   * <code>repeated string exclusions = 4;</code>
   * @param index The index of the element to return.
   * @return The exclusions at the given index.
   */
  java.lang.String getExclusions(int index);
  /**
   * <pre>
   * Set of exceptional words/phrases that shouldn't be matched by type.
   * Note: If word/phrase is matched by the type but listed as an exclusion it
   * won't be returned in parameter extraction result.
   * **This field is localizable.**
   * </pre>
   *
   * <code>repeated string exclusions = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the exclusions at the given index.
   */
  com.google.protobuf.ByteString
      getExclusionsBytes(int index);

  public com.google.actions.sdk.v2.interactionmodel.type.Type.SubTypeCase getSubTypeCase();
}
