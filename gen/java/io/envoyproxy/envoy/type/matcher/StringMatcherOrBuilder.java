// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/type/matcher/string.proto

package io.envoyproxy.envoy.type.matcher;

public interface StringMatcherOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.type.matcher.StringMatcher)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The input string must match exactly the string specified here.
   * Examples:
   * * *abc* only matches the value *abc*.
   * </pre>
   *
   * <code>string exact = 1;</code>
   * @return Whether the exact field is set.
   */
  boolean hasExact();
  /**
   * <pre>
   * The input string must match exactly the string specified here.
   * Examples:
   * * *abc* only matches the value *abc*.
   * </pre>
   *
   * <code>string exact = 1;</code>
   * @return The exact.
   */
  java.lang.String getExact();
  /**
   * <pre>
   * The input string must match exactly the string specified here.
   * Examples:
   * * *abc* only matches the value *abc*.
   * </pre>
   *
   * <code>string exact = 1;</code>
   * @return The bytes for exact.
   */
  com.google.protobuf.ByteString
      getExactBytes();

  /**
   * <pre>
   * The input string must have the prefix specified here.
   * Note: empty prefix is not allowed, please use regex instead.
   * Examples:
   * * *abc* matches the value *abc.xyz*
   * </pre>
   *
   * <code>string prefix = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the prefix field is set.
   */
  boolean hasPrefix();
  /**
   * <pre>
   * The input string must have the prefix specified here.
   * Note: empty prefix is not allowed, please use regex instead.
   * Examples:
   * * *abc* matches the value *abc.xyz*
   * </pre>
   *
   * <code>string prefix = 2 [(.validate.rules) = { ... }</code>
   * @return The prefix.
   */
  java.lang.String getPrefix();
  /**
   * <pre>
   * The input string must have the prefix specified here.
   * Note: empty prefix is not allowed, please use regex instead.
   * Examples:
   * * *abc* matches the value *abc.xyz*
   * </pre>
   *
   * <code>string prefix = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for prefix.
   */
  com.google.protobuf.ByteString
      getPrefixBytes();

  /**
   * <pre>
   * The input string must have the suffix specified here.
   * Note: empty prefix is not allowed, please use regex instead.
   * Examples:
   * * *abc* matches the value *xyz.abc*
   * </pre>
   *
   * <code>string suffix = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the suffix field is set.
   */
  boolean hasSuffix();
  /**
   * <pre>
   * The input string must have the suffix specified here.
   * Note: empty prefix is not allowed, please use regex instead.
   * Examples:
   * * *abc* matches the value *xyz.abc*
   * </pre>
   *
   * <code>string suffix = 3 [(.validate.rules) = { ... }</code>
   * @return The suffix.
   */
  java.lang.String getSuffix();
  /**
   * <pre>
   * The input string must have the suffix specified here.
   * Note: empty prefix is not allowed, please use regex instead.
   * Examples:
   * * *abc* matches the value *xyz.abc*
   * </pre>
   *
   * <code>string suffix = 3 [(.validate.rules) = { ... }</code>
   * @return The bytes for suffix.
   */
  com.google.protobuf.ByteString
      getSuffixBytes();

  /**
   * <pre>
   * The input string must match the regular expression specified here.
   * The regex grammar is defined `here
   * &lt;https://en.cppreference.com/w/cpp/regex/ecmascript&gt;`_.
   * Examples:
   * * The regex ``&#92;d{3}`` matches the value *123*
   * * The regex ``&#92;d{3}`` does not match the value *1234*
   * * The regex ``&#92;d{3}`` does not match the value *123.456*
   * .. attention::
   *   This field has been deprecated in favor of `safe_regex` as it is not safe for use with
   *   untrusted input in all cases.
   * </pre>
   *
   * <code>string regex = 4 [deprecated = true, (.validate.rules) = { ... }</code>
   * @deprecated envoy.type.matcher.StringMatcher.regex is deprecated.
   *     See envoy/type/matcher/string.proto;l=60
   * @return Whether the regex field is set.
   */
  @java.lang.Deprecated boolean hasRegex();
  /**
   * <pre>
   * The input string must match the regular expression specified here.
   * The regex grammar is defined `here
   * &lt;https://en.cppreference.com/w/cpp/regex/ecmascript&gt;`_.
   * Examples:
   * * The regex ``&#92;d{3}`` matches the value *123*
   * * The regex ``&#92;d{3}`` does not match the value *1234*
   * * The regex ``&#92;d{3}`` does not match the value *123.456*
   * .. attention::
   *   This field has been deprecated in favor of `safe_regex` as it is not safe for use with
   *   untrusted input in all cases.
   * </pre>
   *
   * <code>string regex = 4 [deprecated = true, (.validate.rules) = { ... }</code>
   * @deprecated envoy.type.matcher.StringMatcher.regex is deprecated.
   *     See envoy/type/matcher/string.proto;l=60
   * @return The regex.
   */
  @java.lang.Deprecated java.lang.String getRegex();
  /**
   * <pre>
   * The input string must match the regular expression specified here.
   * The regex grammar is defined `here
   * &lt;https://en.cppreference.com/w/cpp/regex/ecmascript&gt;`_.
   * Examples:
   * * The regex ``&#92;d{3}`` matches the value *123*
   * * The regex ``&#92;d{3}`` does not match the value *1234*
   * * The regex ``&#92;d{3}`` does not match the value *123.456*
   * .. attention::
   *   This field has been deprecated in favor of `safe_regex` as it is not safe for use with
   *   untrusted input in all cases.
   * </pre>
   *
   * <code>string regex = 4 [deprecated = true, (.validate.rules) = { ... }</code>
   * @deprecated envoy.type.matcher.StringMatcher.regex is deprecated.
   *     See envoy/type/matcher/string.proto;l=60
   * @return The bytes for regex.
   */
  @java.lang.Deprecated com.google.protobuf.ByteString
      getRegexBytes();

  /**
   * <pre>
   * The input string must match the regular expression specified here.
   * </pre>
   *
   * <code>.envoy.type.matcher.RegexMatcher safe_regex = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the safeRegex field is set.
   */
  boolean hasSafeRegex();
  /**
   * <pre>
   * The input string must match the regular expression specified here.
   * </pre>
   *
   * <code>.envoy.type.matcher.RegexMatcher safe_regex = 5 [(.validate.rules) = { ... }</code>
   * @return The safeRegex.
   */
  io.envoyproxy.envoy.type.matcher.RegexMatcher getSafeRegex();
  /**
   * <pre>
   * The input string must match the regular expression specified here.
   * </pre>
   *
   * <code>.envoy.type.matcher.RegexMatcher safe_regex = 5 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.matcher.RegexMatcherOrBuilder getSafeRegexOrBuilder();

  /**
   * <pre>
   * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
   * effect for the safe_regex match.
   * For example, the matcher *data* will match both input string *Data* and *data* if set to true.
   * </pre>
   *
   * <code>bool ignore_case = 6;</code>
   * @return The ignoreCase.
   */
  boolean getIgnoreCase();

  public io.envoyproxy.envoy.type.matcher.StringMatcher.MatchPatternCase getMatchPatternCase();
}
