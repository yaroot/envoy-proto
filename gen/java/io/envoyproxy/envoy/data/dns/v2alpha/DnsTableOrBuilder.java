// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/data/dns/v2alpha/dns_table.proto

package io.envoyproxy.envoy.data.dns.v2alpha;

public interface DnsTableOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.data.dns.v2alpha.DnsTable)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Control how many times envoy makes an attempt to forward a query to
   * an external server
   * </pre>
   *
   * <code>uint32 external_retry_count = 1;</code>
   * @return The externalRetryCount.
   */
  int getExternalRetryCount();

  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to queries
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain> 
      getVirtualDomainsList();
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to queries
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain getVirtualDomains(int index);
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to queries
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2 [(.validate.rules) = { ... }</code>
   */
  int getVirtualDomainsCount();
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to queries
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomainOrBuilder> 
      getVirtualDomainsOrBuilderList();
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to queries
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain virtual_domains = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomainOrBuilder getVirtualDomainsOrBuilder(
      int index);

  /**
   * <pre>
   * This field serves to help Envoy determine whether it can authoritatively
   * answer a query for a name matching a suffix in this list. If the query
   * name does not match a suffix in this list, Envoy will forward
   * the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher known_suffixes = 3;</code>
   */
  java.util.List<io.envoyproxy.envoy.type.matcher.StringMatcher> 
      getKnownSuffixesList();
  /**
   * <pre>
   * This field serves to help Envoy determine whether it can authoritatively
   * answer a query for a name matching a suffix in this list. If the query
   * name does not match a suffix in this list, Envoy will forward
   * the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher known_suffixes = 3;</code>
   */
  io.envoyproxy.envoy.type.matcher.StringMatcher getKnownSuffixes(int index);
  /**
   * <pre>
   * This field serves to help Envoy determine whether it can authoritatively
   * answer a query for a name matching a suffix in this list. If the query
   * name does not match a suffix in this list, Envoy will forward
   * the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher known_suffixes = 3;</code>
   */
  int getKnownSuffixesCount();
  /**
   * <pre>
   * This field serves to help Envoy determine whether it can authoritatively
   * answer a query for a name matching a suffix in this list. If the query
   * name does not match a suffix in this list, Envoy will forward
   * the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher known_suffixes = 3;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.matcher.StringMatcherOrBuilder> 
      getKnownSuffixesOrBuilderList();
  /**
   * <pre>
   * This field serves to help Envoy determine whether it can authoritatively
   * answer a query for a name matching a suffix in this list. If the query
   * name does not match a suffix in this list, Envoy will forward
   * the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher known_suffixes = 3;</code>
   */
  io.envoyproxy.envoy.type.matcher.StringMatcherOrBuilder getKnownSuffixesOrBuilder(
      int index);
}
