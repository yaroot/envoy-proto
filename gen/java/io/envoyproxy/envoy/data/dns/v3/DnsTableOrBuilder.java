// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/data/dns/v3/dns_table.proto

package io.envoyproxy.envoy.data.dns.v3;

public interface DnsTableOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.data.dns.v3.DnsTable)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Control how many times Envoy makes an attempt to forward a query to an external DNS server
   * </pre>
   *
   * <code>uint32 external_retry_count = 1 [(.validate.rules) = { ... }</code>
   * @return The externalRetryCount.
   */
  int getExternalRetryCount();

  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
   * list empty, Envoy will forward all queries to external resolvers
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2;</code>
   */
  java.util.List<io.envoyproxy.envoy.data.dns.v3.DnsTable.DnsVirtualDomain> 
      getVirtualDomainsList();
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
   * list empty, Envoy will forward all queries to external resolvers
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2;</code>
   */
  io.envoyproxy.envoy.data.dns.v3.DnsTable.DnsVirtualDomain getVirtualDomains(int index);
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
   * list empty, Envoy will forward all queries to external resolvers
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2;</code>
   */
  int getVirtualDomainsCount();
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
   * list empty, Envoy will forward all queries to external resolvers
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.data.dns.v3.DnsTable.DnsVirtualDomainOrBuilder> 
      getVirtualDomainsOrBuilderList();
  /**
   * <pre>
   * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
   * list empty, Envoy will forward all queries to external resolvers
   * </pre>
   *
   * <code>repeated .envoy.data.dns.v3.DnsTable.DnsVirtualDomain virtual_domains = 2;</code>
   */
  io.envoyproxy.envoy.data.dns.v3.DnsTable.DnsVirtualDomainOrBuilder getVirtualDomainsOrBuilder(
      int index);

  /**
   * <pre>
   * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
   * internally to use a different data structure allowing the filter to determine whether a
   * query is for known domain without the use of this field.
   * This field serves to help Envoy determine whether it can authoritatively answer a query
   * for a name matching a suffix in this list. If the query name does not match a suffix in
   * this list, Envoy will forward the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> 
      getKnownSuffixesList();
  /**
   * <pre>
   * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
   * internally to use a different data structure allowing the filter to determine whether a
   * query is for known domain without the use of this field.
   * This field serves to help Envoy determine whether it can authoritatively answer a query
   * for a name matching a suffix in this list. If the query name does not match a suffix in
   * this list, Envoy will forward the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated io.envoyproxy.envoy.type.matcher.v3.StringMatcher getKnownSuffixes(int index);
  /**
   * <pre>
   * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
   * internally to use a different data structure allowing the filter to determine whether a
   * query is for known domain without the use of this field.
   * This field serves to help Envoy determine whether it can authoritatively answer a query
   * for a name matching a suffix in this list. If the query name does not match a suffix in
   * this list, Envoy will forward the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated int getKnownSuffixesCount();
  /**
   * <pre>
   * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
   * internally to use a different data structure allowing the filter to determine whether a
   * query is for known domain without the use of this field.
   * This field serves to help Envoy determine whether it can authoritatively answer a query
   * for a name matching a suffix in this list. If the query name does not match a suffix in
   * this list, Envoy will forward the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated java.util.List<? extends io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> 
      getKnownSuffixesOrBuilderList();
  /**
   * <pre>
   * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
   * internally to use a different data structure allowing the filter to determine whether a
   * query is for known domain without the use of this field.
   * This field serves to help Envoy determine whether it can authoritatively answer a query
   * for a name matching a suffix in this list. If the query name does not match a suffix in
   * this list, Envoy will forward the query to an upstream DNS server
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher known_suffixes = 3 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getKnownSuffixesOrBuilder(
      int index);
}
