// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface UpstreamHttpProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.UpstreamHttpProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Set transport socket `SNI &lt;https://en.wikipedia.org/wiki/Server_Name_Indication&gt;`_ for new
   * upstream connections based on the downstream HTTP host/authority header or any other arbitrary
   * header when :ref:`override_auto_sni_header &lt;envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header&gt;`
   * is set, as seen by the :ref:`router filter &lt;config_http_filters_router&gt;`.
   * </pre>
   *
   * <code>bool auto_sni = 1;</code>
   * @return The autoSni.
   */
  boolean getAutoSni();

  /**
   * <pre>
   * Automatic validate upstream presented certificate for new upstream connections based on the
   * downstream HTTP host/authority header or any other arbitrary header when :ref:`override_auto_sni_header &lt;envoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header&gt;`
   * is set, as seen by the :ref:`router filter &lt;config_http_filters_router&gt;`.
   * This field is intended to be set with ``auto_sni`` field.
   * </pre>
   *
   * <code>bool auto_san_validation = 2;</code>
   * @return The autoSanValidation.
   */
  boolean getAutoSanValidation();

  /**
   * <pre>
   * An optional alternative to the host/authority header to be used for setting the SNI value.
   * It should be a valid downstream HTTP header, as seen by the
   * :ref:`router filter &lt;config_http_filters_router&gt;`.
   * If unset, host/authority header will be used for populating the SNI. If the specified header
   * is not found or the value is empty, host/authority header will be used instead.
   * This field is intended to be set with ``auto_sni`` and/or ``auto_san_validation`` fields.
   * If none of these fields are set then setting this would be a no-op.
   * </pre>
   *
   * <code>string override_auto_sni_header = 3 [(.validate.rules) = { ... }</code>
   * @return The overrideAutoSniHeader.
   */
  java.lang.String getOverrideAutoSniHeader();
  /**
   * <pre>
   * An optional alternative to the host/authority header to be used for setting the SNI value.
   * It should be a valid downstream HTTP header, as seen by the
   * :ref:`router filter &lt;config_http_filters_router&gt;`.
   * If unset, host/authority header will be used for populating the SNI. If the specified header
   * is not found or the value is empty, host/authority header will be used instead.
   * This field is intended to be set with ``auto_sni`` and/or ``auto_san_validation`` fields.
   * If none of these fields are set then setting this would be a no-op.
   * </pre>
   *
   * <code>string override_auto_sni_header = 3 [(.validate.rules) = { ... }</code>
   * @return The bytes for overrideAutoSniHeader.
   */
  com.google.protobuf.ByteString
      getOverrideAutoSniHeaderBytes();
}
