// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/config_source.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * <pre>
 * Configuration for :ref:`listeners &lt;config_listeners&gt;`, :ref:`clusters
 * &lt;config_cluster_manager&gt;`, :ref:`routes
 * &lt;envoy_v3_api_msg_config.route.v3.RouteConfiguration&gt;`, :ref:`endpoints
 * &lt;arch_overview_service_discovery&gt;` etc. may either be sourced from the
 * filesystem or from an xDS API source. Filesystem configs are watched with
 * inotify for updates.
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.config.core.v3.ConfigSource}
 */
public final class ConfigSource extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.ConfigSource)
    ConfigSourceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConfigSource.newBuilder() to construct.
  private ConfigSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConfigSource() {
    authorities_ = java.util.Collections.emptyList();
    resourceApiVersion_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConfigSource();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_ConfigSource_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_ConfigSource_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.ConfigSource.class, io.envoyproxy.envoy.config.core.v3.ConfigSource.Builder.class);
  }

  private int configSourceSpecifierCase_ = 0;
  private java.lang.Object configSourceSpecifier_;
  public enum ConfigSourceSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    @java.lang.Deprecated PATH(1),
    PATH_CONFIG_SOURCE(8),
    API_CONFIG_SOURCE(2),
    ADS(3),
    SELF(5),
    CONFIGSOURCESPECIFIER_NOT_SET(0);
    private final int value;
    private ConfigSourceSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConfigSourceSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static ConfigSourceSpecifierCase forNumber(int value) {
      switch (value) {
        case 1: return PATH;
        case 8: return PATH_CONFIG_SOURCE;
        case 2: return API_CONFIG_SOURCE;
        case 3: return ADS;
        case 5: return SELF;
        case 0: return CONFIGSOURCESPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ConfigSourceSpecifierCase
  getConfigSourceSpecifierCase() {
    return ConfigSourceSpecifierCase.forNumber(
        configSourceSpecifierCase_);
  }

  public static final int AUTHORITIES_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private java.util.List<com.github.xds.core.v3.Authority> authorities_;
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  @java.lang.Override
  public java.util.List<com.github.xds.core.v3.Authority> getAuthoritiesList() {
    return authorities_;
  }
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.xds.core.v3.AuthorityOrBuilder> 
      getAuthoritiesOrBuilderList() {
    return authorities_;
  }
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  @java.lang.Override
  public int getAuthoritiesCount() {
    return authorities_.size();
  }
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  @java.lang.Override
  public com.github.xds.core.v3.Authority getAuthorities(int index) {
    return authorities_.get(index);
  }
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  @java.lang.Override
  public com.github.xds.core.v3.AuthorityOrBuilder getAuthoritiesOrBuilder(
      int index) {
    return authorities_.get(index);
  }

  public static final int PATH_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Deprecated in favor of ``path_config_source``. Use that field instead.
   * </pre>
   *
   * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
   *     See envoy/config/core/v3/config_source.proto;l=214
   * @return Whether the path field is set.
   */
  @java.lang.Deprecated public boolean hasPath() {
    return configSourceSpecifierCase_ == 1;
  }
  /**
   * <pre>
   * Deprecated in favor of ``path_config_source``. Use that field instead.
   * </pre>
   *
   * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
   *     See envoy/config/core/v3/config_source.proto;l=214
   * @return The path.
   */
  @java.lang.Deprecated public java.lang.String getPath() {
    java.lang.Object ref = "";
    if (configSourceSpecifierCase_ == 1) {
      ref = configSourceSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (configSourceSpecifierCase_ == 1) {
        configSourceSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Deprecated in favor of ``path_config_source``. Use that field instead.
   * </pre>
   *
   * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
   *     See envoy/config/core/v3/config_source.proto;l=214
   * @return The bytes for path.
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = "";
    if (configSourceSpecifierCase_ == 1) {
      ref = configSourceSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (configSourceSpecifierCase_ == 1) {
        configSourceSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PATH_CONFIG_SOURCE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Local filesystem path configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
   * @return Whether the pathConfigSource field is set.
   */
  @java.lang.Override
  public boolean hasPathConfigSource() {
    return configSourceSpecifierCase_ == 8;
  }
  /**
   * <pre>
   * Local filesystem path configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
   * @return The pathConfigSource.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.PathConfigSource getPathConfigSource() {
    if (configSourceSpecifierCase_ == 8) {
       return (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
  }
  /**
   * <pre>
   * Local filesystem path configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.PathConfigSourceOrBuilder getPathConfigSourceOrBuilder() {
    if (configSourceSpecifierCase_ == 8) {
       return (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
  }

  public static final int API_CONFIG_SOURCE_FIELD_NUMBER = 2;
  /**
   * <pre>
   * API configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
   * @return Whether the apiConfigSource field is set.
   */
  @java.lang.Override
  public boolean hasApiConfigSource() {
    return configSourceSpecifierCase_ == 2;
  }
  /**
   * <pre>
   * API configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
   * @return The apiConfigSource.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.ApiConfigSource getApiConfigSource() {
    if (configSourceSpecifierCase_ == 2) {
       return (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance();
  }
  /**
   * <pre>
   * API configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder getApiConfigSourceOrBuilder() {
    if (configSourceSpecifierCase_ == 2) {
       return (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance();
  }

  public static final int ADS_FIELD_NUMBER = 3;
  /**
   * <pre>
   * When set, ADS will be used to fetch resources. The ADS API configuration
   * source in the bootstrap configuration is used.
   * </pre>
   *
   * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
   * @return Whether the ads field is set.
   */
  @java.lang.Override
  public boolean hasAds() {
    return configSourceSpecifierCase_ == 3;
  }
  /**
   * <pre>
   * When set, ADS will be used to fetch resources. The ADS API configuration
   * source in the bootstrap configuration is used.
   * </pre>
   *
   * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
   * @return The ads.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource getAds() {
    if (configSourceSpecifierCase_ == 3) {
       return (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance();
  }
  /**
   * <pre>
   * When set, ADS will be used to fetch resources. The ADS API configuration
   * source in the bootstrap configuration is used.
   * </pre>
   *
   * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.AggregatedConfigSourceOrBuilder getAdsOrBuilder() {
    if (configSourceSpecifierCase_ == 3) {
       return (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance();
  }

  public static final int SELF_FIELD_NUMBER = 5;
  /**
   * <pre>
   * [#not-implemented-hide:]
   * When set, the client will access the resources from the same server it got the
   * ConfigSource from, although not necessarily from the same stream. This is similar to the
   * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
   * different stream to the same server. As a result, this field can be used for things
   * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
   * LDS to RDS on the same server without requiring the management server to know its name
   * or required credentials.
   * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
   * this field can implicitly mean to use the same stream in the case where the ConfigSource
   * is provided via ADS and the specified data can also be obtained via ADS.]
   * </pre>
   *
   * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
   * @return Whether the self field is set.
   */
  @java.lang.Override
  public boolean hasSelf() {
    return configSourceSpecifierCase_ == 5;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * When set, the client will access the resources from the same server it got the
   * ConfigSource from, although not necessarily from the same stream. This is similar to the
   * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
   * different stream to the same server. As a result, this field can be used for things
   * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
   * LDS to RDS on the same server without requiring the management server to know its name
   * or required credentials.
   * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
   * this field can implicitly mean to use the same stream in the case where the ConfigSource
   * is provided via ADS and the specified data can also be obtained via ADS.]
   * </pre>
   *
   * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
   * @return The self.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SelfConfigSource getSelf() {
    if (configSourceSpecifierCase_ == 5) {
       return (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance();
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * When set, the client will access the resources from the same server it got the
   * ConfigSource from, although not necessarily from the same stream. This is similar to the
   * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
   * different stream to the same server. As a result, this field can be used for things
   * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
   * LDS to RDS on the same server without requiring the management server to know its name
   * or required credentials.
   * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
   * this field can implicitly mean to use the same stream in the case where the ConfigSource
   * is provided via ADS and the specified data can also be obtained via ADS.]
   * </pre>
   *
   * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SelfConfigSourceOrBuilder getSelfOrBuilder() {
    if (configSourceSpecifierCase_ == 5) {
       return (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance();
  }

  public static final int INITIAL_FETCH_TIMEOUT_FIELD_NUMBER = 4;
  private com.google.protobuf.Duration initialFetchTimeout_;
  /**
   * <pre>
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
   * @return Whether the initialFetchTimeout field is set.
   */
  @java.lang.Override
  public boolean hasInitialFetchTimeout() {
    return initialFetchTimeout_ != null;
  }
  /**
   * <pre>
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
   * @return The initialFetchTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getInitialFetchTimeout() {
    return initialFetchTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : initialFetchTimeout_;
  }
  /**
   * <pre>
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getInitialFetchTimeoutOrBuilder() {
    return initialFetchTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : initialFetchTimeout_;
  }

  public static final int RESOURCE_API_VERSION_FIELD_NUMBER = 6;
  private int resourceApiVersion_ = 0;
  /**
   * <pre>
   * API version for xDS resources. This implies the type URLs that the client
   * will request for resources and the resource type that the client will in
   * turn expect to be delivered.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for resourceApiVersion.
   */
  @java.lang.Override public int getResourceApiVersionValue() {
    return resourceApiVersion_;
  }
  /**
   * <pre>
   * API version for xDS resources. This implies the type URLs that the client
   * will request for resources and the resource type that the client will in
   * turn expect to be delivered.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
   * @return The resourceApiVersion.
   */
  @java.lang.Override public io.envoyproxy.envoy.config.core.v3.ApiVersion getResourceApiVersion() {
    io.envoyproxy.envoy.config.core.v3.ApiVersion result = io.envoyproxy.envoy.config.core.v3.ApiVersion.forNumber(resourceApiVersion_);
    return result == null ? io.envoyproxy.envoy.config.core.v3.ApiVersion.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (configSourceSpecifierCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, configSourceSpecifier_);
    }
    if (configSourceSpecifierCase_ == 2) {
      output.writeMessage(2, (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_);
    }
    if (configSourceSpecifierCase_ == 3) {
      output.writeMessage(3, (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_);
    }
    if (initialFetchTimeout_ != null) {
      output.writeMessage(4, getInitialFetchTimeout());
    }
    if (configSourceSpecifierCase_ == 5) {
      output.writeMessage(5, (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_);
    }
    if (resourceApiVersion_ != io.envoyproxy.envoy.config.core.v3.ApiVersion.AUTO.getNumber()) {
      output.writeEnum(6, resourceApiVersion_);
    }
    for (int i = 0; i < authorities_.size(); i++) {
      output.writeMessage(7, authorities_.get(i));
    }
    if (configSourceSpecifierCase_ == 8) {
      output.writeMessage(8, (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (configSourceSpecifierCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, configSourceSpecifier_);
    }
    if (configSourceSpecifierCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_);
    }
    if (configSourceSpecifierCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_);
    }
    if (initialFetchTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getInitialFetchTimeout());
    }
    if (configSourceSpecifierCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_);
    }
    if (resourceApiVersion_ != io.envoyproxy.envoy.config.core.v3.ApiVersion.AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, resourceApiVersion_);
    }
    for (int i = 0; i < authorities_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, authorities_.get(i));
    }
    if (configSourceSpecifierCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.ConfigSource)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.ConfigSource other = (io.envoyproxy.envoy.config.core.v3.ConfigSource) obj;

    if (!getAuthoritiesList()
        .equals(other.getAuthoritiesList())) return false;
    if (hasInitialFetchTimeout() != other.hasInitialFetchTimeout()) return false;
    if (hasInitialFetchTimeout()) {
      if (!getInitialFetchTimeout()
          .equals(other.getInitialFetchTimeout())) return false;
    }
    if (resourceApiVersion_ != other.resourceApiVersion_) return false;
    if (!getConfigSourceSpecifierCase().equals(other.getConfigSourceSpecifierCase())) return false;
    switch (configSourceSpecifierCase_) {
      case 1:
        if (!getPath()
            .equals(other.getPath())) return false;
        break;
      case 8:
        if (!getPathConfigSource()
            .equals(other.getPathConfigSource())) return false;
        break;
      case 2:
        if (!getApiConfigSource()
            .equals(other.getApiConfigSource())) return false;
        break;
      case 3:
        if (!getAds()
            .equals(other.getAds())) return false;
        break;
      case 5:
        if (!getSelf()
            .equals(other.getSelf())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAuthoritiesCount() > 0) {
      hash = (37 * hash) + AUTHORITIES_FIELD_NUMBER;
      hash = (53 * hash) + getAuthoritiesList().hashCode();
    }
    if (hasInitialFetchTimeout()) {
      hash = (37 * hash) + INITIAL_FETCH_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getInitialFetchTimeout().hashCode();
    }
    hash = (37 * hash) + RESOURCE_API_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + resourceApiVersion_;
    switch (configSourceSpecifierCase_) {
      case 1:
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPath().hashCode();
        break;
      case 8:
        hash = (37 * hash) + PATH_CONFIG_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getPathConfigSource().hashCode();
        break;
      case 2:
        hash = (37 * hash) + API_CONFIG_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getApiConfigSource().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ADS_FIELD_NUMBER;
        hash = (53 * hash) + getAds().hashCode();
        break;
      case 5:
        hash = (37 * hash) + SELF_FIELD_NUMBER;
        hash = (53 * hash) + getSelf().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.ConfigSource parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.ConfigSource prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for :ref:`listeners &lt;config_listeners&gt;`, :ref:`clusters
   * &lt;config_cluster_manager&gt;`, :ref:`routes
   * &lt;envoy_v3_api_msg_config.route.v3.RouteConfiguration&gt;`, :ref:`endpoints
   * &lt;arch_overview_service_discovery&gt;` etc. may either be sourced from the
   * filesystem or from an xDS API source. Filesystem configs are watched with
   * inotify for updates.
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.ConfigSource}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.ConfigSource)
      io.envoyproxy.envoy.config.core.v3.ConfigSourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_ConfigSource_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_ConfigSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.ConfigSource.class, io.envoyproxy.envoy.config.core.v3.ConfigSource.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.ConfigSource.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (authoritiesBuilder_ == null) {
        authorities_ = java.util.Collections.emptyList();
      } else {
        authorities_ = null;
        authoritiesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (pathConfigSourceBuilder_ != null) {
        pathConfigSourceBuilder_.clear();
      }
      if (apiConfigSourceBuilder_ != null) {
        apiConfigSourceBuilder_.clear();
      }
      if (adsBuilder_ != null) {
        adsBuilder_.clear();
      }
      if (selfBuilder_ != null) {
        selfBuilder_.clear();
      }
      initialFetchTimeout_ = null;
      if (initialFetchTimeoutBuilder_ != null) {
        initialFetchTimeoutBuilder_.dispose();
        initialFetchTimeoutBuilder_ = null;
      }
      resourceApiVersion_ = 0;
      configSourceSpecifierCase_ = 0;
      configSourceSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_ConfigSource_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.ConfigSource getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSource.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.ConfigSource build() {
      io.envoyproxy.envoy.config.core.v3.ConfigSource result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.ConfigSource buildPartial() {
      io.envoyproxy.envoy.config.core.v3.ConfigSource result = new io.envoyproxy.envoy.config.core.v3.ConfigSource(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.config.core.v3.ConfigSource result) {
      if (authoritiesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          authorities_ = java.util.Collections.unmodifiableList(authorities_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.authorities_ = authorities_;
      } else {
        result.authorities_ = authoritiesBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.config.core.v3.ConfigSource result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.initialFetchTimeout_ = initialFetchTimeoutBuilder_ == null
            ? initialFetchTimeout_
            : initialFetchTimeoutBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.resourceApiVersion_ = resourceApiVersion_;
      }
    }

    private void buildPartialOneofs(io.envoyproxy.envoy.config.core.v3.ConfigSource result) {
      result.configSourceSpecifierCase_ = configSourceSpecifierCase_;
      result.configSourceSpecifier_ = this.configSourceSpecifier_;
      if (configSourceSpecifierCase_ == 8 &&
          pathConfigSourceBuilder_ != null) {
        result.configSourceSpecifier_ = pathConfigSourceBuilder_.build();
      }
      if (configSourceSpecifierCase_ == 2 &&
          apiConfigSourceBuilder_ != null) {
        result.configSourceSpecifier_ = apiConfigSourceBuilder_.build();
      }
      if (configSourceSpecifierCase_ == 3 &&
          adsBuilder_ != null) {
        result.configSourceSpecifier_ = adsBuilder_.build();
      }
      if (configSourceSpecifierCase_ == 5 &&
          selfBuilder_ != null) {
        result.configSourceSpecifier_ = selfBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.ConfigSource) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.ConfigSource)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.ConfigSource other) {
      if (other == io.envoyproxy.envoy.config.core.v3.ConfigSource.getDefaultInstance()) return this;
      if (authoritiesBuilder_ == null) {
        if (!other.authorities_.isEmpty()) {
          if (authorities_.isEmpty()) {
            authorities_ = other.authorities_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAuthoritiesIsMutable();
            authorities_.addAll(other.authorities_);
          }
          onChanged();
        }
      } else {
        if (!other.authorities_.isEmpty()) {
          if (authoritiesBuilder_.isEmpty()) {
            authoritiesBuilder_.dispose();
            authoritiesBuilder_ = null;
            authorities_ = other.authorities_;
            bitField0_ = (bitField0_ & ~0x00000001);
            authoritiesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAuthoritiesFieldBuilder() : null;
          } else {
            authoritiesBuilder_.addAllMessages(other.authorities_);
          }
        }
      }
      if (other.hasInitialFetchTimeout()) {
        mergeInitialFetchTimeout(other.getInitialFetchTimeout());
      }
      if (other.resourceApiVersion_ != 0) {
        setResourceApiVersionValue(other.getResourceApiVersionValue());
      }
      switch (other.getConfigSourceSpecifierCase()) {
        case PATH: {
          configSourceSpecifierCase_ = 1;
          configSourceSpecifier_ = other.configSourceSpecifier_;
          onChanged();
          break;
        }
        case PATH_CONFIG_SOURCE: {
          mergePathConfigSource(other.getPathConfigSource());
          break;
        }
        case API_CONFIG_SOURCE: {
          mergeApiConfigSource(other.getApiConfigSource());
          break;
        }
        case ADS: {
          mergeAds(other.getAds());
          break;
        }
        case SELF: {
          mergeSelf(other.getSelf());
          break;
        }
        case CONFIGSOURCESPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              configSourceSpecifierCase_ = 1;
              configSourceSpecifier_ = s;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getApiConfigSourceFieldBuilder().getBuilder(),
                  extensionRegistry);
              configSourceSpecifierCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getAdsFieldBuilder().getBuilder(),
                  extensionRegistry);
              configSourceSpecifierCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getInitialFetchTimeoutFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getSelfFieldBuilder().getBuilder(),
                  extensionRegistry);
              configSourceSpecifierCase_ = 5;
              break;
            } // case 42
            case 48: {
              resourceApiVersion_ = input.readEnum();
              bitField0_ |= 0x00000080;
              break;
            } // case 48
            case 58: {
              com.github.xds.core.v3.Authority m =
                  input.readMessage(
                      com.github.xds.core.v3.Authority.parser(),
                      extensionRegistry);
              if (authoritiesBuilder_ == null) {
                ensureAuthoritiesIsMutable();
                authorities_.add(m);
              } else {
                authoritiesBuilder_.addMessage(m);
              }
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getPathConfigSourceFieldBuilder().getBuilder(),
                  extensionRegistry);
              configSourceSpecifierCase_ = 8;
              break;
            } // case 66
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int configSourceSpecifierCase_ = 0;
    private java.lang.Object configSourceSpecifier_;
    public ConfigSourceSpecifierCase
        getConfigSourceSpecifierCase() {
      return ConfigSourceSpecifierCase.forNumber(
          configSourceSpecifierCase_);
    }

    public Builder clearConfigSourceSpecifier() {
      configSourceSpecifierCase_ = 0;
      configSourceSpecifier_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.util.List<com.github.xds.core.v3.Authority> authorities_ =
      java.util.Collections.emptyList();
    private void ensureAuthoritiesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        authorities_ = new java.util.ArrayList<com.github.xds.core.v3.Authority>(authorities_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.xds.core.v3.Authority, com.github.xds.core.v3.Authority.Builder, com.github.xds.core.v3.AuthorityOrBuilder> authoritiesBuilder_;

    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public java.util.List<com.github.xds.core.v3.Authority> getAuthoritiesList() {
      if (authoritiesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(authorities_);
      } else {
        return authoritiesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public int getAuthoritiesCount() {
      if (authoritiesBuilder_ == null) {
        return authorities_.size();
      } else {
        return authoritiesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public com.github.xds.core.v3.Authority getAuthorities(int index) {
      if (authoritiesBuilder_ == null) {
        return authorities_.get(index);
      } else {
        return authoritiesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder setAuthorities(
        int index, com.github.xds.core.v3.Authority value) {
      if (authoritiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAuthoritiesIsMutable();
        authorities_.set(index, value);
        onChanged();
      } else {
        authoritiesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder setAuthorities(
        int index, com.github.xds.core.v3.Authority.Builder builderForValue) {
      if (authoritiesBuilder_ == null) {
        ensureAuthoritiesIsMutable();
        authorities_.set(index, builderForValue.build());
        onChanged();
      } else {
        authoritiesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder addAuthorities(com.github.xds.core.v3.Authority value) {
      if (authoritiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAuthoritiesIsMutable();
        authorities_.add(value);
        onChanged();
      } else {
        authoritiesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder addAuthorities(
        int index, com.github.xds.core.v3.Authority value) {
      if (authoritiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAuthoritiesIsMutable();
        authorities_.add(index, value);
        onChanged();
      } else {
        authoritiesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder addAuthorities(
        com.github.xds.core.v3.Authority.Builder builderForValue) {
      if (authoritiesBuilder_ == null) {
        ensureAuthoritiesIsMutable();
        authorities_.add(builderForValue.build());
        onChanged();
      } else {
        authoritiesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder addAuthorities(
        int index, com.github.xds.core.v3.Authority.Builder builderForValue) {
      if (authoritiesBuilder_ == null) {
        ensureAuthoritiesIsMutable();
        authorities_.add(index, builderForValue.build());
        onChanged();
      } else {
        authoritiesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder addAllAuthorities(
        java.lang.Iterable<? extends com.github.xds.core.v3.Authority> values) {
      if (authoritiesBuilder_ == null) {
        ensureAuthoritiesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, authorities_);
        onChanged();
      } else {
        authoritiesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder clearAuthorities() {
      if (authoritiesBuilder_ == null) {
        authorities_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        authoritiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public Builder removeAuthorities(int index) {
      if (authoritiesBuilder_ == null) {
        ensureAuthoritiesIsMutable();
        authorities_.remove(index);
        onChanged();
      } else {
        authoritiesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public com.github.xds.core.v3.Authority.Builder getAuthoritiesBuilder(
        int index) {
      return getAuthoritiesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public com.github.xds.core.v3.AuthorityOrBuilder getAuthoritiesOrBuilder(
        int index) {
      if (authoritiesBuilder_ == null) {
        return authorities_.get(index);  } else {
        return authoritiesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public java.util.List<? extends com.github.xds.core.v3.AuthorityOrBuilder> 
         getAuthoritiesOrBuilderList() {
      if (authoritiesBuilder_ != null) {
        return authoritiesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(authorities_);
      }
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public com.github.xds.core.v3.Authority.Builder addAuthoritiesBuilder() {
      return getAuthoritiesFieldBuilder().addBuilder(
          com.github.xds.core.v3.Authority.getDefaultInstance());
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public com.github.xds.core.v3.Authority.Builder addAuthoritiesBuilder(
        int index) {
      return getAuthoritiesFieldBuilder().addBuilder(
          index, com.github.xds.core.v3.Authority.getDefaultInstance());
    }
    /**
     * <pre>
     * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
     * is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the
     * association between authority name and configuration source.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
     */
    public java.util.List<com.github.xds.core.v3.Authority.Builder> 
         getAuthoritiesBuilderList() {
      return getAuthoritiesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.github.xds.core.v3.Authority, com.github.xds.core.v3.Authority.Builder, com.github.xds.core.v3.AuthorityOrBuilder> 
        getAuthoritiesFieldBuilder() {
      if (authoritiesBuilder_ == null) {
        authoritiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.github.xds.core.v3.Authority, com.github.xds.core.v3.Authority.Builder, com.github.xds.core.v3.AuthorityOrBuilder>(
                authorities_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        authorities_ = null;
      }
      return authoritiesBuilder_;
    }

    /**
     * <pre>
     * Deprecated in favor of ``path_config_source``. Use that field instead.
     * </pre>
     *
     * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
     *     See envoy/config/core/v3/config_source.proto;l=214
     * @return Whether the path field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasPath() {
      return configSourceSpecifierCase_ == 1;
    }
    /**
     * <pre>
     * Deprecated in favor of ``path_config_source``. Use that field instead.
     * </pre>
     *
     * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
     *     See envoy/config/core/v3/config_source.proto;l=214
     * @return The path.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.lang.String getPath() {
      java.lang.Object ref = "";
      if (configSourceSpecifierCase_ == 1) {
        ref = configSourceSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (configSourceSpecifierCase_ == 1) {
          configSourceSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Deprecated in favor of ``path_config_source``. Use that field instead.
     * </pre>
     *
     * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
     *     See envoy/config/core/v3/config_source.proto;l=214
     * @return The bytes for path.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = "";
      if (configSourceSpecifierCase_ == 1) {
        ref = configSourceSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (configSourceSpecifierCase_ == 1) {
          configSourceSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Deprecated in favor of ``path_config_source``. Use that field instead.
     * </pre>
     *
     * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
     *     See envoy/config/core/v3/config_source.proto;l=214
     * @param value The path to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setPath(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      configSourceSpecifierCase_ = 1;
      configSourceSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Deprecated in favor of ``path_config_source``. Use that field instead.
     * </pre>
     *
     * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
     *     See envoy/config/core/v3/config_source.proto;l=214
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearPath() {
      if (configSourceSpecifierCase_ == 1) {
        configSourceSpecifierCase_ = 0;
        configSourceSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Deprecated in favor of ``path_config_source``. Use that field instead.
     * </pre>
     *
     * <code>string path = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.config.core.v3.ConfigSource.path is deprecated.
     *     See envoy/config/core/v3/config_source.proto;l=214
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      configSourceSpecifierCase_ = 1;
      configSourceSpecifier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.PathConfigSource, io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.PathConfigSourceOrBuilder> pathConfigSourceBuilder_;
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     * @return Whether the pathConfigSource field is set.
     */
    @java.lang.Override
    public boolean hasPathConfigSource() {
      return configSourceSpecifierCase_ == 8;
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     * @return The pathConfigSource.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.PathConfigSource getPathConfigSource() {
      if (pathConfigSourceBuilder_ == null) {
        if (configSourceSpecifierCase_ == 8) {
          return (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
      } else {
        if (configSourceSpecifierCase_ == 8) {
          return pathConfigSourceBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    public Builder setPathConfigSource(io.envoyproxy.envoy.config.core.v3.PathConfigSource value) {
      if (pathConfigSourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        configSourceSpecifier_ = value;
        onChanged();
      } else {
        pathConfigSourceBuilder_.setMessage(value);
      }
      configSourceSpecifierCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    public Builder setPathConfigSource(
        io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder builderForValue) {
      if (pathConfigSourceBuilder_ == null) {
        configSourceSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        pathConfigSourceBuilder_.setMessage(builderForValue.build());
      }
      configSourceSpecifierCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    public Builder mergePathConfigSource(io.envoyproxy.envoy.config.core.v3.PathConfigSource value) {
      if (pathConfigSourceBuilder_ == null) {
        if (configSourceSpecifierCase_ == 8 &&
            configSourceSpecifier_ != io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance()) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.PathConfigSource.newBuilder((io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          configSourceSpecifier_ = value;
        }
        onChanged();
      } else {
        if (configSourceSpecifierCase_ == 8) {
          pathConfigSourceBuilder_.mergeFrom(value);
        } else {
          pathConfigSourceBuilder_.setMessage(value);
        }
      }
      configSourceSpecifierCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    public Builder clearPathConfigSource() {
      if (pathConfigSourceBuilder_ == null) {
        if (configSourceSpecifierCase_ == 8) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
          onChanged();
        }
      } else {
        if (configSourceSpecifierCase_ == 8) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
        }
        pathConfigSourceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder getPathConfigSourceBuilder() {
      return getPathConfigSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.PathConfigSourceOrBuilder getPathConfigSourceOrBuilder() {
      if ((configSourceSpecifierCase_ == 8) && (pathConfigSourceBuilder_ != null)) {
        return pathConfigSourceBuilder_.getMessageOrBuilder();
      } else {
        if (configSourceSpecifierCase_ == 8) {
          return (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Local filesystem path configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.PathConfigSource path_config_source = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.PathConfigSource, io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.PathConfigSourceOrBuilder> 
        getPathConfigSourceFieldBuilder() {
      if (pathConfigSourceBuilder_ == null) {
        if (!(configSourceSpecifierCase_ == 8)) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
        }
        pathConfigSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.PathConfigSource, io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.PathConfigSourceOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.PathConfigSource) configSourceSpecifier_,
                getParentForChildren(),
                isClean());
        configSourceSpecifier_ = null;
      }
      configSourceSpecifierCase_ = 8;
      onChanged();
      return pathConfigSourceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.ApiConfigSource, io.envoyproxy.envoy.config.core.v3.ApiConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder> apiConfigSourceBuilder_;
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     * @return Whether the apiConfigSource field is set.
     */
    @java.lang.Override
    public boolean hasApiConfigSource() {
      return configSourceSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     * @return The apiConfigSource.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.ApiConfigSource getApiConfigSource() {
      if (apiConfigSourceBuilder_ == null) {
        if (configSourceSpecifierCase_ == 2) {
          return (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance();
      } else {
        if (configSourceSpecifierCase_ == 2) {
          return apiConfigSourceBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    public Builder setApiConfigSource(io.envoyproxy.envoy.config.core.v3.ApiConfigSource value) {
      if (apiConfigSourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        configSourceSpecifier_ = value;
        onChanged();
      } else {
        apiConfigSourceBuilder_.setMessage(value);
      }
      configSourceSpecifierCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    public Builder setApiConfigSource(
        io.envoyproxy.envoy.config.core.v3.ApiConfigSource.Builder builderForValue) {
      if (apiConfigSourceBuilder_ == null) {
        configSourceSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        apiConfigSourceBuilder_.setMessage(builderForValue.build());
      }
      configSourceSpecifierCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    public Builder mergeApiConfigSource(io.envoyproxy.envoy.config.core.v3.ApiConfigSource value) {
      if (apiConfigSourceBuilder_ == null) {
        if (configSourceSpecifierCase_ == 2 &&
            configSourceSpecifier_ != io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance()) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.ApiConfigSource.newBuilder((io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          configSourceSpecifier_ = value;
        }
        onChanged();
      } else {
        if (configSourceSpecifierCase_ == 2) {
          apiConfigSourceBuilder_.mergeFrom(value);
        } else {
          apiConfigSourceBuilder_.setMessage(value);
        }
      }
      configSourceSpecifierCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    public Builder clearApiConfigSource() {
      if (apiConfigSourceBuilder_ == null) {
        if (configSourceSpecifierCase_ == 2) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
          onChanged();
        }
      } else {
        if (configSourceSpecifierCase_ == 2) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
        }
        apiConfigSourceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.ApiConfigSource.Builder getApiConfigSourceBuilder() {
      return getApiConfigSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder getApiConfigSourceOrBuilder() {
      if ((configSourceSpecifierCase_ == 2) && (apiConfigSourceBuilder_ != null)) {
        return apiConfigSourceBuilder_.getMessageOrBuilder();
      } else {
        if (configSourceSpecifierCase_ == 2) {
          return (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * API configuration source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.ApiConfigSource, io.envoyproxy.envoy.config.core.v3.ApiConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder> 
        getApiConfigSourceFieldBuilder() {
      if (apiConfigSourceBuilder_ == null) {
        if (!(configSourceSpecifierCase_ == 2)) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.ApiConfigSource.getDefaultInstance();
        }
        apiConfigSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.ApiConfigSource, io.envoyproxy.envoy.config.core.v3.ApiConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.ApiConfigSource) configSourceSpecifier_,
                getParentForChildren(),
                isClean());
        configSourceSpecifier_ = null;
      }
      configSourceSpecifierCase_ = 2;
      onChanged();
      return apiConfigSourceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource, io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.AggregatedConfigSourceOrBuilder> adsBuilder_;
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     * @return Whether the ads field is set.
     */
    @java.lang.Override
    public boolean hasAds() {
      return configSourceSpecifierCase_ == 3;
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     * @return The ads.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource getAds() {
      if (adsBuilder_ == null) {
        if (configSourceSpecifierCase_ == 3) {
          return (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance();
      } else {
        if (configSourceSpecifierCase_ == 3) {
          return adsBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    public Builder setAds(io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource value) {
      if (adsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        configSourceSpecifier_ = value;
        onChanged();
      } else {
        adsBuilder_.setMessage(value);
      }
      configSourceSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    public Builder setAds(
        io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.Builder builderForValue) {
      if (adsBuilder_ == null) {
        configSourceSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        adsBuilder_.setMessage(builderForValue.build());
      }
      configSourceSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    public Builder mergeAds(io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource value) {
      if (adsBuilder_ == null) {
        if (configSourceSpecifierCase_ == 3 &&
            configSourceSpecifier_ != io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance()) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.newBuilder((io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          configSourceSpecifier_ = value;
        }
        onChanged();
      } else {
        if (configSourceSpecifierCase_ == 3) {
          adsBuilder_.mergeFrom(value);
        } else {
          adsBuilder_.setMessage(value);
        }
      }
      configSourceSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    public Builder clearAds() {
      if (adsBuilder_ == null) {
        if (configSourceSpecifierCase_ == 3) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
          onChanged();
        }
      } else {
        if (configSourceSpecifierCase_ == 3) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
        }
        adsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.Builder getAdsBuilder() {
      return getAdsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.AggregatedConfigSourceOrBuilder getAdsOrBuilder() {
      if ((configSourceSpecifierCase_ == 3) && (adsBuilder_ != null)) {
        return adsBuilder_.getMessageOrBuilder();
      } else {
        if (configSourceSpecifierCase_ == 3) {
          return (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * When set, ADS will be used to fetch resources. The ADS API configuration
     * source in the bootstrap configuration is used.
     * </pre>
     *
     * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource, io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.AggregatedConfigSourceOrBuilder> 
        getAdsFieldBuilder() {
      if (adsBuilder_ == null) {
        if (!(configSourceSpecifierCase_ == 3)) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.getDefaultInstance();
        }
        adsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource, io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.AggregatedConfigSourceOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource) configSourceSpecifier_,
                getParentForChildren(),
                isClean());
        configSourceSpecifier_ = null;
      }
      configSourceSpecifierCase_ = 3;
      onChanged();
      return adsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.SelfConfigSource, io.envoyproxy.envoy.config.core.v3.SelfConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.SelfConfigSourceOrBuilder> selfBuilder_;
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     * @return Whether the self field is set.
     */
    @java.lang.Override
    public boolean hasSelf() {
      return configSourceSpecifierCase_ == 5;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     * @return The self.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.SelfConfigSource getSelf() {
      if (selfBuilder_ == null) {
        if (configSourceSpecifierCase_ == 5) {
          return (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance();
      } else {
        if (configSourceSpecifierCase_ == 5) {
          return selfBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    public Builder setSelf(io.envoyproxy.envoy.config.core.v3.SelfConfigSource value) {
      if (selfBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        configSourceSpecifier_ = value;
        onChanged();
      } else {
        selfBuilder_.setMessage(value);
      }
      configSourceSpecifierCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    public Builder setSelf(
        io.envoyproxy.envoy.config.core.v3.SelfConfigSource.Builder builderForValue) {
      if (selfBuilder_ == null) {
        configSourceSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        selfBuilder_.setMessage(builderForValue.build());
      }
      configSourceSpecifierCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    public Builder mergeSelf(io.envoyproxy.envoy.config.core.v3.SelfConfigSource value) {
      if (selfBuilder_ == null) {
        if (configSourceSpecifierCase_ == 5 &&
            configSourceSpecifier_ != io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance()) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.SelfConfigSource.newBuilder((io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          configSourceSpecifier_ = value;
        }
        onChanged();
      } else {
        if (configSourceSpecifierCase_ == 5) {
          selfBuilder_.mergeFrom(value);
        } else {
          selfBuilder_.setMessage(value);
        }
      }
      configSourceSpecifierCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    public Builder clearSelf() {
      if (selfBuilder_ == null) {
        if (configSourceSpecifierCase_ == 5) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
          onChanged();
        }
      } else {
        if (configSourceSpecifierCase_ == 5) {
          configSourceSpecifierCase_ = 0;
          configSourceSpecifier_ = null;
        }
        selfBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SelfConfigSource.Builder getSelfBuilder() {
      return getSelfFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.SelfConfigSourceOrBuilder getSelfOrBuilder() {
      if ((configSourceSpecifierCase_ == 5) && (selfBuilder_ != null)) {
        return selfBuilder_.getMessageOrBuilder();
      } else {
        if (configSourceSpecifierCase_ == 5) {
          return (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * When set, the client will access the resources from the same server it got the
     * ConfigSource from, although not necessarily from the same stream. This is similar to the
     * :ref:`ads&lt;envoy_v3_api_field.ConfigSource.ads&gt;` field, except that the client may use a
     * different stream to the same server. As a result, this field can be used for things
     * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
     * LDS to RDS on the same server without requiring the management server to know its name
     * or required credentials.
     * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
     * this field can implicitly mean to use the same stream in the case where the ConfigSource
     * is provided via ADS and the specified data can also be obtained via ADS.]
     * </pre>
     *
     * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.SelfConfigSource, io.envoyproxy.envoy.config.core.v3.SelfConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.SelfConfigSourceOrBuilder> 
        getSelfFieldBuilder() {
      if (selfBuilder_ == null) {
        if (!(configSourceSpecifierCase_ == 5)) {
          configSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.SelfConfigSource.getDefaultInstance();
        }
        selfBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.SelfConfigSource, io.envoyproxy.envoy.config.core.v3.SelfConfigSource.Builder, io.envoyproxy.envoy.config.core.v3.SelfConfigSourceOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.SelfConfigSource) configSourceSpecifier_,
                getParentForChildren(),
                isClean());
        configSourceSpecifier_ = null;
      }
      configSourceSpecifierCase_ = 5;
      onChanged();
      return selfBuilder_;
    }

    private com.google.protobuf.Duration initialFetchTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> initialFetchTimeoutBuilder_;
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     * @return Whether the initialFetchTimeout field is set.
     */
    public boolean hasInitialFetchTimeout() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     * @return The initialFetchTimeout.
     */
    public com.google.protobuf.Duration getInitialFetchTimeout() {
      if (initialFetchTimeoutBuilder_ == null) {
        return initialFetchTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : initialFetchTimeout_;
      } else {
        return initialFetchTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    public Builder setInitialFetchTimeout(com.google.protobuf.Duration value) {
      if (initialFetchTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initialFetchTimeout_ = value;
      } else {
        initialFetchTimeoutBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    public Builder setInitialFetchTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (initialFetchTimeoutBuilder_ == null) {
        initialFetchTimeout_ = builderForValue.build();
      } else {
        initialFetchTimeoutBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    public Builder mergeInitialFetchTimeout(com.google.protobuf.Duration value) {
      if (initialFetchTimeoutBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          initialFetchTimeout_ != null &&
          initialFetchTimeout_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getInitialFetchTimeoutBuilder().mergeFrom(value);
        } else {
          initialFetchTimeout_ = value;
        }
      } else {
        initialFetchTimeoutBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    public Builder clearInitialFetchTimeout() {
      bitField0_ = (bitField0_ & ~0x00000040);
      initialFetchTimeout_ = null;
      if (initialFetchTimeoutBuilder_ != null) {
        initialFetchTimeoutBuilder_.dispose();
        initialFetchTimeoutBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    public com.google.protobuf.Duration.Builder getInitialFetchTimeoutBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getInitialFetchTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    public com.google.protobuf.DurationOrBuilder getInitialFetchTimeoutOrBuilder() {
      if (initialFetchTimeoutBuilder_ != null) {
        return initialFetchTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return initialFetchTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : initialFetchTimeout_;
      }
    }
    /**
     * <pre>
     * When this timeout is specified, Envoy will wait no longer than the specified time for first
     * config response on this xDS subscription during the :ref:`initialization process
     * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
     * initialization phase, even if the first config is not delivered yet. The timer is activated
     * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
     * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
     * timeout applies). The default is 15s.
     * </pre>
     *
     * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getInitialFetchTimeoutFieldBuilder() {
      if (initialFetchTimeoutBuilder_ == null) {
        initialFetchTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getInitialFetchTimeout(),
                getParentForChildren(),
                isClean());
        initialFetchTimeout_ = null;
      }
      return initialFetchTimeoutBuilder_;
    }

    private int resourceApiVersion_ = 0;
    /**
     * <pre>
     * API version for xDS resources. This implies the type URLs that the client
     * will request for resources and the resource type that the client will in
     * turn expect to be delivered.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for resourceApiVersion.
     */
    @java.lang.Override public int getResourceApiVersionValue() {
      return resourceApiVersion_;
    }
    /**
     * <pre>
     * API version for xDS resources. This implies the type URLs that the client
     * will request for resources and the resource type that the client will in
     * turn expect to be delivered.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for resourceApiVersion to set.
     * @return This builder for chaining.
     */
    public Builder setResourceApiVersionValue(int value) {
      resourceApiVersion_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * API version for xDS resources. This implies the type URLs that the client
     * will request for resources and the resource type that the client will in
     * turn expect to be delivered.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
     * @return The resourceApiVersion.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.ApiVersion getResourceApiVersion() {
      io.envoyproxy.envoy.config.core.v3.ApiVersion result = io.envoyproxy.envoy.config.core.v3.ApiVersion.forNumber(resourceApiVersion_);
      return result == null ? io.envoyproxy.envoy.config.core.v3.ApiVersion.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * API version for xDS resources. This implies the type URLs that the client
     * will request for resources and the resource type that the client will in
     * turn expect to be delivered.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
     * @param value The resourceApiVersion to set.
     * @return This builder for chaining.
     */
    public Builder setResourceApiVersion(io.envoyproxy.envoy.config.core.v3.ApiVersion value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000080;
      resourceApiVersion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * API version for xDS resources. This implies the type URLs that the client
     * will request for resources and the resource type that the client will in
     * turn expect to be delivered.
     * </pre>
     *
     * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearResourceApiVersion() {
      bitField0_ = (bitField0_ & ~0x00000080);
      resourceApiVersion_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.ConfigSource)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.ConfigSource)
  private static final io.envoyproxy.envoy.config.core.v3.ConfigSource DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.ConfigSource();
  }

  public static io.envoyproxy.envoy.config.core.v3.ConfigSource getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConfigSource>
      PARSER = new com.google.protobuf.AbstractParser<ConfigSource>() {
    @java.lang.Override
    public ConfigSource parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConfigSource> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConfigSource> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.ConfigSource getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

