// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * <pre>
 * A message which allows using HTTP/3.
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.config.core.v3.Http3ProtocolOptions}
 */
public final class Http3ProtocolOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.Http3ProtocolOptions)
    Http3ProtocolOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Http3ProtocolOptions.newBuilder() to construct.
  private Http3ProtocolOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Http3ProtocolOptions() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Http3ProtocolOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Http3ProtocolOptions(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder subBuilder = null;
            if (quicProtocolOptions_ != null) {
              subBuilder = quicProtocolOptions_.toBuilder();
            }
            quicProtocolOptions_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(quicProtocolOptions_);
              quicProtocolOptions_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.google.protobuf.BoolValue.Builder subBuilder = null;
            if (overrideStreamErrorOnInvalidHttpMessage_ != null) {
              subBuilder = overrideStreamErrorOnInvalidHttpMessage_.toBuilder();
            }
            overrideStreamErrorOnInvalidHttpMessage_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(overrideStreamErrorOnInvalidHttpMessage_);
              overrideStreamErrorOnInvalidHttpMessage_ = subBuilder.buildPartial();
            }

            break;
          }
          case 40: {

            allowExtendedConnect_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http3ProtocolOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http3ProtocolOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.class, io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.Builder.class);
  }

  public static final int QUIC_PROTOCOL_OPTIONS_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions quicProtocolOptions_;
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   * @return Whether the quicProtocolOptions field is set.
   */
  @java.lang.Override
  public boolean hasQuicProtocolOptions() {
    return quicProtocolOptions_ != null;
  }
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   * @return The quicProtocolOptions.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getQuicProtocolOptions() {
    return quicProtocolOptions_ == null ? io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance() : quicProtocolOptions_;
  }
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder getQuicProtocolOptionsOrBuilder() {
    return getQuicProtocolOptions();
  }

  public static final int OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER = 2;
  private com.google.protobuf.BoolValue overrideStreamErrorOnInvalidHttpMessage_;
  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
   * @return Whether the overrideStreamErrorOnInvalidHttpMessage field is set.
   */
  @java.lang.Override
  public boolean hasOverrideStreamErrorOnInvalidHttpMessage() {
    return overrideStreamErrorOnInvalidHttpMessage_ != null;
  }
  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
   * @return The overrideStreamErrorOnInvalidHttpMessage.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getOverrideStreamErrorOnInvalidHttpMessage() {
    return overrideStreamErrorOnInvalidHttpMessage_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
  }
  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getOverrideStreamErrorOnInvalidHttpMessageOrBuilder() {
    return getOverrideStreamErrorOnInvalidHttpMessage();
  }

  public static final int ALLOW_EXTENDED_CONNECT_FIELD_NUMBER = 5;
  private boolean allowExtendedConnect_;
  /**
   * <pre>
   * Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
   * the header mechanisms from the `HTTP/2 extended connect RFC
   * &lt;https://datatracker.ietf.org/doc/html/rfc8441&gt;`_
   * and settings `proposed for HTTP/3
   * &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/&gt;`_
   * Note that HTTP/3 CONNECT is not yet an RFC.
   * </pre>
   *
   * <code>bool allow_extended_connect = 5 [(.xds.annotations.v3.field_status) = { ... }</code>
   * @return The allowExtendedConnect.
   */
  @java.lang.Override
  public boolean getAllowExtendedConnect() {
    return allowExtendedConnect_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (quicProtocolOptions_ != null) {
      output.writeMessage(1, getQuicProtocolOptions());
    }
    if (overrideStreamErrorOnInvalidHttpMessage_ != null) {
      output.writeMessage(2, getOverrideStreamErrorOnInvalidHttpMessage());
    }
    if (allowExtendedConnect_ != false) {
      output.writeBool(5, allowExtendedConnect_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (quicProtocolOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getQuicProtocolOptions());
    }
    if (overrideStreamErrorOnInvalidHttpMessage_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getOverrideStreamErrorOnInvalidHttpMessage());
    }
    if (allowExtendedConnect_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, allowExtendedConnect_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions other = (io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions) obj;

    if (hasQuicProtocolOptions() != other.hasQuicProtocolOptions()) return false;
    if (hasQuicProtocolOptions()) {
      if (!getQuicProtocolOptions()
          .equals(other.getQuicProtocolOptions())) return false;
    }
    if (hasOverrideStreamErrorOnInvalidHttpMessage() != other.hasOverrideStreamErrorOnInvalidHttpMessage()) return false;
    if (hasOverrideStreamErrorOnInvalidHttpMessage()) {
      if (!getOverrideStreamErrorOnInvalidHttpMessage()
          .equals(other.getOverrideStreamErrorOnInvalidHttpMessage())) return false;
    }
    if (getAllowExtendedConnect()
        != other.getAllowExtendedConnect()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasQuicProtocolOptions()) {
      hash = (37 * hash) + QUIC_PROTOCOL_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getQuicProtocolOptions().hashCode();
    }
    if (hasOverrideStreamErrorOnInvalidHttpMessage()) {
      hash = (37 * hash) + OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getOverrideStreamErrorOnInvalidHttpMessage().hashCode();
    }
    hash = (37 * hash) + ALLOW_EXTENDED_CONNECT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowExtendedConnect());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A message which allows using HTTP/3.
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.Http3ProtocolOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.Http3ProtocolOptions)
      io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http3ProtocolOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http3ProtocolOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.class, io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptions_ = null;
      } else {
        quicProtocolOptions_ = null;
        quicProtocolOptionsBuilder_ = null;
      }
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        overrideStreamErrorOnInvalidHttpMessage_ = null;
      } else {
        overrideStreamErrorOnInvalidHttpMessage_ = null;
        overrideStreamErrorOnInvalidHttpMessageBuilder_ = null;
      }
      allowExtendedConnect_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http3ProtocolOptions_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions build() {
      io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions buildPartial() {
      io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions result = new io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions(this);
      if (quicProtocolOptionsBuilder_ == null) {
        result.quicProtocolOptions_ = quicProtocolOptions_;
      } else {
        result.quicProtocolOptions_ = quicProtocolOptionsBuilder_.build();
      }
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        result.overrideStreamErrorOnInvalidHttpMessage_ = overrideStreamErrorOnInvalidHttpMessage_;
      } else {
        result.overrideStreamErrorOnInvalidHttpMessage_ = overrideStreamErrorOnInvalidHttpMessageBuilder_.build();
      }
      result.allowExtendedConnect_ = allowExtendedConnect_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions other) {
      if (other == io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions.getDefaultInstance()) return this;
      if (other.hasQuicProtocolOptions()) {
        mergeQuicProtocolOptions(other.getQuicProtocolOptions());
      }
      if (other.hasOverrideStreamErrorOnInvalidHttpMessage()) {
        mergeOverrideStreamErrorOnInvalidHttpMessage(other.getOverrideStreamErrorOnInvalidHttpMessage());
      }
      if (other.getAllowExtendedConnect() != false) {
        setAllowExtendedConnect(other.getAllowExtendedConnect());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions quicProtocolOptions_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder> quicProtocolOptionsBuilder_;
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     * @return Whether the quicProtocolOptions field is set.
     */
    public boolean hasQuicProtocolOptions() {
      return quicProtocolOptionsBuilder_ != null || quicProtocolOptions_ != null;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     * @return The quicProtocolOptions.
     */
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getQuicProtocolOptions() {
      if (quicProtocolOptionsBuilder_ == null) {
        return quicProtocolOptions_ == null ? io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance() : quicProtocolOptions_;
      } else {
        return quicProtocolOptionsBuilder_.getMessage();
      }
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder setQuicProtocolOptions(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions value) {
      if (quicProtocolOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        quicProtocolOptions_ = value;
        onChanged();
      } else {
        quicProtocolOptionsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder setQuicProtocolOptions(
        io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder builderForValue) {
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptions_ = builderForValue.build();
        onChanged();
      } else {
        quicProtocolOptionsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder mergeQuicProtocolOptions(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions value) {
      if (quicProtocolOptionsBuilder_ == null) {
        if (quicProtocolOptions_ != null) {
          quicProtocolOptions_ =
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.newBuilder(quicProtocolOptions_).mergeFrom(value).buildPartial();
        } else {
          quicProtocolOptions_ = value;
        }
        onChanged();
      } else {
        quicProtocolOptionsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder clearQuicProtocolOptions() {
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptions_ = null;
        onChanged();
      } else {
        quicProtocolOptions_ = null;
        quicProtocolOptionsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder getQuicProtocolOptionsBuilder() {
      
      onChanged();
      return getQuicProtocolOptionsFieldBuilder().getBuilder();
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder getQuicProtocolOptionsOrBuilder() {
      if (quicProtocolOptionsBuilder_ != null) {
        return quicProtocolOptionsBuilder_.getMessageOrBuilder();
      } else {
        return quicProtocolOptions_ == null ?
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance() : quicProtocolOptions_;
      }
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder> 
        getQuicProtocolOptionsFieldBuilder() {
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder>(
                getQuicProtocolOptions(),
                getParentForChildren(),
                isClean());
        quicProtocolOptions_ = null;
      }
      return quicProtocolOptionsBuilder_;
    }

    private com.google.protobuf.BoolValue overrideStreamErrorOnInvalidHttpMessage_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> overrideStreamErrorOnInvalidHttpMessageBuilder_;
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     * @return Whether the overrideStreamErrorOnInvalidHttpMessage field is set.
     */
    public boolean hasOverrideStreamErrorOnInvalidHttpMessage() {
      return overrideStreamErrorOnInvalidHttpMessageBuilder_ != null || overrideStreamErrorOnInvalidHttpMessage_ != null;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     * @return The overrideStreamErrorOnInvalidHttpMessage.
     */
    public com.google.protobuf.BoolValue getOverrideStreamErrorOnInvalidHttpMessage() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        return overrideStreamErrorOnInvalidHttpMessage_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
      } else {
        return overrideStreamErrorOnInvalidHttpMessageBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    public Builder setOverrideStreamErrorOnInvalidHttpMessage(com.google.protobuf.BoolValue value) {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        overrideStreamErrorOnInvalidHttpMessage_ = value;
        onChanged();
      } else {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    public Builder setOverrideStreamErrorOnInvalidHttpMessage(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        overrideStreamErrorOnInvalidHttpMessage_ = builderForValue.build();
        onChanged();
      } else {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    public Builder mergeOverrideStreamErrorOnInvalidHttpMessage(com.google.protobuf.BoolValue value) {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        if (overrideStreamErrorOnInvalidHttpMessage_ != null) {
          overrideStreamErrorOnInvalidHttpMessage_ =
            com.google.protobuf.BoolValue.newBuilder(overrideStreamErrorOnInvalidHttpMessage_).mergeFrom(value).buildPartial();
        } else {
          overrideStreamErrorOnInvalidHttpMessage_ = value;
        }
        onChanged();
      } else {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    public Builder clearOverrideStreamErrorOnInvalidHttpMessage() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        overrideStreamErrorOnInvalidHttpMessage_ = null;
        onChanged();
      } else {
        overrideStreamErrorOnInvalidHttpMessage_ = null;
        overrideStreamErrorOnInvalidHttpMessageBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    public com.google.protobuf.BoolValue.Builder getOverrideStreamErrorOnInvalidHttpMessageBuilder() {
      
      onChanged();
      return getOverrideStreamErrorOnInvalidHttpMessageFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getOverrideStreamErrorOnInvalidHttpMessageOrBuilder() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ != null) {
        return overrideStreamErrorOnInvalidHttpMessageBuilder_.getMessageOrBuilder();
      } else {
        return overrideStreamErrorOnInvalidHttpMessage_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
      }
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getOverrideStreamErrorOnInvalidHttpMessageFieldBuilder() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        overrideStreamErrorOnInvalidHttpMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getOverrideStreamErrorOnInvalidHttpMessage(),
                getParentForChildren(),
                isClean());
        overrideStreamErrorOnInvalidHttpMessage_ = null;
      }
      return overrideStreamErrorOnInvalidHttpMessageBuilder_;
    }

    private boolean allowExtendedConnect_ ;
    /**
     * <pre>
     * Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
     * the header mechanisms from the `HTTP/2 extended connect RFC
     * &lt;https://datatracker.ietf.org/doc/html/rfc8441&gt;`_
     * and settings `proposed for HTTP/3
     * &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/&gt;`_
     * Note that HTTP/3 CONNECT is not yet an RFC.
     * </pre>
     *
     * <code>bool allow_extended_connect = 5 [(.xds.annotations.v3.field_status) = { ... }</code>
     * @return The allowExtendedConnect.
     */
    @java.lang.Override
    public boolean getAllowExtendedConnect() {
      return allowExtendedConnect_;
    }
    /**
     * <pre>
     * Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
     * the header mechanisms from the `HTTP/2 extended connect RFC
     * &lt;https://datatracker.ietf.org/doc/html/rfc8441&gt;`_
     * and settings `proposed for HTTP/3
     * &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/&gt;`_
     * Note that HTTP/3 CONNECT is not yet an RFC.
     * </pre>
     *
     * <code>bool allow_extended_connect = 5 [(.xds.annotations.v3.field_status) = { ... }</code>
     * @param value The allowExtendedConnect to set.
     * @return This builder for chaining.
     */
    public Builder setAllowExtendedConnect(boolean value) {
      
      allowExtendedConnect_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
     * the header mechanisms from the `HTTP/2 extended connect RFC
     * &lt;https://datatracker.ietf.org/doc/html/rfc8441&gt;`_
     * and settings `proposed for HTTP/3
     * &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/&gt;`_
     * Note that HTTP/3 CONNECT is not yet an RFC.
     * </pre>
     *
     * <code>bool allow_extended_connect = 5 [(.xds.annotations.v3.field_status) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowExtendedConnect() {
      
      allowExtendedConnect_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.Http3ProtocolOptions)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.Http3ProtocolOptions)
  private static final io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions();
  }

  public static io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Http3ProtocolOptions>
      PARSER = new com.google.protobuf.AbstractParser<Http3ProtocolOptions>() {
    @java.lang.Override
    public Http3ProtocolOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Http3ProtocolOptions(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Http3ProtocolOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Http3ProtocolOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.Http3ProtocolOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

