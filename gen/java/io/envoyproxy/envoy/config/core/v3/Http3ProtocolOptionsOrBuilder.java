// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface Http3ProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.Http3ProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   * @return Whether the quicProtocolOptions field is set.
   */
  boolean hasQuicProtocolOptions();
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   * @return The quicProtocolOptions.
   */
  io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getQuicProtocolOptions();
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder getQuicProtocolOptionsOrBuilder();

  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
   * @return Whether the overrideStreamErrorOnInvalidHttpMessage field is set.
   */
  boolean hasOverrideStreamErrorOnInvalidHttpMessage();
  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
   * @return The overrideStreamErrorOnInvalidHttpMessage.
   */
  com.google.protobuf.BoolValue getOverrideStreamErrorOnInvalidHttpMessage();
  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/3 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 2;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getOverrideStreamErrorOnInvalidHttpMessageOrBuilder();

  /**
   * <pre>
   * Allows proxying Websocket and other upgrades over HTTP/3 CONNECT using
   * the header mechanisms from the `HTTP/2 extended connect RFC
   * &lt;https://datatracker.ietf.org/doc/html/rfc8441&gt;`_
   * and settings `proposed for HTTP/3
   * &lt;https://datatracker.ietf.org/doc/draft-ietf-httpbis-h3-websockets/&gt;`_
   * Note that HTTP/3 CONNECT is not yet an RFC.
   * </pre>
   *
   * <code>bool allow_extended_connect = 5 [(.xds.annotations.v3.field_status) = { ... }</code>
   * @return The allowExtendedConnect.
   */
  boolean getAllowExtendedConnect();
}
