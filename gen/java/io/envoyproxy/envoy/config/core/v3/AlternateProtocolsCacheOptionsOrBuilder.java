// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface AlternateProtocolsCacheOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.AlternateProtocolsCacheOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the cache. Multiple named caches allow independent alternate protocols cache
   * configurations to operate within a single Envoy process using different configurations. All
   * alternate protocols cache options with the same name *must* be equal in all fields when
   * referenced from different configuration components. Configuration will fail to load if this is
   * not the case.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the cache. Multiple named caches allow independent alternate protocols cache
   * configurations to operate within a single Envoy process using different configurations. All
   * alternate protocols cache options with the same name *must* be equal in all fields when
   * referenced from different configuration components. Configuration will fail to load if this is
   * not the case.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The maximum number of entries that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum entries in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_entries = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the maxEntries field is set.
   */
  boolean hasMaxEntries();
  /**
   * <pre>
   * The maximum number of entries that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum entries in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_entries = 2 [(.validate.rules) = { ... }</code>
   * @return The maxEntries.
   */
  com.google.protobuf.UInt32Value getMaxEntries();
  /**
   * <pre>
   * The maximum number of entries that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum entries in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_entries = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxEntriesOrBuilder();

  /**
   * <pre>
   * Allows configuring a persistent
   * :ref:`key value store &lt;envoy_v3_api_msg_config.common.key_value.v3.KeyValueStoreConfig&gt;` to flush
   * alternate protocols entries to disk.
   * This function is currently only supported if concurrency is 1
   * Cached entries will take precedence over pre-populated entries below.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig key_value_store_config = 3;</code>
   * @return Whether the keyValueStoreConfig field is set.
   */
  boolean hasKeyValueStoreConfig();
  /**
   * <pre>
   * Allows configuring a persistent
   * :ref:`key value store &lt;envoy_v3_api_msg_config.common.key_value.v3.KeyValueStoreConfig&gt;` to flush
   * alternate protocols entries to disk.
   * This function is currently only supported if concurrency is 1
   * Cached entries will take precedence over pre-populated entries below.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig key_value_store_config = 3;</code>
   * @return The keyValueStoreConfig.
   */
  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getKeyValueStoreConfig();
  /**
   * <pre>
   * Allows configuring a persistent
   * :ref:`key value store &lt;envoy_v3_api_msg_config.common.key_value.v3.KeyValueStoreConfig&gt;` to flush
   * alternate protocols entries to disk.
   * This function is currently only supported if concurrency is 1
   * Cached entries will take precedence over pre-populated entries below.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig key_value_store_config = 3;</code>
   */
  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getKeyValueStoreConfigOrBuilder();

  /**
   * <pre>
   * Allows pre-populating the cache with entries, as described above.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry> 
      getPrepopulatedEntriesList();
  /**
   * <pre>
   * Allows pre-populating the cache with entries, as described above.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry getPrepopulatedEntries(int index);
  /**
   * <pre>
   * Allows pre-populating the cache with entries, as described above.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4;</code>
   */
  int getPrepopulatedEntriesCount();
  /**
   * <pre>
   * Allows pre-populating the cache with entries, as described above.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntryOrBuilder> 
      getPrepopulatedEntriesOrBuilderList();
  /**
   * <pre>
   * Allows pre-populating the cache with entries, as described above.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntry prepopulated_entries = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.AlternateProtocolsCacheOptions.AlternateProtocolsCacheEntryOrBuilder getPrepopulatedEntriesOrBuilder(
      int index);

  /**
   * <pre>
   * Optional list of hostnames suffixes for which Alt-Svc entries can be shared. For example, if
   * this list contained the value ``.c.example.com``, then an Alt-Svc entry for ``foo.c.example.com``
   * could be shared with ``bar.c.example.com`` but would not be shared with ``baz.example.com``. On
   * the other hand, if the list contained the value ``.example.com`` then all three hosts could share
   * Alt-Svc entries. Each entry must start with ``.``.  If a hostname matches multiple suffixes, the
   * first listed suffix will be used.
   * Since lookup in this list is O(n), it is recommended that the number of suffixes be limited.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string canonical_suffixes = 5;</code>
   * @return A list containing the canonicalSuffixes.
   */
  java.util.List<java.lang.String>
      getCanonicalSuffixesList();
  /**
   * <pre>
   * Optional list of hostnames suffixes for which Alt-Svc entries can be shared. For example, if
   * this list contained the value ``.c.example.com``, then an Alt-Svc entry for ``foo.c.example.com``
   * could be shared with ``bar.c.example.com`` but would not be shared with ``baz.example.com``. On
   * the other hand, if the list contained the value ``.example.com`` then all three hosts could share
   * Alt-Svc entries. Each entry must start with ``.``.  If a hostname matches multiple suffixes, the
   * first listed suffix will be used.
   * Since lookup in this list is O(n), it is recommended that the number of suffixes be limited.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string canonical_suffixes = 5;</code>
   * @return The count of canonicalSuffixes.
   */
  int getCanonicalSuffixesCount();
  /**
   * <pre>
   * Optional list of hostnames suffixes for which Alt-Svc entries can be shared. For example, if
   * this list contained the value ``.c.example.com``, then an Alt-Svc entry for ``foo.c.example.com``
   * could be shared with ``bar.c.example.com`` but would not be shared with ``baz.example.com``. On
   * the other hand, if the list contained the value ``.example.com`` then all three hosts could share
   * Alt-Svc entries. Each entry must start with ``.``.  If a hostname matches multiple suffixes, the
   * first listed suffix will be used.
   * Since lookup in this list is O(n), it is recommended that the number of suffixes be limited.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string canonical_suffixes = 5;</code>
   * @param index The index of the element to return.
   * @return The canonicalSuffixes at the given index.
   */
  java.lang.String getCanonicalSuffixes(int index);
  /**
   * <pre>
   * Optional list of hostnames suffixes for which Alt-Svc entries can be shared. For example, if
   * this list contained the value ``.c.example.com``, then an Alt-Svc entry for ``foo.c.example.com``
   * could be shared with ``bar.c.example.com`` but would not be shared with ``baz.example.com``. On
   * the other hand, if the list contained the value ``.example.com`` then all three hosts could share
   * Alt-Svc entries. Each entry must start with ``.``.  If a hostname matches multiple suffixes, the
   * first listed suffix will be used.
   * Since lookup in this list is O(n), it is recommended that the number of suffixes be limited.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string canonical_suffixes = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the canonicalSuffixes at the given index.
   */
  com.google.protobuf.ByteString
      getCanonicalSuffixesBytes(int index);
}
