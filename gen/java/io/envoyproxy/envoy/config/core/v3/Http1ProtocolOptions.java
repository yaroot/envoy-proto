// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * <pre>
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.config.core.v3.Http1ProtocolOptions}
 */
public final class Http1ProtocolOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.Http1ProtocolOptions)
    Http1ProtocolOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Http1ProtocolOptions.newBuilder() to construct.
  private Http1ProtocolOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Http1ProtocolOptions() {
    defaultHostForHttp10_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Http1ProtocolOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.class, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.Builder.class);
  }

  public interface HeaderKeyFormatOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Formats the header by proper casing words: the first character and any character following
     * a special character will be capitalized if it's an alpha character. For example,
     * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
     * Note that while this results in most headers following conventional casing, certain headers
     * are not covered. For example, the "TE" header will be formatted as "Te".
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
     * @return Whether the properCaseWords field is set.
     */
    boolean hasProperCaseWords();
    /**
     * <pre>
     * Formats the header by proper casing words: the first character and any character following
     * a special character will be capitalized if it's an alpha character. For example,
     * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
     * Note that while this results in most headers following conventional casing, certain headers
     * are not covered. For example, the "TE" header will be formatted as "Te".
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
     * @return The properCaseWords.
     */
    io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords getProperCaseWords();
    /**
     * <pre>
     * Formats the header by proper casing words: the first character and any character following
     * a special character will be capitalized if it's an alpha character. For example,
     * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
     * Note that while this results in most headers following conventional casing, certain headers
     * are not covered. For example, the "TE" header will be formatted as "Te".
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
     */
    io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder getProperCaseWordsOrBuilder();

    /**
     * <pre>
     * Configuration for stateful formatter extensions that allow using received headers to
     * affect the output of encoding headers. E.g., preserving case during proxying.
     * [#extension-category: envoy.http.stateful_header_formatters]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
     * @return Whether the statefulFormatter field is set.
     */
    boolean hasStatefulFormatter();
    /**
     * <pre>
     * Configuration for stateful formatter extensions that allow using received headers to
     * affect the output of encoding headers. E.g., preserving case during proxying.
     * [#extension-category: envoy.http.stateful_header_formatters]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
     * @return The statefulFormatter.
     */
    io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getStatefulFormatter();
    /**
     * <pre>
     * Configuration for stateful formatter extensions that allow using received headers to
     * affect the output of encoding headers. E.g., preserving case during proxying.
     * [#extension-category: envoy.http.stateful_header_formatters]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
     */
    io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getStatefulFormatterOrBuilder();

    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.HeaderFormatCase getHeaderFormatCase();
  }
  /**
   * <pre>
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat}
   */
  public static final class HeaderKeyFormat extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)
      HeaderKeyFormatOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HeaderKeyFormat.newBuilder() to construct.
    private HeaderKeyFormat(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HeaderKeyFormat() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HeaderKeyFormat();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.class, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder.class);
    }

    public interface ProperCaseWordsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)
        com.google.protobuf.MessageOrBuilder {
    }
    /**
     * Protobuf type {@code envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords}
     */
    public static final class ProperCaseWords extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)
        ProperCaseWordsOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ProperCaseWords.newBuilder() to construct.
      private ProperCaseWords(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ProperCaseWords() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ProperCaseWords();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.class, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder.class);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)) {
          return super.equals(obj);
        }
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords other = (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) obj;

        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)
          io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.class, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder.class);
        }

        // Construct using io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.newBuilder()
        private Builder() {

        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);

        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords_descriptor;
        }

        @java.lang.Override
        public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords getDefaultInstanceForType() {
          return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
        }

        @java.lang.Override
        public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords build() {
          io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords buildPartial() {
          io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords result = new io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords(this);
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) {
            return mergeFrom((io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords other) {
          if (other == io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)
      }

      // @@protoc_insertion_point(class_scope:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords)
      private static final io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords();
      }

      public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ProperCaseWords>
          PARSER = new com.google.protobuf.AbstractParser<ProperCaseWords>() {
        @java.lang.Override
        public ProperCaseWords parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<ProperCaseWords> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ProperCaseWords> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int headerFormatCase_ = 0;
    private java.lang.Object headerFormat_;
    public enum HeaderFormatCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PROPER_CASE_WORDS(1),
      STATEFUL_FORMATTER(8),
      HEADERFORMAT_NOT_SET(0);
      private final int value;
      private HeaderFormatCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static HeaderFormatCase valueOf(int value) {
        return forNumber(value);
      }

      public static HeaderFormatCase forNumber(int value) {
        switch (value) {
          case 1: return PROPER_CASE_WORDS;
          case 8: return STATEFUL_FORMATTER;
          case 0: return HEADERFORMAT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public HeaderFormatCase
    getHeaderFormatCase() {
      return HeaderFormatCase.forNumber(
          headerFormatCase_);
    }

    public static final int PROPER_CASE_WORDS_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Formats the header by proper casing words: the first character and any character following
     * a special character will be capitalized if it's an alpha character. For example,
     * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
     * Note that while this results in most headers following conventional casing, certain headers
     * are not covered. For example, the "TE" header will be formatted as "Te".
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
     * @return Whether the properCaseWords field is set.
     */
    @java.lang.Override
    public boolean hasProperCaseWords() {
      return headerFormatCase_ == 1;
    }
    /**
     * <pre>
     * Formats the header by proper casing words: the first character and any character following
     * a special character will be capitalized if it's an alpha character. For example,
     * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
     * Note that while this results in most headers following conventional casing, certain headers
     * are not covered. For example, the "TE" header will be formatted as "Te".
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
     * @return The properCaseWords.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords getProperCaseWords() {
      if (headerFormatCase_ == 1) {
         return (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_;
      }
      return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
    }
    /**
     * <pre>
     * Formats the header by proper casing words: the first character and any character following
     * a special character will be capitalized if it's an alpha character. For example,
     * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
     * Note that while this results in most headers following conventional casing, certain headers
     * are not covered. For example, the "TE" header will be formatted as "Te".
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder getProperCaseWordsOrBuilder() {
      if (headerFormatCase_ == 1) {
         return (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_;
      }
      return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
    }

    public static final int STATEFUL_FORMATTER_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Configuration for stateful formatter extensions that allow using received headers to
     * affect the output of encoding headers. E.g., preserving case during proxying.
     * [#extension-category: envoy.http.stateful_header_formatters]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
     * @return Whether the statefulFormatter field is set.
     */
    @java.lang.Override
    public boolean hasStatefulFormatter() {
      return headerFormatCase_ == 8;
    }
    /**
     * <pre>
     * Configuration for stateful formatter extensions that allow using received headers to
     * affect the output of encoding headers. E.g., preserving case during proxying.
     * [#extension-category: envoy.http.stateful_header_formatters]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
     * @return The statefulFormatter.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getStatefulFormatter() {
      if (headerFormatCase_ == 8) {
         return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_;
      }
      return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
    }
    /**
     * <pre>
     * Configuration for stateful formatter extensions that allow using received headers to
     * affect the output of encoding headers. E.g., preserving case during proxying.
     * [#extension-category: envoy.http.stateful_header_formatters]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getStatefulFormatterOrBuilder() {
      if (headerFormatCase_ == 8) {
         return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_;
      }
      return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (headerFormatCase_ == 1) {
        output.writeMessage(1, (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_);
      }
      if (headerFormatCase_ == 8) {
        output.writeMessage(8, (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (headerFormatCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_);
      }
      if (headerFormatCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat other = (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat) obj;

      if (!getHeaderFormatCase().equals(other.getHeaderFormatCase())) return false;
      switch (headerFormatCase_) {
        case 1:
          if (!getProperCaseWords()
              .equals(other.getProperCaseWords())) return false;
          break;
        case 8:
          if (!getStatefulFormatter()
              .equals(other.getStatefulFormatter())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (headerFormatCase_) {
        case 1:
          hash = (37 * hash) + PROPER_CASE_WORDS_FIELD_NUMBER;
          hash = (53 * hash) + getProperCaseWords().hashCode();
          break;
        case 8:
          hash = (37 * hash) + STATEFUL_FORMATTER_FIELD_NUMBER;
          hash = (53 * hash) + getStatefulFormatter().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * [#next-free-field: 9]
     * </pre>
     *
     * Protobuf type {@code envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.class, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (properCaseWordsBuilder_ != null) {
          properCaseWordsBuilder_.clear();
        }
        if (statefulFormatterBuilder_ != null) {
          statefulFormatterBuilder_.clear();
        }
        headerFormatCase_ = 0;
        headerFormat_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_HeaderKeyFormat_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat getDefaultInstanceForType() {
        return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat build() {
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat buildPartial() {
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat result = new io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat result) {
        result.headerFormatCase_ = headerFormatCase_;
        result.headerFormat_ = this.headerFormat_;
        if (headerFormatCase_ == 1 &&
            properCaseWordsBuilder_ != null) {
          result.headerFormat_ = properCaseWordsBuilder_.build();
        }
        if (headerFormatCase_ == 8 &&
            statefulFormatterBuilder_ != null) {
          result.headerFormat_ = statefulFormatterBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat) {
          return mergeFrom((io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat other) {
        if (other == io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance()) return this;
        switch (other.getHeaderFormatCase()) {
          case PROPER_CASE_WORDS: {
            mergeProperCaseWords(other.getProperCaseWords());
            break;
          }
          case STATEFUL_FORMATTER: {
            mergeStatefulFormatter(other.getStatefulFormatter());
            break;
          }
          case HEADERFORMAT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getProperCaseWordsFieldBuilder().getBuilder(),
                    extensionRegistry);
                headerFormatCase_ = 1;
                break;
              } // case 10
              case 66: {
                input.readMessage(
                    getStatefulFormatterFieldBuilder().getBuilder(),
                    extensionRegistry);
                headerFormatCase_ = 8;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int headerFormatCase_ = 0;
      private java.lang.Object headerFormat_;
      public HeaderFormatCase
          getHeaderFormatCase() {
        return HeaderFormatCase.forNumber(
            headerFormatCase_);
      }

      public Builder clearHeaderFormat() {
        headerFormatCase_ = 0;
        headerFormat_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder> properCaseWordsBuilder_;
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       * @return Whether the properCaseWords field is set.
       */
      @java.lang.Override
      public boolean hasProperCaseWords() {
        return headerFormatCase_ == 1;
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       * @return The properCaseWords.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords getProperCaseWords() {
        if (properCaseWordsBuilder_ == null) {
          if (headerFormatCase_ == 1) {
            return (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_;
          }
          return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
        } else {
          if (headerFormatCase_ == 1) {
            return properCaseWordsBuilder_.getMessage();
          }
          return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      public Builder setProperCaseWords(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords value) {
        if (properCaseWordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          headerFormat_ = value;
          onChanged();
        } else {
          properCaseWordsBuilder_.setMessage(value);
        }
        headerFormatCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      public Builder setProperCaseWords(
          io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder builderForValue) {
        if (properCaseWordsBuilder_ == null) {
          headerFormat_ = builderForValue.build();
          onChanged();
        } else {
          properCaseWordsBuilder_.setMessage(builderForValue.build());
        }
        headerFormatCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      public Builder mergeProperCaseWords(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords value) {
        if (properCaseWordsBuilder_ == null) {
          if (headerFormatCase_ == 1 &&
              headerFormat_ != io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance()) {
            headerFormat_ = io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.newBuilder((io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_)
                .mergeFrom(value).buildPartial();
          } else {
            headerFormat_ = value;
          }
          onChanged();
        } else {
          if (headerFormatCase_ == 1) {
            properCaseWordsBuilder_.mergeFrom(value);
          } else {
            properCaseWordsBuilder_.setMessage(value);
          }
        }
        headerFormatCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      public Builder clearProperCaseWords() {
        if (properCaseWordsBuilder_ == null) {
          if (headerFormatCase_ == 1) {
            headerFormatCase_ = 0;
            headerFormat_ = null;
            onChanged();
          }
        } else {
          if (headerFormatCase_ == 1) {
            headerFormatCase_ = 0;
            headerFormat_ = null;
          }
          properCaseWordsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder getProperCaseWordsBuilder() {
        return getProperCaseWordsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder getProperCaseWordsOrBuilder() {
        if ((headerFormatCase_ == 1) && (properCaseWordsBuilder_ != null)) {
          return properCaseWordsBuilder_.getMessageOrBuilder();
        } else {
          if (headerFormatCase_ == 1) {
            return (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_;
          }
          return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Formats the header by proper casing words: the first character and any character following
       * a special character will be capitalized if it's an alpha character. For example,
       * "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
       * Note that while this results in most headers following conventional casing, certain headers
       * are not covered. For example, the "TE" header will be formatted as "Te".
       * </pre>
       *
       * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder> 
          getProperCaseWordsFieldBuilder() {
        if (properCaseWordsBuilder_ == null) {
          if (!(headerFormatCase_ == 1)) {
            headerFormat_ = io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.getDefaultInstance();
          }
          properCaseWordsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords.Builder, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWordsOrBuilder>(
                  (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords) headerFormat_,
                  getParentForChildren(),
                  isClean());
          headerFormat_ = null;
        }
        headerFormatCase_ = 1;
        onChanged();
        return properCaseWordsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> statefulFormatterBuilder_;
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       * @return Whether the statefulFormatter field is set.
       */
      @java.lang.Override
      public boolean hasStatefulFormatter() {
        return headerFormatCase_ == 8;
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       * @return The statefulFormatter.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getStatefulFormatter() {
        if (statefulFormatterBuilder_ == null) {
          if (headerFormatCase_ == 8) {
            return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_;
          }
          return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
        } else {
          if (headerFormatCase_ == 8) {
            return statefulFormatterBuilder_.getMessage();
          }
          return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      public Builder setStatefulFormatter(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
        if (statefulFormatterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          headerFormat_ = value;
          onChanged();
        } else {
          statefulFormatterBuilder_.setMessage(value);
        }
        headerFormatCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      public Builder setStatefulFormatter(
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
        if (statefulFormatterBuilder_ == null) {
          headerFormat_ = builderForValue.build();
          onChanged();
        } else {
          statefulFormatterBuilder_.setMessage(builderForValue.build());
        }
        headerFormatCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      public Builder mergeStatefulFormatter(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
        if (statefulFormatterBuilder_ == null) {
          if (headerFormatCase_ == 8 &&
              headerFormat_ != io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance()) {
            headerFormat_ = io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder((io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_)
                .mergeFrom(value).buildPartial();
          } else {
            headerFormat_ = value;
          }
          onChanged();
        } else {
          if (headerFormatCase_ == 8) {
            statefulFormatterBuilder_.mergeFrom(value);
          } else {
            statefulFormatterBuilder_.setMessage(value);
          }
        }
        headerFormatCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      public Builder clearStatefulFormatter() {
        if (statefulFormatterBuilder_ == null) {
          if (headerFormatCase_ == 8) {
            headerFormatCase_ = 0;
            headerFormat_ = null;
            onChanged();
          }
        } else {
          if (headerFormatCase_ == 8) {
            headerFormatCase_ = 0;
            headerFormat_ = null;
          }
          statefulFormatterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getStatefulFormatterBuilder() {
        return getStatefulFormatterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getStatefulFormatterOrBuilder() {
        if ((headerFormatCase_ == 8) && (statefulFormatterBuilder_ != null)) {
          return statefulFormatterBuilder_.getMessageOrBuilder();
        } else {
          if (headerFormatCase_ == 8) {
            return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_;
          }
          return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Configuration for stateful formatter extensions that allow using received headers to
       * affect the output of encoding headers. E.g., preserving case during proxying.
       * [#extension-category: envoy.http.stateful_header_formatters]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig stateful_formatter = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
          getStatefulFormatterFieldBuilder() {
        if (statefulFormatterBuilder_ == null) {
          if (!(headerFormatCase_ == 8)) {
            headerFormat_ = io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
          }
          statefulFormatterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                  (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) headerFormat_,
                  getParentForChildren(),
                  isClean());
          headerFormat_ = null;
        }
        headerFormatCase_ = 8;
        onChanged();
        return statefulFormatterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)
    }

    // @@protoc_insertion_point(class_scope:envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat)
    private static final io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat();
    }

    public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HeaderKeyFormat>
        PARSER = new com.google.protobuf.AbstractParser<HeaderKeyFormat>() {
      @java.lang.Override
      public HeaderKeyFormat parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<HeaderKeyFormat> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HeaderKeyFormat> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int ALLOW_ABSOLUTE_URL_FIELD_NUMBER = 1;
  private com.google.protobuf.BoolValue allowAbsoluteUrl_;
  /**
   * <pre>
   * Handle HTTP requests with absolute URLs in the requests. These requests
   * are generally sent by clients to forward/explicit proxies. This allows clients to configure
   * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
   * ``http_proxy`` environment variable.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
   * @return Whether the allowAbsoluteUrl field is set.
   */
  @java.lang.Override
  public boolean hasAllowAbsoluteUrl() {
    return allowAbsoluteUrl_ != null;
  }
  /**
   * <pre>
   * Handle HTTP requests with absolute URLs in the requests. These requests
   * are generally sent by clients to forward/explicit proxies. This allows clients to configure
   * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
   * ``http_proxy`` environment variable.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
   * @return The allowAbsoluteUrl.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getAllowAbsoluteUrl() {
    return allowAbsoluteUrl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowAbsoluteUrl_;
  }
  /**
   * <pre>
   * Handle HTTP requests with absolute URLs in the requests. These requests
   * are generally sent by clients to forward/explicit proxies. This allows clients to configure
   * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
   * ``http_proxy`` environment variable.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getAllowAbsoluteUrlOrBuilder() {
    return allowAbsoluteUrl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowAbsoluteUrl_;
  }

  public static final int ACCEPT_HTTP_10_FIELD_NUMBER = 2;
  private boolean acceptHttp10_ = false;
  /**
   * <pre>
   * Handle incoming HTTP/1.0 and HTTP 0.9 requests.
   * This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
   * style connect logic, dechunking, and handling lack of client host iff
   * ``default_host_for_http_10`` is configured.
   * </pre>
   *
   * <code>bool accept_http_10 = 2;</code>
   * @return The acceptHttp10.
   */
  @java.lang.Override
  public boolean getAcceptHttp10() {
    return acceptHttp10_;
  }

  public static final int DEFAULT_HOST_FOR_HTTP_10_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object defaultHostForHttp10_ = "";
  /**
   * <pre>
   * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
   * Envoy does not otherwise support HTTP/1.0 without a Host header.
   * This is a no-op if ``accept_http_10`` is not true.
   * </pre>
   *
   * <code>string default_host_for_http_10 = 3;</code>
   * @return The defaultHostForHttp10.
   */
  @java.lang.Override
  public java.lang.String getDefaultHostForHttp10() {
    java.lang.Object ref = defaultHostForHttp10_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      defaultHostForHttp10_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
   * Envoy does not otherwise support HTTP/1.0 without a Host header.
   * This is a no-op if ``accept_http_10`` is not true.
   * </pre>
   *
   * <code>string default_host_for_http_10 = 3;</code>
   * @return The bytes for defaultHostForHttp10.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDefaultHostForHttp10Bytes() {
    java.lang.Object ref = defaultHostForHttp10_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      defaultHostForHttp10_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HEADER_KEY_FORMAT_FIELD_NUMBER = 4;
  private io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat headerKeyFormat_;
  /**
   * <pre>
   * Describes how the keys for response headers should be formatted. By default, all header keys
   * are lower cased.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
   * @return Whether the headerKeyFormat field is set.
   */
  @java.lang.Override
  public boolean hasHeaderKeyFormat() {
    return headerKeyFormat_ != null;
  }
  /**
   * <pre>
   * Describes how the keys for response headers should be formatted. By default, all header keys
   * are lower cased.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
   * @return The headerKeyFormat.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat getHeaderKeyFormat() {
    return headerKeyFormat_ == null ? io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance() : headerKeyFormat_;
  }
  /**
   * <pre>
   * Describes how the keys for response headers should be formatted. By default, all header keys
   * are lower cased.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder getHeaderKeyFormatOrBuilder() {
    return headerKeyFormat_ == null ? io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance() : headerKeyFormat_;
  }

  public static final int ENABLE_TRAILERS_FIELD_NUMBER = 5;
  private boolean enableTrailers_ = false;
  /**
   * <pre>
   * Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.
   * .. attention::
   *   Note that this only happens when Envoy is chunk encoding which occurs when:
   *   - The request is HTTP/1.1.
   *   - Is neither a HEAD only request nor a HTTP Upgrade.
   *   - Not a response to a HEAD request.
   *   - The content length header is not present.
   * </pre>
   *
   * <code>bool enable_trailers = 5;</code>
   * @return The enableTrailers.
   */
  @java.lang.Override
  public boolean getEnableTrailers() {
    return enableTrailers_;
  }

  public static final int ALLOW_CHUNKED_LENGTH_FIELD_NUMBER = 6;
  private boolean allowChunkedLength_ = false;
  /**
   * <pre>
   * Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
   * headers set. By default such messages are rejected, but if option is enabled - Envoy will
   * remove Content-Length header and process message.
   * See `RFC7230, sec. 3.3.3 &lt;https://tools.ietf.org/html/rfc7230#section-3.3.3&gt;`_ for details.
   * .. attention::
   *   Enabling this option might lead to request smuggling vulnerability, especially if traffic
   *   is proxied via multiple layers of proxies.
   * [#comment:TODO: This field is ignored when the
   * :ref:`header validation configuration &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config&gt;`
   * is present.]
   * </pre>
   *
   * <code>bool allow_chunked_length = 6;</code>
   * @return The allowChunkedLength.
   */
  @java.lang.Override
  public boolean getAllowChunkedLength() {
    return allowChunkedLength_;
  }

  public static final int OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER = 7;
  private com.google.protobuf.BoolValue overrideStreamErrorOnInvalidHttpMessage_;
  /**
   * <pre>
   * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
   * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
   * when this option is true, then Envoy will leave the HTTP/1.1 connection
   * open where possible.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
   * @return Whether the overrideStreamErrorOnInvalidHttpMessage field is set.
   */
  @java.lang.Override
  public boolean hasOverrideStreamErrorOnInvalidHttpMessage() {
    return overrideStreamErrorOnInvalidHttpMessage_ != null;
  }
  /**
   * <pre>
   * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
   * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
   * when this option is true, then Envoy will leave the HTTP/1.1 connection
   * open where possible.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
   * @return The overrideStreamErrorOnInvalidHttpMessage.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getOverrideStreamErrorOnInvalidHttpMessage() {
    return overrideStreamErrorOnInvalidHttpMessage_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
  }
  /**
   * <pre>
   * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
   * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
   * when this option is true, then Envoy will leave the HTTP/1.1 connection
   * open where possible.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getOverrideStreamErrorOnInvalidHttpMessageOrBuilder() {
    return overrideStreamErrorOnInvalidHttpMessage_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
  }

  public static final int SEND_FULLY_QUALIFIED_URL_FIELD_NUMBER = 8;
  private boolean sendFullyQualifiedUrl_ = false;
  /**
   * <pre>
   * Allows sending fully qualified URLs when proxying the first line of the
   * response. By default, Envoy will only send the path components in the first line.
   * If this is true, Envoy will create a fully qualified URI composing scheme
   * (inferred if not present), host (from the host/:authority header) and path
   * (from first line or :path header).
   * </pre>
   *
   * <code>bool send_fully_qualified_url = 8;</code>
   * @return The sendFullyQualifiedUrl.
   */
  @java.lang.Override
  public boolean getSendFullyQualifiedUrl() {
    return sendFullyQualifiedUrl_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (allowAbsoluteUrl_ != null) {
      output.writeMessage(1, getAllowAbsoluteUrl());
    }
    if (acceptHttp10_ != false) {
      output.writeBool(2, acceptHttp10_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(defaultHostForHttp10_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, defaultHostForHttp10_);
    }
    if (headerKeyFormat_ != null) {
      output.writeMessage(4, getHeaderKeyFormat());
    }
    if (enableTrailers_ != false) {
      output.writeBool(5, enableTrailers_);
    }
    if (allowChunkedLength_ != false) {
      output.writeBool(6, allowChunkedLength_);
    }
    if (overrideStreamErrorOnInvalidHttpMessage_ != null) {
      output.writeMessage(7, getOverrideStreamErrorOnInvalidHttpMessage());
    }
    if (sendFullyQualifiedUrl_ != false) {
      output.writeBool(8, sendFullyQualifiedUrl_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (allowAbsoluteUrl_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getAllowAbsoluteUrl());
    }
    if (acceptHttp10_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, acceptHttp10_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(defaultHostForHttp10_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, defaultHostForHttp10_);
    }
    if (headerKeyFormat_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getHeaderKeyFormat());
    }
    if (enableTrailers_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, enableTrailers_);
    }
    if (allowChunkedLength_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, allowChunkedLength_);
    }
    if (overrideStreamErrorOnInvalidHttpMessage_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getOverrideStreamErrorOnInvalidHttpMessage());
    }
    if (sendFullyQualifiedUrl_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, sendFullyQualifiedUrl_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions other = (io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions) obj;

    if (hasAllowAbsoluteUrl() != other.hasAllowAbsoluteUrl()) return false;
    if (hasAllowAbsoluteUrl()) {
      if (!getAllowAbsoluteUrl()
          .equals(other.getAllowAbsoluteUrl())) return false;
    }
    if (getAcceptHttp10()
        != other.getAcceptHttp10()) return false;
    if (!getDefaultHostForHttp10()
        .equals(other.getDefaultHostForHttp10())) return false;
    if (hasHeaderKeyFormat() != other.hasHeaderKeyFormat()) return false;
    if (hasHeaderKeyFormat()) {
      if (!getHeaderKeyFormat()
          .equals(other.getHeaderKeyFormat())) return false;
    }
    if (getEnableTrailers()
        != other.getEnableTrailers()) return false;
    if (getAllowChunkedLength()
        != other.getAllowChunkedLength()) return false;
    if (hasOverrideStreamErrorOnInvalidHttpMessage() != other.hasOverrideStreamErrorOnInvalidHttpMessage()) return false;
    if (hasOverrideStreamErrorOnInvalidHttpMessage()) {
      if (!getOverrideStreamErrorOnInvalidHttpMessage()
          .equals(other.getOverrideStreamErrorOnInvalidHttpMessage())) return false;
    }
    if (getSendFullyQualifiedUrl()
        != other.getSendFullyQualifiedUrl()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasAllowAbsoluteUrl()) {
      hash = (37 * hash) + ALLOW_ABSOLUTE_URL_FIELD_NUMBER;
      hash = (53 * hash) + getAllowAbsoluteUrl().hashCode();
    }
    hash = (37 * hash) + ACCEPT_HTTP_10_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAcceptHttp10());
    hash = (37 * hash) + DEFAULT_HOST_FOR_HTTP_10_FIELD_NUMBER;
    hash = (53 * hash) + getDefaultHostForHttp10().hashCode();
    if (hasHeaderKeyFormat()) {
      hash = (37 * hash) + HEADER_KEY_FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getHeaderKeyFormat().hashCode();
    }
    hash = (37 * hash) + ENABLE_TRAILERS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEnableTrailers());
    hash = (37 * hash) + ALLOW_CHUNKED_LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowChunkedLength());
    if (hasOverrideStreamErrorOnInvalidHttpMessage()) {
      hash = (37 * hash) + OVERRIDE_STREAM_ERROR_ON_INVALID_HTTP_MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getOverrideStreamErrorOnInvalidHttpMessage().hashCode();
    }
    hash = (37 * hash) + SEND_FULLY_QUALIFIED_URL_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSendFullyQualifiedUrl());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.Http1ProtocolOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.Http1ProtocolOptions)
      io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.class, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      allowAbsoluteUrl_ = null;
      if (allowAbsoluteUrlBuilder_ != null) {
        allowAbsoluteUrlBuilder_.dispose();
        allowAbsoluteUrlBuilder_ = null;
      }
      acceptHttp10_ = false;
      defaultHostForHttp10_ = "";
      headerKeyFormat_ = null;
      if (headerKeyFormatBuilder_ != null) {
        headerKeyFormatBuilder_.dispose();
        headerKeyFormatBuilder_ = null;
      }
      enableTrailers_ = false;
      allowChunkedLength_ = false;
      overrideStreamErrorOnInvalidHttpMessage_ = null;
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ != null) {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.dispose();
        overrideStreamErrorOnInvalidHttpMessageBuilder_ = null;
      }
      sendFullyQualifiedUrl_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_Http1ProtocolOptions_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions build() {
      io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions buildPartial() {
      io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions result = new io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.allowAbsoluteUrl_ = allowAbsoluteUrlBuilder_ == null
            ? allowAbsoluteUrl_
            : allowAbsoluteUrlBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.acceptHttp10_ = acceptHttp10_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.defaultHostForHttp10_ = defaultHostForHttp10_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.headerKeyFormat_ = headerKeyFormatBuilder_ == null
            ? headerKeyFormat_
            : headerKeyFormatBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.enableTrailers_ = enableTrailers_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.allowChunkedLength_ = allowChunkedLength_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.overrideStreamErrorOnInvalidHttpMessage_ = overrideStreamErrorOnInvalidHttpMessageBuilder_ == null
            ? overrideStreamErrorOnInvalidHttpMessage_
            : overrideStreamErrorOnInvalidHttpMessageBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.sendFullyQualifiedUrl_ = sendFullyQualifiedUrl_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions other) {
      if (other == io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.getDefaultInstance()) return this;
      if (other.hasAllowAbsoluteUrl()) {
        mergeAllowAbsoluteUrl(other.getAllowAbsoluteUrl());
      }
      if (other.getAcceptHttp10() != false) {
        setAcceptHttp10(other.getAcceptHttp10());
      }
      if (!other.getDefaultHostForHttp10().isEmpty()) {
        defaultHostForHttp10_ = other.defaultHostForHttp10_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (other.hasHeaderKeyFormat()) {
        mergeHeaderKeyFormat(other.getHeaderKeyFormat());
      }
      if (other.getEnableTrailers() != false) {
        setEnableTrailers(other.getEnableTrailers());
      }
      if (other.getAllowChunkedLength() != false) {
        setAllowChunkedLength(other.getAllowChunkedLength());
      }
      if (other.hasOverrideStreamErrorOnInvalidHttpMessage()) {
        mergeOverrideStreamErrorOnInvalidHttpMessage(other.getOverrideStreamErrorOnInvalidHttpMessage());
      }
      if (other.getSendFullyQualifiedUrl() != false) {
        setSendFullyQualifiedUrl(other.getSendFullyQualifiedUrl());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getAllowAbsoluteUrlFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              acceptHttp10_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              defaultHostForHttp10_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getHeaderKeyFormatFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 40: {
              enableTrailers_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              allowChunkedLength_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 58: {
              input.readMessage(
                  getOverrideStreamErrorOnInvalidHttpMessageFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 64: {
              sendFullyQualifiedUrl_ = input.readBool();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.BoolValue allowAbsoluteUrl_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> allowAbsoluteUrlBuilder_;
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     * @return Whether the allowAbsoluteUrl field is set.
     */
    public boolean hasAllowAbsoluteUrl() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     * @return The allowAbsoluteUrl.
     */
    public com.google.protobuf.BoolValue getAllowAbsoluteUrl() {
      if (allowAbsoluteUrlBuilder_ == null) {
        return allowAbsoluteUrl_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : allowAbsoluteUrl_;
      } else {
        return allowAbsoluteUrlBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    public Builder setAllowAbsoluteUrl(com.google.protobuf.BoolValue value) {
      if (allowAbsoluteUrlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        allowAbsoluteUrl_ = value;
      } else {
        allowAbsoluteUrlBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    public Builder setAllowAbsoluteUrl(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (allowAbsoluteUrlBuilder_ == null) {
        allowAbsoluteUrl_ = builderForValue.build();
      } else {
        allowAbsoluteUrlBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    public Builder mergeAllowAbsoluteUrl(com.google.protobuf.BoolValue value) {
      if (allowAbsoluteUrlBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          allowAbsoluteUrl_ != null &&
          allowAbsoluteUrl_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
          getAllowAbsoluteUrlBuilder().mergeFrom(value);
        } else {
          allowAbsoluteUrl_ = value;
        }
      } else {
        allowAbsoluteUrlBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    public Builder clearAllowAbsoluteUrl() {
      bitField0_ = (bitField0_ & ~0x00000001);
      allowAbsoluteUrl_ = null;
      if (allowAbsoluteUrlBuilder_ != null) {
        allowAbsoluteUrlBuilder_.dispose();
        allowAbsoluteUrlBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    public com.google.protobuf.BoolValue.Builder getAllowAbsoluteUrlBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getAllowAbsoluteUrlFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getAllowAbsoluteUrlOrBuilder() {
      if (allowAbsoluteUrlBuilder_ != null) {
        return allowAbsoluteUrlBuilder_.getMessageOrBuilder();
      } else {
        return allowAbsoluteUrl_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : allowAbsoluteUrl_;
      }
    }
    /**
     * <pre>
     * Handle HTTP requests with absolute URLs in the requests. These requests
     * are generally sent by clients to forward/explicit proxies. This allows clients to configure
     * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
     * ``http_proxy`` environment variable.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getAllowAbsoluteUrlFieldBuilder() {
      if (allowAbsoluteUrlBuilder_ == null) {
        allowAbsoluteUrlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getAllowAbsoluteUrl(),
                getParentForChildren(),
                isClean());
        allowAbsoluteUrl_ = null;
      }
      return allowAbsoluteUrlBuilder_;
    }

    private boolean acceptHttp10_ ;
    /**
     * <pre>
     * Handle incoming HTTP/1.0 and HTTP 0.9 requests.
     * This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
     * style connect logic, dechunking, and handling lack of client host iff
     * ``default_host_for_http_10`` is configured.
     * </pre>
     *
     * <code>bool accept_http_10 = 2;</code>
     * @return The acceptHttp10.
     */
    @java.lang.Override
    public boolean getAcceptHttp10() {
      return acceptHttp10_;
    }
    /**
     * <pre>
     * Handle incoming HTTP/1.0 and HTTP 0.9 requests.
     * This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
     * style connect logic, dechunking, and handling lack of client host iff
     * ``default_host_for_http_10`` is configured.
     * </pre>
     *
     * <code>bool accept_http_10 = 2;</code>
     * @param value The acceptHttp10 to set.
     * @return This builder for chaining.
     */
    public Builder setAcceptHttp10(boolean value) {
      
      acceptHttp10_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Handle incoming HTTP/1.0 and HTTP 0.9 requests.
     * This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
     * style connect logic, dechunking, and handling lack of client host iff
     * ``default_host_for_http_10`` is configured.
     * </pre>
     *
     * <code>bool accept_http_10 = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAcceptHttp10() {
      bitField0_ = (bitField0_ & ~0x00000002);
      acceptHttp10_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object defaultHostForHttp10_ = "";
    /**
     * <pre>
     * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
     * Envoy does not otherwise support HTTP/1.0 without a Host header.
     * This is a no-op if ``accept_http_10`` is not true.
     * </pre>
     *
     * <code>string default_host_for_http_10 = 3;</code>
     * @return The defaultHostForHttp10.
     */
    public java.lang.String getDefaultHostForHttp10() {
      java.lang.Object ref = defaultHostForHttp10_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        defaultHostForHttp10_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
     * Envoy does not otherwise support HTTP/1.0 without a Host header.
     * This is a no-op if ``accept_http_10`` is not true.
     * </pre>
     *
     * <code>string default_host_for_http_10 = 3;</code>
     * @return The bytes for defaultHostForHttp10.
     */
    public com.google.protobuf.ByteString
        getDefaultHostForHttp10Bytes() {
      java.lang.Object ref = defaultHostForHttp10_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        defaultHostForHttp10_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
     * Envoy does not otherwise support HTTP/1.0 without a Host header.
     * This is a no-op if ``accept_http_10`` is not true.
     * </pre>
     *
     * <code>string default_host_for_http_10 = 3;</code>
     * @param value The defaultHostForHttp10 to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultHostForHttp10(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      defaultHostForHttp10_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
     * Envoy does not otherwise support HTTP/1.0 without a Host header.
     * This is a no-op if ``accept_http_10`` is not true.
     * </pre>
     *
     * <code>string default_host_for_http_10 = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearDefaultHostForHttp10() {
      defaultHostForHttp10_ = getDefaultInstance().getDefaultHostForHttp10();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as
     * Envoy does not otherwise support HTTP/1.0 without a Host header.
     * This is a no-op if ``accept_http_10`` is not true.
     * </pre>
     *
     * <code>string default_host_for_http_10 = 3;</code>
     * @param value The bytes for defaultHostForHttp10 to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultHostForHttp10Bytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      defaultHostForHttp10_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat headerKeyFormat_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder> headerKeyFormatBuilder_;
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     * @return Whether the headerKeyFormat field is set.
     */
    public boolean hasHeaderKeyFormat() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     * @return The headerKeyFormat.
     */
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat getHeaderKeyFormat() {
      if (headerKeyFormatBuilder_ == null) {
        return headerKeyFormat_ == null ? io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance() : headerKeyFormat_;
      } else {
        return headerKeyFormatBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    public Builder setHeaderKeyFormat(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat value) {
      if (headerKeyFormatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        headerKeyFormat_ = value;
      } else {
        headerKeyFormatBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    public Builder setHeaderKeyFormat(
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder builderForValue) {
      if (headerKeyFormatBuilder_ == null) {
        headerKeyFormat_ = builderForValue.build();
      } else {
        headerKeyFormatBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    public Builder mergeHeaderKeyFormat(io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat value) {
      if (headerKeyFormatBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          headerKeyFormat_ != null &&
          headerKeyFormat_ != io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance()) {
          getHeaderKeyFormatBuilder().mergeFrom(value);
        } else {
          headerKeyFormat_ = value;
        }
      } else {
        headerKeyFormatBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    public Builder clearHeaderKeyFormat() {
      bitField0_ = (bitField0_ & ~0x00000008);
      headerKeyFormat_ = null;
      if (headerKeyFormatBuilder_ != null) {
        headerKeyFormatBuilder_.dispose();
        headerKeyFormatBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder getHeaderKeyFormatBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getHeaderKeyFormatFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder getHeaderKeyFormatOrBuilder() {
      if (headerKeyFormatBuilder_ != null) {
        return headerKeyFormatBuilder_.getMessageOrBuilder();
      } else {
        return headerKeyFormat_ == null ?
            io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.getDefaultInstance() : headerKeyFormat_;
      }
    }
    /**
     * <pre>
     * Describes how the keys for response headers should be formatted. By default, all header keys
     * are lower cased.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder> 
        getHeaderKeyFormatFieldBuilder() {
      if (headerKeyFormatBuilder_ == null) {
        headerKeyFormatBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.Builder, io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder>(
                getHeaderKeyFormat(),
                getParentForChildren(),
                isClean());
        headerKeyFormat_ = null;
      }
      return headerKeyFormatBuilder_;
    }

    private boolean enableTrailers_ ;
    /**
     * <pre>
     * Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.
     * .. attention::
     *   Note that this only happens when Envoy is chunk encoding which occurs when:
     *   - The request is HTTP/1.1.
     *   - Is neither a HEAD only request nor a HTTP Upgrade.
     *   - Not a response to a HEAD request.
     *   - The content length header is not present.
     * </pre>
     *
     * <code>bool enable_trailers = 5;</code>
     * @return The enableTrailers.
     */
    @java.lang.Override
    public boolean getEnableTrailers() {
      return enableTrailers_;
    }
    /**
     * <pre>
     * Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.
     * .. attention::
     *   Note that this only happens when Envoy is chunk encoding which occurs when:
     *   - The request is HTTP/1.1.
     *   - Is neither a HEAD only request nor a HTTP Upgrade.
     *   - Not a response to a HEAD request.
     *   - The content length header is not present.
     * </pre>
     *
     * <code>bool enable_trailers = 5;</code>
     * @param value The enableTrailers to set.
     * @return This builder for chaining.
     */
    public Builder setEnableTrailers(boolean value) {
      
      enableTrailers_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.
     * .. attention::
     *   Note that this only happens when Envoy is chunk encoding which occurs when:
     *   - The request is HTTP/1.1.
     *   - Is neither a HEAD only request nor a HTTP Upgrade.
     *   - Not a response to a HEAD request.
     *   - The content length header is not present.
     * </pre>
     *
     * <code>bool enable_trailers = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnableTrailers() {
      bitField0_ = (bitField0_ & ~0x00000010);
      enableTrailers_ = false;
      onChanged();
      return this;
    }

    private boolean allowChunkedLength_ ;
    /**
     * <pre>
     * Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
     * headers set. By default such messages are rejected, but if option is enabled - Envoy will
     * remove Content-Length header and process message.
     * See `RFC7230, sec. 3.3.3 &lt;https://tools.ietf.org/html/rfc7230#section-3.3.3&gt;`_ for details.
     * .. attention::
     *   Enabling this option might lead to request smuggling vulnerability, especially if traffic
     *   is proxied via multiple layers of proxies.
     * [#comment:TODO: This field is ignored when the
     * :ref:`header validation configuration &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config&gt;`
     * is present.]
     * </pre>
     *
     * <code>bool allow_chunked_length = 6;</code>
     * @return The allowChunkedLength.
     */
    @java.lang.Override
    public boolean getAllowChunkedLength() {
      return allowChunkedLength_;
    }
    /**
     * <pre>
     * Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
     * headers set. By default such messages are rejected, but if option is enabled - Envoy will
     * remove Content-Length header and process message.
     * See `RFC7230, sec. 3.3.3 &lt;https://tools.ietf.org/html/rfc7230#section-3.3.3&gt;`_ for details.
     * .. attention::
     *   Enabling this option might lead to request smuggling vulnerability, especially if traffic
     *   is proxied via multiple layers of proxies.
     * [#comment:TODO: This field is ignored when the
     * :ref:`header validation configuration &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config&gt;`
     * is present.]
     * </pre>
     *
     * <code>bool allow_chunked_length = 6;</code>
     * @param value The allowChunkedLength to set.
     * @return This builder for chaining.
     */
    public Builder setAllowChunkedLength(boolean value) {
      
      allowChunkedLength_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding``
     * headers set. By default such messages are rejected, but if option is enabled - Envoy will
     * remove Content-Length header and process message.
     * See `RFC7230, sec. 3.3.3 &lt;https://tools.ietf.org/html/rfc7230#section-3.3.3&gt;`_ for details.
     * .. attention::
     *   Enabling this option might lead to request smuggling vulnerability, especially if traffic
     *   is proxied via multiple layers of proxies.
     * [#comment:TODO: This field is ignored when the
     * :ref:`header validation configuration &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config&gt;`
     * is present.]
     * </pre>
     *
     * <code>bool allow_chunked_length = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowChunkedLength() {
      bitField0_ = (bitField0_ & ~0x00000020);
      allowChunkedLength_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.BoolValue overrideStreamErrorOnInvalidHttpMessage_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> overrideStreamErrorOnInvalidHttpMessageBuilder_;
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     * @return Whether the overrideStreamErrorOnInvalidHttpMessage field is set.
     */
    public boolean hasOverrideStreamErrorOnInvalidHttpMessage() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     * @return The overrideStreamErrorOnInvalidHttpMessage.
     */
    public com.google.protobuf.BoolValue getOverrideStreamErrorOnInvalidHttpMessage() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        return overrideStreamErrorOnInvalidHttpMessage_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
      } else {
        return overrideStreamErrorOnInvalidHttpMessageBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    public Builder setOverrideStreamErrorOnInvalidHttpMessage(com.google.protobuf.BoolValue value) {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        overrideStreamErrorOnInvalidHttpMessage_ = value;
      } else {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    public Builder setOverrideStreamErrorOnInvalidHttpMessage(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        overrideStreamErrorOnInvalidHttpMessage_ = builderForValue.build();
      } else {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    public Builder mergeOverrideStreamErrorOnInvalidHttpMessage(com.google.protobuf.BoolValue value) {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          overrideStreamErrorOnInvalidHttpMessage_ != null &&
          overrideStreamErrorOnInvalidHttpMessage_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
          getOverrideStreamErrorOnInvalidHttpMessageBuilder().mergeFrom(value);
        } else {
          overrideStreamErrorOnInvalidHttpMessage_ = value;
        }
      } else {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    public Builder clearOverrideStreamErrorOnInvalidHttpMessage() {
      bitField0_ = (bitField0_ & ~0x00000040);
      overrideStreamErrorOnInvalidHttpMessage_ = null;
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ != null) {
        overrideStreamErrorOnInvalidHttpMessageBuilder_.dispose();
        overrideStreamErrorOnInvalidHttpMessageBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    public com.google.protobuf.BoolValue.Builder getOverrideStreamErrorOnInvalidHttpMessageBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getOverrideStreamErrorOnInvalidHttpMessageFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getOverrideStreamErrorOnInvalidHttpMessageOrBuilder() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ != null) {
        return overrideStreamErrorOnInvalidHttpMessageBuilder_.getMessageOrBuilder();
      } else {
        return overrideStreamErrorOnInvalidHttpMessage_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : overrideStreamErrorOnInvalidHttpMessage_;
      }
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
     * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
     * when this option is true, then Envoy will leave the HTTP/1.1 connection
     * open where possible.
     * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
     * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getOverrideStreamErrorOnInvalidHttpMessageFieldBuilder() {
      if (overrideStreamErrorOnInvalidHttpMessageBuilder_ == null) {
        overrideStreamErrorOnInvalidHttpMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getOverrideStreamErrorOnInvalidHttpMessage(),
                getParentForChildren(),
                isClean());
        overrideStreamErrorOnInvalidHttpMessage_ = null;
      }
      return overrideStreamErrorOnInvalidHttpMessageBuilder_;
    }

    private boolean sendFullyQualifiedUrl_ ;
    /**
     * <pre>
     * Allows sending fully qualified URLs when proxying the first line of the
     * response. By default, Envoy will only send the path components in the first line.
     * If this is true, Envoy will create a fully qualified URI composing scheme
     * (inferred if not present), host (from the host/:authority header) and path
     * (from first line or :path header).
     * </pre>
     *
     * <code>bool send_fully_qualified_url = 8;</code>
     * @return The sendFullyQualifiedUrl.
     */
    @java.lang.Override
    public boolean getSendFullyQualifiedUrl() {
      return sendFullyQualifiedUrl_;
    }
    /**
     * <pre>
     * Allows sending fully qualified URLs when proxying the first line of the
     * response. By default, Envoy will only send the path components in the first line.
     * If this is true, Envoy will create a fully qualified URI composing scheme
     * (inferred if not present), host (from the host/:authority header) and path
     * (from first line or :path header).
     * </pre>
     *
     * <code>bool send_fully_qualified_url = 8;</code>
     * @param value The sendFullyQualifiedUrl to set.
     * @return This builder for chaining.
     */
    public Builder setSendFullyQualifiedUrl(boolean value) {
      
      sendFullyQualifiedUrl_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows sending fully qualified URLs when proxying the first line of the
     * response. By default, Envoy will only send the path components in the first line.
     * If this is true, Envoy will create a fully qualified URI composing scheme
     * (inferred if not present), host (from the host/:authority header) and path
     * (from first line or :path header).
     * </pre>
     *
     * <code>bool send_fully_qualified_url = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSendFullyQualifiedUrl() {
      bitField0_ = (bitField0_ & ~0x00000080);
      sendFullyQualifiedUrl_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.Http1ProtocolOptions)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.Http1ProtocolOptions)
  private static final io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions();
  }

  public static io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Http1ProtocolOptions>
      PARSER = new com.google.protobuf.AbstractParser<Http1ProtocolOptions>() {
    @java.lang.Override
    public Http1ProtocolOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Http1ProtocolOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Http1ProtocolOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

