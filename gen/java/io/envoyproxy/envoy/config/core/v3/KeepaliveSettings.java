// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * Protobuf type {@code envoy.config.core.v3.KeepaliveSettings}
 */
public final class KeepaliveSettings extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.KeepaliveSettings)
    KeepaliveSettingsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use KeepaliveSettings.newBuilder() to construct.
  private KeepaliveSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private KeepaliveSettings() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new KeepaliveSettings();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_KeepaliveSettings_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_KeepaliveSettings_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.class, io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.Builder.class);
  }

  public static final int INTERVAL_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration interval_;
  /**
   * <pre>
   * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
   * If this is zero, interval PINGs will not be sent.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the interval field is set.
   */
  @java.lang.Override
  public boolean hasInterval() {
    return interval_ != null;
  }
  /**
   * <pre>
   * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
   * If this is zero, interval PINGs will not be sent.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
   * @return The interval.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getInterval() {
    return interval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : interval_;
  }
  /**
   * <pre>
   * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
   * If this is zero, interval PINGs will not be sent.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getIntervalOrBuilder() {
    return interval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : interval_;
  }

  public static final int TIMEOUT_FIELD_NUMBER = 2;
  private com.google.protobuf.Duration timeout_;
  /**
   * <pre>
   * How long to wait for a response to a keepalive PING. If a response is not received within this
   * time period, the connection will be aborted. Note that in order to prevent the influence of
   * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
   * the connection, under the assumption that if a frame is received the connection is healthy.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the timeout field is set.
   */
  @java.lang.Override
  public boolean hasTimeout() {
    return timeout_ != null;
  }
  /**
   * <pre>
   * How long to wait for a response to a keepalive PING. If a response is not received within this
   * time period, the connection will be aborted. Note that in order to prevent the influence of
   * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
   * the connection, under the assumption that if a frame is received the connection is healthy.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
   * @return The timeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getTimeout() {
    return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
  }
  /**
   * <pre>
   * How long to wait for a response to a keepalive PING. If a response is not received within this
   * time period, the connection will be aborted. Note that in order to prevent the influence of
   * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
   * the connection, under the assumption that if a frame is received the connection is healthy.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder() {
    return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
  }

  public static final int INTERVAL_JITTER_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.type.v3.Percent intervalJitter_;
  /**
   * <pre>
   * A random jitter amount as a percentage of interval that will be added to each interval.
   * A value of zero means there will be no jitter.
   * The default value is 15%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
   * @return Whether the intervalJitter field is set.
   */
  @java.lang.Override
  public boolean hasIntervalJitter() {
    return intervalJitter_ != null;
  }
  /**
   * <pre>
   * A random jitter amount as a percentage of interval that will be added to each interval.
   * A value of zero means there will be no jitter.
   * The default value is 15%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
   * @return The intervalJitter.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.Percent getIntervalJitter() {
    return intervalJitter_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : intervalJitter_;
  }
  /**
   * <pre>
   * A random jitter amount as a percentage of interval that will be added to each interval.
   * A value of zero means there will be no jitter.
   * The default value is 15%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.PercentOrBuilder getIntervalJitterOrBuilder() {
    return intervalJitter_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : intervalJitter_;
  }

  public static final int CONNECTION_IDLE_INTERVAL_FIELD_NUMBER = 4;
  private com.google.protobuf.Duration connectionIdleInterval_;
  /**
   * <pre>
   * If the connection has been idle for this duration, send a HTTP/2 ping ahead
   * of new stream creation, to quickly detect dead connections.
   * If this is zero, this type of PING will not be sent.
   * If an interval ping is outstanding, a second ping will not be sent as the
   * interval ping will determine if the connection is dead.
   * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
   * </pre>
   *
   * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the connectionIdleInterval field is set.
   */
  @java.lang.Override
  public boolean hasConnectionIdleInterval() {
    return connectionIdleInterval_ != null;
  }
  /**
   * <pre>
   * If the connection has been idle for this duration, send a HTTP/2 ping ahead
   * of new stream creation, to quickly detect dead connections.
   * If this is zero, this type of PING will not be sent.
   * If an interval ping is outstanding, a second ping will not be sent as the
   * interval ping will determine if the connection is dead.
   * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
   * </pre>
   *
   * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
   * @return The connectionIdleInterval.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getConnectionIdleInterval() {
    return connectionIdleInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : connectionIdleInterval_;
  }
  /**
   * <pre>
   * If the connection has been idle for this duration, send a HTTP/2 ping ahead
   * of new stream creation, to quickly detect dead connections.
   * If this is zero, this type of PING will not be sent.
   * If an interval ping is outstanding, a second ping will not be sent as the
   * interval ping will determine if the connection is dead.
   * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
   * </pre>
   *
   * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getConnectionIdleIntervalOrBuilder() {
    return connectionIdleInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : connectionIdleInterval_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (interval_ != null) {
      output.writeMessage(1, getInterval());
    }
    if (timeout_ != null) {
      output.writeMessage(2, getTimeout());
    }
    if (intervalJitter_ != null) {
      output.writeMessage(3, getIntervalJitter());
    }
    if (connectionIdleInterval_ != null) {
      output.writeMessage(4, getConnectionIdleInterval());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (interval_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInterval());
    }
    if (timeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTimeout());
    }
    if (intervalJitter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getIntervalJitter());
    }
    if (connectionIdleInterval_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getConnectionIdleInterval());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.KeepaliveSettings)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.KeepaliveSettings other = (io.envoyproxy.envoy.config.core.v3.KeepaliveSettings) obj;

    if (hasInterval() != other.hasInterval()) return false;
    if (hasInterval()) {
      if (!getInterval()
          .equals(other.getInterval())) return false;
    }
    if (hasTimeout() != other.hasTimeout()) return false;
    if (hasTimeout()) {
      if (!getTimeout()
          .equals(other.getTimeout())) return false;
    }
    if (hasIntervalJitter() != other.hasIntervalJitter()) return false;
    if (hasIntervalJitter()) {
      if (!getIntervalJitter()
          .equals(other.getIntervalJitter())) return false;
    }
    if (hasConnectionIdleInterval() != other.hasConnectionIdleInterval()) return false;
    if (hasConnectionIdleInterval()) {
      if (!getConnectionIdleInterval()
          .equals(other.getConnectionIdleInterval())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInterval()) {
      hash = (37 * hash) + INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getInterval().hashCode();
    }
    if (hasTimeout()) {
      hash = (37 * hash) + TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getTimeout().hashCode();
    }
    if (hasIntervalJitter()) {
      hash = (37 * hash) + INTERVAL_JITTER_FIELD_NUMBER;
      hash = (53 * hash) + getIntervalJitter().hashCode();
    }
    if (hasConnectionIdleInterval()) {
      hash = (37 * hash) + CONNECTION_IDLE_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getConnectionIdleInterval().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.KeepaliveSettings prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.config.core.v3.KeepaliveSettings}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.KeepaliveSettings)
      io.envoyproxy.envoy.config.core.v3.KeepaliveSettingsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_KeepaliveSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_KeepaliveSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.class, io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      interval_ = null;
      if (intervalBuilder_ != null) {
        intervalBuilder_.dispose();
        intervalBuilder_ = null;
      }
      timeout_ = null;
      if (timeoutBuilder_ != null) {
        timeoutBuilder_.dispose();
        timeoutBuilder_ = null;
      }
      intervalJitter_ = null;
      if (intervalJitterBuilder_ != null) {
        intervalJitterBuilder_.dispose();
        intervalJitterBuilder_ = null;
      }
      connectionIdleInterval_ = null;
      if (connectionIdleIntervalBuilder_ != null) {
        connectionIdleIntervalBuilder_.dispose();
        connectionIdleIntervalBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_KeepaliveSettings_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.KeepaliveSettings getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.KeepaliveSettings build() {
      io.envoyproxy.envoy.config.core.v3.KeepaliveSettings result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.KeepaliveSettings buildPartial() {
      io.envoyproxy.envoy.config.core.v3.KeepaliveSettings result = new io.envoyproxy.envoy.config.core.v3.KeepaliveSettings(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.config.core.v3.KeepaliveSettings result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.interval_ = intervalBuilder_ == null
            ? interval_
            : intervalBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.timeout_ = timeoutBuilder_ == null
            ? timeout_
            : timeoutBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.intervalJitter_ = intervalJitterBuilder_ == null
            ? intervalJitter_
            : intervalJitterBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.connectionIdleInterval_ = connectionIdleIntervalBuilder_ == null
            ? connectionIdleInterval_
            : connectionIdleIntervalBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.KeepaliveSettings) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.KeepaliveSettings)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.KeepaliveSettings other) {
      if (other == io.envoyproxy.envoy.config.core.v3.KeepaliveSettings.getDefaultInstance()) return this;
      if (other.hasInterval()) {
        mergeInterval(other.getInterval());
      }
      if (other.hasTimeout()) {
        mergeTimeout(other.getTimeout());
      }
      if (other.hasIntervalJitter()) {
        mergeIntervalJitter(other.getIntervalJitter());
      }
      if (other.hasConnectionIdleInterval()) {
        mergeConnectionIdleInterval(other.getConnectionIdleInterval());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getIntervalFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getTimeoutFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getIntervalJitterFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getConnectionIdleIntervalFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Duration interval_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> intervalBuilder_;
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the interval field is set.
     */
    public boolean hasInterval() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     * @return The interval.
     */
    public com.google.protobuf.Duration getInterval() {
      if (intervalBuilder_ == null) {
        return interval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : interval_;
      } else {
        return intervalBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setInterval(com.google.protobuf.Duration value) {
      if (intervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        interval_ = value;
      } else {
        intervalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setInterval(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (intervalBuilder_ == null) {
        interval_ = builderForValue.build();
      } else {
        intervalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeInterval(com.google.protobuf.Duration value) {
      if (intervalBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          interval_ != null &&
          interval_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getIntervalBuilder().mergeFrom(value);
        } else {
          interval_ = value;
        }
      } else {
        intervalBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearInterval() {
      bitField0_ = (bitField0_ & ~0x00000001);
      interval_ = null;
      if (intervalBuilder_ != null) {
        intervalBuilder_.dispose();
        intervalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getIntervalBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getIntervalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getIntervalOrBuilder() {
      if (intervalBuilder_ != null) {
        return intervalBuilder_.getMessageOrBuilder();
      } else {
        return interval_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : interval_;
      }
    }
    /**
     * <pre>
     * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
     * If this is zero, interval PINGs will not be sent.
     * </pre>
     *
     * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getIntervalFieldBuilder() {
      if (intervalBuilder_ == null) {
        intervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getInterval(),
                getParentForChildren(),
                isClean());
        interval_ = null;
      }
      return intervalBuilder_;
    }

    private com.google.protobuf.Duration timeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> timeoutBuilder_;
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the timeout field is set.
     */
    public boolean hasTimeout() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     * @return The timeout.
     */
    public com.google.protobuf.Duration getTimeout() {
      if (timeoutBuilder_ == null) {
        return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
      } else {
        return timeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setTimeout(com.google.protobuf.Duration value) {
      if (timeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        timeout_ = value;
      } else {
        timeoutBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (timeoutBuilder_ == null) {
        timeout_ = builderForValue.build();
      } else {
        timeoutBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeTimeout(com.google.protobuf.Duration value) {
      if (timeoutBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          timeout_ != null &&
          timeout_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getTimeoutBuilder().mergeFrom(value);
        } else {
          timeout_ = value;
        }
      } else {
        timeoutBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearTimeout() {
      bitField0_ = (bitField0_ & ~0x00000002);
      timeout_ = null;
      if (timeoutBuilder_ != null) {
        timeoutBuilder_.dispose();
        timeoutBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getTimeoutBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder() {
      if (timeoutBuilder_ != null) {
        return timeoutBuilder_.getMessageOrBuilder();
      } else {
        return timeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : timeout_;
      }
    }
    /**
     * <pre>
     * How long to wait for a response to a keepalive PING. If a response is not received within this
     * time period, the connection will be aborted. Note that in order to prevent the influence of
     * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
     * the connection, under the assumption that if a frame is received the connection is healthy.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getTimeoutFieldBuilder() {
      if (timeoutBuilder_ == null) {
        timeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getTimeout(),
                getParentForChildren(),
                isClean());
        timeout_ = null;
      }
      return timeoutBuilder_;
    }

    private io.envoyproxy.envoy.type.v3.Percent intervalJitter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> intervalJitterBuilder_;
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     * @return Whether the intervalJitter field is set.
     */
    public boolean hasIntervalJitter() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     * @return The intervalJitter.
     */
    public io.envoyproxy.envoy.type.v3.Percent getIntervalJitter() {
      if (intervalJitterBuilder_ == null) {
        return intervalJitter_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : intervalJitter_;
      } else {
        return intervalJitterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    public Builder setIntervalJitter(io.envoyproxy.envoy.type.v3.Percent value) {
      if (intervalJitterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        intervalJitter_ = value;
      } else {
        intervalJitterBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    public Builder setIntervalJitter(
        io.envoyproxy.envoy.type.v3.Percent.Builder builderForValue) {
      if (intervalJitterBuilder_ == null) {
        intervalJitter_ = builderForValue.build();
      } else {
        intervalJitterBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    public Builder mergeIntervalJitter(io.envoyproxy.envoy.type.v3.Percent value) {
      if (intervalJitterBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          intervalJitter_ != null &&
          intervalJitter_ != io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance()) {
          getIntervalJitterBuilder().mergeFrom(value);
        } else {
          intervalJitter_ = value;
        }
      } else {
        intervalJitterBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    public Builder clearIntervalJitter() {
      bitField0_ = (bitField0_ & ~0x00000004);
      intervalJitter_ = null;
      if (intervalJitterBuilder_ != null) {
        intervalJitterBuilder_.dispose();
        intervalJitterBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.Percent.Builder getIntervalJitterBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getIntervalJitterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.PercentOrBuilder getIntervalJitterOrBuilder() {
      if (intervalJitterBuilder_ != null) {
        return intervalJitterBuilder_.getMessageOrBuilder();
      } else {
        return intervalJitter_ == null ?
            io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : intervalJitter_;
      }
    }
    /**
     * <pre>
     * A random jitter amount as a percentage of interval that will be added to each interval.
     * A value of zero means there will be no jitter.
     * The default value is 15%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> 
        getIntervalJitterFieldBuilder() {
      if (intervalJitterBuilder_ == null) {
        intervalJitterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder>(
                getIntervalJitter(),
                getParentForChildren(),
                isClean());
        intervalJitter_ = null;
      }
      return intervalJitterBuilder_;
    }

    private com.google.protobuf.Duration connectionIdleInterval_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> connectionIdleIntervalBuilder_;
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     * @return Whether the connectionIdleInterval field is set.
     */
    public boolean hasConnectionIdleInterval() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     * @return The connectionIdleInterval.
     */
    public com.google.protobuf.Duration getConnectionIdleInterval() {
      if (connectionIdleIntervalBuilder_ == null) {
        return connectionIdleInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : connectionIdleInterval_;
      } else {
        return connectionIdleIntervalBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setConnectionIdleInterval(com.google.protobuf.Duration value) {
      if (connectionIdleIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        connectionIdleInterval_ = value;
      } else {
        connectionIdleIntervalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setConnectionIdleInterval(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (connectionIdleIntervalBuilder_ == null) {
        connectionIdleInterval_ = builderForValue.build();
      } else {
        connectionIdleIntervalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeConnectionIdleInterval(com.google.protobuf.Duration value) {
      if (connectionIdleIntervalBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          connectionIdleInterval_ != null &&
          connectionIdleInterval_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getConnectionIdleIntervalBuilder().mergeFrom(value);
        } else {
          connectionIdleInterval_ = value;
        }
      } else {
        connectionIdleIntervalBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearConnectionIdleInterval() {
      bitField0_ = (bitField0_ & ~0x00000008);
      connectionIdleInterval_ = null;
      if (connectionIdleIntervalBuilder_ != null) {
        connectionIdleIntervalBuilder_.dispose();
        connectionIdleIntervalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getConnectionIdleIntervalBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getConnectionIdleIntervalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getConnectionIdleIntervalOrBuilder() {
      if (connectionIdleIntervalBuilder_ != null) {
        return connectionIdleIntervalBuilder_.getMessageOrBuilder();
      } else {
        return connectionIdleInterval_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : connectionIdleInterval_;
      }
    }
    /**
     * <pre>
     * If the connection has been idle for this duration, send a HTTP/2 ping ahead
     * of new stream creation, to quickly detect dead connections.
     * If this is zero, this type of PING will not be sent.
     * If an interval ping is outstanding, a second ping will not be sent as the
     * interval ping will determine if the connection is dead.
     * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
     * </pre>
     *
     * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getConnectionIdleIntervalFieldBuilder() {
      if (connectionIdleIntervalBuilder_ == null) {
        connectionIdleIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getConnectionIdleInterval(),
                getParentForChildren(),
                isClean());
        connectionIdleInterval_ = null;
      }
      return connectionIdleIntervalBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.KeepaliveSettings)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.KeepaliveSettings)
  private static final io.envoyproxy.envoy.config.core.v3.KeepaliveSettings DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.KeepaliveSettings();
  }

  public static io.envoyproxy.envoy.config.core.v3.KeepaliveSettings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KeepaliveSettings>
      PARSER = new com.google.protobuf.AbstractParser<KeepaliveSettings>() {
    @java.lang.Override
    public KeepaliveSettings parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<KeepaliveSettings> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<KeepaliveSettings> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.KeepaliveSettings getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

