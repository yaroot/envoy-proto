// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/config_source.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * <pre>
 * Local filesystem path configuration source.
 * </pre>
 *
 * Protobuf type {@code envoy.config.core.v3.PathConfigSource}
 */
public final class PathConfigSource extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.PathConfigSource)
    PathConfigSourceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PathConfigSource.newBuilder() to construct.
  private PathConfigSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PathConfigSource() {
    path_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PathConfigSource();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PathConfigSource(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            path_ = s;
            break;
          }
          case 18: {
            io.envoyproxy.envoy.config.core.v3.WatchedDirectory.Builder subBuilder = null;
            if (watchedDirectory_ != null) {
              subBuilder = watchedDirectory_.toBuilder();
            }
            watchedDirectory_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.WatchedDirectory.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(watchedDirectory_);
              watchedDirectory_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_PathConfigSource_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_PathConfigSource_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.PathConfigSource.class, io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder.class);
  }

  public static final int PATH_FIELD_NUMBER = 1;
  private volatile java.lang.Object path_;
  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
   *   This is because in general only moves are atomic. The same method of swapping files as is
   *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
   *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
   *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
   *   this path. This is required in certain deployment scenarios. See below for more information.
   * </pre>
   *
   * <code>string path = 1 [(.validate.rules) = { ... }</code>
   * @return The path.
   */
  @java.lang.Override
  public java.lang.String getPath() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      path_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
   *   This is because in general only moves are atomic. The same method of swapping files as is
   *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
   *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
   *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
   *   this path. This is required in certain deployment scenarios. See below for more information.
   * </pre>
   *
   * <code>string path = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for path.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      path_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int WATCHED_DIRECTORY_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.core.v3.WatchedDirectory watchedDirectory_;
  /**
   * <pre>
   * If configured, this directory will be watched for *moves*. When an entry in this directory is
   * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
   * Specifically, if trying to load an xDS resource using a
   * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
   * following configuration might be used:
   * 1. Store xds.yaml inside a ConfigMap.
   * 2. Mount the ConfigMap to ``/config_map/xds``
   * 3. Configure path ``/config_map/xds/xds.yaml``
   * 4. Configure watched directory ``/config_map/xds``
   * The above configuration will ensure that Envoy watches the owning directory for moves which is
   * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
   * @return Whether the watchedDirectory field is set.
   */
  @java.lang.Override
  public boolean hasWatchedDirectory() {
    return watchedDirectory_ != null;
  }
  /**
   * <pre>
   * If configured, this directory will be watched for *moves*. When an entry in this directory is
   * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
   * Specifically, if trying to load an xDS resource using a
   * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
   * following configuration might be used:
   * 1. Store xds.yaml inside a ConfigMap.
   * 2. Mount the ConfigMap to ``/config_map/xds``
   * 3. Configure path ``/config_map/xds/xds.yaml``
   * 4. Configure watched directory ``/config_map/xds``
   * The above configuration will ensure that Envoy watches the owning directory for moves which is
   * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
   * @return The watchedDirectory.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.WatchedDirectory getWatchedDirectory() {
    return watchedDirectory_ == null ? io.envoyproxy.envoy.config.core.v3.WatchedDirectory.getDefaultInstance() : watchedDirectory_;
  }
  /**
   * <pre>
   * If configured, this directory will be watched for *moves*. When an entry in this directory is
   * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
   * Specifically, if trying to load an xDS resource using a
   * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
   * following configuration might be used:
   * 1. Store xds.yaml inside a ConfigMap.
   * 2. Mount the ConfigMap to ``/config_map/xds``
   * 3. Configure path ``/config_map/xds/xds.yaml``
   * 4. Configure watched directory ``/config_map/xds``
   * The above configuration will ensure that Envoy watches the owning directory for moves which is
   * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder getWatchedDirectoryOrBuilder() {
    return getWatchedDirectory();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, path_);
    }
    if (watchedDirectory_ != null) {
      output.writeMessage(2, getWatchedDirectory());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, path_);
    }
    if (watchedDirectory_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getWatchedDirectory());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.PathConfigSource)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.PathConfigSource other = (io.envoyproxy.envoy.config.core.v3.PathConfigSource) obj;

    if (!getPath()
        .equals(other.getPath())) return false;
    if (hasWatchedDirectory() != other.hasWatchedDirectory()) return false;
    if (hasWatchedDirectory()) {
      if (!getWatchedDirectory()
          .equals(other.getWatchedDirectory())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PATH_FIELD_NUMBER;
    hash = (53 * hash) + getPath().hashCode();
    if (hasWatchedDirectory()) {
      hash = (37 * hash) + WATCHED_DIRECTORY_FIELD_NUMBER;
      hash = (53 * hash) + getWatchedDirectory().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.PathConfigSource prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Local filesystem path configuration source.
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.PathConfigSource}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.PathConfigSource)
      io.envoyproxy.envoy.config.core.v3.PathConfigSourceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_PathConfigSource_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_PathConfigSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.PathConfigSource.class, io.envoyproxy.envoy.config.core.v3.PathConfigSource.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.PathConfigSource.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      path_ = "";

      if (watchedDirectoryBuilder_ == null) {
        watchedDirectory_ = null;
      } else {
        watchedDirectory_ = null;
        watchedDirectoryBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.ConfigSourceProto.internal_static_envoy_config_core_v3_PathConfigSource_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.PathConfigSource getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.PathConfigSource build() {
      io.envoyproxy.envoy.config.core.v3.PathConfigSource result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.PathConfigSource buildPartial() {
      io.envoyproxy.envoy.config.core.v3.PathConfigSource result = new io.envoyproxy.envoy.config.core.v3.PathConfigSource(this);
      result.path_ = path_;
      if (watchedDirectoryBuilder_ == null) {
        result.watchedDirectory_ = watchedDirectory_;
      } else {
        result.watchedDirectory_ = watchedDirectoryBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.PathConfigSource) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.PathConfigSource)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.PathConfigSource other) {
      if (other == io.envoyproxy.envoy.config.core.v3.PathConfigSource.getDefaultInstance()) return this;
      if (!other.getPath().isEmpty()) {
        path_ = other.path_;
        onChanged();
      }
      if (other.hasWatchedDirectory()) {
        mergeWatchedDirectory(other.getWatchedDirectory());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.core.v3.PathConfigSource parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.core.v3.PathConfigSource) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object path_ = "";
    /**
     * <pre>
     * Path on the filesystem to source and watch for configuration updates.
     * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
     * the certificate and key files are also watched for updates.
     * .. note::
     *  The path to the source must exist at config load time.
     * .. note::
     *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
     *   This is because in general only moves are atomic. The same method of swapping files as is
     *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
     *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
     *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
     *   this path. This is required in certain deployment scenarios. See below for more information.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @return The path.
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Path on the filesystem to source and watch for configuration updates.
     * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
     * the certificate and key files are also watched for updates.
     * .. note::
     *  The path to the source must exist at config load time.
     * .. note::
     *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
     *   This is because in general only moves are atomic. The same method of swapping files as is
     *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
     *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
     *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
     *   this path. This is required in certain deployment scenarios. See below for more information.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for path.
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Path on the filesystem to source and watch for configuration updates.
     * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
     * the certificate and key files are also watched for updates.
     * .. note::
     *  The path to the source must exist at config load time.
     * .. note::
     *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
     *   This is because in general only moves are atomic. The same method of swapping files as is
     *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
     *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
     *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
     *   this path. This is required in certain deployment scenarios. See below for more information.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      path_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Path on the filesystem to source and watch for configuration updates.
     * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
     * the certificate and key files are also watched for updates.
     * .. note::
     *  The path to the source must exist at config load time.
     * .. note::
     *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
     *   This is because in general only moves are atomic. The same method of swapping files as is
     *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
     *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
     *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
     *   this path. This is required in certain deployment scenarios. See below for more information.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      
      path_ = getDefaultInstance().getPath();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Path on the filesystem to source and watch for configuration updates.
     * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
     * the certificate and key files are also watched for updates.
     * .. note::
     *  The path to the source must exist at config load time.
     * .. note::
     *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
     *   This is because in general only moves are atomic. The same method of swapping files as is
     *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
     *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
     *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
     *   this path. This is required in certain deployment scenarios. See below for more information.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      path_ = value;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.WatchedDirectory watchedDirectory_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.WatchedDirectory, io.envoyproxy.envoy.config.core.v3.WatchedDirectory.Builder, io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder> watchedDirectoryBuilder_;
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     * @return Whether the watchedDirectory field is set.
     */
    public boolean hasWatchedDirectory() {
      return watchedDirectoryBuilder_ != null || watchedDirectory_ != null;
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     * @return The watchedDirectory.
     */
    public io.envoyproxy.envoy.config.core.v3.WatchedDirectory getWatchedDirectory() {
      if (watchedDirectoryBuilder_ == null) {
        return watchedDirectory_ == null ? io.envoyproxy.envoy.config.core.v3.WatchedDirectory.getDefaultInstance() : watchedDirectory_;
      } else {
        return watchedDirectoryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    public Builder setWatchedDirectory(io.envoyproxy.envoy.config.core.v3.WatchedDirectory value) {
      if (watchedDirectoryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        watchedDirectory_ = value;
        onChanged();
      } else {
        watchedDirectoryBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    public Builder setWatchedDirectory(
        io.envoyproxy.envoy.config.core.v3.WatchedDirectory.Builder builderForValue) {
      if (watchedDirectoryBuilder_ == null) {
        watchedDirectory_ = builderForValue.build();
        onChanged();
      } else {
        watchedDirectoryBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    public Builder mergeWatchedDirectory(io.envoyproxy.envoy.config.core.v3.WatchedDirectory value) {
      if (watchedDirectoryBuilder_ == null) {
        if (watchedDirectory_ != null) {
          watchedDirectory_ =
            io.envoyproxy.envoy.config.core.v3.WatchedDirectory.newBuilder(watchedDirectory_).mergeFrom(value).buildPartial();
        } else {
          watchedDirectory_ = value;
        }
        onChanged();
      } else {
        watchedDirectoryBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    public Builder clearWatchedDirectory() {
      if (watchedDirectoryBuilder_ == null) {
        watchedDirectory_ = null;
        onChanged();
      } else {
        watchedDirectory_ = null;
        watchedDirectoryBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.WatchedDirectory.Builder getWatchedDirectoryBuilder() {
      
      onChanged();
      return getWatchedDirectoryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder getWatchedDirectoryOrBuilder() {
      if (watchedDirectoryBuilder_ != null) {
        return watchedDirectoryBuilder_.getMessageOrBuilder();
      } else {
        return watchedDirectory_ == null ?
            io.envoyproxy.envoy.config.core.v3.WatchedDirectory.getDefaultInstance() : watchedDirectory_;
      }
    }
    /**
     * <pre>
     * If configured, this directory will be watched for *moves*. When an entry in this directory is
     * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
     * Specifically, if trying to load an xDS resource using a
     * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
     * following configuration might be used:
     * 1. Store xds.yaml inside a ConfigMap.
     * 2. Mount the ConfigMap to ``/config_map/xds``
     * 3. Configure path ``/config_map/xds/xds.yaml``
     * 4. Configure watched directory ``/config_map/xds``
     * The above configuration will ensure that Envoy watches the owning directory for moves which is
     * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
     * </pre>
     *
     * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.WatchedDirectory, io.envoyproxy.envoy.config.core.v3.WatchedDirectory.Builder, io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder> 
        getWatchedDirectoryFieldBuilder() {
      if (watchedDirectoryBuilder_ == null) {
        watchedDirectoryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.WatchedDirectory, io.envoyproxy.envoy.config.core.v3.WatchedDirectory.Builder, io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder>(
                getWatchedDirectory(),
                getParentForChildren(),
                isClean());
        watchedDirectory_ = null;
      }
      return watchedDirectoryBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.PathConfigSource)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.PathConfigSource)
  private static final io.envoyproxy.envoy.config.core.v3.PathConfigSource DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.PathConfigSource();
  }

  public static io.envoyproxy.envoy.config.core.v3.PathConfigSource getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PathConfigSource>
      PARSER = new com.google.protobuf.AbstractParser<PathConfigSource>() {
    @java.lang.Override
    public PathConfigSource parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PathConfigSource(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PathConfigSource> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PathConfigSource> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.PathConfigSource getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

