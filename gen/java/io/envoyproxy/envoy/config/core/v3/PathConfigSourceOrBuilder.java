// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/config_source.proto

package io.envoyproxy.envoy.config.core.v3;

public interface PathConfigSourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.PathConfigSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
   *   This is because in general only moves are atomic. The same method of swapping files as is
   *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
   *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
   *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
   *   this path. This is required in certain deployment scenarios. See below for more information.
   * </pre>
   *
   * <code>string path = 1 [(.validate.rules) = { ... }</code>
   * @return The path.
   */
  java.lang.String getPath();
  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for a :ref:`secret &lt;envoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.
   *   This is because in general only moves are atomic. The same method of swapping files as is
   *   demonstrated in the :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be
   *   used here also. If ``watched_directory`` is configured, no watch will be placed directly on
   *   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of
   *   this path. This is required in certain deployment scenarios. See below for more information.
   * </pre>
   *
   * <code>string path = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for path.
   */
  com.google.protobuf.ByteString
      getPathBytes();

  /**
   * <pre>
   * If configured, this directory will be watched for *moves*. When an entry in this directory is
   * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
   * Specifically, if trying to load an xDS resource using a
   * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
   * following configuration might be used:
   * 1. Store xds.yaml inside a ConfigMap.
   * 2. Mount the ConfigMap to ``/config_map/xds``
   * 3. Configure path ``/config_map/xds/xds.yaml``
   * 4. Configure watched directory ``/config_map/xds``
   * The above configuration will ensure that Envoy watches the owning directory for moves which is
   * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
   * @return Whether the watchedDirectory field is set.
   */
  boolean hasWatchedDirectory();
  /**
   * <pre>
   * If configured, this directory will be watched for *moves*. When an entry in this directory is
   * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
   * Specifically, if trying to load an xDS resource using a
   * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
   * following configuration might be used:
   * 1. Store xds.yaml inside a ConfigMap.
   * 2. Mount the ConfigMap to ``/config_map/xds``
   * 3. Configure path ``/config_map/xds/xds.yaml``
   * 4. Configure watched directory ``/config_map/xds``
   * The above configuration will ensure that Envoy watches the owning directory for moves which is
   * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
   * @return The watchedDirectory.
   */
  io.envoyproxy.envoy.config.core.v3.WatchedDirectory getWatchedDirectory();
  /**
   * <pre>
   * If configured, this directory will be watched for *moves*. When an entry in this directory is
   * moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios.
   * Specifically, if trying to load an xDS resource using a
   * `Kubernetes ConfigMap &lt;https://kubernetes.io/docs/concepts/configuration/configmap/&gt;`_, the
   * following configuration might be used:
   * 1. Store xds.yaml inside a ConfigMap.
   * 2. Mount the ConfigMap to ``/config_map/xds``
   * 3. Configure path ``/config_map/xds/xds.yaml``
   * 4. Configure watched directory ``/config_map/xds``
   * The above configuration will ensure that Envoy watches the owning directory for moves which is
   * required due to how Kubernetes manages ConfigMap symbolic links during atomic updates.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder getWatchedDirectoryOrBuilder();
}
