// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * <pre>
 * QUIC protocol options which apply to both downstream and upstream connections.
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.config.core.v3.QuicProtocolOptions}
 */
public final class QuicProtocolOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.QuicProtocolOptions)
    QuicProtocolOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use QuicProtocolOptions.newBuilder() to construct.
  private QuicProtocolOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private QuicProtocolOptions() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new QuicProtocolOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_QuicProtocolOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_QuicProtocolOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.class, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder.class);
  }

  public static final int MAX_CONCURRENT_STREAMS_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value maxConcurrentStreams_;
  /**
   * <pre>
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the maxConcurrentStreams field is set.
   */
  @java.lang.Override
  public boolean hasMaxConcurrentStreams() {
    return maxConcurrentStreams_ != null;
  }
  /**
   * <pre>
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
   * @return The maxConcurrentStreams.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxConcurrentStreams() {
    return maxConcurrentStreams_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
  }
  /**
   * <pre>
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxConcurrentStreamsOrBuilder() {
    return maxConcurrentStreams_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
  }

  public static final int INITIAL_STREAM_WINDOW_SIZE_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt32Value initialStreamWindowSize_;
  /**
   * <pre>
   * `Initial stream-level flow-control receive window
   * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
   * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
   * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
   * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the stream buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the initialStreamWindowSize field is set.
   */
  @java.lang.Override
  public boolean hasInitialStreamWindowSize() {
    return initialStreamWindowSize_ != null;
  }
  /**
   * <pre>
   * `Initial stream-level flow-control receive window
   * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
   * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
   * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
   * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the stream buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
   * @return The initialStreamWindowSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getInitialStreamWindowSize() {
    return initialStreamWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
  }
  /**
   * <pre>
   * `Initial stream-level flow-control receive window
   * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
   * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
   * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
   * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the stream buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getInitialStreamWindowSizeOrBuilder() {
    return initialStreamWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
  }

  public static final int INITIAL_CONNECTION_WINDOW_SIZE_FIELD_NUMBER = 3;
  private com.google.protobuf.UInt32Value initialConnectionWindowSize_;
  /**
   * <pre>
   * Similar to ``initial_stream_window_size``, but for connection-level
   * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
   * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
   * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
   * window size now, so it's also the minimum.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the initialConnectionWindowSize field is set.
   */
  @java.lang.Override
  public boolean hasInitialConnectionWindowSize() {
    return initialConnectionWindowSize_ != null;
  }
  /**
   * <pre>
   * Similar to ``initial_stream_window_size``, but for connection-level
   * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
   * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
   * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
   * window size now, so it's also the minimum.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
   * @return The initialConnectionWindowSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getInitialConnectionWindowSize() {
    return initialConnectionWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
  }
  /**
   * <pre>
   * Similar to ``initial_stream_window_size``, but for connection-level
   * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
   * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
   * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
   * window size now, so it's also the minimum.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getInitialConnectionWindowSizeOrBuilder() {
    return initialConnectionWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
  }

  public static final int NUM_TIMEOUTS_TO_TRIGGER_PORT_MIGRATION_FIELD_NUMBER = 4;
  private com.google.protobuf.UInt32Value numTimeoutsToTriggerPortMigration_;
  /**
   * <pre>
   * The number of timeouts that can occur before port migration is triggered for QUIC clients.
   * This defaults to 1. If set to 0, port migration will not occur on path degrading.
   * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
   * This has no effect on server sessions.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the numTimeoutsToTriggerPortMigration field is set.
   */
  @java.lang.Override
  public boolean hasNumTimeoutsToTriggerPortMigration() {
    return numTimeoutsToTriggerPortMigration_ != null;
  }
  /**
   * <pre>
   * The number of timeouts that can occur before port migration is triggered for QUIC clients.
   * This defaults to 1. If set to 0, port migration will not occur on path degrading.
   * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
   * This has no effect on server sessions.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
   * @return The numTimeoutsToTriggerPortMigration.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getNumTimeoutsToTriggerPortMigration() {
    return numTimeoutsToTriggerPortMigration_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : numTimeoutsToTriggerPortMigration_;
  }
  /**
   * <pre>
   * The number of timeouts that can occur before port migration is triggered for QUIC clients.
   * This defaults to 1. If set to 0, port migration will not occur on path degrading.
   * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
   * This has no effect on server sessions.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getNumTimeoutsToTriggerPortMigrationOrBuilder() {
    return numTimeoutsToTriggerPortMigration_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : numTimeoutsToTriggerPortMigration_;
  }

  public static final int CONNECTION_KEEPALIVE_FIELD_NUMBER = 5;
  private io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings connectionKeepalive_;
  /**
   * <pre>
   * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
   * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
   * </pre>
   *
   * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
   * @return Whether the connectionKeepalive field is set.
   */
  @java.lang.Override
  public boolean hasConnectionKeepalive() {
    return connectionKeepalive_ != null;
  }
  /**
   * <pre>
   * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
   * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
   * </pre>
   *
   * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
   * @return The connectionKeepalive.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings getConnectionKeepalive() {
    return connectionKeepalive_ == null ? io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.getDefaultInstance() : connectionKeepalive_;
  }
  /**
   * <pre>
   * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
   * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
   * </pre>
   *
   * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettingsOrBuilder getConnectionKeepaliveOrBuilder() {
    return connectionKeepalive_ == null ? io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.getDefaultInstance() : connectionKeepalive_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (maxConcurrentStreams_ != null) {
      output.writeMessage(1, getMaxConcurrentStreams());
    }
    if (initialStreamWindowSize_ != null) {
      output.writeMessage(2, getInitialStreamWindowSize());
    }
    if (initialConnectionWindowSize_ != null) {
      output.writeMessage(3, getInitialConnectionWindowSize());
    }
    if (numTimeoutsToTriggerPortMigration_ != null) {
      output.writeMessage(4, getNumTimeoutsToTriggerPortMigration());
    }
    if (connectionKeepalive_ != null) {
      output.writeMessage(5, getConnectionKeepalive());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (maxConcurrentStreams_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getMaxConcurrentStreams());
    }
    if (initialStreamWindowSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getInitialStreamWindowSize());
    }
    if (initialConnectionWindowSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getInitialConnectionWindowSize());
    }
    if (numTimeoutsToTriggerPortMigration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getNumTimeoutsToTriggerPortMigration());
    }
    if (connectionKeepalive_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getConnectionKeepalive());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions other = (io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions) obj;

    if (hasMaxConcurrentStreams() != other.hasMaxConcurrentStreams()) return false;
    if (hasMaxConcurrentStreams()) {
      if (!getMaxConcurrentStreams()
          .equals(other.getMaxConcurrentStreams())) return false;
    }
    if (hasInitialStreamWindowSize() != other.hasInitialStreamWindowSize()) return false;
    if (hasInitialStreamWindowSize()) {
      if (!getInitialStreamWindowSize()
          .equals(other.getInitialStreamWindowSize())) return false;
    }
    if (hasInitialConnectionWindowSize() != other.hasInitialConnectionWindowSize()) return false;
    if (hasInitialConnectionWindowSize()) {
      if (!getInitialConnectionWindowSize()
          .equals(other.getInitialConnectionWindowSize())) return false;
    }
    if (hasNumTimeoutsToTriggerPortMigration() != other.hasNumTimeoutsToTriggerPortMigration()) return false;
    if (hasNumTimeoutsToTriggerPortMigration()) {
      if (!getNumTimeoutsToTriggerPortMigration()
          .equals(other.getNumTimeoutsToTriggerPortMigration())) return false;
    }
    if (hasConnectionKeepalive() != other.hasConnectionKeepalive()) return false;
    if (hasConnectionKeepalive()) {
      if (!getConnectionKeepalive()
          .equals(other.getConnectionKeepalive())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMaxConcurrentStreams()) {
      hash = (37 * hash) + MAX_CONCURRENT_STREAMS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxConcurrentStreams().hashCode();
    }
    if (hasInitialStreamWindowSize()) {
      hash = (37 * hash) + INITIAL_STREAM_WINDOW_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getInitialStreamWindowSize().hashCode();
    }
    if (hasInitialConnectionWindowSize()) {
      hash = (37 * hash) + INITIAL_CONNECTION_WINDOW_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getInitialConnectionWindowSize().hashCode();
    }
    if (hasNumTimeoutsToTriggerPortMigration()) {
      hash = (37 * hash) + NUM_TIMEOUTS_TO_TRIGGER_PORT_MIGRATION_FIELD_NUMBER;
      hash = (53 * hash) + getNumTimeoutsToTriggerPortMigration().hashCode();
    }
    if (hasConnectionKeepalive()) {
      hash = (37 * hash) + CONNECTION_KEEPALIVE_FIELD_NUMBER;
      hash = (53 * hash) + getConnectionKeepalive().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * QUIC protocol options which apply to both downstream and upstream connections.
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.QuicProtocolOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.QuicProtocolOptions)
      io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_QuicProtocolOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_QuicProtocolOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.class, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      maxConcurrentStreams_ = null;
      if (maxConcurrentStreamsBuilder_ != null) {
        maxConcurrentStreamsBuilder_.dispose();
        maxConcurrentStreamsBuilder_ = null;
      }
      initialStreamWindowSize_ = null;
      if (initialStreamWindowSizeBuilder_ != null) {
        initialStreamWindowSizeBuilder_.dispose();
        initialStreamWindowSizeBuilder_ = null;
      }
      initialConnectionWindowSize_ = null;
      if (initialConnectionWindowSizeBuilder_ != null) {
        initialConnectionWindowSizeBuilder_.dispose();
        initialConnectionWindowSizeBuilder_ = null;
      }
      numTimeoutsToTriggerPortMigration_ = null;
      if (numTimeoutsToTriggerPortMigrationBuilder_ != null) {
        numTimeoutsToTriggerPortMigrationBuilder_.dispose();
        numTimeoutsToTriggerPortMigrationBuilder_ = null;
      }
      connectionKeepalive_ = null;
      if (connectionKeepaliveBuilder_ != null) {
        connectionKeepaliveBuilder_.dispose();
        connectionKeepaliveBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.ProtocolProto.internal_static_envoy_config_core_v3_QuicProtocolOptions_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions build() {
      io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions buildPartial() {
      io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions result = new io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.maxConcurrentStreams_ = maxConcurrentStreamsBuilder_ == null
            ? maxConcurrentStreams_
            : maxConcurrentStreamsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.initialStreamWindowSize_ = initialStreamWindowSizeBuilder_ == null
            ? initialStreamWindowSize_
            : initialStreamWindowSizeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.initialConnectionWindowSize_ = initialConnectionWindowSizeBuilder_ == null
            ? initialConnectionWindowSize_
            : initialConnectionWindowSizeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.numTimeoutsToTriggerPortMigration_ = numTimeoutsToTriggerPortMigrationBuilder_ == null
            ? numTimeoutsToTriggerPortMigration_
            : numTimeoutsToTriggerPortMigrationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.connectionKeepalive_ = connectionKeepaliveBuilder_ == null
            ? connectionKeepalive_
            : connectionKeepaliveBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions other) {
      if (other == io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance()) return this;
      if (other.hasMaxConcurrentStreams()) {
        mergeMaxConcurrentStreams(other.getMaxConcurrentStreams());
      }
      if (other.hasInitialStreamWindowSize()) {
        mergeInitialStreamWindowSize(other.getInitialStreamWindowSize());
      }
      if (other.hasInitialConnectionWindowSize()) {
        mergeInitialConnectionWindowSize(other.getInitialConnectionWindowSize());
      }
      if (other.hasNumTimeoutsToTriggerPortMigration()) {
        mergeNumTimeoutsToTriggerPortMigration(other.getNumTimeoutsToTriggerPortMigration());
      }
      if (other.hasConnectionKeepalive()) {
        mergeConnectionKeepalive(other.getConnectionKeepalive());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getMaxConcurrentStreamsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getInitialStreamWindowSizeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getInitialConnectionWindowSizeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getNumTimeoutsToTriggerPortMigrationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getConnectionKeepaliveFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.UInt32Value maxConcurrentStreams_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxConcurrentStreamsBuilder_;
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the maxConcurrentStreams field is set.
     */
    public boolean hasMaxConcurrentStreams() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     * @return The maxConcurrentStreams.
     */
    public com.google.protobuf.UInt32Value getMaxConcurrentStreams() {
      if (maxConcurrentStreamsBuilder_ == null) {
        return maxConcurrentStreams_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
      } else {
        return maxConcurrentStreamsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxConcurrentStreams(com.google.protobuf.UInt32Value value) {
      if (maxConcurrentStreamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxConcurrentStreams_ = value;
      } else {
        maxConcurrentStreamsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxConcurrentStreams(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxConcurrentStreamsBuilder_ == null) {
        maxConcurrentStreams_ = builderForValue.build();
      } else {
        maxConcurrentStreamsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxConcurrentStreams(com.google.protobuf.UInt32Value value) {
      if (maxConcurrentStreamsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          maxConcurrentStreams_ != null &&
          maxConcurrentStreams_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxConcurrentStreamsBuilder().mergeFrom(value);
        } else {
          maxConcurrentStreams_ = value;
        }
      } else {
        maxConcurrentStreamsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxConcurrentStreams() {
      bitField0_ = (bitField0_ & ~0x00000001);
      maxConcurrentStreams_ = null;
      if (maxConcurrentStreamsBuilder_ != null) {
        maxConcurrentStreamsBuilder_.dispose();
        maxConcurrentStreamsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxConcurrentStreamsBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getMaxConcurrentStreamsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxConcurrentStreamsOrBuilder() {
      if (maxConcurrentStreamsBuilder_ != null) {
        return maxConcurrentStreamsBuilder_.getMessageOrBuilder();
      } else {
        return maxConcurrentStreams_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
      }
    }
    /**
     * <pre>
     * Maximum number of streams that the client can negotiate per connection. 100
     * if not specified.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxConcurrentStreamsFieldBuilder() {
      if (maxConcurrentStreamsBuilder_ == null) {
        maxConcurrentStreamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxConcurrentStreams(),
                getParentForChildren(),
                isClean());
        maxConcurrentStreams_ = null;
      }
      return maxConcurrentStreamsBuilder_;
    }

    private com.google.protobuf.UInt32Value initialStreamWindowSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> initialStreamWindowSizeBuilder_;
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the initialStreamWindowSize field is set.
     */
    public boolean hasInitialStreamWindowSize() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     * @return The initialStreamWindowSize.
     */
    public com.google.protobuf.UInt32Value getInitialStreamWindowSize() {
      if (initialStreamWindowSizeBuilder_ == null) {
        return initialStreamWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
      } else {
        return initialStreamWindowSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialStreamWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialStreamWindowSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initialStreamWindowSize_ = value;
      } else {
        initialStreamWindowSizeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialStreamWindowSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (initialStreamWindowSizeBuilder_ == null) {
        initialStreamWindowSize_ = builderForValue.build();
      } else {
        initialStreamWindowSizeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeInitialStreamWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialStreamWindowSizeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          initialStreamWindowSize_ != null &&
          initialStreamWindowSize_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getInitialStreamWindowSizeBuilder().mergeFrom(value);
        } else {
          initialStreamWindowSize_ = value;
        }
      } else {
        initialStreamWindowSizeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearInitialStreamWindowSize() {
      bitField0_ = (bitField0_ & ~0x00000002);
      initialStreamWindowSize_ = null;
      if (initialStreamWindowSizeBuilder_ != null) {
        initialStreamWindowSizeBuilder_.dispose();
        initialStreamWindowSizeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getInitialStreamWindowSizeBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getInitialStreamWindowSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getInitialStreamWindowSizeOrBuilder() {
      if (initialStreamWindowSizeBuilder_ != null) {
        return initialStreamWindowSizeBuilder_.getMessageOrBuilder();
      } else {
        return initialStreamWindowSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
      }
    }
    /**
     * <pre>
     * `Initial stream-level flow-control receive window
     * &lt;https://tools.ietf.org/html/draft-ietf-quic-transport-34#section-4.1&gt;`_ size. Valid values range from
     * 1 to 16777216 (2^24, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. If configured smaller than it, we will use 16384 instead.
     * QUICHE IETF Quic implementation supports 1 bytes window. We only support increasing the default window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * QUIC stream send and receive buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the stream buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getInitialStreamWindowSizeFieldBuilder() {
      if (initialStreamWindowSizeBuilder_ == null) {
        initialStreamWindowSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getInitialStreamWindowSize(),
                getParentForChildren(),
                isClean());
        initialStreamWindowSize_ = null;
      }
      return initialStreamWindowSizeBuilder_;
    }

    private com.google.protobuf.UInt32Value initialConnectionWindowSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> initialConnectionWindowSizeBuilder_;
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the initialConnectionWindowSize field is set.
     */
    public boolean hasInitialConnectionWindowSize() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     * @return The initialConnectionWindowSize.
     */
    public com.google.protobuf.UInt32Value getInitialConnectionWindowSize() {
      if (initialConnectionWindowSizeBuilder_ == null) {
        return initialConnectionWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
      } else {
        return initialConnectionWindowSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialConnectionWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialConnectionWindowSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initialConnectionWindowSize_ = value;
      } else {
        initialConnectionWindowSizeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialConnectionWindowSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (initialConnectionWindowSizeBuilder_ == null) {
        initialConnectionWindowSize_ = builderForValue.build();
      } else {
        initialConnectionWindowSizeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeInitialConnectionWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialConnectionWindowSizeBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          initialConnectionWindowSize_ != null &&
          initialConnectionWindowSize_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getInitialConnectionWindowSizeBuilder().mergeFrom(value);
        } else {
          initialConnectionWindowSize_ = value;
        }
      } else {
        initialConnectionWindowSizeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearInitialConnectionWindowSize() {
      bitField0_ = (bitField0_ & ~0x00000004);
      initialConnectionWindowSize_ = null;
      if (initialConnectionWindowSizeBuilder_ != null) {
        initialConnectionWindowSizeBuilder_.dispose();
        initialConnectionWindowSizeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getInitialConnectionWindowSizeBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getInitialConnectionWindowSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getInitialConnectionWindowSizeOrBuilder() {
      if (initialConnectionWindowSizeBuilder_ != null) {
        return initialConnectionWindowSizeBuilder_.getMessageOrBuilder();
      } else {
        return initialConnectionWindowSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
      }
    }
    /**
     * <pre>
     * Similar to ``initial_stream_window_size``, but for connection-level
     * flow-control. Valid values rage from 1 to 25165824 (24MB, maximum supported by QUICHE) and defaults to 65536 (2^16).
     * window. Currently, this has the same minimum/default as ``initial_stream_window_size``.
     * NOTE: 16384 (2^14) is the minimum window size supported in Google QUIC. We only support increasing the default
     * window size now, so it's also the minimum.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getInitialConnectionWindowSizeFieldBuilder() {
      if (initialConnectionWindowSizeBuilder_ == null) {
        initialConnectionWindowSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getInitialConnectionWindowSize(),
                getParentForChildren(),
                isClean());
        initialConnectionWindowSize_ = null;
      }
      return initialConnectionWindowSizeBuilder_;
    }

    private com.google.protobuf.UInt32Value numTimeoutsToTriggerPortMigration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> numTimeoutsToTriggerPortMigrationBuilder_;
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     * @return Whether the numTimeoutsToTriggerPortMigration field is set.
     */
    public boolean hasNumTimeoutsToTriggerPortMigration() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     * @return The numTimeoutsToTriggerPortMigration.
     */
    public com.google.protobuf.UInt32Value getNumTimeoutsToTriggerPortMigration() {
      if (numTimeoutsToTriggerPortMigrationBuilder_ == null) {
        return numTimeoutsToTriggerPortMigration_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : numTimeoutsToTriggerPortMigration_;
      } else {
        return numTimeoutsToTriggerPortMigrationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setNumTimeoutsToTriggerPortMigration(com.google.protobuf.UInt32Value value) {
      if (numTimeoutsToTriggerPortMigrationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        numTimeoutsToTriggerPortMigration_ = value;
      } else {
        numTimeoutsToTriggerPortMigrationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setNumTimeoutsToTriggerPortMigration(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (numTimeoutsToTriggerPortMigrationBuilder_ == null) {
        numTimeoutsToTriggerPortMigration_ = builderForValue.build();
      } else {
        numTimeoutsToTriggerPortMigrationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeNumTimeoutsToTriggerPortMigration(com.google.protobuf.UInt32Value value) {
      if (numTimeoutsToTriggerPortMigrationBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          numTimeoutsToTriggerPortMigration_ != null &&
          numTimeoutsToTriggerPortMigration_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getNumTimeoutsToTriggerPortMigrationBuilder().mergeFrom(value);
        } else {
          numTimeoutsToTriggerPortMigration_ = value;
        }
      } else {
        numTimeoutsToTriggerPortMigrationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearNumTimeoutsToTriggerPortMigration() {
      bitField0_ = (bitField0_ & ~0x00000008);
      numTimeoutsToTriggerPortMigration_ = null;
      if (numTimeoutsToTriggerPortMigrationBuilder_ != null) {
        numTimeoutsToTriggerPortMigrationBuilder_.dispose();
        numTimeoutsToTriggerPortMigrationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getNumTimeoutsToTriggerPortMigrationBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getNumTimeoutsToTriggerPortMigrationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getNumTimeoutsToTriggerPortMigrationOrBuilder() {
      if (numTimeoutsToTriggerPortMigrationBuilder_ != null) {
        return numTimeoutsToTriggerPortMigrationBuilder_.getMessageOrBuilder();
      } else {
        return numTimeoutsToTriggerPortMigration_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : numTimeoutsToTriggerPortMigration_;
      }
    }
    /**
     * <pre>
     * The number of timeouts that can occur before port migration is triggered for QUIC clients.
     * This defaults to 1. If set to 0, port migration will not occur on path degrading.
     * Timeout here refers to QUIC internal path degrading timeout mechanism, such as PTO.
     * This has no effect on server sessions.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value num_timeouts_to_trigger_port_migration = 4 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getNumTimeoutsToTriggerPortMigrationFieldBuilder() {
      if (numTimeoutsToTriggerPortMigrationBuilder_ == null) {
        numTimeoutsToTriggerPortMigrationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getNumTimeoutsToTriggerPortMigration(),
                getParentForChildren(),
                isClean());
        numTimeoutsToTriggerPortMigration_ = null;
      }
      return numTimeoutsToTriggerPortMigrationBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings connectionKeepalive_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings, io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.Builder, io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettingsOrBuilder> connectionKeepaliveBuilder_;
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     * @return Whether the connectionKeepalive field is set.
     */
    public boolean hasConnectionKeepalive() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     * @return The connectionKeepalive.
     */
    public io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings getConnectionKeepalive() {
      if (connectionKeepaliveBuilder_ == null) {
        return connectionKeepalive_ == null ? io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.getDefaultInstance() : connectionKeepalive_;
      } else {
        return connectionKeepaliveBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    public Builder setConnectionKeepalive(io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings value) {
      if (connectionKeepaliveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        connectionKeepalive_ = value;
      } else {
        connectionKeepaliveBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    public Builder setConnectionKeepalive(
        io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.Builder builderForValue) {
      if (connectionKeepaliveBuilder_ == null) {
        connectionKeepalive_ = builderForValue.build();
      } else {
        connectionKeepaliveBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    public Builder mergeConnectionKeepalive(io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings value) {
      if (connectionKeepaliveBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          connectionKeepalive_ != null &&
          connectionKeepalive_ != io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.getDefaultInstance()) {
          getConnectionKeepaliveBuilder().mergeFrom(value);
        } else {
          connectionKeepalive_ = value;
        }
      } else {
        connectionKeepaliveBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    public Builder clearConnectionKeepalive() {
      bitField0_ = (bitField0_ & ~0x00000010);
      connectionKeepalive_ = null;
      if (connectionKeepaliveBuilder_ != null) {
        connectionKeepaliveBuilder_.dispose();
        connectionKeepaliveBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.Builder getConnectionKeepaliveBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getConnectionKeepaliveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettingsOrBuilder getConnectionKeepaliveOrBuilder() {
      if (connectionKeepaliveBuilder_ != null) {
        return connectionKeepaliveBuilder_.getMessageOrBuilder();
      } else {
        return connectionKeepalive_ == null ?
            io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.getDefaultInstance() : connectionKeepalive_;
      }
    }
    /**
     * <pre>
     * Probes the peer at the configured interval to solicit traffic, i.e. ACK or PATH_RESPONSE, from the peer to push back connection idle timeout.
     * If absent, use the default keepalive behavior of which a client connection sends PINGs every 15s, and a server connection doesn't do anything.
     * </pre>
     *
     * <code>.envoy.config.core.v3.QuicKeepAliveSettings connection_keepalive = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings, io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.Builder, io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettingsOrBuilder> 
        getConnectionKeepaliveFieldBuilder() {
      if (connectionKeepaliveBuilder_ == null) {
        connectionKeepaliveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings, io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettings.Builder, io.envoyproxy.envoy.config.core.v3.QuicKeepAliveSettingsOrBuilder>(
                getConnectionKeepalive(),
                getParentForChildren(),
                isClean());
        connectionKeepalive_ = null;
      }
      return connectionKeepaliveBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.QuicProtocolOptions)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.QuicProtocolOptions)
  private static final io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions();
  }

  public static io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QuicProtocolOptions>
      PARSER = new com.google.protobuf.AbstractParser<QuicProtocolOptions>() {
    @java.lang.Override
    public QuicProtocolOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<QuicProtocolOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<QuicProtocolOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

