// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface QuicKeepAliveSettingsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.QuicKeepAliveSettings)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The max interval for a connection to send keep-alive probing packets (with PING or PATH_RESPONSE). The value should be smaller than :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` to prevent idle timeout while not less than 1s to avoid throttling the connection or flooding the peer with probes.
   * If :ref:`initial_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.initial_interval&gt;` is absent or zero, a client connection will use this value to start probing.
   * If zero, disable keepalive probing.
   * If absent, use the QUICHE default interval to probe.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_interval = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the maxInterval field is set.
   */
  boolean hasMaxInterval();
  /**
   * <pre>
   * The max interval for a connection to send keep-alive probing packets (with PING or PATH_RESPONSE). The value should be smaller than :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` to prevent idle timeout while not less than 1s to avoid throttling the connection or flooding the peer with probes.
   * If :ref:`initial_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.initial_interval&gt;` is absent or zero, a client connection will use this value to start probing.
   * If zero, disable keepalive probing.
   * If absent, use the QUICHE default interval to probe.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_interval = 1 [(.validate.rules) = { ... }</code>
   * @return The maxInterval.
   */
  com.google.protobuf.Duration getMaxInterval();
  /**
   * <pre>
   * The max interval for a connection to send keep-alive probing packets (with PING or PATH_RESPONSE). The value should be smaller than :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` to prevent idle timeout while not less than 1s to avoid throttling the connection or flooding the peer with probes.
   * If :ref:`initial_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.initial_interval&gt;` is absent or zero, a client connection will use this value to start probing.
   * If zero, disable keepalive probing.
   * If absent, use the QUICHE default interval to probe.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_interval = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getMaxIntervalOrBuilder();

  /**
   * <pre>
   * The interval to send the first few keep-alive probing packets to prevent connection from hitting the idle timeout. Subsequent probes will be sent, each one with an interval exponentially longer than previous one, till it reaches :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`. And the probes afterwards will always use :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`.
   * The value should be smaller than :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` to prevent idle timeout and smaller than max_interval to take effect.
   * If absent or zero, disable keepalive probing for a server connection. For a client connection, if :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`  is also zero, do not keepalive, otherwise use max_interval or QUICHE default to probe all the time.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_interval = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the initialInterval field is set.
   */
  boolean hasInitialInterval();
  /**
   * <pre>
   * The interval to send the first few keep-alive probing packets to prevent connection from hitting the idle timeout. Subsequent probes will be sent, each one with an interval exponentially longer than previous one, till it reaches :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`. And the probes afterwards will always use :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`.
   * The value should be smaller than :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` to prevent idle timeout and smaller than max_interval to take effect.
   * If absent or zero, disable keepalive probing for a server connection. For a client connection, if :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`  is also zero, do not keepalive, otherwise use max_interval or QUICHE default to probe all the time.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_interval = 2 [(.validate.rules) = { ... }</code>
   * @return The initialInterval.
   */
  com.google.protobuf.Duration getInitialInterval();
  /**
   * <pre>
   * The interval to send the first few keep-alive probing packets to prevent connection from hitting the idle timeout. Subsequent probes will be sent, each one with an interval exponentially longer than previous one, till it reaches :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`. And the probes afterwards will always use :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`.
   * The value should be smaller than :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` to prevent idle timeout and smaller than max_interval to take effect.
   * If absent or zero, disable keepalive probing for a server connection. For a client connection, if :ref:`max_interval &lt;envoy_v3_api_field_config.core.v3.QuicKeepAliveSettings.max_interval&gt;`  is also zero, do not keepalive, otherwise use max_interval or QUICHE default to probe all the time.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_interval = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getInitialIntervalOrBuilder();
}
