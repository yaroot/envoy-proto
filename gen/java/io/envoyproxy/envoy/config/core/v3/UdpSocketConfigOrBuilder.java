// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/udp_socket_config.proto

package io.envoyproxy.envoy.config.core.v3;

public interface UdpSocketConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.UdpSocketConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
   * more memory per socket. Received datagrams above this size will be dropped. If not set
   * defaults to 1500 bytes.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_rx_datagram_size = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the maxRxDatagramSize field is set.
   */
  boolean hasMaxRxDatagramSize();
  /**
   * <pre>
   * The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
   * more memory per socket. Received datagrams above this size will be dropped. If not set
   * defaults to 1500 bytes.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_rx_datagram_size = 1 [(.validate.rules) = { ... }</code>
   * @return The maxRxDatagramSize.
   */
  com.google.protobuf.UInt64Value getMaxRxDatagramSize();
  /**
   * <pre>
   * The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
   * more memory per socket. Received datagrams above this size will be dropped. If not set
   * defaults to 1500 bytes.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_rx_datagram_size = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt64ValueOrBuilder getMaxRxDatagramSizeOrBuilder();

  /**
   * <pre>
   * Configures whether Generic Receive Offload (GRO)
   * &lt;https://en.wikipedia.org/wiki/Large_receive_offload&gt;_ is preferred when reading from the
   * UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
   * This option affects performance but not functionality. If GRO is not supported by the operating
   * system, non-GRO receive will be used.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue prefer_gro = 2;</code>
   * @return Whether the preferGro field is set.
   */
  boolean hasPreferGro();
  /**
   * <pre>
   * Configures whether Generic Receive Offload (GRO)
   * &lt;https://en.wikipedia.org/wiki/Large_receive_offload&gt;_ is preferred when reading from the
   * UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
   * This option affects performance but not functionality. If GRO is not supported by the operating
   * system, non-GRO receive will be used.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue prefer_gro = 2;</code>
   * @return The preferGro.
   */
  com.google.protobuf.BoolValue getPreferGro();
  /**
   * <pre>
   * Configures whether Generic Receive Offload (GRO)
   * &lt;https://en.wikipedia.org/wiki/Large_receive_offload&gt;_ is preferred when reading from the
   * UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
   * This option affects performance but not functionality. If GRO is not supported by the operating
   * system, non-GRO receive will be used.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue prefer_gro = 2;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getPreferGroOrBuilder();
}
