// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface KeepaliveSettingsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.KeepaliveSettings)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
   * If this is zero, interval PINGs will not be sent.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the interval field is set.
   */
  boolean hasInterval();
  /**
   * <pre>
   * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
   * If this is zero, interval PINGs will not be sent.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
   * @return The interval.
   */
  com.google.protobuf.Duration getInterval();
  /**
   * <pre>
   * Send HTTP/2 PING frames at this period, in order to test that the connection is still alive.
   * If this is zero, interval PINGs will not be sent.
   * </pre>
   *
   * <code>.google.protobuf.Duration interval = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getIntervalOrBuilder();

  /**
   * <pre>
   * How long to wait for a response to a keepalive PING. If a response is not received within this
   * time period, the connection will be aborted. Note that in order to prevent the influence of
   * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
   * the connection, under the assumption that if a frame is received the connection is healthy.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the timeout field is set.
   */
  boolean hasTimeout();
  /**
   * <pre>
   * How long to wait for a response to a keepalive PING. If a response is not received within this
   * time period, the connection will be aborted. Note that in order to prevent the influence of
   * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
   * the connection, under the assumption that if a frame is received the connection is healthy.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
   * @return The timeout.
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * How long to wait for a response to a keepalive PING. If a response is not received within this
   * time period, the connection will be aborted. Note that in order to prevent the influence of
   * Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on
   * the connection, under the assumption that if a frame is received the connection is healthy.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * A random jitter amount as a percentage of interval that will be added to each interval.
   * A value of zero means there will be no jitter.
   * The default value is 15%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
   * @return Whether the intervalJitter field is set.
   */
  boolean hasIntervalJitter();
  /**
   * <pre>
   * A random jitter amount as a percentage of interval that will be added to each interval.
   * A value of zero means there will be no jitter.
   * The default value is 15%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
   * @return The intervalJitter.
   */
  io.envoyproxy.envoy.type.v3.Percent getIntervalJitter();
  /**
   * <pre>
   * A random jitter amount as a percentage of interval that will be added to each interval.
   * A value of zero means there will be no jitter.
   * The default value is 15%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent interval_jitter = 3;</code>
   */
  io.envoyproxy.envoy.type.v3.PercentOrBuilder getIntervalJitterOrBuilder();

  /**
   * <pre>
   * If the connection has been idle for this duration, send a HTTP/2 ping ahead
   * of new stream creation, to quickly detect dead connections.
   * If this is zero, this type of PING will not be sent.
   * If an interval ping is outstanding, a second ping will not be sent as the
   * interval ping will determine if the connection is dead.
   * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
   * </pre>
   *
   * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the connectionIdleInterval field is set.
   */
  boolean hasConnectionIdleInterval();
  /**
   * <pre>
   * If the connection has been idle for this duration, send a HTTP/2 ping ahead
   * of new stream creation, to quickly detect dead connections.
   * If this is zero, this type of PING will not be sent.
   * If an interval ping is outstanding, a second ping will not be sent as the
   * interval ping will determine if the connection is dead.
   * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
   * </pre>
   *
   * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
   * @return The connectionIdleInterval.
   */
  com.google.protobuf.Duration getConnectionIdleInterval();
  /**
   * <pre>
   * If the connection has been idle for this duration, send a HTTP/2 ping ahead
   * of new stream creation, to quickly detect dead connections.
   * If this is zero, this type of PING will not be sent.
   * If an interval ping is outstanding, a second ping will not be sent as the
   * interval ping will determine if the connection is dead.
   * The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout &lt;envoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout&gt;` and the current PTO of the connection to decide whether to probe before sending a new request.
   * </pre>
   *
   * <code>.google.protobuf.Duration connection_idle_interval = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getConnectionIdleIntervalOrBuilder();
}
