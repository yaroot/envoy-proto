// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/listener/v3/quic_config.proto

package io.envoyproxy.envoy.config.listener.v3;

/**
 * <pre>
 * Configuration specific to the UDP QUIC listener.
 * [#next-free-field: 8]
 * </pre>
 *
 * Protobuf type {@code envoy.config.listener.v3.QuicProtocolOptions}
 */
public final class QuicProtocolOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.listener.v3.QuicProtocolOptions)
    QuicProtocolOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use QuicProtocolOptions.newBuilder() to construct.
  private QuicProtocolOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private QuicProtocolOptions() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new QuicProtocolOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private QuicProtocolOptions(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder subBuilder = null;
            if (quicProtocolOptions_ != null) {
              subBuilder = quicProtocolOptions_.toBuilder();
            }
            quicProtocolOptions_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(quicProtocolOptions_);
              quicProtocolOptions_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (idleTimeout_ != null) {
              subBuilder = idleTimeout_.toBuilder();
            }
            idleTimeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(idleTimeout_);
              idleTimeout_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (cryptoHandshakeTimeout_ != null) {
              subBuilder = cryptoHandshakeTimeout_.toBuilder();
            }
            cryptoHandshakeTimeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cryptoHandshakeTimeout_);
              cryptoHandshakeTimeout_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder subBuilder = null;
            if (enabled_ != null) {
              subBuilder = enabled_.toBuilder();
            }
            enabled_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(enabled_);
              enabled_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (packetsToReadToConnectionCountRatio_ != null) {
              subBuilder = packetsToReadToConnectionCountRatio_.toBuilder();
            }
            packetsToReadToConnectionCountRatio_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(packetsToReadToConnectionCountRatio_);
              packetsToReadToConnectionCountRatio_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder subBuilder = null;
            if (cryptoStreamConfig_ != null) {
              subBuilder = cryptoStreamConfig_.toBuilder();
            }
            cryptoStreamConfig_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cryptoStreamConfig_);
              cryptoStreamConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder subBuilder = null;
            if (proofSourceConfig_ != null) {
              subBuilder = proofSourceConfig_.toBuilder();
            }
            proofSourceConfig_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(proofSourceConfig_);
              proofSourceConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.listener.v3.QuicConfigProto.internal_static_envoy_config_listener_v3_QuicProtocolOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.listener.v3.QuicConfigProto.internal_static_envoy_config_listener_v3_QuicProtocolOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.class, io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.Builder.class);
  }

  public static final int QUIC_PROTOCOL_OPTIONS_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions quicProtocolOptions_;
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   * @return Whether the quicProtocolOptions field is set.
   */
  @java.lang.Override
  public boolean hasQuicProtocolOptions() {
    return quicProtocolOptions_ != null;
  }
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   * @return The quicProtocolOptions.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getQuicProtocolOptions() {
    return quicProtocolOptions_ == null ? io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance() : quicProtocolOptions_;
  }
  /**
   * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder getQuicProtocolOptionsOrBuilder() {
    return getQuicProtocolOptions();
  }

  public static final int IDLE_TIMEOUT_FIELD_NUMBER = 2;
  private com.google.protobuf.Duration idleTimeout_;
  /**
   * <pre>
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity.
   * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 2;</code>
   * @return Whether the idleTimeout field is set.
   */
  @java.lang.Override
  public boolean hasIdleTimeout() {
    return idleTimeout_ != null;
  }
  /**
   * <pre>
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity.
   * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 2;</code>
   * @return The idleTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getIdleTimeout() {
    return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
  }
  /**
   * <pre>
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity.
   * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder() {
    return getIdleTimeout();
  }

  public static final int CRYPTO_HANDSHAKE_TIMEOUT_FIELD_NUMBER = 3;
  private com.google.protobuf.Duration cryptoHandshakeTimeout_;
  /**
   * <pre>
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
   * @return Whether the cryptoHandshakeTimeout field is set.
   */
  @java.lang.Override
  public boolean hasCryptoHandshakeTimeout() {
    return cryptoHandshakeTimeout_ != null;
  }
  /**
   * <pre>
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
   * @return The cryptoHandshakeTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getCryptoHandshakeTimeout() {
    return cryptoHandshakeTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : cryptoHandshakeTimeout_;
  }
  /**
   * <pre>
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getCryptoHandshakeTimeoutOrBuilder() {
    return getCryptoHandshakeTimeout();
  }

  public static final int ENABLED_FIELD_NUMBER = 4;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag enabled_;
  /**
   * <pre>
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
   * @return Whether the enabled field is set.
   */
  @java.lang.Override
  public boolean hasEnabled() {
    return enabled_ != null;
  }
  /**
   * <pre>
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
   * @return The enabled.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled() {
    return enabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : enabled_;
  }
  /**
   * <pre>
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder() {
    return getEnabled();
  }

  public static final int PACKETS_TO_READ_TO_CONNECTION_COUNT_RATIO_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt32Value packetsToReadToConnectionCountRatio_;
  /**
   * <pre>
   * A multiplier to number of connections which is used to determine how many packets to read per
   * event loop. A reasonable number should allow the listener to process enough payload but not
   * starve TCP and other UDP sockets and also prevent long event loop duration.
   * The default value is 32. This means if there are N QUIC connections, the total number of
   * packets to read in each read event will be 32 * N.
   * The actual number of packets to read in total by the UDP listener is also
   * bound by 6000, regardless of this field or how many connections there are.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the packetsToReadToConnectionCountRatio field is set.
   */
  @java.lang.Override
  public boolean hasPacketsToReadToConnectionCountRatio() {
    return packetsToReadToConnectionCountRatio_ != null;
  }
  /**
   * <pre>
   * A multiplier to number of connections which is used to determine how many packets to read per
   * event loop. A reasonable number should allow the listener to process enough payload but not
   * starve TCP and other UDP sockets and also prevent long event loop duration.
   * The default value is 32. This means if there are N QUIC connections, the total number of
   * packets to read in each read event will be 32 * N.
   * The actual number of packets to read in total by the UDP listener is also
   * bound by 6000, regardless of this field or how many connections there are.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
   * @return The packetsToReadToConnectionCountRatio.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getPacketsToReadToConnectionCountRatio() {
    return packetsToReadToConnectionCountRatio_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : packetsToReadToConnectionCountRatio_;
  }
  /**
   * <pre>
   * A multiplier to number of connections which is used to determine how many packets to read per
   * event loop. A reasonable number should allow the listener to process enough payload but not
   * starve TCP and other UDP sockets and also prevent long event loop duration.
   * The default value is 32. This means if there are N QUIC connections, the total number of
   * packets to read in each read event will be 32 * N.
   * The actual number of packets to read in total by the UDP listener is also
   * bound by 6000, regardless of this field or how many connections there are.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getPacketsToReadToConnectionCountRatioOrBuilder() {
    return getPacketsToReadToConnectionCountRatio();
  }

  public static final int CRYPTO_STREAM_CONFIG_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig cryptoStreamConfig_;
  /**
   * <pre>
   * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
   * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
   * [#extension-category: envoy.quic.server.crypto_stream]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
   * @return Whether the cryptoStreamConfig field is set.
   */
  @java.lang.Override
  public boolean hasCryptoStreamConfig() {
    return cryptoStreamConfig_ != null;
  }
  /**
   * <pre>
   * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
   * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
   * [#extension-category: envoy.quic.server.crypto_stream]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
   * @return The cryptoStreamConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCryptoStreamConfig() {
    return cryptoStreamConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : cryptoStreamConfig_;
  }
  /**
   * <pre>
   * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
   * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
   * [#extension-category: envoy.quic.server.crypto_stream]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCryptoStreamConfigOrBuilder() {
    return getCryptoStreamConfig();
  }

  public static final int PROOF_SOURCE_CONFIG_FIELD_NUMBER = 7;
  private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig proofSourceConfig_;
  /**
   * <pre>
   * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
   * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
   * [#extension-category: envoy.quic.proof_source]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
   * @return Whether the proofSourceConfig field is set.
   */
  @java.lang.Override
  public boolean hasProofSourceConfig() {
    return proofSourceConfig_ != null;
  }
  /**
   * <pre>
   * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
   * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
   * [#extension-category: envoy.quic.proof_source]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
   * @return The proofSourceConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getProofSourceConfig() {
    return proofSourceConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : proofSourceConfig_;
  }
  /**
   * <pre>
   * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
   * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
   * [#extension-category: envoy.quic.proof_source]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getProofSourceConfigOrBuilder() {
    return getProofSourceConfig();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (quicProtocolOptions_ != null) {
      output.writeMessage(1, getQuicProtocolOptions());
    }
    if (idleTimeout_ != null) {
      output.writeMessage(2, getIdleTimeout());
    }
    if (cryptoHandshakeTimeout_ != null) {
      output.writeMessage(3, getCryptoHandshakeTimeout());
    }
    if (enabled_ != null) {
      output.writeMessage(4, getEnabled());
    }
    if (packetsToReadToConnectionCountRatio_ != null) {
      output.writeMessage(5, getPacketsToReadToConnectionCountRatio());
    }
    if (cryptoStreamConfig_ != null) {
      output.writeMessage(6, getCryptoStreamConfig());
    }
    if (proofSourceConfig_ != null) {
      output.writeMessage(7, getProofSourceConfig());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (quicProtocolOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getQuicProtocolOptions());
    }
    if (idleTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getIdleTimeout());
    }
    if (cryptoHandshakeTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getCryptoHandshakeTimeout());
    }
    if (enabled_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getEnabled());
    }
    if (packetsToReadToConnectionCountRatio_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getPacketsToReadToConnectionCountRatio());
    }
    if (cryptoStreamConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getCryptoStreamConfig());
    }
    if (proofSourceConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getProofSourceConfig());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions other = (io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions) obj;

    if (hasQuicProtocolOptions() != other.hasQuicProtocolOptions()) return false;
    if (hasQuicProtocolOptions()) {
      if (!getQuicProtocolOptions()
          .equals(other.getQuicProtocolOptions())) return false;
    }
    if (hasIdleTimeout() != other.hasIdleTimeout()) return false;
    if (hasIdleTimeout()) {
      if (!getIdleTimeout()
          .equals(other.getIdleTimeout())) return false;
    }
    if (hasCryptoHandshakeTimeout() != other.hasCryptoHandshakeTimeout()) return false;
    if (hasCryptoHandshakeTimeout()) {
      if (!getCryptoHandshakeTimeout()
          .equals(other.getCryptoHandshakeTimeout())) return false;
    }
    if (hasEnabled() != other.hasEnabled()) return false;
    if (hasEnabled()) {
      if (!getEnabled()
          .equals(other.getEnabled())) return false;
    }
    if (hasPacketsToReadToConnectionCountRatio() != other.hasPacketsToReadToConnectionCountRatio()) return false;
    if (hasPacketsToReadToConnectionCountRatio()) {
      if (!getPacketsToReadToConnectionCountRatio()
          .equals(other.getPacketsToReadToConnectionCountRatio())) return false;
    }
    if (hasCryptoStreamConfig() != other.hasCryptoStreamConfig()) return false;
    if (hasCryptoStreamConfig()) {
      if (!getCryptoStreamConfig()
          .equals(other.getCryptoStreamConfig())) return false;
    }
    if (hasProofSourceConfig() != other.hasProofSourceConfig()) return false;
    if (hasProofSourceConfig()) {
      if (!getProofSourceConfig()
          .equals(other.getProofSourceConfig())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasQuicProtocolOptions()) {
      hash = (37 * hash) + QUIC_PROTOCOL_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getQuicProtocolOptions().hashCode();
    }
    if (hasIdleTimeout()) {
      hash = (37 * hash) + IDLE_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getIdleTimeout().hashCode();
    }
    if (hasCryptoHandshakeTimeout()) {
      hash = (37 * hash) + CRYPTO_HANDSHAKE_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getCryptoHandshakeTimeout().hashCode();
    }
    if (hasEnabled()) {
      hash = (37 * hash) + ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + getEnabled().hashCode();
    }
    if (hasPacketsToReadToConnectionCountRatio()) {
      hash = (37 * hash) + PACKETS_TO_READ_TO_CONNECTION_COUNT_RATIO_FIELD_NUMBER;
      hash = (53 * hash) + getPacketsToReadToConnectionCountRatio().hashCode();
    }
    if (hasCryptoStreamConfig()) {
      hash = (37 * hash) + CRYPTO_STREAM_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getCryptoStreamConfig().hashCode();
    }
    if (hasProofSourceConfig()) {
      hash = (37 * hash) + PROOF_SOURCE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getProofSourceConfig().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration specific to the UDP QUIC listener.
   * [#next-free-field: 8]
   * </pre>
   *
   * Protobuf type {@code envoy.config.listener.v3.QuicProtocolOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.listener.v3.QuicProtocolOptions)
      io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.listener.v3.QuicConfigProto.internal_static_envoy_config_listener_v3_QuicProtocolOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.listener.v3.QuicConfigProto.internal_static_envoy_config_listener_v3_QuicProtocolOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.class, io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptions_ = null;
      } else {
        quicProtocolOptions_ = null;
        quicProtocolOptionsBuilder_ = null;
      }
      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = null;
      } else {
        idleTimeout_ = null;
        idleTimeoutBuilder_ = null;
      }
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        cryptoHandshakeTimeout_ = null;
      } else {
        cryptoHandshakeTimeout_ = null;
        cryptoHandshakeTimeoutBuilder_ = null;
      }
      if (enabledBuilder_ == null) {
        enabled_ = null;
      } else {
        enabled_ = null;
        enabledBuilder_ = null;
      }
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        packetsToReadToConnectionCountRatio_ = null;
      } else {
        packetsToReadToConnectionCountRatio_ = null;
        packetsToReadToConnectionCountRatioBuilder_ = null;
      }
      if (cryptoStreamConfigBuilder_ == null) {
        cryptoStreamConfig_ = null;
      } else {
        cryptoStreamConfig_ = null;
        cryptoStreamConfigBuilder_ = null;
      }
      if (proofSourceConfigBuilder_ == null) {
        proofSourceConfig_ = null;
      } else {
        proofSourceConfig_ = null;
        proofSourceConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.listener.v3.QuicConfigProto.internal_static_envoy_config_listener_v3_QuicProtocolOptions_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions build() {
      io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions buildPartial() {
      io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions result = new io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions(this);
      if (quicProtocolOptionsBuilder_ == null) {
        result.quicProtocolOptions_ = quicProtocolOptions_;
      } else {
        result.quicProtocolOptions_ = quicProtocolOptionsBuilder_.build();
      }
      if (idleTimeoutBuilder_ == null) {
        result.idleTimeout_ = idleTimeout_;
      } else {
        result.idleTimeout_ = idleTimeoutBuilder_.build();
      }
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        result.cryptoHandshakeTimeout_ = cryptoHandshakeTimeout_;
      } else {
        result.cryptoHandshakeTimeout_ = cryptoHandshakeTimeoutBuilder_.build();
      }
      if (enabledBuilder_ == null) {
        result.enabled_ = enabled_;
      } else {
        result.enabled_ = enabledBuilder_.build();
      }
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        result.packetsToReadToConnectionCountRatio_ = packetsToReadToConnectionCountRatio_;
      } else {
        result.packetsToReadToConnectionCountRatio_ = packetsToReadToConnectionCountRatioBuilder_.build();
      }
      if (cryptoStreamConfigBuilder_ == null) {
        result.cryptoStreamConfig_ = cryptoStreamConfig_;
      } else {
        result.cryptoStreamConfig_ = cryptoStreamConfigBuilder_.build();
      }
      if (proofSourceConfigBuilder_ == null) {
        result.proofSourceConfig_ = proofSourceConfig_;
      } else {
        result.proofSourceConfig_ = proofSourceConfigBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions) {
        return mergeFrom((io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions other) {
      if (other == io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions.getDefaultInstance()) return this;
      if (other.hasQuicProtocolOptions()) {
        mergeQuicProtocolOptions(other.getQuicProtocolOptions());
      }
      if (other.hasIdleTimeout()) {
        mergeIdleTimeout(other.getIdleTimeout());
      }
      if (other.hasCryptoHandshakeTimeout()) {
        mergeCryptoHandshakeTimeout(other.getCryptoHandshakeTimeout());
      }
      if (other.hasEnabled()) {
        mergeEnabled(other.getEnabled());
      }
      if (other.hasPacketsToReadToConnectionCountRatio()) {
        mergePacketsToReadToConnectionCountRatio(other.getPacketsToReadToConnectionCountRatio());
      }
      if (other.hasCryptoStreamConfig()) {
        mergeCryptoStreamConfig(other.getCryptoStreamConfig());
      }
      if (other.hasProofSourceConfig()) {
        mergeProofSourceConfig(other.getProofSourceConfig());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions quicProtocolOptions_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder> quicProtocolOptionsBuilder_;
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     * @return Whether the quicProtocolOptions field is set.
     */
    public boolean hasQuicProtocolOptions() {
      return quicProtocolOptionsBuilder_ != null || quicProtocolOptions_ != null;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     * @return The quicProtocolOptions.
     */
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions getQuicProtocolOptions() {
      if (quicProtocolOptionsBuilder_ == null) {
        return quicProtocolOptions_ == null ? io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance() : quicProtocolOptions_;
      } else {
        return quicProtocolOptionsBuilder_.getMessage();
      }
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder setQuicProtocolOptions(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions value) {
      if (quicProtocolOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        quicProtocolOptions_ = value;
        onChanged();
      } else {
        quicProtocolOptionsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder setQuicProtocolOptions(
        io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder builderForValue) {
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptions_ = builderForValue.build();
        onChanged();
      } else {
        quicProtocolOptionsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder mergeQuicProtocolOptions(io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions value) {
      if (quicProtocolOptionsBuilder_ == null) {
        if (quicProtocolOptions_ != null) {
          quicProtocolOptions_ =
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.newBuilder(quicProtocolOptions_).mergeFrom(value).buildPartial();
        } else {
          quicProtocolOptions_ = value;
        }
        onChanged();
      } else {
        quicProtocolOptionsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public Builder clearQuicProtocolOptions() {
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptions_ = null;
        onChanged();
      } else {
        quicProtocolOptions_ = null;
        quicProtocolOptionsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder getQuicProtocolOptionsBuilder() {
      
      onChanged();
      return getQuicProtocolOptionsFieldBuilder().getBuilder();
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder getQuicProtocolOptionsOrBuilder() {
      if (quicProtocolOptionsBuilder_ != null) {
        return quicProtocolOptionsBuilder_.getMessageOrBuilder();
      } else {
        return quicProtocolOptions_ == null ?
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.getDefaultInstance() : quicProtocolOptions_;
      }
    }
    /**
     * <code>.envoy.config.core.v3.QuicProtocolOptions quic_protocol_options = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder> 
        getQuicProtocolOptionsFieldBuilder() {
      if (quicProtocolOptionsBuilder_ == null) {
        quicProtocolOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptions.Builder, io.envoyproxy.envoy.config.core.v3.QuicProtocolOptionsOrBuilder>(
                getQuicProtocolOptions(),
                getParentForChildren(),
                isClean());
        quicProtocolOptions_ = null;
      }
      return quicProtocolOptionsBuilder_;
    }

    private com.google.protobuf.Duration idleTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> idleTimeoutBuilder_;
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     * @return Whether the idleTimeout field is set.
     */
    public boolean hasIdleTimeout() {
      return idleTimeoutBuilder_ != null || idleTimeout_ != null;
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     * @return The idleTimeout.
     */
    public com.google.protobuf.Duration getIdleTimeout() {
      if (idleTimeoutBuilder_ == null) {
        return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
      } else {
        return idleTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    public Builder setIdleTimeout(com.google.protobuf.Duration value) {
      if (idleTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idleTimeout_ = value;
        onChanged();
      } else {
        idleTimeoutBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    public Builder setIdleTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = builderForValue.build();
        onChanged();
      } else {
        idleTimeoutBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    public Builder mergeIdleTimeout(com.google.protobuf.Duration value) {
      if (idleTimeoutBuilder_ == null) {
        if (idleTimeout_ != null) {
          idleTimeout_ =
            com.google.protobuf.Duration.newBuilder(idleTimeout_).mergeFrom(value).buildPartial();
        } else {
          idleTimeout_ = value;
        }
        onChanged();
      } else {
        idleTimeoutBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    public Builder clearIdleTimeout() {
      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = null;
        onChanged();
      } else {
        idleTimeout_ = null;
        idleTimeoutBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    public com.google.protobuf.Duration.Builder getIdleTimeoutBuilder() {
      
      onChanged();
      return getIdleTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    public com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder() {
      if (idleTimeoutBuilder_ != null) {
        return idleTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return idleTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
      }
    }
    /**
     * <pre>
     * Maximum number of milliseconds that connection will be alive when there is
     * no network activity.
     * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getIdleTimeoutFieldBuilder() {
      if (idleTimeoutBuilder_ == null) {
        idleTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getIdleTimeout(),
                getParentForChildren(),
                isClean());
        idleTimeout_ = null;
      }
      return idleTimeoutBuilder_;
    }

    private com.google.protobuf.Duration cryptoHandshakeTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> cryptoHandshakeTimeoutBuilder_;
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     * @return Whether the cryptoHandshakeTimeout field is set.
     */
    public boolean hasCryptoHandshakeTimeout() {
      return cryptoHandshakeTimeoutBuilder_ != null || cryptoHandshakeTimeout_ != null;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     * @return The cryptoHandshakeTimeout.
     */
    public com.google.protobuf.Duration getCryptoHandshakeTimeout() {
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        return cryptoHandshakeTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : cryptoHandshakeTimeout_;
      } else {
        return cryptoHandshakeTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    public Builder setCryptoHandshakeTimeout(com.google.protobuf.Duration value) {
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cryptoHandshakeTimeout_ = value;
        onChanged();
      } else {
        cryptoHandshakeTimeoutBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    public Builder setCryptoHandshakeTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        cryptoHandshakeTimeout_ = builderForValue.build();
        onChanged();
      } else {
        cryptoHandshakeTimeoutBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    public Builder mergeCryptoHandshakeTimeout(com.google.protobuf.Duration value) {
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        if (cryptoHandshakeTimeout_ != null) {
          cryptoHandshakeTimeout_ =
            com.google.protobuf.Duration.newBuilder(cryptoHandshakeTimeout_).mergeFrom(value).buildPartial();
        } else {
          cryptoHandshakeTimeout_ = value;
        }
        onChanged();
      } else {
        cryptoHandshakeTimeoutBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    public Builder clearCryptoHandshakeTimeout() {
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        cryptoHandshakeTimeout_ = null;
        onChanged();
      } else {
        cryptoHandshakeTimeout_ = null;
        cryptoHandshakeTimeoutBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    public com.google.protobuf.Duration.Builder getCryptoHandshakeTimeoutBuilder() {
      
      onChanged();
      return getCryptoHandshakeTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    public com.google.protobuf.DurationOrBuilder getCryptoHandshakeTimeoutOrBuilder() {
      if (cryptoHandshakeTimeoutBuilder_ != null) {
        return cryptoHandshakeTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return cryptoHandshakeTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : cryptoHandshakeTimeout_;
      }
    }
    /**
     * <pre>
     * Connection timeout in milliseconds before the crypto handshake is finished.
     * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
     * </pre>
     *
     * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getCryptoHandshakeTimeoutFieldBuilder() {
      if (cryptoHandshakeTimeoutBuilder_ == null) {
        cryptoHandshakeTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getCryptoHandshakeTimeout(),
                getParentForChildren(),
                isClean());
        cryptoHandshakeTimeout_ = null;
      }
      return cryptoHandshakeTimeoutBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag enabled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> enabledBuilder_;
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     * @return Whether the enabled field is set.
     */
    public boolean hasEnabled() {
      return enabledBuilder_ != null || enabled_ != null;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     * @return The enabled.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled() {
      if (enabledBuilder_ == null) {
        return enabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : enabled_;
      } else {
        return enabledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    public Builder setEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
      if (enabledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        enabled_ = value;
        onChanged();
      } else {
        enabledBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    public Builder setEnabled(
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder builderForValue) {
      if (enabledBuilder_ == null) {
        enabled_ = builderForValue.build();
        onChanged();
      } else {
        enabledBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    public Builder mergeEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
      if (enabledBuilder_ == null) {
        if (enabled_ != null) {
          enabled_ =
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.newBuilder(enabled_).mergeFrom(value).buildPartial();
        } else {
          enabled_ = value;
        }
        onChanged();
      } else {
        enabledBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    public Builder clearEnabled() {
      if (enabledBuilder_ == null) {
        enabled_ = null;
        onChanged();
      } else {
        enabled_ = null;
        enabledBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder getEnabledBuilder() {
      
      onChanged();
      return getEnabledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder() {
      if (enabledBuilder_ != null) {
        return enabledBuilder_.getMessageOrBuilder();
      } else {
        return enabled_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : enabled_;
      }
    }
    /**
     * <pre>
     * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> 
        getEnabledFieldBuilder() {
      if (enabledBuilder_ == null) {
        enabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder>(
                getEnabled(),
                getParentForChildren(),
                isClean());
        enabled_ = null;
      }
      return enabledBuilder_;
    }

    private com.google.protobuf.UInt32Value packetsToReadToConnectionCountRatio_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> packetsToReadToConnectionCountRatioBuilder_;
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the packetsToReadToConnectionCountRatio field is set.
     */
    public boolean hasPacketsToReadToConnectionCountRatio() {
      return packetsToReadToConnectionCountRatioBuilder_ != null || packetsToReadToConnectionCountRatio_ != null;
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     * @return The packetsToReadToConnectionCountRatio.
     */
    public com.google.protobuf.UInt32Value getPacketsToReadToConnectionCountRatio() {
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        return packetsToReadToConnectionCountRatio_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : packetsToReadToConnectionCountRatio_;
      } else {
        return packetsToReadToConnectionCountRatioBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setPacketsToReadToConnectionCountRatio(com.google.protobuf.UInt32Value value) {
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        packetsToReadToConnectionCountRatio_ = value;
        onChanged();
      } else {
        packetsToReadToConnectionCountRatioBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setPacketsToReadToConnectionCountRatio(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        packetsToReadToConnectionCountRatio_ = builderForValue.build();
        onChanged();
      } else {
        packetsToReadToConnectionCountRatioBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder mergePacketsToReadToConnectionCountRatio(com.google.protobuf.UInt32Value value) {
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        if (packetsToReadToConnectionCountRatio_ != null) {
          packetsToReadToConnectionCountRatio_ =
            com.google.protobuf.UInt32Value.newBuilder(packetsToReadToConnectionCountRatio_).mergeFrom(value).buildPartial();
        } else {
          packetsToReadToConnectionCountRatio_ = value;
        }
        onChanged();
      } else {
        packetsToReadToConnectionCountRatioBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearPacketsToReadToConnectionCountRatio() {
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        packetsToReadToConnectionCountRatio_ = null;
        onChanged();
      } else {
        packetsToReadToConnectionCountRatio_ = null;
        packetsToReadToConnectionCountRatioBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getPacketsToReadToConnectionCountRatioBuilder() {
      
      onChanged();
      return getPacketsToReadToConnectionCountRatioFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getPacketsToReadToConnectionCountRatioOrBuilder() {
      if (packetsToReadToConnectionCountRatioBuilder_ != null) {
        return packetsToReadToConnectionCountRatioBuilder_.getMessageOrBuilder();
      } else {
        return packetsToReadToConnectionCountRatio_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : packetsToReadToConnectionCountRatio_;
      }
    }
    /**
     * <pre>
     * A multiplier to number of connections which is used to determine how many packets to read per
     * event loop. A reasonable number should allow the listener to process enough payload but not
     * starve TCP and other UDP sockets and also prevent long event loop duration.
     * The default value is 32. This means if there are N QUIC connections, the total number of
     * packets to read in each read event will be 32 * N.
     * The actual number of packets to read in total by the UDP listener is also
     * bound by 6000, regardless of this field or how many connections there are.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value packets_to_read_to_connection_count_ratio = 5 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getPacketsToReadToConnectionCountRatioFieldBuilder() {
      if (packetsToReadToConnectionCountRatioBuilder_ == null) {
        packetsToReadToConnectionCountRatioBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getPacketsToReadToConnectionCountRatio(),
                getParentForChildren(),
                isClean());
        packetsToReadToConnectionCountRatio_ = null;
      }
      return packetsToReadToConnectionCountRatioBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig cryptoStreamConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> cryptoStreamConfigBuilder_;
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     * @return Whether the cryptoStreamConfig field is set.
     */
    public boolean hasCryptoStreamConfig() {
      return cryptoStreamConfigBuilder_ != null || cryptoStreamConfig_ != null;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     * @return The cryptoStreamConfig.
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCryptoStreamConfig() {
      if (cryptoStreamConfigBuilder_ == null) {
        return cryptoStreamConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : cryptoStreamConfig_;
      } else {
        return cryptoStreamConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    public Builder setCryptoStreamConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (cryptoStreamConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cryptoStreamConfig_ = value;
        onChanged();
      } else {
        cryptoStreamConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    public Builder setCryptoStreamConfig(
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
      if (cryptoStreamConfigBuilder_ == null) {
        cryptoStreamConfig_ = builderForValue.build();
        onChanged();
      } else {
        cryptoStreamConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    public Builder mergeCryptoStreamConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (cryptoStreamConfigBuilder_ == null) {
        if (cryptoStreamConfig_ != null) {
          cryptoStreamConfig_ =
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder(cryptoStreamConfig_).mergeFrom(value).buildPartial();
        } else {
          cryptoStreamConfig_ = value;
        }
        onChanged();
      } else {
        cryptoStreamConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    public Builder clearCryptoStreamConfig() {
      if (cryptoStreamConfigBuilder_ == null) {
        cryptoStreamConfig_ = null;
        onChanged();
      } else {
        cryptoStreamConfig_ = null;
        cryptoStreamConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getCryptoStreamConfigBuilder() {
      
      onChanged();
      return getCryptoStreamConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCryptoStreamConfigOrBuilder() {
      if (cryptoStreamConfigBuilder_ != null) {
        return cryptoStreamConfigBuilder_.getMessageOrBuilder();
      } else {
        return cryptoStreamConfig_ == null ?
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : cryptoStreamConfig_;
      }
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
     * If not specified the :ref:`QUICHE default one configured by &lt;envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig&gt;` will be used.
     * [#extension-category: envoy.quic.server.crypto_stream]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig crypto_stream_config = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
        getCryptoStreamConfigFieldBuilder() {
      if (cryptoStreamConfigBuilder_ == null) {
        cryptoStreamConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                getCryptoStreamConfig(),
                getParentForChildren(),
                isClean());
        cryptoStreamConfig_ = null;
      }
      return cryptoStreamConfigBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig proofSourceConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> proofSourceConfigBuilder_;
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     * @return Whether the proofSourceConfig field is set.
     */
    public boolean hasProofSourceConfig() {
      return proofSourceConfigBuilder_ != null || proofSourceConfig_ != null;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     * @return The proofSourceConfig.
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getProofSourceConfig() {
      if (proofSourceConfigBuilder_ == null) {
        return proofSourceConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : proofSourceConfig_;
      } else {
        return proofSourceConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    public Builder setProofSourceConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (proofSourceConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        proofSourceConfig_ = value;
        onChanged();
      } else {
        proofSourceConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    public Builder setProofSourceConfig(
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
      if (proofSourceConfigBuilder_ == null) {
        proofSourceConfig_ = builderForValue.build();
        onChanged();
      } else {
        proofSourceConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    public Builder mergeProofSourceConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (proofSourceConfigBuilder_ == null) {
        if (proofSourceConfig_ != null) {
          proofSourceConfig_ =
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder(proofSourceConfig_).mergeFrom(value).buildPartial();
        } else {
          proofSourceConfig_ = value;
        }
        onChanged();
      } else {
        proofSourceConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    public Builder clearProofSourceConfig() {
      if (proofSourceConfigBuilder_ == null) {
        proofSourceConfig_ = null;
        onChanged();
      } else {
        proofSourceConfig_ = null;
        proofSourceConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getProofSourceConfigBuilder() {
      
      onChanged();
      return getProofSourceConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getProofSourceConfigOrBuilder() {
      if (proofSourceConfigBuilder_ != null) {
        return proofSourceConfigBuilder_.getMessageOrBuilder();
      } else {
        return proofSourceConfig_ == null ?
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : proofSourceConfig_;
      }
    }
    /**
     * <pre>
     * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
     * If not specified the :ref:`default one configured by &lt;envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig&gt;` will be used.
     * [#extension-category: envoy.quic.proof_source]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig proof_source_config = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
        getProofSourceConfigFieldBuilder() {
      if (proofSourceConfigBuilder_ == null) {
        proofSourceConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                getProofSourceConfig(),
                getParentForChildren(),
                isClean());
        proofSourceConfig_ = null;
      }
      return proofSourceConfigBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.listener.v3.QuicProtocolOptions)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.listener.v3.QuicProtocolOptions)
  private static final io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions();
  }

  public static io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QuicProtocolOptions>
      PARSER = new com.google.protobuf.AbstractParser<QuicProtocolOptions>() {
    @java.lang.Override
    public QuicProtocolOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new QuicProtocolOptions(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<QuicProtocolOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<QuicProtocolOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.listener.v3.QuicProtocolOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

