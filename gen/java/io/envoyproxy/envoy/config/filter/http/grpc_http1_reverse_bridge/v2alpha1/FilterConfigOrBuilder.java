// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto

package io.envoyproxy.envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1;

public interface FilterConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The content-type to pass to the upstream when the gRPC bridge filter is applied.
   * The filter will also validate that the upstream responds with the same content type.
   * </pre>
   *
   * <code>string content_type = 1 [(.validate.rules) = { ... }</code>
   * @return The contentType.
   */
  java.lang.String getContentType();
  /**
   * <pre>
   * The content-type to pass to the upstream when the gRPC bridge filter is applied.
   * The filter will also validate that the upstream responds with the same content type.
   * </pre>
   *
   * <code>string content_type = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for contentType.
   */
  com.google.protobuf.ByteString
      getContentTypeBytes();

  /**
   * <pre>
   * If true, Envoy will assume that the upstream doesn't understand gRPC frames and
   * strip the gRPC frame from the request, and add it back in to the response. This will
   * hide the gRPC semantics from the upstream, allowing it to receive and respond with a
   * simple binary encoded protobuf.
   * </pre>
   *
   * <code>bool withhold_grpc_frames = 2;</code>
   * @return The withholdGrpcFrames.
   */
  boolean getWithholdGrpcFrames();
}
