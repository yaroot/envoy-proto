// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/aws_lambda/v2alpha/aws_lambda.proto

package io.envoyproxy.envoy.config.filter.http.aws_lambda.v2alpha;

public interface ConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.aws_lambda.v2alpha.Config)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The ARN of the AWS Lambda to invoke when the filter is engaged
   * Must be in the following format:
   * arn:&lt;partition&gt;:lambda:&lt;region&gt;:&lt;account-number&gt;:function:&lt;function-name&gt;
   * </pre>
   *
   * <code>string arn = 1 [(.validate.rules) = { ... }</code>
   * @return The arn.
   */
  java.lang.String getArn();
  /**
   * <pre>
   * The ARN of the AWS Lambda to invoke when the filter is engaged
   * Must be in the following format:
   * arn:&lt;partition&gt;:lambda:&lt;region&gt;:&lt;account-number&gt;:function:&lt;function-name&gt;
   * </pre>
   *
   * <code>string arn = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for arn.
   */
  com.google.protobuf.ByteString
      getArnBytes();

  /**
   * <pre>
   * Whether to transform the request (headers and body) to a JSON payload or pass it as is.
   * </pre>
   *
   * <code>bool payload_passthrough = 2;</code>
   * @return The payloadPassthrough.
   */
  boolean getPayloadPassthrough();

  /**
   * <pre>
   * Determines the way to invoke the Lambda function.
   * </pre>
   *
   * <code>.envoy.config.filter.http.aws_lambda.v2alpha.Config.InvocationMode invocation_mode = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for invocationMode.
   */
  int getInvocationModeValue();
  /**
   * <pre>
   * Determines the way to invoke the Lambda function.
   * </pre>
   *
   * <code>.envoy.config.filter.http.aws_lambda.v2alpha.Config.InvocationMode invocation_mode = 3 [(.validate.rules) = { ... }</code>
   * @return The invocationMode.
   */
  io.envoyproxy.envoy.config.filter.http.aws_lambda.v2alpha.Config.InvocationMode getInvocationMode();
}
