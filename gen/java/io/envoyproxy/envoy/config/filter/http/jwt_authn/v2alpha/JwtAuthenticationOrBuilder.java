// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/jwt_authn/v2alpha/config.proto

package io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha;

public interface JwtAuthenticationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.jwt_authn.v2alpha.JwtAuthentication)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Map of provider names to JwtProviders.
   * .. code-block:: yaml
   *   providers:
   *     provider1:
   *        issuer: issuer1
   *        audiences:
   *        - audience1
   *        - audience2
   *        remote_jwks:
   *          http_uri:
   *            uri: https://example.com/.well-known/jwks.json
   *            cluster: example_jwks_cluster
   *      provider2:
   *        issuer: provider2
   *        local_jwks:
   *          inline_string: jwks_string
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider&gt; providers = 1;</code>
   */
  int getProvidersCount();
  /**
   * <pre>
   * Map of provider names to JwtProviders.
   * .. code-block:: yaml
   *   providers:
   *     provider1:
   *        issuer: issuer1
   *        audiences:
   *        - audience1
   *        - audience2
   *        remote_jwks:
   *          http_uri:
   *            uri: https://example.com/.well-known/jwks.json
   *            cluster: example_jwks_cluster
   *      provider2:
   *        issuer: provider2
   *        local_jwks:
   *          inline_string: jwks_string
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider&gt; providers = 1;</code>
   */
  boolean containsProviders(
      java.lang.String key);
  /**
   * Use {@link #getProvidersMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider>
  getProviders();
  /**
   * <pre>
   * Map of provider names to JwtProviders.
   * .. code-block:: yaml
   *   providers:
   *     provider1:
   *        issuer: issuer1
   *        audiences:
   *        - audience1
   *        - audience2
   *        remote_jwks:
   *          http_uri:
   *            uri: https://example.com/.well-known/jwks.json
   *            cluster: example_jwks_cluster
   *      provider2:
   *        issuer: provider2
   *        local_jwks:
   *          inline_string: jwks_string
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider&gt; providers = 1;</code>
   */
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider>
  getProvidersMap();
  /**
   * <pre>
   * Map of provider names to JwtProviders.
   * .. code-block:: yaml
   *   providers:
   *     provider1:
   *        issuer: issuer1
   *        audiences:
   *        - audience1
   *        - audience2
   *        remote_jwks:
   *          http_uri:
   *            uri: https://example.com/.well-known/jwks.json
   *            cluster: example_jwks_cluster
   *      provider2:
   *        issuer: provider2
   *        local_jwks:
   *          inline_string: jwks_string
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider&gt; providers = 1;</code>
   */
  /* nullable */
io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider getProvidersOrDefault(
      java.lang.String key,
      /* nullable */
io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider defaultValue);
  /**
   * <pre>
   * Map of provider names to JwtProviders.
   * .. code-block:: yaml
   *   providers:
   *     provider1:
   *        issuer: issuer1
   *        audiences:
   *        - audience1
   *        - audience2
   *        remote_jwks:
   *          http_uri:
   *            uri: https://example.com/.well-known/jwks.json
   *            cluster: example_jwks_cluster
   *      provider2:
   *        issuer: provider2
   *        local_jwks:
   *          inline_string: jwks_string
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider&gt; providers = 1;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider getProvidersOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Specifies requirements based on the route matches. The first matched requirement will be
   * applied. If there are overlapped match conditions, please put the most specific match first.
   * Examples
   * .. code-block:: yaml
   *   rules:
   *     - match:
   *         prefix: /healthz
   *     - match:
   *         prefix: /baz
   *       requires:
   *         provider_name: provider1
   *     - match:
   *         prefix: /foo
   *       requires:
   *         requires_any:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   *     - match:
   *         prefix: /bar
   *       requires:
   *         requires_all:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   * </pre>
   *
   * <code>repeated .envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule rules = 2;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule> 
      getRulesList();
  /**
   * <pre>
   * Specifies requirements based on the route matches. The first matched requirement will be
   * applied. If there are overlapped match conditions, please put the most specific match first.
   * Examples
   * .. code-block:: yaml
   *   rules:
   *     - match:
   *         prefix: /healthz
   *     - match:
   *         prefix: /baz
   *       requires:
   *         provider_name: provider1
   *     - match:
   *         prefix: /foo
   *       requires:
   *         requires_any:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   *     - match:
   *         prefix: /bar
   *       requires:
   *         requires_all:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   * </pre>
   *
   * <code>repeated .envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule rules = 2;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule getRules(int index);
  /**
   * <pre>
   * Specifies requirements based on the route matches. The first matched requirement will be
   * applied. If there are overlapped match conditions, please put the most specific match first.
   * Examples
   * .. code-block:: yaml
   *   rules:
   *     - match:
   *         prefix: /healthz
   *     - match:
   *         prefix: /baz
   *       requires:
   *         provider_name: provider1
   *     - match:
   *         prefix: /foo
   *       requires:
   *         requires_any:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   *     - match:
   *         prefix: /bar
   *       requires:
   *         requires_all:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   * </pre>
   *
   * <code>repeated .envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule rules = 2;</code>
   */
  int getRulesCount();
  /**
   * <pre>
   * Specifies requirements based on the route matches. The first matched requirement will be
   * applied. If there are overlapped match conditions, please put the most specific match first.
   * Examples
   * .. code-block:: yaml
   *   rules:
   *     - match:
   *         prefix: /healthz
   *     - match:
   *         prefix: /baz
   *       requires:
   *         provider_name: provider1
   *     - match:
   *         prefix: /foo
   *       requires:
   *         requires_any:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   *     - match:
   *         prefix: /bar
   *       requires:
   *         requires_all:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   * </pre>
   *
   * <code>repeated .envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule rules = 2;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.RequirementRuleOrBuilder> 
      getRulesOrBuilderList();
  /**
   * <pre>
   * Specifies requirements based on the route matches. The first matched requirement will be
   * applied. If there are overlapped match conditions, please put the most specific match first.
   * Examples
   * .. code-block:: yaml
   *   rules:
   *     - match:
   *         prefix: /healthz
   *     - match:
   *         prefix: /baz
   *       requires:
   *         provider_name: provider1
   *     - match:
   *         prefix: /foo
   *       requires:
   *         requires_any:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   *     - match:
   *         prefix: /bar
   *       requires:
   *         requires_all:
   *           requirements:
   *             - provider_name: provider1
   *             - provider_name: provider2
   * </pre>
   *
   * <code>repeated .envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule rules = 2;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.RequirementRuleOrBuilder getRulesOrBuilder(
      int index);

  /**
   * <pre>
   * This message specifies Jwt requirements based on stream_info.filterState.
   * Other HTTP filters can use it to specify Jwt requirements dynamically.
   * The *rules* field above is checked first, if it could not find any matches,
   * check this one.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.FilterStateRule filter_state_rules = 3;</code>
   * @return Whether the filterStateRules field is set.
   */
  boolean hasFilterStateRules();
  /**
   * <pre>
   * This message specifies Jwt requirements based on stream_info.filterState.
   * Other HTTP filters can use it to specify Jwt requirements dynamically.
   * The *rules* field above is checked first, if it could not find any matches,
   * check this one.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.FilterStateRule filter_state_rules = 3;</code>
   * @return The filterStateRules.
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.FilterStateRule getFilterStateRules();
  /**
   * <pre>
   * This message specifies Jwt requirements based on stream_info.filterState.
   * Other HTTP filters can use it to specify Jwt requirements dynamically.
   * The *rules* field above is checked first, if it could not find any matches,
   * check this one.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.FilterStateRule filter_state_rules = 3;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.FilterStateRuleOrBuilder getFilterStateRulesOrBuilder();

  /**
   * <pre>
   * When set to true, bypass the `CORS preflight request
   * &lt;http://www.w3.org/TR/cors/#cross-origin-request-with-preflight&gt;`_ regardless of JWT
   * requirements specified in the rules.
   * </pre>
   *
   * <code>bool bypass_cors_preflight = 4;</code>
   * @return The bypassCorsPreflight.
   */
  boolean getBypassCorsPreflight();
}
