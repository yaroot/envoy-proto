// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/jwt_authn/v2alpha/config.proto

package io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha;

public interface FilterStateRuleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.jwt_authn.v2alpha.FilterStateRule)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The filter state name to retrieve the `Router::StringAccessor` object.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The filter state name to retrieve the `Router::StringAccessor` object.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * A map of string keys to requirements. The string key is the string value
   * in the FilterState with the name specified in the *name* field above.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement&gt; requires = 3;</code>
   */
  int getRequiresCount();
  /**
   * <pre>
   * A map of string keys to requirements. The string key is the string value
   * in the FilterState with the name specified in the *name* field above.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement&gt; requires = 3;</code>
   */
  boolean containsRequires(
      java.lang.String key);
  /**
   * Use {@link #getRequiresMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement>
  getRequires();
  /**
   * <pre>
   * A map of string keys to requirements. The string key is the string value
   * in the FilterState with the name specified in the *name* field above.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement&gt; requires = 3;</code>
   */
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement>
  getRequiresMap();
  /**
   * <pre>
   * A map of string keys to requirements. The string key is the string value
   * in the FilterState with the name specified in the *name* field above.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement&gt; requires = 3;</code>
   */

  /* nullable */
io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement getRequiresOrDefault(
      java.lang.String key,
      /* nullable */
io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement defaultValue);
  /**
   * <pre>
   * A map of string keys to requirements. The string key is the string value
   * in the FilterState with the name specified in the *name* field above.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement&gt; requires = 3;</code>
   */

  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement getRequiresOrThrow(
      java.lang.String key);
}
