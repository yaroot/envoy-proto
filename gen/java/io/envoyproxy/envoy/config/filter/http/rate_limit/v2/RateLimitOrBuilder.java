// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/rate_limit/v2/rate_limit.proto

package io.envoyproxy.envoy.config.filter.http.rate_limit.v2;

public interface RateLimitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.rate_limit.v2.RateLimit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The rate limit domain to use when calling the rate limit service.
   * </pre>
   *
   * <code>string domain = 1 [(.validate.rules) = { ... }</code>
   * @return The domain.
   */
  java.lang.String getDomain();
  /**
   * <pre>
   * The rate limit domain to use when calling the rate limit service.
   * </pre>
   *
   * <code>string domain = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for domain.
   */
  com.google.protobuf.ByteString
      getDomainBytes();

  /**
   * <pre>
   * Specifies the rate limit configurations to be applied with the same
   * stage number. If not set, the default stage number is 0.
   * .. note::
   *  The filter supports a range of 0 - 10 inclusively for stage numbers.
   * </pre>
   *
   * <code>uint32 stage = 2 [(.validate.rules) = { ... }</code>
   * @return The stage.
   */
  int getStage();

  /**
   * <pre>
   * The type of requests the filter should apply to. The supported
   * types are *internal*, *external* or *both*. A request is considered internal if
   * :ref:`x-envoy-internal&lt;config_http_conn_man_headers_x-envoy-internal&gt;` is set to true. If
   * :ref:`x-envoy-internal&lt;config_http_conn_man_headers_x-envoy-internal&gt;` is not set or false, a
   * request is considered external. The filter defaults to *both*, and it will apply to all request
   * types.
   * </pre>
   *
   * <code>string request_type = 3 [(.validate.rules) = { ... }</code>
   * @return The requestType.
   */
  java.lang.String getRequestType();
  /**
   * <pre>
   * The type of requests the filter should apply to. The supported
   * types are *internal*, *external* or *both*. A request is considered internal if
   * :ref:`x-envoy-internal&lt;config_http_conn_man_headers_x-envoy-internal&gt;` is set to true. If
   * :ref:`x-envoy-internal&lt;config_http_conn_man_headers_x-envoy-internal&gt;` is not set or false, a
   * request is considered external. The filter defaults to *both*, and it will apply to all request
   * types.
   * </pre>
   *
   * <code>string request_type = 3 [(.validate.rules) = { ... }</code>
   * @return The bytes for requestType.
   */
  com.google.protobuf.ByteString
      getRequestTypeBytes();

  /**
   * <pre>
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 4;</code>
   * @return Whether the timeout field is set.
   */
  boolean hasTimeout();
  /**
   * <pre>
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 4;</code>
   * @return The timeout.
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 4;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * The filter's behaviour in case the rate limiting service does
   * not respond back. When it is set to true, Envoy will not allow traffic in case of
   * communication failure between rate limiting service and the proxy.
   * Defaults to false.
   * </pre>
   *
   * <code>bool failure_mode_deny = 5;</code>
   * @return The failureModeDeny.
   */
  boolean getFailureModeDeny();

  /**
   * <pre>
   * Specifies whether a `RESOURCE_EXHAUSTED` gRPC code must be returned instead
   * of the default `UNAVAILABLE` gRPC code for a rate limited gRPC call. The
   * HTTP code will be 200 for a gRPC response.
   * </pre>
   *
   * <code>bool rate_limited_as_resource_exhausted = 6;</code>
   * @return The rateLimitedAsResourceExhausted.
   */
  boolean getRateLimitedAsResourceExhausted();

  /**
   * <pre>
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   * </pre>
   *
   * <code>.envoy.config.ratelimit.v2.RateLimitServiceConfig rate_limit_service = 7 [(.validate.rules) = { ... }</code>
   * @return Whether the rateLimitService field is set.
   */
  boolean hasRateLimitService();
  /**
   * <pre>
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   * </pre>
   *
   * <code>.envoy.config.ratelimit.v2.RateLimitServiceConfig rate_limit_service = 7 [(.validate.rules) = { ... }</code>
   * @return The rateLimitService.
   */
  io.envoyproxy.envoy.config.ratelimit.v2.RateLimitServiceConfig getRateLimitService();
  /**
   * <pre>
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   * </pre>
   *
   * <code>.envoy.config.ratelimit.v2.RateLimitServiceConfig rate_limit_service = 7 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.ratelimit.v2.RateLimitServiceConfigOrBuilder getRateLimitServiceOrBuilder();
}
