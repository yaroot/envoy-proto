// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/compressor/v2/compressor.proto

package io.envoyproxy.envoy.config.filter.http.compressor.v2;

public interface CompressorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.compressor.v2.Compressor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1;</code>
   * @return Whether the contentLength field is set.
   */
  boolean hasContentLength();
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1;</code>
   * @return The contentLength.
   */
  com.google.protobuf.UInt32Value getContentLength();
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getContentLengthOrBuilder();

  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2;</code>
   * @return A list containing the contentType.
   */
  java.util.List<java.lang.String>
      getContentTypeList();
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2;</code>
   * @return The count of contentType.
   */
  int getContentTypeCount();
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2;</code>
   * @param index The index of the element to return.
   * @return The contentType at the given index.
   */
  java.lang.String getContentType(int index);
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the contentType at the given index.
   */
  com.google.protobuf.ByteString
      getContentTypeBytes(int index);

  /**
   * <pre>
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   * </pre>
   *
   * <code>bool disable_on_etag_header = 3;</code>
   * @return The disableOnEtagHeader.
   */
  boolean getDisableOnEtagHeader();

  /**
   * <pre>
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   * .. attention:
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   * </pre>
   *
   * <code>bool remove_accept_encoding_header = 4;</code>
   * @return The removeAcceptEncodingHeader.
   */
  boolean getRemoveAcceptEncodingHeader();

  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled = 5;</code>
   * @return Whether the runtimeEnabled field is set.
   */
  boolean hasRuntimeEnabled();
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled = 5;</code>
   * @return The runtimeEnabled.
   */
  io.envoyproxy.envoy.api.v2.core.RuntimeFeatureFlag getRuntimeEnabled();
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled = 5;</code>
   */
  io.envoyproxy.envoy.api.v2.core.RuntimeFeatureFlagOrBuilder getRuntimeEnabledOrBuilder();
}
