// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/ext_authz/v2/ext_authz.proto

package io.envoyproxy.envoy.config.filter.http.ext_authz.v2;

public interface ExtAuthzPerRouteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.ext_authz.v2.ExtAuthzPerRoute)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Disable the ext auth filter for this particular vhost or route.
   * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
   * </pre>
   *
   * <code>bool disabled = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the disabled field is set.
   */
  boolean hasDisabled();
  /**
   * <pre>
   * Disable the ext auth filter for this particular vhost or route.
   * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
   * </pre>
   *
   * <code>bool disabled = 1 [(.validate.rules) = { ... }</code>
   * @return The disabled.
   */
  boolean getDisabled();

  /**
   * <pre>
   * Check request settings for this route.
   * </pre>
   *
   * <code>.envoy.config.filter.http.ext_authz.v2.CheckSettings check_settings = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the checkSettings field is set.
   */
  boolean hasCheckSettings();
  /**
   * <pre>
   * Check request settings for this route.
   * </pre>
   *
   * <code>.envoy.config.filter.http.ext_authz.v2.CheckSettings check_settings = 2 [(.validate.rules) = { ... }</code>
   * @return The checkSettings.
   */
  io.envoyproxy.envoy.config.filter.http.ext_authz.v2.CheckSettings getCheckSettings();
  /**
   * <pre>
   * Check request settings for this route.
   * </pre>
   *
   * <code>.envoy.config.filter.http.ext_authz.v2.CheckSettings check_settings = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.filter.http.ext_authz.v2.CheckSettingsOrBuilder getCheckSettingsOrBuilder();

  public io.envoyproxy.envoy.config.filter.http.ext_authz.v2.ExtAuthzPerRoute.OverrideCase getOverrideCase();
}
