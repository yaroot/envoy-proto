// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/jwt_authn/v2alpha/config.proto

package io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha;

public interface JwtRequirementOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specify a required provider name.
   * </pre>
   *
   * <code>string provider_name = 1;</code>
   * @return Whether the providerName field is set.
   */
  boolean hasProviderName();
  /**
   * <pre>
   * Specify a required provider name.
   * </pre>
   *
   * <code>string provider_name = 1;</code>
   * @return The providerName.
   */
  java.lang.String getProviderName();
  /**
   * <pre>
   * Specify a required provider name.
   * </pre>
   *
   * <code>string provider_name = 1;</code>
   * @return The bytes for providerName.
   */
  com.google.protobuf.ByteString
      getProviderNameBytes();

  /**
   * <pre>
   * Specify a required provider with audiences.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences provider_and_audiences = 2;</code>
   * @return Whether the providerAndAudiences field is set.
   */
  boolean hasProviderAndAudiences();
  /**
   * <pre>
   * Specify a required provider with audiences.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences provider_and_audiences = 2;</code>
   * @return The providerAndAudiences.
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences getProviderAndAudiences();
  /**
   * <pre>
   * Specify a required provider with audiences.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences provider_and_audiences = 2;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.ProviderWithAudiencesOrBuilder getProviderAndAudiencesOrBuilder();

  /**
   * <pre>
   * Specify list of JwtRequirement. Their results are OR-ed.
   * If any one of them passes, the result is passed.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList requires_any = 3;</code>
   * @return Whether the requiresAny field is set.
   */
  boolean hasRequiresAny();
  /**
   * <pre>
   * Specify list of JwtRequirement. Their results are OR-ed.
   * If any one of them passes, the result is passed.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList requires_any = 3;</code>
   * @return The requiresAny.
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList getRequiresAny();
  /**
   * <pre>
   * Specify list of JwtRequirement. Their results are OR-ed.
   * If any one of them passes, the result is passed.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList requires_any = 3;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementOrListOrBuilder getRequiresAnyOrBuilder();

  /**
   * <pre>
   * Specify list of JwtRequirement. Their results are AND-ed.
   * All of them must pass, if one of them fails or missing, it fails.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList requires_all = 4;</code>
   * @return Whether the requiresAll field is set.
   */
  boolean hasRequiresAll();
  /**
   * <pre>
   * Specify list of JwtRequirement. Their results are AND-ed.
   * All of them must pass, if one of them fails or missing, it fails.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList requires_all = 4;</code>
   * @return The requiresAll.
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList getRequiresAll();
  /**
   * <pre>
   * Specify list of JwtRequirement. Their results are AND-ed.
   * All of them must pass, if one of them fails or missing, it fails.
   * </pre>
   *
   * <code>.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList requires_all = 4;</code>
   */
  io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementAndListOrBuilder getRequiresAllOrBuilder();

  /**
   * <pre>
   * The requirement is always satisfied even if JWT is missing or the JWT
   * verification fails. A typical usage is: this filter is used to only verify
   * JWTs and pass the verified JWT payloads to another filter, the other filter
   * will make decision. In this mode, all JWT tokens will be verified.
   * </pre>
   *
   * <code>.google.protobuf.Empty allow_missing_or_failed = 5;</code>
   * @return Whether the allowMissingOrFailed field is set.
   */
  boolean hasAllowMissingOrFailed();
  /**
   * <pre>
   * The requirement is always satisfied even if JWT is missing or the JWT
   * verification fails. A typical usage is: this filter is used to only verify
   * JWTs and pass the verified JWT payloads to another filter, the other filter
   * will make decision. In this mode, all JWT tokens will be verified.
   * </pre>
   *
   * <code>.google.protobuf.Empty allow_missing_or_failed = 5;</code>
   * @return The allowMissingOrFailed.
   */
  com.google.protobuf.Empty getAllowMissingOrFailed();
  /**
   * <pre>
   * The requirement is always satisfied even if JWT is missing or the JWT
   * verification fails. A typical usage is: this filter is used to only verify
   * JWTs and pass the verified JWT payloads to another filter, the other filter
   * will make decision. In this mode, all JWT tokens will be verified.
   * </pre>
   *
   * <code>.google.protobuf.Empty allow_missing_or_failed = 5;</code>
   */
  com.google.protobuf.EmptyOrBuilder getAllowMissingOrFailedOrBuilder();

  /**
   * <pre>
   * The requirement is satisfied if JWT is missing, but failed if JWT is
   * presented but invalid. Similar to allow_missing_or_failed, this is used
   * to only verify JWTs and pass the verified payload to another filter. The
   * different is this mode will reject requests with invalid tokens.
   * </pre>
   *
   * <code>.google.protobuf.Empty allow_missing = 6;</code>
   * @return Whether the allowMissing field is set.
   */
  boolean hasAllowMissing();
  /**
   * <pre>
   * The requirement is satisfied if JWT is missing, but failed if JWT is
   * presented but invalid. Similar to allow_missing_or_failed, this is used
   * to only verify JWTs and pass the verified payload to another filter. The
   * different is this mode will reject requests with invalid tokens.
   * </pre>
   *
   * <code>.google.protobuf.Empty allow_missing = 6;</code>
   * @return The allowMissing.
   */
  com.google.protobuf.Empty getAllowMissing();
  /**
   * <pre>
   * The requirement is satisfied if JWT is missing, but failed if JWT is
   * presented but invalid. Similar to allow_missing_or_failed, this is used
   * to only verify JWTs and pass the verified payload to another filter. The
   * different is this mode will reject requests with invalid tokens.
   * </pre>
   *
   * <code>.google.protobuf.Empty allow_missing = 6;</code>
   */
  com.google.protobuf.EmptyOrBuilder getAllowMissingOrBuilder();

  public io.envoyproxy.envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement.RequiresTypeCase getRequiresTypeCase();
}
