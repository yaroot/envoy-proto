// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/csrf/v2/csrf.proto

package io.envoyproxy.envoy.config.filter.http.csrf.v2;

public interface CsrfPolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.csrf.v2.CsrfPolicy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the % of requests for which the CSRF filter is enabled.
   * If :ref:`runtime_key &lt;envoy_api_field_core.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   * .. note::
   *   This field defaults to 100/:ref:`HUNDRED
   *   &lt;envoy_api_enum_type.FractionalPercent.DenominatorType&gt;`.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the filterEnabled field is set.
   */
  boolean hasFilterEnabled();
  /**
   * <pre>
   * Specifies the % of requests for which the CSRF filter is enabled.
   * If :ref:`runtime_key &lt;envoy_api_field_core.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   * .. note::
   *   This field defaults to 100/:ref:`HUNDRED
   *   &lt;envoy_api_enum_type.FractionalPercent.DenominatorType&gt;`.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
   * @return The filterEnabled.
   */
  io.envoyproxy.envoy.api.v2.core.RuntimeFractionalPercent getFilterEnabled();
  /**
   * <pre>
   * Specifies the % of requests for which the CSRF filter is enabled.
   * If :ref:`runtime_key &lt;envoy_api_field_core.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   * .. note::
   *   This field defaults to 100/:ref:`HUNDRED
   *   &lt;envoy_api_enum_type.FractionalPercent.DenominatorType&gt;`.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.api.v2.core.RuntimeFractionalPercentOrBuilder getFilterEnabledOrBuilder();

  /**
   * <pre>
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   * If :ref:`runtime_key &lt;envoy_api_field_core.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled = 2;</code>
   * @return Whether the shadowEnabled field is set.
   */
  boolean hasShadowEnabled();
  /**
   * <pre>
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   * If :ref:`runtime_key &lt;envoy_api_field_core.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled = 2;</code>
   * @return The shadowEnabled.
   */
  io.envoyproxy.envoy.api.v2.core.RuntimeFractionalPercent getShadowEnabled();
  /**
   * <pre>
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   * If :ref:`runtime_key &lt;envoy_api_field_core.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   * </pre>
   *
   * <code>.envoy.api.v2.core.RuntimeFractionalPercent shadow_enabled = 2;</code>
   */
  io.envoyproxy.envoy.api.v2.core.RuntimeFractionalPercentOrBuilder getShadowEnabledOrBuilder();

  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher additional_origins = 3;</code>
   */
  java.util.List<io.envoyproxy.envoy.type.matcher.StringMatcher> 
      getAdditionalOriginsList();
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher additional_origins = 3;</code>
   */
  io.envoyproxy.envoy.type.matcher.StringMatcher getAdditionalOrigins(int index);
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher additional_origins = 3;</code>
   */
  int getAdditionalOriginsCount();
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher additional_origins = 3;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.matcher.StringMatcherOrBuilder> 
      getAdditionalOriginsOrBuilderList();
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.StringMatcher additional_origins = 3;</code>
   */
  io.envoyproxy.envoy.type.matcher.StringMatcherOrBuilder getAdditionalOriginsOrBuilder(
      int index);
}
