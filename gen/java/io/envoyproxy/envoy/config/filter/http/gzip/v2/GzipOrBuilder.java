// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/http/gzip/v2/gzip.proto

package io.envoyproxy.envoy.config.filter.http.gzip.v2;

public interface GzipOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.http.gzip.v2.Gzip)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the memoryLevel field is set.
   */
  boolean hasMemoryLevel();
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   * @return The memoryLevel.
   */
  com.google.protobuf.UInt32Value getMemoryLevel();
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMemoryLevelOrBuilder();

  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 2 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.content_length is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=46
   * @return Whether the contentLength field is set.
   */
  @java.lang.Deprecated boolean hasContentLength();
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 2 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.content_length is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=46
   * @return The contentLength.
   */
  @java.lang.Deprecated com.google.protobuf.UInt32Value getContentLength();
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated com.google.protobuf.UInt32ValueOrBuilder getContentLengthOrBuilder();

  /**
   * <pre>
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST" provides higher compression at the cost of
   * higher latency, "SPEED" provides lower compression with minimum impact on response time.
   * "DEFAULT" provides an optimal result between speed and compression. This field will be set to
   * "DEFAULT" if not specified.
   * </pre>
   *
   * <code>.envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum compression_level = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for compressionLevel.
   */
  int getCompressionLevelValue();
  /**
   * <pre>
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST" provides higher compression at the cost of
   * higher latency, "SPEED" provides lower compression with minimum impact on response time.
   * "DEFAULT" provides an optimal result between speed and compression. This field will be set to
   * "DEFAULT" if not specified.
   * </pre>
   *
   * <code>.envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum compression_level = 3 [(.validate.rules) = { ... }</code>
   * @return The compressionLevel.
   */
  io.envoyproxy.envoy.config.filter.http.gzip.v2.Gzip.CompressionLevel.Enum getCompressionLevel();

  /**
   * <pre>
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
   * there are situations which changing this parameter might produce better results. For example,
   * run-length encoding (RLE) is typically used when the content is known for having sequences
   * which same data occurs many consecutive times. For more information about each strategy, please
   * refer to zlib manual.
   * </pre>
   *
   * <code>.envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy compression_strategy = 4 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for compressionStrategy.
   */
  int getCompressionStrategyValue();
  /**
   * <pre>
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
   * there are situations which changing this parameter might produce better results. For example,
   * run-length encoding (RLE) is typically used when the content is known for having sequences
   * which same data occurs many consecutive times. For more information about each strategy, please
   * refer to zlib manual.
   * </pre>
   *
   * <code>.envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy compression_strategy = 4 [(.validate.rules) = { ... }</code>
   * @return The compressionStrategy.
   */
  io.envoyproxy.envoy.config.filter.http.gzip.v2.Gzip.CompressionStrategy getCompressionStrategy();

  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>repeated string content_type = 6 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.content_type is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=70
   * @return A list containing the contentType.
   */
  @java.lang.Deprecated java.util.List<java.lang.String>
      getContentTypeList();
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>repeated string content_type = 6 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.content_type is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=70
   * @return The count of contentType.
   */
  @java.lang.Deprecated int getContentTypeCount();
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>repeated string content_type = 6 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.content_type is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=70
   * @param index The index of the element to return.
   * @return The contentType at the given index.
   */
  @java.lang.Deprecated java.lang.String getContentType(int index);
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>repeated string content_type = 6 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.content_type is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=70
   * @param index The index of the value to return.
   * @return The bytes of the contentType at the given index.
   */
  @java.lang.Deprecated com.google.protobuf.ByteString
      getContentTypeBytes(int index);

  /**
   * <pre>
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>bool disable_on_etag_header = 7 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.disable_on_etag_header is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=77
   * @return The disableOnEtagHeader.
   */
  @java.lang.Deprecated boolean getDisableOnEtagHeader();

  /**
   * <pre>
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   * .. attention:
   *    **This field is deprecated**. Set the `compressor` field instead.
   * </pre>
   *
   * <code>bool remove_accept_encoding_header = 8 [deprecated = true];</code>
   * @deprecated envoy.config.filter.http.gzip.v2.Gzip.remove_accept_encoding_header is deprecated.
   *     See envoy/config/filter/http/gzip/v2/gzip.proto;l=84
   * @return The removeAcceptEncodingHeader.
   */
  @java.lang.Deprecated boolean getRemoveAcceptEncodingHeader();

  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 9 [(.validate.rules) = { ... }</code>
   * @return Whether the windowBits field is set.
   */
  boolean hasWindowBits();
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 9 [(.validate.rules) = { ... }</code>
   * @return The windowBits.
   */
  com.google.protobuf.UInt32Value getWindowBits();
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 9 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getWindowBitsOrBuilder();

  /**
   * <pre>
   * Set of configuration parameters common for all compression filters. If this field is set then
   * the fields `content_length`, `content_type`, `disable_on_etag_header` and
   * `remove_accept_encoding_header` are ignored.
   * </pre>
   *
   * <code>.envoy.config.filter.http.compressor.v2.Compressor compressor = 10;</code>
   * @return Whether the compressor field is set.
   */
  boolean hasCompressor();
  /**
   * <pre>
   * Set of configuration parameters common for all compression filters. If this field is set then
   * the fields `content_length`, `content_type`, `disable_on_etag_header` and
   * `remove_accept_encoding_header` are ignored.
   * </pre>
   *
   * <code>.envoy.config.filter.http.compressor.v2.Compressor compressor = 10;</code>
   * @return The compressor.
   */
  io.envoyproxy.envoy.config.filter.http.compressor.v2.Compressor getCompressor();
  /**
   * <pre>
   * Set of configuration parameters common for all compression filters. If this field is set then
   * the fields `content_length`, `content_type`, `disable_on_etag_header` and
   * `remove_accept_encoding_header` are ignored.
   * </pre>
   *
   * <code>.envoy.config.filter.http.compressor.v2.Compressor compressor = 10;</code>
   */
  io.envoyproxy.envoy.config.filter.http.compressor.v2.CompressorOrBuilder getCompressorOrBuilder();
}
