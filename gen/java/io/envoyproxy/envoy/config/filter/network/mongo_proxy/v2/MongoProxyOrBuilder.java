// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/network/mongo_proxy/v2/mongo_proxy.proto

package io.envoyproxy.envoy.config.filter.network.mongo_proxy.v2;

public interface MongoProxyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.network.mongo_proxy.v2.MongoProxy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The human readable prefix to use when emitting :ref:`statistics
   * &lt;config_network_filters_mongo_proxy_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * The human readable prefix to use when emitting :ref:`statistics
   * &lt;config_network_filters_mongo_proxy_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();

  /**
   * <pre>
   * The optional path to use for writing Mongo access logs. If not access log
   * path is specified no access logs will be written. Note that access log is
   * also gated :ref:`runtime &lt;config_network_filters_mongo_proxy_runtime&gt;`.
   * </pre>
   *
   * <code>string access_log = 2;</code>
   * @return The accessLog.
   */
  java.lang.String getAccessLog();
  /**
   * <pre>
   * The optional path to use for writing Mongo access logs. If not access log
   * path is specified no access logs will be written. Note that access log is
   * also gated :ref:`runtime &lt;config_network_filters_mongo_proxy_runtime&gt;`.
   * </pre>
   *
   * <code>string access_log = 2;</code>
   * @return The bytes for accessLog.
   */
  com.google.protobuf.ByteString
      getAccessLogBytes();

  /**
   * <pre>
   * Inject a fixed delay before proxying a Mongo operation. Delays are
   * applied to the following MongoDB operations: Query, Insert, GetMore,
   * and KillCursors. Once an active delay is in progress, all incoming
   * data up until the timer event fires will be a part of the delay.
   * </pre>
   *
   * <code>.envoy.config.filter.fault.v2.FaultDelay delay = 3;</code>
   * @return Whether the delay field is set.
   */
  boolean hasDelay();
  /**
   * <pre>
   * Inject a fixed delay before proxying a Mongo operation. Delays are
   * applied to the following MongoDB operations: Query, Insert, GetMore,
   * and KillCursors. Once an active delay is in progress, all incoming
   * data up until the timer event fires will be a part of the delay.
   * </pre>
   *
   * <code>.envoy.config.filter.fault.v2.FaultDelay delay = 3;</code>
   * @return The delay.
   */
  io.envoyproxy.envoy.config.filter.fault.v2.FaultDelay getDelay();
  /**
   * <pre>
   * Inject a fixed delay before proxying a Mongo operation. Delays are
   * applied to the following MongoDB operations: Query, Insert, GetMore,
   * and KillCursors. Once an active delay is in progress, all incoming
   * data up until the timer event fires will be a part of the delay.
   * </pre>
   *
   * <code>.envoy.config.filter.fault.v2.FaultDelay delay = 3;</code>
   */
  io.envoyproxy.envoy.config.filter.fault.v2.FaultDelayOrBuilder getDelayOrBuilder();

  /**
   * <pre>
   * Flag to specify whether :ref:`dynamic metadata
   * &lt;config_network_filters_mongo_proxy_dynamic_metadata&gt;` should be emitted. Defaults to false.
   * </pre>
   *
   * <code>bool emit_dynamic_metadata = 4;</code>
   * @return The emitDynamicMetadata.
   */
  boolean getEmitDynamicMetadata();
}
