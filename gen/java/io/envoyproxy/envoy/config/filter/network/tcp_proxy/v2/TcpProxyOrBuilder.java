// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto

package io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2;

public interface TcpProxyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.filter.network.tcp_proxy.v2.TcpProxy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The prefix to use when emitting :ref:`statistics
   * &lt;config_network_filters_tcp_proxy_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * The prefix to use when emitting :ref:`statistics
   * &lt;config_network_filters_tcp_proxy_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();

  /**
   * <pre>
   * The upstream cluster to connect to.
   * </pre>
   *
   * <code>string cluster = 2;</code>
   * @return Whether the cluster field is set.
   */
  boolean hasCluster();
  /**
   * <pre>
   * The upstream cluster to connect to.
   * </pre>
   *
   * <code>string cluster = 2;</code>
   * @return The cluster.
   */
  java.lang.String getCluster();
  /**
   * <pre>
   * The upstream cluster to connect to.
   * </pre>
   *
   * <code>string cluster = 2;</code>
   * @return The bytes for cluster.
   */
  com.google.protobuf.ByteString
      getClusterBytes();

  /**
   * <pre>
   * Multiple upstream clusters can be specified for a given route. The
   * request is routed to one of the upstream clusters based on weights
   * assigned to each cluster.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster weighted_clusters = 10;</code>
   * @return Whether the weightedClusters field is set.
   */
  boolean hasWeightedClusters();
  /**
   * <pre>
   * Multiple upstream clusters can be specified for a given route. The
   * request is routed to one of the upstream clusters based on weights
   * assigned to each cluster.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster weighted_clusters = 10;</code>
   * @return The weightedClusters.
   */
  io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster getWeightedClusters();
  /**
   * <pre>
   * Multiple upstream clusters can be specified for a given route. The
   * request is routed to one of the upstream clusters based on weights
   * assigned to each cluster.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster weighted_clusters = 10;</code>
   */
  io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedClusterOrBuilder getWeightedClustersOrBuilder();

  /**
   * <pre>
   * Optional endpoint metadata match criteria. Only endpoints in the upstream
   * cluster with metadata matching that set in metadata_match will be
   * considered. The filter name should be specified as *envoy.lb*.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Metadata metadata_match = 9;</code>
   * @return Whether the metadataMatch field is set.
   */
  boolean hasMetadataMatch();
  /**
   * <pre>
   * Optional endpoint metadata match criteria. Only endpoints in the upstream
   * cluster with metadata matching that set in metadata_match will be
   * considered. The filter name should be specified as *envoy.lb*.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Metadata metadata_match = 9;</code>
   * @return The metadataMatch.
   */
  io.envoyproxy.envoy.api.v2.core.Metadata getMetadataMatch();
  /**
   * <pre>
   * Optional endpoint metadata match criteria. Only endpoints in the upstream
   * cluster with metadata matching that set in metadata_match will be
   * considered. The filter name should be specified as *envoy.lb*.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Metadata metadata_match = 9;</code>
   */
  io.envoyproxy.envoy.api.v2.core.MetadataOrBuilder getMetadataMatchOrBuilder();

  /**
   * <pre>
   * The idle timeout for connections managed by the TCP proxy filter. The idle timeout
   * is defined as the period in which there are no bytes sent or received on either
   * the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set
   * to 0s, the timeout will be disabled.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 8;</code>
   * @return Whether the idleTimeout field is set.
   */
  boolean hasIdleTimeout();
  /**
   * <pre>
   * The idle timeout for connections managed by the TCP proxy filter. The idle timeout
   * is defined as the period in which there are no bytes sent or received on either
   * the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set
   * to 0s, the timeout will be disabled.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 8;</code>
   * @return The idleTimeout.
   */
  com.google.protobuf.Duration getIdleTimeout();
  /**
   * <pre>
   * The idle timeout for connections managed by the TCP proxy filter. The idle timeout
   * is defined as the period in which there are no bytes sent or received on either
   * the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set
   * to 0s, the timeout will be disabled.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 8;</code>
   */
  com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
   * filter. The idle timeout is defined as the period in which there is no
   * active traffic. If not set, there is no idle timeout. When the idle timeout
   * is reached the connection will be closed. The distinction between
   * downstream_idle_timeout/upstream_idle_timeout provides a means to set
   * timeout based on the last byte sent on the downstream/upstream connection.
   * </pre>
   *
   * <code>.google.protobuf.Duration downstream_idle_timeout = 3;</code>
   * @return Whether the downstreamIdleTimeout field is set.
   */
  boolean hasDownstreamIdleTimeout();
  /**
   * <pre>
   * [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
   * filter. The idle timeout is defined as the period in which there is no
   * active traffic. If not set, there is no idle timeout. When the idle timeout
   * is reached the connection will be closed. The distinction between
   * downstream_idle_timeout/upstream_idle_timeout provides a means to set
   * timeout based on the last byte sent on the downstream/upstream connection.
   * </pre>
   *
   * <code>.google.protobuf.Duration downstream_idle_timeout = 3;</code>
   * @return The downstreamIdleTimeout.
   */
  com.google.protobuf.Duration getDownstreamIdleTimeout();
  /**
   * <pre>
   * [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
   * filter. The idle timeout is defined as the period in which there is no
   * active traffic. If not set, there is no idle timeout. When the idle timeout
   * is reached the connection will be closed. The distinction between
   * downstream_idle_timeout/upstream_idle_timeout provides a means to set
   * timeout based on the last byte sent on the downstream/upstream connection.
   * </pre>
   *
   * <code>.google.protobuf.Duration downstream_idle_timeout = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getDownstreamIdleTimeoutOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.Duration upstream_idle_timeout = 4;</code>
   * @return Whether the upstreamIdleTimeout field is set.
   */
  boolean hasUpstreamIdleTimeout();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.Duration upstream_idle_timeout = 4;</code>
   * @return The upstreamIdleTimeout.
   */
  com.google.protobuf.Duration getUpstreamIdleTimeout();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.Duration upstream_idle_timeout = 4;</code>
   */
  com.google.protobuf.DurationOrBuilder getUpstreamIdleTimeoutOrBuilder();

  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by the this tcp_proxy.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 5;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLog> 
      getAccessLogList();
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by the this tcp_proxy.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 5;</code>
   */
  io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLog getAccessLog(int index);
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by the this tcp_proxy.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 5;</code>
   */
  int getAccessLogCount();
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by the this tcp_proxy.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 5;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLogOrBuilder> 
      getAccessLogOrBuilderList();
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by the this tcp_proxy.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 5;</code>
   */
  io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLogOrBuilder getAccessLogOrBuilder(
      int index);

  /**
   * <pre>
   * [#not-implemented-hide:] Deprecated.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 deprecated_v1 = 6 [deprecated = true];</code>
   * @deprecated envoy.config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1 is deprecated.
   *     See envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto;l=168
   * @return Whether the deprecatedV1 field is set.
   */
  @java.lang.Deprecated boolean hasDeprecatedV1();
  /**
   * <pre>
   * [#not-implemented-hide:] Deprecated.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 deprecated_v1 = 6 [deprecated = true];</code>
   * @deprecated envoy.config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1 is deprecated.
   *     See envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto;l=168
   * @return The deprecatedV1.
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 getDeprecatedV1();
  /**
   * <pre>
   * [#not-implemented-hide:] Deprecated.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 deprecated_v1 = 6 [deprecated = true];</code>
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1OrBuilder getDeprecatedV1OrBuilder();

  /**
   * <pre>
   * The maximum number of unsuccessful connection attempts that will be made before
   * giving up. If the parameter is not specified, 1 connection attempt will be made.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_connect_attempts = 7 [(.validate.rules) = { ... }</code>
   * @return Whether the maxConnectAttempts field is set.
   */
  boolean hasMaxConnectAttempts();
  /**
   * <pre>
   * The maximum number of unsuccessful connection attempts that will be made before
   * giving up. If the parameter is not specified, 1 connection attempt will be made.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_connect_attempts = 7 [(.validate.rules) = { ... }</code>
   * @return The maxConnectAttempts.
   */
  com.google.protobuf.UInt32Value getMaxConnectAttempts();
  /**
   * <pre>
   * The maximum number of unsuccessful connection attempts that will be made before
   * giving up. If the parameter is not specified, 1 connection attempt will be made.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_connect_attempts = 7 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxConnectAttemptsOrBuilder();

  /**
   * <pre>
   * Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.type.HashPolicy hash_policy = 11 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.type.HashPolicy> 
      getHashPolicyList();
  /**
   * <pre>
   * Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.type.HashPolicy hash_policy = 11 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.HashPolicy getHashPolicy(int index);
  /**
   * <pre>
   * Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.type.HashPolicy hash_policy = 11 [(.validate.rules) = { ... }</code>
   */
  int getHashPolicyCount();
  /**
   * <pre>
   * Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.type.HashPolicy hash_policy = 11 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.HashPolicyOrBuilder> 
      getHashPolicyOrBuilderList();
  /**
   * <pre>
   * Optional configuration for TCP proxy hash policy. If hash_policy is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.type.HashPolicy hash_policy = 11 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.HashPolicyOrBuilder getHashPolicyOrBuilder(
      int index);

  /**
   * <pre>
   * [#not-implemented-hide:] feature in progress
   * If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP
   * payloads over a shared HTTP/2 tunnel. If this message is absent, the payload
   * will be proxied upstream as per usual.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig tunneling_config = 12;</code>
   * @return Whether the tunnelingConfig field is set.
   */
  boolean hasTunnelingConfig();
  /**
   * <pre>
   * [#not-implemented-hide:] feature in progress
   * If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP
   * payloads over a shared HTTP/2 tunnel. If this message is absent, the payload
   * will be proxied upstream as per usual.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig tunneling_config = 12;</code>
   * @return The tunnelingConfig.
   */
  io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig getTunnelingConfig();
  /**
   * <pre>
   * [#not-implemented-hide:] feature in progress
   * If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP
   * payloads over a shared HTTP/2 tunnel. If this message is absent, the payload
   * will be proxied upstream as per usual.
   * </pre>
   *
   * <code>.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig tunneling_config = 12;</code>
   */
  io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfigOrBuilder getTunnelingConfigOrBuilder();

  public io.envoyproxy.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.ClusterSpecifierCase getClusterSpecifierCase();
}
