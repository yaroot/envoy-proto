// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route.proto

package io.envoyproxy.envoy.config.route.v3;

public interface RouteConfigurationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.RouteConfiguration)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the route configuration. For example, it might match
   * :ref:`route_config_name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.route_config_name&gt;` in
   * :ref:`envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the route configuration. For example, it might match
   * :ref:`route_config_name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.route_config_name&gt;` in
   * :ref:`envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * An array of virtual hosts that make up the route table.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.VirtualHost virtual_hosts = 2;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.route.v3.VirtualHost> 
      getVirtualHostsList();
  /**
   * <pre>
   * An array of virtual hosts that make up the route table.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.VirtualHost virtual_hosts = 2;</code>
   */
  io.envoyproxy.envoy.config.route.v3.VirtualHost getVirtualHosts(int index);
  /**
   * <pre>
   * An array of virtual hosts that make up the route table.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.VirtualHost virtual_hosts = 2;</code>
   */
  int getVirtualHostsCount();
  /**
   * <pre>
   * An array of virtual hosts that make up the route table.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.VirtualHost virtual_hosts = 2;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.route.v3.VirtualHostOrBuilder> 
      getVirtualHostsOrBuilderList();
  /**
   * <pre>
   * An array of virtual hosts that make up the route table.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.VirtualHost virtual_hosts = 2;</code>
   */
  io.envoyproxy.envoy.config.route.v3.VirtualHostOrBuilder getVirtualHostsOrBuilder(
      int index);

  /**
   * <pre>
   * An array of virtual hosts will be dynamically loaded via the VHDS API.
   * Both ``virtual_hosts`` and ``vhds`` fields will be used when present. ``virtual_hosts`` can be used
   * for a base routing table or for infrequently changing virtual hosts. ``vhds`` is used for
   * on-demand discovery of virtual hosts. The contents of these two fields will be merged to
   * generate a routing table for a given RouteConfiguration, with ``vhds`` derived configuration
   * taking precedence.
   * </pre>
   *
   * <code>.envoy.config.route.v3.Vhds vhds = 9;</code>
   * @return Whether the vhds field is set.
   */
  boolean hasVhds();
  /**
   * <pre>
   * An array of virtual hosts will be dynamically loaded via the VHDS API.
   * Both ``virtual_hosts`` and ``vhds`` fields will be used when present. ``virtual_hosts`` can be used
   * for a base routing table or for infrequently changing virtual hosts. ``vhds`` is used for
   * on-demand discovery of virtual hosts. The contents of these two fields will be merged to
   * generate a routing table for a given RouteConfiguration, with ``vhds`` derived configuration
   * taking precedence.
   * </pre>
   *
   * <code>.envoy.config.route.v3.Vhds vhds = 9;</code>
   * @return The vhds.
   */
  io.envoyproxy.envoy.config.route.v3.Vhds getVhds();
  /**
   * <pre>
   * An array of virtual hosts will be dynamically loaded via the VHDS API.
   * Both ``virtual_hosts`` and ``vhds`` fields will be used when present. ``virtual_hosts`` can be used
   * for a base routing table or for infrequently changing virtual hosts. ``vhds`` is used for
   * on-demand discovery of virtual hosts. The contents of these two fields will be merged to
   * generate a routing table for a given RouteConfiguration, with ``vhds`` derived configuration
   * taking precedence.
   * </pre>
   *
   * <code>.envoy.config.route.v3.Vhds vhds = 9;</code>
   */
  io.envoyproxy.envoy.config.route.v3.VhdsOrBuilder getVhdsOrBuilder();

  /**
   * <pre>
   * Optionally specifies a list of HTTP headers that the connection manager
   * will consider to be internal only. If they are found on external requests they will be cleaned
   * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information.
   * </pre>
   *
   * <code>repeated string internal_only_headers = 3 [(.validate.rules) = { ... }</code>
   * @return A list containing the internalOnlyHeaders.
   */
  java.util.List<java.lang.String>
      getInternalOnlyHeadersList();
  /**
   * <pre>
   * Optionally specifies a list of HTTP headers that the connection manager
   * will consider to be internal only. If they are found on external requests they will be cleaned
   * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information.
   * </pre>
   *
   * <code>repeated string internal_only_headers = 3 [(.validate.rules) = { ... }</code>
   * @return The count of internalOnlyHeaders.
   */
  int getInternalOnlyHeadersCount();
  /**
   * <pre>
   * Optionally specifies a list of HTTP headers that the connection manager
   * will consider to be internal only. If they are found on external requests they will be cleaned
   * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information.
   * </pre>
   *
   * <code>repeated string internal_only_headers = 3 [(.validate.rules) = { ... }</code>
   * @param index The index of the element to return.
   * @return The internalOnlyHeaders at the given index.
   */
  java.lang.String getInternalOnlyHeaders(int index);
  /**
   * <pre>
   * Optionally specifies a list of HTTP headers that the connection manager
   * will consider to be internal only. If they are found on external requests they will be cleaned
   * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information.
   * </pre>
   *
   * <code>repeated string internal_only_headers = 3 [(.validate.rules) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the internalOnlyHeaders at the given index.
   */
  com.google.protobuf.ByteString
      getInternalOnlyHeadersBytes(int index);

  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> 
      getResponseHeadersToAddList();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderValueOption getResponseHeadersToAdd(int index);
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4 [(.validate.rules) = { ... }</code>
   */
  int getResponseHeadersToAddCount();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> 
      getResponseHeadersToAddOrBuilderList();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption response_headers_to_add = 4 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder getResponseHeadersToAddOrBuilder(
      int index);

  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each response
   * that the connection manager encodes.
   * </pre>
   *
   * <code>repeated string response_headers_to_remove = 5 [(.validate.rules) = { ... }</code>
   * @return A list containing the responseHeadersToRemove.
   */
  java.util.List<java.lang.String>
      getResponseHeadersToRemoveList();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each response
   * that the connection manager encodes.
   * </pre>
   *
   * <code>repeated string response_headers_to_remove = 5 [(.validate.rules) = { ... }</code>
   * @return The count of responseHeadersToRemove.
   */
  int getResponseHeadersToRemoveCount();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each response
   * that the connection manager encodes.
   * </pre>
   *
   * <code>repeated string response_headers_to_remove = 5 [(.validate.rules) = { ... }</code>
   * @param index The index of the element to return.
   * @return The responseHeadersToRemove at the given index.
   */
  java.lang.String getResponseHeadersToRemove(int index);
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each response
   * that the connection manager encodes.
   * </pre>
   *
   * <code>repeated string response_headers_to_remove = 5 [(.validate.rules) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the responseHeadersToRemove at the given index.
   */
  com.google.protobuf.ByteString
      getResponseHeadersToRemoveBytes(int index);

  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> 
      getRequestHeadersToAddList();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderValueOption getRequestHeadersToAdd(int index);
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6 [(.validate.rules) = { ... }</code>
   */
  int getRequestHeadersToAddCount();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> 
      getRequestHeadersToAddOrBuilderList();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * &lt;config_http_conn_man_headers_custom_request_headers&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add = 6 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder getRequestHeadersToAddOrBuilder(
      int index);

  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each request
   * routed by the HTTP connection manager.
   * </pre>
   *
   * <code>repeated string request_headers_to_remove = 8 [(.validate.rules) = { ... }</code>
   * @return A list containing the requestHeadersToRemove.
   */
  java.util.List<java.lang.String>
      getRequestHeadersToRemoveList();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each request
   * routed by the HTTP connection manager.
   * </pre>
   *
   * <code>repeated string request_headers_to_remove = 8 [(.validate.rules) = { ... }</code>
   * @return The count of requestHeadersToRemove.
   */
  int getRequestHeadersToRemoveCount();
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each request
   * routed by the HTTP connection manager.
   * </pre>
   *
   * <code>repeated string request_headers_to_remove = 8 [(.validate.rules) = { ... }</code>
   * @param index The index of the element to return.
   * @return The requestHeadersToRemove at the given index.
   */
  java.lang.String getRequestHeadersToRemove(int index);
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be removed from each request
   * routed by the HTTP connection manager.
   * </pre>
   *
   * <code>repeated string request_headers_to_remove = 8 [(.validate.rules) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the requestHeadersToRemove at the given index.
   */
  com.google.protobuf.ByteString
      getRequestHeadersToRemoveBytes(int index);

  /**
   * <pre>
   * By default, headers that should be added/removed are evaluated from most to least specific:
   * * route level
   * * virtual host level
   * * connection manager level
   * To allow setting overrides at the route or virtual host level, this order can be reversed
   * by setting this option to true. Defaults to false.
   * </pre>
   *
   * <code>bool most_specific_header_mutations_wins = 10;</code>
   * @return The mostSpecificHeaderMutationsWins.
   */
  boolean getMostSpecificHeaderMutationsWins();

  /**
   * <pre>
   * An optional boolean that specifies whether the clusters that the route
   * table refers to will be validated by the cluster manager. If set to true
   * and a route refers to a non-existent cluster, the route table will not
   * load. If set to false and a route refers to a non-existent cluster, the
   * route table will load and the router filter will return a 404 if the route
   * is selected at runtime. This setting defaults to true if the route table
   * is statically defined via the :ref:`route_config
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config&gt;`
   * option. This setting default to false if the route table is loaded dynamically via the
   * :ref:`rds
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds&gt;`
   * option. Users may wish to override the default behavior in certain cases (for example when
   * using CDS with a static route table).
   * </pre>
   *
   * <code>.google.protobuf.BoolValue validate_clusters = 7;</code>
   * @return Whether the validateClusters field is set.
   */
  boolean hasValidateClusters();
  /**
   * <pre>
   * An optional boolean that specifies whether the clusters that the route
   * table refers to will be validated by the cluster manager. If set to true
   * and a route refers to a non-existent cluster, the route table will not
   * load. If set to false and a route refers to a non-existent cluster, the
   * route table will load and the router filter will return a 404 if the route
   * is selected at runtime. This setting defaults to true if the route table
   * is statically defined via the :ref:`route_config
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config&gt;`
   * option. This setting default to false if the route table is loaded dynamically via the
   * :ref:`rds
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds&gt;`
   * option. Users may wish to override the default behavior in certain cases (for example when
   * using CDS with a static route table).
   * </pre>
   *
   * <code>.google.protobuf.BoolValue validate_clusters = 7;</code>
   * @return The validateClusters.
   */
  com.google.protobuf.BoolValue getValidateClusters();
  /**
   * <pre>
   * An optional boolean that specifies whether the clusters that the route
   * table refers to will be validated by the cluster manager. If set to true
   * and a route refers to a non-existent cluster, the route table will not
   * load. If set to false and a route refers to a non-existent cluster, the
   * route table will load and the router filter will return a 404 if the route
   * is selected at runtime. This setting defaults to true if the route table
   * is statically defined via the :ref:`route_config
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config&gt;`
   * option. This setting default to false if the route table is loaded dynamically via the
   * :ref:`rds
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds&gt;`
   * option. Users may wish to override the default behavior in certain cases (for example when
   * using CDS with a static route table).
   * </pre>
   *
   * <code>.google.protobuf.BoolValue validate_clusters = 7;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getValidateClustersOrBuilder();

  /**
   * <pre>
   * The maximum bytes of the response :ref:`direct response body
   * &lt;envoy_v3_api_field_config.route.v3.DirectResponseAction.body&gt;` size. If not specified the default
   * is 4096.
   * .. warning::
   *   Envoy currently holds the content of :ref:`direct response body
   *   &lt;envoy_v3_api_field_config.route.v3.DirectResponseAction.body&gt;` in memory. Be careful setting
   *   this to be larger than the default 4KB, since the allocated memory for direct response body
   *   is not subject to data plane buffering controls.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_direct_response_body_size_bytes = 11;</code>
   * @return Whether the maxDirectResponseBodySizeBytes field is set.
   */
  boolean hasMaxDirectResponseBodySizeBytes();
  /**
   * <pre>
   * The maximum bytes of the response :ref:`direct response body
   * &lt;envoy_v3_api_field_config.route.v3.DirectResponseAction.body&gt;` size. If not specified the default
   * is 4096.
   * .. warning::
   *   Envoy currently holds the content of :ref:`direct response body
   *   &lt;envoy_v3_api_field_config.route.v3.DirectResponseAction.body&gt;` in memory. Be careful setting
   *   this to be larger than the default 4KB, since the allocated memory for direct response body
   *   is not subject to data plane buffering controls.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_direct_response_body_size_bytes = 11;</code>
   * @return The maxDirectResponseBodySizeBytes.
   */
  com.google.protobuf.UInt32Value getMaxDirectResponseBodySizeBytes();
  /**
   * <pre>
   * The maximum bytes of the response :ref:`direct response body
   * &lt;envoy_v3_api_field_config.route.v3.DirectResponseAction.body&gt;` size. If not specified the default
   * is 4096.
   * .. warning::
   *   Envoy currently holds the content of :ref:`direct response body
   *   &lt;envoy_v3_api_field_config.route.v3.DirectResponseAction.body&gt;` in memory. Be careful setting
   *   this to be larger than the default 4KB, since the allocated memory for direct response body
   *   is not subject to data plane buffering controls.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_direct_response_body_size_bytes = 11;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxDirectResponseBodySizeBytesOrBuilder();

  /**
   * <pre>
   * A list of plugins and their configurations which may be used by a
   * :ref:`cluster specifier plugin name &lt;envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin&gt;`
   * within the route. All ``extension.name`` fields in this list must be unique.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.route.v3.ClusterSpecifierPlugin> 
      getClusterSpecifierPluginsList();
  /**
   * <pre>
   * A list of plugins and their configurations which may be used by a
   * :ref:`cluster specifier plugin name &lt;envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin&gt;`
   * within the route. All ``extension.name`` fields in this list must be unique.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12;</code>
   */
  io.envoyproxy.envoy.config.route.v3.ClusterSpecifierPlugin getClusterSpecifierPlugins(int index);
  /**
   * <pre>
   * A list of plugins and their configurations which may be used by a
   * :ref:`cluster specifier plugin name &lt;envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin&gt;`
   * within the route. All ``extension.name`` fields in this list must be unique.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12;</code>
   */
  int getClusterSpecifierPluginsCount();
  /**
   * <pre>
   * A list of plugins and their configurations which may be used by a
   * :ref:`cluster specifier plugin name &lt;envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin&gt;`
   * within the route. All ``extension.name`` fields in this list must be unique.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.route.v3.ClusterSpecifierPluginOrBuilder> 
      getClusterSpecifierPluginsOrBuilderList();
  /**
   * <pre>
   * A list of plugins and their configurations which may be used by a
   * :ref:`cluster specifier plugin name &lt;envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin&gt;`
   * within the route. All ``extension.name`` fields in this list must be unique.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.ClusterSpecifierPlugin cluster_specifier_plugins = 12;</code>
   */
  io.envoyproxy.envoy.config.route.v3.ClusterSpecifierPluginOrBuilder getClusterSpecifierPluginsOrBuilder(
      int index);

  /**
   * <pre>
   * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
   * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.route.v3.RouteAction.RequestMirrorPolicy> 
      getRequestMirrorPoliciesList();
  /**
   * <pre>
   * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
   * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13;</code>
   */
  io.envoyproxy.envoy.config.route.v3.RouteAction.RequestMirrorPolicy getRequestMirrorPolicies(int index);
  /**
   * <pre>
   * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
   * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13;</code>
   */
  int getRequestMirrorPoliciesCount();
  /**
   * <pre>
   * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
   * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.route.v3.RouteAction.RequestMirrorPolicyOrBuilder> 
      getRequestMirrorPoliciesOrBuilderList();
  /**
   * <pre>
   * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
   * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RouteAction.RequestMirrorPolicy request_mirror_policies = 13;</code>
   */
  io.envoyproxy.envoy.config.route.v3.RouteAction.RequestMirrorPolicyOrBuilder getRequestMirrorPoliciesOrBuilder(
      int index);

  /**
   * <pre>
   * By default, port in :authority header (if any) is used in host matching.
   * With this option enabled, Envoy will ignore the port number in the :authority header (if any) when picking VirtualHost.
   * NOTE: this option will not strip the port number (if any) contained in route config
   * :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost`.domains field.
   * </pre>
   *
   * <code>bool ignore_port_in_host_matching = 14;</code>
   * @return The ignorePortInHostMatching.
   */
  boolean getIgnorePortInHostMatching();

  /**
   * <pre>
   * Ignore path-parameters in path-matching.
   * Before RFC3986, URI were like(RFC1808): &lt;scheme&gt;://&lt;net_loc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt;
   * Envoy by default takes ":path" as "&lt;path&gt;;&lt;params&gt;".
   * For users who want to only match path on the "&lt;path&gt;" portion, this option should be true.
   * </pre>
   *
   * <code>bool ignore_path_parameters_in_path_matching = 15;</code>
   * @return The ignorePathParametersInPathMatching.
   */
  boolean getIgnorePathParametersInPathMatching();

  /**
   * <pre>
   * The typed_per_filter_config field can be used to provide RouteConfiguration level per filter config.
   * The key should match the :ref:`filter config name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name&gt;`.
   * The canonical filter name (e.g., ``envoy.filters.http.buffer`` for the HTTP buffer filter) can also
   * be used for the backwards compatibility. If there is no entry referred by the filter config name, the
   * entry referred by the canonical filter name will be provided to the filters as fallback.
   * Use of this field is filter specific;
   * see the :ref:`HTTP filter documentation &lt;config_http_filters&gt;` for if and how it is utilized.
   * [#comment: An entry's value may be wrapped in a
   * :ref:`FilterConfig&lt;envoy_v3_api_msg_config.route.v3.FilterConfig&gt;`
   * message to specify additional options.]
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Any&gt; typed_per_filter_config = 16;</code>
   */
  int getTypedPerFilterConfigCount();
  /**
   * <pre>
   * The typed_per_filter_config field can be used to provide RouteConfiguration level per filter config.
   * The key should match the :ref:`filter config name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name&gt;`.
   * The canonical filter name (e.g., ``envoy.filters.http.buffer`` for the HTTP buffer filter) can also
   * be used for the backwards compatibility. If there is no entry referred by the filter config name, the
   * entry referred by the canonical filter name will be provided to the filters as fallback.
   * Use of this field is filter specific;
   * see the :ref:`HTTP filter documentation &lt;config_http_filters&gt;` for if and how it is utilized.
   * [#comment: An entry's value may be wrapped in a
   * :ref:`FilterConfig&lt;envoy_v3_api_msg_config.route.v3.FilterConfig&gt;`
   * message to specify additional options.]
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Any&gt; typed_per_filter_config = 16;</code>
   */
  boolean containsTypedPerFilterConfig(
      java.lang.String key);
  /**
   * Use {@link #getTypedPerFilterConfigMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.protobuf.Any>
  getTypedPerFilterConfig();
  /**
   * <pre>
   * The typed_per_filter_config field can be used to provide RouteConfiguration level per filter config.
   * The key should match the :ref:`filter config name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name&gt;`.
   * The canonical filter name (e.g., ``envoy.filters.http.buffer`` for the HTTP buffer filter) can also
   * be used for the backwards compatibility. If there is no entry referred by the filter config name, the
   * entry referred by the canonical filter name will be provided to the filters as fallback.
   * Use of this field is filter specific;
   * see the :ref:`HTTP filter documentation &lt;config_http_filters&gt;` for if and how it is utilized.
   * [#comment: An entry's value may be wrapped in a
   * :ref:`FilterConfig&lt;envoy_v3_api_msg_config.route.v3.FilterConfig&gt;`
   * message to specify additional options.]
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Any&gt; typed_per_filter_config = 16;</code>
   */
  java.util.Map<java.lang.String, com.google.protobuf.Any>
  getTypedPerFilterConfigMap();
  /**
   * <pre>
   * The typed_per_filter_config field can be used to provide RouteConfiguration level per filter config.
   * The key should match the :ref:`filter config name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name&gt;`.
   * The canonical filter name (e.g., ``envoy.filters.http.buffer`` for the HTTP buffer filter) can also
   * be used for the backwards compatibility. If there is no entry referred by the filter config name, the
   * entry referred by the canonical filter name will be provided to the filters as fallback.
   * Use of this field is filter specific;
   * see the :ref:`HTTP filter documentation &lt;config_http_filters&gt;` for if and how it is utilized.
   * [#comment: An entry's value may be wrapped in a
   * :ref:`FilterConfig&lt;envoy_v3_api_msg_config.route.v3.FilterConfig&gt;`
   * message to specify additional options.]
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Any&gt; typed_per_filter_config = 16;</code>
   */
  /* nullable */
com.google.protobuf.Any getTypedPerFilterConfigOrDefault(
      java.lang.String key,
      /* nullable */
com.google.protobuf.Any defaultValue);
  /**
   * <pre>
   * The typed_per_filter_config field can be used to provide RouteConfiguration level per filter config.
   * The key should match the :ref:`filter config name
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name&gt;`.
   * The canonical filter name (e.g., ``envoy.filters.http.buffer`` for the HTTP buffer filter) can also
   * be used for the backwards compatibility. If there is no entry referred by the filter config name, the
   * entry referred by the canonical filter name will be provided to the filters as fallback.
   * Use of this field is filter specific;
   * see the :ref:`HTTP filter documentation &lt;config_http_filters&gt;` for if and how it is utilized.
   * [#comment: An entry's value may be wrapped in a
   * :ref:`FilterConfig&lt;envoy_v3_api_msg_config.route.v3.FilterConfig&gt;`
   * message to specify additional options.]
   * </pre>
   *
   * <code>map&lt;string, .google.protobuf.Any&gt; typed_per_filter_config = 16;</code>
   */
  com.google.protobuf.Any getTypedPerFilterConfigOrThrow(
      java.lang.String key);
}
