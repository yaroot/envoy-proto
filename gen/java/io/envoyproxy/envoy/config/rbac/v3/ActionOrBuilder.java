// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/rbac/v3/rbac.proto

package io.envoyproxy.envoy.config.rbac.v3;

public interface ActionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.rbac.v3.Action)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name indicates the policy name.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name indicates the policy name.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The action to take if the matcher matches. Every action either allows or denies a request,
   * and can also carry out action-specific operations.
   * Actions:
   *  * ``ALLOW``: If the request gets matched on ALLOW, it is permitted.
   *  * ``DENY``: If the request gets matched on DENY, it is not permitted.
   *  * ``LOG``: If the request gets matched on LOG, it is permitted. Besides, the
   *    dynamic metadata key ``access_log_hint`` under the shared key namespace
   *    ``envoy.common`` will be set to the value ``true``.
   *  * If the request cannot get matched, it will fallback to ``DENY``.
   * Log behavior:
   *  If the RBAC matcher contains at least one LOG action, the dynamic
   *  metadata key ``access_log_hint`` will be set based on if the request
   *  get matched on the LOG action.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC.Action action = 2;</code>
   * @return The enum numeric value on the wire for action.
   */
  int getActionValue();
  /**
   * <pre>
   * The action to take if the matcher matches. Every action either allows or denies a request,
   * and can also carry out action-specific operations.
   * Actions:
   *  * ``ALLOW``: If the request gets matched on ALLOW, it is permitted.
   *  * ``DENY``: If the request gets matched on DENY, it is not permitted.
   *  * ``LOG``: If the request gets matched on LOG, it is permitted. Besides, the
   *    dynamic metadata key ``access_log_hint`` under the shared key namespace
   *    ``envoy.common`` will be set to the value ``true``.
   *  * If the request cannot get matched, it will fallback to ``DENY``.
   * Log behavior:
   *  If the RBAC matcher contains at least one LOG action, the dynamic
   *  metadata key ``access_log_hint`` will be set based on if the request
   *  get matched on the LOG action.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC.Action action = 2;</code>
   * @return The action.
   */
  io.envoyproxy.envoy.config.rbac.v3.RBAC.Action getAction();
}
