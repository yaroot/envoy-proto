// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/upstreams/http/v3/http_protocol_options.proto

package io.envoyproxy.envoy.extensions.upstreams.http.v3;

public interface HttpProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.upstreams.http.v3.HttpProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * This contains options common across HTTP/1 and HTTP/2
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 1;</code>
   * @return Whether the commonHttpProtocolOptions field is set.
   */
  boolean hasCommonHttpProtocolOptions();
  /**
   * <pre>
   * This contains options common across HTTP/1 and HTTP/2
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 1;</code>
   * @return The commonHttpProtocolOptions.
   */
  io.envoyproxy.envoy.config.core.v3.HttpProtocolOptions getCommonHttpProtocolOptions();
  /**
   * <pre>
   * This contains options common across HTTP/1 and HTTP/2
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.HttpProtocolOptionsOrBuilder getCommonHttpProtocolOptionsOrBuilder();

  /**
   * <pre>
   * This contains common protocol options which are only applied upstream.
   * </pre>
   *
   * <code>.envoy.config.core.v3.UpstreamHttpProtocolOptions upstream_http_protocol_options = 2;</code>
   * @return Whether the upstreamHttpProtocolOptions field is set.
   */
  boolean hasUpstreamHttpProtocolOptions();
  /**
   * <pre>
   * This contains common protocol options which are only applied upstream.
   * </pre>
   *
   * <code>.envoy.config.core.v3.UpstreamHttpProtocolOptions upstream_http_protocol_options = 2;</code>
   * @return The upstreamHttpProtocolOptions.
   */
  io.envoyproxy.envoy.config.core.v3.UpstreamHttpProtocolOptions getUpstreamHttpProtocolOptions();
  /**
   * <pre>
   * This contains common protocol options which are only applied upstream.
   * </pre>
   *
   * <code>.envoy.config.core.v3.UpstreamHttpProtocolOptions upstream_http_protocol_options = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.UpstreamHttpProtocolOptionsOrBuilder getUpstreamHttpProtocolOptionsOrBuilder();

  /**
   * <pre>
   * To explicitly configure either HTTP/1 or HTTP/2 (but not both!) use ``explicit_http_config``.
   * If the ``explicit_http_config`` is empty, HTTP/1.1 is used.
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig explicit_http_config = 3;</code>
   * @return Whether the explicitHttpConfig field is set.
   */
  boolean hasExplicitHttpConfig();
  /**
   * <pre>
   * To explicitly configure either HTTP/1 or HTTP/2 (but not both!) use ``explicit_http_config``.
   * If the ``explicit_http_config`` is empty, HTTP/1.1 is used.
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig explicit_http_config = 3;</code>
   * @return The explicitHttpConfig.
   */
  io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig getExplicitHttpConfig();
  /**
   * <pre>
   * To explicitly configure either HTTP/1 or HTTP/2 (but not both!) use ``explicit_http_config``.
   * If the ``explicit_http_config`` is empty, HTTP/1.1 is used.
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig explicit_http_config = 3;</code>
   */
  io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfigOrBuilder getExplicitHttpConfigOrBuilder();

  /**
   * <pre>
   * This allows switching on protocol based on what protocol the downstream
   * connection used.
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig use_downstream_protocol_config = 4;</code>
   * @return Whether the useDownstreamProtocolConfig field is set.
   */
  boolean hasUseDownstreamProtocolConfig();
  /**
   * <pre>
   * This allows switching on protocol based on what protocol the downstream
   * connection used.
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig use_downstream_protocol_config = 4;</code>
   * @return The useDownstreamProtocolConfig.
   */
  io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig getUseDownstreamProtocolConfig();
  /**
   * <pre>
   * This allows switching on protocol based on what protocol the downstream
   * connection used.
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig use_downstream_protocol_config = 4;</code>
   */
  io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfigOrBuilder getUseDownstreamProtocolConfigOrBuilder();

  /**
   * <pre>
   * This allows switching on protocol based on ALPN
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig auto_config = 5;</code>
   * @return Whether the autoConfig field is set.
   */
  boolean hasAutoConfig();
  /**
   * <pre>
   * This allows switching on protocol based on ALPN
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig auto_config = 5;</code>
   * @return The autoConfig.
   */
  io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig getAutoConfig();
  /**
   * <pre>
   * This allows switching on protocol based on ALPN
   * </pre>
   *
   * <code>.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfig auto_config = 5;</code>
   */
  io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.AutoHttpConfigOrBuilder getAutoConfigOrBuilder();

  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all HTTP streams which flow through this
   * cluster. Unlike downstream filters, they will *not* be applied to terminated CONNECT requests.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 6;</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter> 
      getHttpFiltersList();
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all HTTP streams which flow through this
   * cluster. Unlike downstream filters, they will *not* be applied to terminated CONNECT requests.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 6;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter getHttpFilters(int index);
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all HTTP streams which flow through this
   * cluster. Unlike downstream filters, they will *not* be applied to terminated CONNECT requests.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 6;</code>
   */
  int getHttpFiltersCount();
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all HTTP streams which flow through this
   * cluster. Unlike downstream filters, they will *not* be applied to terminated CONNECT requests.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 6;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder> 
      getHttpFiltersOrBuilderList();
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all HTTP streams which flow through this
   * cluster. Unlike downstream filters, they will *not* be applied to terminated CONNECT requests.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 6;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder getHttpFiltersOrBuilder(
      int index);

  public io.envoyproxy.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UpstreamProtocolOptionsCase getUpstreamProtocolOptionsCase();
}
