// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/gzip/decompressor/v3/gzip.proto

package io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3;

/**
 * Protobuf type {@code envoy.extensions.compression.gzip.decompressor.v3.Gzip}
 */
public final class Gzip extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.compression.gzip.decompressor.v3.Gzip)
    GzipOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Gzip.newBuilder() to construct.
  private Gzip(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Gzip() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Gzip();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_decompressor_v3_Gzip_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_decompressor_v3_Gzip_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.class, io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.Builder.class);
  }

  public static final int WINDOW_BITS_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value windowBits_;
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
   * The decompression window size needs to be equal or larger than the compression window size.
   * The default window size is 15.
   * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
   * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the windowBits field is set.
   */
  @java.lang.Override
  public boolean hasWindowBits() {
    return windowBits_ != null;
  }
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
   * The decompression window size needs to be equal or larger than the compression window size.
   * The default window size is 15.
   * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
   * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
   * @return The windowBits.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getWindowBits() {
    return windowBits_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
  }
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
   * The decompression window size needs to be equal or larger than the compression window size.
   * The default window size is 15.
   * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
   * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getWindowBitsOrBuilder() {
    return windowBits_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
  }

  public static final int CHUNK_SIZE_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt32Value chunkSize_;
  /**
   * <pre>
   * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  @java.lang.Override
  public boolean hasChunkSize() {
    return chunkSize_ != null;
  }
  /**
   * <pre>
   * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getChunkSize() {
    return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
  }
  /**
   * <pre>
   * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
    return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
  }

  public static final int MAX_INFLATE_RATIO_FIELD_NUMBER = 3;
  private com.google.protobuf.UInt32Value maxInflateRatio_;
  /**
   * <pre>
   * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
   * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
   * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
   * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the maxInflateRatio field is set.
   */
  @java.lang.Override
  public boolean hasMaxInflateRatio() {
    return maxInflateRatio_ != null;
  }
  /**
   * <pre>
   * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
   * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
   * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
   * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
   * @return The maxInflateRatio.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxInflateRatio() {
    return maxInflateRatio_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInflateRatio_;
  }
  /**
   * <pre>
   * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
   * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
   * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
   * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxInflateRatioOrBuilder() {
    return maxInflateRatio_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInflateRatio_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (windowBits_ != null) {
      output.writeMessage(1, getWindowBits());
    }
    if (chunkSize_ != null) {
      output.writeMessage(2, getChunkSize());
    }
    if (maxInflateRatio_ != null) {
      output.writeMessage(3, getMaxInflateRatio());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (windowBits_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getWindowBits());
    }
    if (chunkSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getChunkSize());
    }
    if (maxInflateRatio_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMaxInflateRatio());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip other = (io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip) obj;

    if (hasWindowBits() != other.hasWindowBits()) return false;
    if (hasWindowBits()) {
      if (!getWindowBits()
          .equals(other.getWindowBits())) return false;
    }
    if (hasChunkSize() != other.hasChunkSize()) return false;
    if (hasChunkSize()) {
      if (!getChunkSize()
          .equals(other.getChunkSize())) return false;
    }
    if (hasMaxInflateRatio() != other.hasMaxInflateRatio()) return false;
    if (hasMaxInflateRatio()) {
      if (!getMaxInflateRatio()
          .equals(other.getMaxInflateRatio())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasWindowBits()) {
      hash = (37 * hash) + WINDOW_BITS_FIELD_NUMBER;
      hash = (53 * hash) + getWindowBits().hashCode();
    }
    if (hasChunkSize()) {
      hash = (37 * hash) + CHUNK_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getChunkSize().hashCode();
    }
    if (hasMaxInflateRatio()) {
      hash = (37 * hash) + MAX_INFLATE_RATIO_FIELD_NUMBER;
      hash = (53 * hash) + getMaxInflateRatio().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.extensions.compression.gzip.decompressor.v3.Gzip}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.compression.gzip.decompressor.v3.Gzip)
      io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.GzipOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_decompressor_v3_Gzip_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_decompressor_v3_Gzip_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.class, io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      windowBits_ = null;
      if (windowBitsBuilder_ != null) {
        windowBitsBuilder_.dispose();
        windowBitsBuilder_ = null;
      }
      chunkSize_ = null;
      if (chunkSizeBuilder_ != null) {
        chunkSizeBuilder_.dispose();
        chunkSizeBuilder_ = null;
      }
      maxInflateRatio_ = null;
      if (maxInflateRatioBuilder_ != null) {
        maxInflateRatioBuilder_.dispose();
        maxInflateRatioBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_decompressor_v3_Gzip_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip build() {
      io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip buildPartial() {
      io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip result = new io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.windowBits_ = windowBitsBuilder_ == null
            ? windowBits_
            : windowBitsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.chunkSize_ = chunkSizeBuilder_ == null
            ? chunkSize_
            : chunkSizeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.maxInflateRatio_ = maxInflateRatioBuilder_ == null
            ? maxInflateRatio_
            : maxInflateRatioBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip) {
        return mergeFrom((io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip other) {
      if (other == io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip.getDefaultInstance()) return this;
      if (other.hasWindowBits()) {
        mergeWindowBits(other.getWindowBits());
      }
      if (other.hasChunkSize()) {
        mergeChunkSize(other.getChunkSize());
      }
      if (other.hasMaxInflateRatio()) {
        mergeMaxInflateRatio(other.getMaxInflateRatio());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getWindowBitsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getChunkSizeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getMaxInflateRatioFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.UInt32Value windowBits_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> windowBitsBuilder_;
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the windowBits field is set.
     */
    public boolean hasWindowBits() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     * @return The windowBits.
     */
    public com.google.protobuf.UInt32Value getWindowBits() {
      if (windowBitsBuilder_ == null) {
        return windowBits_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
      } else {
        return windowBitsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setWindowBits(com.google.protobuf.UInt32Value value) {
      if (windowBitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        windowBits_ = value;
      } else {
        windowBitsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setWindowBits(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (windowBitsBuilder_ == null) {
        windowBits_ = builderForValue.build();
      } else {
        windowBitsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeWindowBits(com.google.protobuf.UInt32Value value) {
      if (windowBitsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          windowBits_ != null &&
          windowBits_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getWindowBitsBuilder().mergeFrom(value);
        } else {
          windowBits_ = value;
        }
      } else {
        windowBitsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearWindowBits() {
      bitField0_ = (bitField0_ & ~0x00000001);
      windowBits_ = null;
      if (windowBitsBuilder_ != null) {
        windowBitsBuilder_.dispose();
        windowBitsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getWindowBitsBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getWindowBitsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getWindowBitsOrBuilder() {
      if (windowBitsBuilder_ != null) {
        return windowBitsBuilder_.getMessageOrBuilder();
      } else {
        return windowBits_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
      }
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
     * The decompression window size needs to be equal or larger than the compression window size.
     * The default window size is 15.
     * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
     * For more details about this parameter, please refer to `zlib manual &lt;https://www.zlib.net/manual.html&gt;`_ &gt; inflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getWindowBitsFieldBuilder() {
      if (windowBitsBuilder_ == null) {
        windowBitsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getWindowBits(),
                getParentForChildren(),
                isClean());
        windowBits_ = null;
      }
      return windowBitsBuilder_;
    }

    private com.google.protobuf.UInt32Value chunkSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> chunkSizeBuilder_;
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the chunkSize field is set.
     */
    public boolean hasChunkSize() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     * @return The chunkSize.
     */
    public com.google.protobuf.UInt32Value getChunkSize() {
      if (chunkSizeBuilder_ == null) {
        return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      } else {
        return chunkSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        chunkSize_ = value;
      } else {
        chunkSizeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = builderForValue.build();
      } else {
        chunkSizeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          chunkSize_ != null &&
          chunkSize_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getChunkSizeBuilder().mergeFrom(value);
        } else {
          chunkSize_ = value;
        }
      } else {
        chunkSizeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearChunkSize() {
      bitField0_ = (bitField0_ & ~0x00000002);
      chunkSize_ = null;
      if (chunkSizeBuilder_ != null) {
        chunkSizeBuilder_.dispose();
        chunkSizeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getChunkSizeBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getChunkSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
      if (chunkSizeBuilder_ != null) {
        return chunkSizeBuilder_.getMessageOrBuilder();
      } else {
        return chunkSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      }
    }
    /**
     * <pre>
     * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getChunkSizeFieldBuilder() {
      if (chunkSizeBuilder_ == null) {
        chunkSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getChunkSize(),
                getParentForChildren(),
                isClean());
        chunkSize_ = null;
      }
      return chunkSizeBuilder_;
    }

    private com.google.protobuf.UInt32Value maxInflateRatio_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxInflateRatioBuilder_;
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the maxInflateRatio field is set.
     */
    public boolean hasMaxInflateRatio() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     * @return The maxInflateRatio.
     */
    public com.google.protobuf.UInt32Value getMaxInflateRatio() {
      if (maxInflateRatioBuilder_ == null) {
        return maxInflateRatio_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInflateRatio_;
      } else {
        return maxInflateRatioBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxInflateRatio(com.google.protobuf.UInt32Value value) {
      if (maxInflateRatioBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxInflateRatio_ = value;
      } else {
        maxInflateRatioBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxInflateRatio(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxInflateRatioBuilder_ == null) {
        maxInflateRatio_ = builderForValue.build();
      } else {
        maxInflateRatioBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxInflateRatio(com.google.protobuf.UInt32Value value) {
      if (maxInflateRatioBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          maxInflateRatio_ != null &&
          maxInflateRatio_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxInflateRatioBuilder().mergeFrom(value);
        } else {
          maxInflateRatio_ = value;
        }
      } else {
        maxInflateRatioBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxInflateRatio() {
      bitField0_ = (bitField0_ & ~0x00000004);
      maxInflateRatio_ = null;
      if (maxInflateRatioBuilder_ != null) {
        maxInflateRatioBuilder_.dispose();
        maxInflateRatioBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxInflateRatioBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getMaxInflateRatioFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxInflateRatioOrBuilder() {
      if (maxInflateRatioBuilder_ != null) {
        return maxInflateRatioBuilder_.getMessageOrBuilder();
      } else {
        return maxInflateRatio_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxInflateRatio_;
      }
    }
    /**
     * <pre>
     * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
     * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
     * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
     * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inflate_ratio = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxInflateRatioFieldBuilder() {
      if (maxInflateRatioBuilder_ == null) {
        maxInflateRatioBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxInflateRatio(),
                getParentForChildren(),
                isClean());
        maxInflateRatio_ = null;
      }
      return maxInflateRatioBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.compression.gzip.decompressor.v3.Gzip)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.compression.gzip.decompressor.v3.Gzip)
  private static final io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip();
  }

  public static io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Gzip>
      PARSER = new com.google.protobuf.AbstractParser<Gzip>() {
    @java.lang.Override
    public Gzip parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Gzip> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Gzip> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3.Gzip getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

