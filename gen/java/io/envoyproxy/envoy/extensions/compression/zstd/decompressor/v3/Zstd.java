// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/zstd/decompressor/v3/zstd.proto

package io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3;

/**
 * Protobuf type {@code envoy.extensions.compression.zstd.decompressor.v3.Zstd}
 */
public final class Zstd extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.compression.zstd.decompressor.v3.Zstd)
    ZstdOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Zstd.newBuilder() to construct.
  private Zstd(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Zstd() {
    dictionaries_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Zstd();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Zstd(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              dictionaries_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.DataSource>();
              mutable_bitField0_ |= 0x00000001;
            }
            dictionaries_.add(
                input.readMessage(io.envoyproxy.envoy.config.core.v3.DataSource.parser(), extensionRegistry));
            break;
          }
          case 18: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (chunkSize_ != null) {
              subBuilder = chunkSize_.toBuilder();
            }
            chunkSize_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(chunkSize_);
              chunkSize_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        dictionaries_ = java.util.Collections.unmodifiableList(dictionaries_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_decompressor_v3_Zstd_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_decompressor_v3_Zstd_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.class, io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.Builder.class);
  }

  public static final int DICTIONARIES_FIELD_NUMBER = 1;
  private java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource> dictionaries_;
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource> getDictionariesList() {
    return dictionaries_;
  }
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
      getDictionariesOrBuilderList() {
    return dictionaries_;
  }
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  @java.lang.Override
  public int getDictionariesCount() {
    return dictionaries_.size();
  }
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSource getDictionaries(int index) {
    return dictionaries_.get(index);
  }
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDictionariesOrBuilder(
      int index) {
    return dictionaries_.get(index);
  }

  public static final int CHUNK_SIZE_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt32Value chunkSize_;
  /**
   * <pre>
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  @java.lang.Override
  public boolean hasChunkSize() {
    return chunkSize_ != null;
  }
  /**
   * <pre>
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getChunkSize() {
    return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
  }
  /**
   * <pre>
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
    return getChunkSize();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < dictionaries_.size(); i++) {
      output.writeMessage(1, dictionaries_.get(i));
    }
    if (chunkSize_ != null) {
      output.writeMessage(2, getChunkSize());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < dictionaries_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, dictionaries_.get(i));
    }
    if (chunkSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getChunkSize());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd other = (io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd) obj;

    if (!getDictionariesList()
        .equals(other.getDictionariesList())) return false;
    if (hasChunkSize() != other.hasChunkSize()) return false;
    if (hasChunkSize()) {
      if (!getChunkSize()
          .equals(other.getChunkSize())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getDictionariesCount() > 0) {
      hash = (37 * hash) + DICTIONARIES_FIELD_NUMBER;
      hash = (53 * hash) + getDictionariesList().hashCode();
    }
    if (hasChunkSize()) {
      hash = (37 * hash) + CHUNK_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getChunkSize().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.extensions.compression.zstd.decompressor.v3.Zstd}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.compression.zstd.decompressor.v3.Zstd)
      io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.ZstdOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_decompressor_v3_Zstd_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_decompressor_v3_Zstd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.class, io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getDictionariesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (dictionariesBuilder_ == null) {
        dictionaries_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        dictionariesBuilder_.clear();
      }
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = null;
      } else {
        chunkSize_ = null;
        chunkSizeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_decompressor_v3_Zstd_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd build() {
      io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd buildPartial() {
      io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd result = new io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd(this);
      int from_bitField0_ = bitField0_;
      if (dictionariesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          dictionaries_ = java.util.Collections.unmodifiableList(dictionaries_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dictionaries_ = dictionaries_;
      } else {
        result.dictionaries_ = dictionariesBuilder_.build();
      }
      if (chunkSizeBuilder_ == null) {
        result.chunkSize_ = chunkSize_;
      } else {
        result.chunkSize_ = chunkSizeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd) {
        return mergeFrom((io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd other) {
      if (other == io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd.getDefaultInstance()) return this;
      if (dictionariesBuilder_ == null) {
        if (!other.dictionaries_.isEmpty()) {
          if (dictionaries_.isEmpty()) {
            dictionaries_ = other.dictionaries_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDictionariesIsMutable();
            dictionaries_.addAll(other.dictionaries_);
          }
          onChanged();
        }
      } else {
        if (!other.dictionaries_.isEmpty()) {
          if (dictionariesBuilder_.isEmpty()) {
            dictionariesBuilder_.dispose();
            dictionariesBuilder_ = null;
            dictionaries_ = other.dictionaries_;
            bitField0_ = (bitField0_ & ~0x00000001);
            dictionariesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getDictionariesFieldBuilder() : null;
          } else {
            dictionariesBuilder_.addAllMessages(other.dictionaries_);
          }
        }
      }
      if (other.hasChunkSize()) {
        mergeChunkSize(other.getChunkSize());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource> dictionaries_ =
      java.util.Collections.emptyList();
    private void ensureDictionariesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        dictionaries_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.DataSource>(dictionaries_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> dictionariesBuilder_;

    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource> getDictionariesList() {
      if (dictionariesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(dictionaries_);
      } else {
        return dictionariesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public int getDictionariesCount() {
      if (dictionariesBuilder_ == null) {
        return dictionaries_.size();
      } else {
        return dictionariesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource getDictionaries(int index) {
      if (dictionariesBuilder_ == null) {
        return dictionaries_.get(index);
      } else {
        return dictionariesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder setDictionaries(
        int index, io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (dictionariesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDictionariesIsMutable();
        dictionaries_.set(index, value);
        onChanged();
      } else {
        dictionariesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder setDictionaries(
        int index, io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (dictionariesBuilder_ == null) {
        ensureDictionariesIsMutable();
        dictionaries_.set(index, builderForValue.build());
        onChanged();
      } else {
        dictionariesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder addDictionaries(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (dictionariesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDictionariesIsMutable();
        dictionaries_.add(value);
        onChanged();
      } else {
        dictionariesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder addDictionaries(
        int index, io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (dictionariesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDictionariesIsMutable();
        dictionaries_.add(index, value);
        onChanged();
      } else {
        dictionariesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder addDictionaries(
        io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (dictionariesBuilder_ == null) {
        ensureDictionariesIsMutable();
        dictionaries_.add(builderForValue.build());
        onChanged();
      } else {
        dictionariesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder addDictionaries(
        int index, io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (dictionariesBuilder_ == null) {
        ensureDictionariesIsMutable();
        dictionaries_.add(index, builderForValue.build());
        onChanged();
      } else {
        dictionariesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder addAllDictionaries(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.DataSource> values) {
      if (dictionariesBuilder_ == null) {
        ensureDictionariesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dictionaries_);
        onChanged();
      } else {
        dictionariesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder clearDictionaries() {
      if (dictionariesBuilder_ == null) {
        dictionaries_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        dictionariesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public Builder removeDictionaries(int index) {
      if (dictionariesBuilder_ == null) {
        ensureDictionariesIsMutable();
        dictionaries_.remove(index);
        onChanged();
      } else {
        dictionariesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getDictionariesBuilder(
        int index) {
      return getDictionariesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDictionariesOrBuilder(
        int index) {
      if (dictionariesBuilder_ == null) {
        return dictionaries_.get(index);  } else {
        return dictionariesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
         getDictionariesOrBuilderList() {
      if (dictionariesBuilder_ != null) {
        return dictionariesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(dictionaries_);
      }
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder addDictionariesBuilder() {
      return getDictionariesFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance());
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder addDictionariesBuilder(
        int index) {
      return getDictionariesFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance());
    }
    /**
     * <pre>
     * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
     * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
     * dictionary will be automatically selected for decompression according to the dictionary ID in the
     * source content.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train specific dictionaries for decompression.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource.Builder> 
         getDictionariesBuilderList() {
      return getDictionariesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
        getDictionariesFieldBuilder() {
      if (dictionariesBuilder_ == null) {
        dictionariesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                dictionaries_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        dictionaries_ = null;
      }
      return dictionariesBuilder_;
    }

    private com.google.protobuf.UInt32Value chunkSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> chunkSizeBuilder_;
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the chunkSize field is set.
     */
    public boolean hasChunkSize() {
      return chunkSizeBuilder_ != null || chunkSize_ != null;
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     * @return The chunkSize.
     */
    public com.google.protobuf.UInt32Value getChunkSize() {
      if (chunkSizeBuilder_ == null) {
        return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      } else {
        return chunkSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        chunkSize_ = value;
        onChanged();
      } else {
        chunkSizeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = builderForValue.build();
        onChanged();
      } else {
        chunkSizeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (chunkSize_ != null) {
          chunkSize_ =
            com.google.protobuf.UInt32Value.newBuilder(chunkSize_).mergeFrom(value).buildPartial();
        } else {
          chunkSize_ = value;
        }
        onChanged();
      } else {
        chunkSizeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearChunkSize() {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = null;
        onChanged();
      } else {
        chunkSize_ = null;
        chunkSizeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getChunkSizeBuilder() {
      
      onChanged();
      return getChunkSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
      if (chunkSizeBuilder_ != null) {
        return chunkSizeBuilder_.getMessageOrBuilder();
      } else {
        return chunkSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      }
    }
    /**
     * <pre>
     * Value for decompressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getChunkSizeFieldBuilder() {
      if (chunkSizeBuilder_ == null) {
        chunkSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getChunkSize(),
                getParentForChildren(),
                isClean());
        chunkSize_ = null;
      }
      return chunkSizeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.compression.zstd.decompressor.v3.Zstd)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.compression.zstd.decompressor.v3.Zstd)
  private static final io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd();
  }

  public static io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Zstd>
      PARSER = new com.google.protobuf.AbstractParser<Zstd>() {
    @java.lang.Override
    public Zstd parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Zstd(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Zstd> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Zstd> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3.Zstd getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

