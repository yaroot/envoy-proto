// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/zstd/decompressor/v3/zstd.proto

package io.envoyproxy.envoy.extensions.compression.zstd.decompressor.v3;

public interface ZstdOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.compression.zstd.decompressor.v3.Zstd)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource> 
      getDictionariesList();
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getDictionaries(int index);
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  int getDictionariesCount();
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
      getDictionariesOrBuilderList();
  /**
   * <pre>
   * Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. It is necessary to ensure that the dictionary used for
   * decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
   * dictionary will be automatically selected for decompression according to the dictionary ID in the
   * source content.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train specific dictionaries for decompression.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource dictionaries = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDictionariesOrBuilder(
      int index);

  /**
   * <pre>
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  boolean hasChunkSize();
  /**
   * <pre>
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  com.google.protobuf.UInt32Value getChunkSize();
  /**
   * <pre>
   * Value for decompressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder();
}
