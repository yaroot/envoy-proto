// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/zstd/compressor/v3/zstd.proto

package io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3;

/**
 * <pre>
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.compression.zstd.compressor.v3.Zstd}
 */
public final class Zstd extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.compression.zstd.compressor.v3.Zstd)
    ZstdOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Zstd.newBuilder() to construct.
  private Zstd(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Zstd() {
    strategy_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Zstd();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Zstd(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (compressionLevel_ != null) {
              subBuilder = compressionLevel_.toBuilder();
            }
            compressionLevel_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(compressionLevel_);
              compressionLevel_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {

            enableChecksum_ = input.readBool();
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            strategy_ = rawValue;
            break;
          }
          case 34: {
            io.envoyproxy.envoy.config.core.v3.DataSource.Builder subBuilder = null;
            if (dictionary_ != null) {
              subBuilder = dictionary_.toBuilder();
            }
            dictionary_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.DataSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(dictionary_);
              dictionary_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (chunkSize_ != null) {
              subBuilder = chunkSize_.toBuilder();
            }
            chunkSize_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(chunkSize_);
              chunkSize_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_compressor_v3_Zstd_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_compressor_v3_Zstd_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.class, io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Builder.class);
  }

  /**
   * <pre>
   * Reference to http://facebook.github.io/zstd/zstd_manual.html
   * </pre>
   *
   * Protobuf enum {@code envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy}
   */
  public enum Strategy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DEFAULT = 0;</code>
     */
    DEFAULT(0),
    /**
     * <code>FAST = 1;</code>
     */
    FAST(1),
    /**
     * <code>DFAST = 2;</code>
     */
    DFAST(2),
    /**
     * <code>GREEDY = 3;</code>
     */
    GREEDY(3),
    /**
     * <code>LAZY = 4;</code>
     */
    LAZY(4),
    /**
     * <code>LAZY2 = 5;</code>
     */
    LAZY2(5),
    /**
     * <code>BTLAZY2 = 6;</code>
     */
    BTLAZY2(6),
    /**
     * <code>BTOPT = 7;</code>
     */
    BTOPT(7),
    /**
     * <code>BTULTRA = 8;</code>
     */
    BTULTRA(8),
    /**
     * <code>BTULTRA2 = 9;</code>
     */
    BTULTRA2(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DEFAULT = 0;</code>
     */
    public static final int DEFAULT_VALUE = 0;
    /**
     * <code>FAST = 1;</code>
     */
    public static final int FAST_VALUE = 1;
    /**
     * <code>DFAST = 2;</code>
     */
    public static final int DFAST_VALUE = 2;
    /**
     * <code>GREEDY = 3;</code>
     */
    public static final int GREEDY_VALUE = 3;
    /**
     * <code>LAZY = 4;</code>
     */
    public static final int LAZY_VALUE = 4;
    /**
     * <code>LAZY2 = 5;</code>
     */
    public static final int LAZY2_VALUE = 5;
    /**
     * <code>BTLAZY2 = 6;</code>
     */
    public static final int BTLAZY2_VALUE = 6;
    /**
     * <code>BTOPT = 7;</code>
     */
    public static final int BTOPT_VALUE = 7;
    /**
     * <code>BTULTRA = 8;</code>
     */
    public static final int BTULTRA_VALUE = 8;
    /**
     * <code>BTULTRA2 = 9;</code>
     */
    public static final int BTULTRA2_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Strategy valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Strategy forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT;
        case 1: return FAST;
        case 2: return DFAST;
        case 3: return GREEDY;
        case 4: return LAZY;
        case 5: return LAZY2;
        case 6: return BTLAZY2;
        case 7: return BTOPT;
        case 8: return BTULTRA;
        case 9: return BTULTRA2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Strategy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Strategy> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Strategy>() {
            public Strategy findValueByNumber(int number) {
              return Strategy.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.getDescriptor().getEnumTypes().get(0);
    }

    private static final Strategy[] VALUES = values();

    public static Strategy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Strategy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy)
  }

  public static final int COMPRESSION_LEVEL_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value compressionLevel_;
  /**
   * <pre>
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
   * @return Whether the compressionLevel field is set.
   */
  @java.lang.Override
  public boolean hasCompressionLevel() {
    return compressionLevel_ != null;
  }
  /**
   * <pre>
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
   * @return The compressionLevel.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getCompressionLevel() {
    return compressionLevel_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : compressionLevel_;
  }
  /**
   * <pre>
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getCompressionLevelOrBuilder() {
    return getCompressionLevel();
  }

  public static final int ENABLE_CHECKSUM_FIELD_NUMBER = 2;
  private boolean enableChecksum_;
  /**
   * <pre>
   * A 32-bits checksum of content is written at end of frame. If not set, defaults to false.
   * </pre>
   *
   * <code>bool enable_checksum = 2;</code>
   * @return The enableChecksum.
   */
  @java.lang.Override
  public boolean getEnableChecksum() {
    return enableChecksum_;
  }

  public static final int STRATEGY_FIELD_NUMBER = 3;
  private int strategy_;
  /**
   * <pre>
   * The higher the value of selected strategy, the more complex it is,
   * resulting in stronger and slower compression.
   * Special: value 0 means "use default strategy".
   * </pre>
   *
   * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for strategy.
   */
  @java.lang.Override public int getStrategyValue() {
    return strategy_;
  }
  /**
   * <pre>
   * The higher the value of selected strategy, the more complex it is,
   * resulting in stronger and slower compression.
   * Special: value 0 means "use default strategy".
   * </pre>
   *
   * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The strategy.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy getStrategy() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy result = io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy.valueOf(strategy_);
    return result == null ? io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy.UNRECOGNIZED : result;
  }

  public static final int DICTIONARY_FIELD_NUMBER = 4;
  private io.envoyproxy.envoy.config.core.v3.DataSource dictionary_;
  /**
   * <pre>
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train a specific dictionary for compression.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
   * @return Whether the dictionary field is set.
   */
  @java.lang.Override
  public boolean hasDictionary() {
    return dictionary_ != null;
  }
  /**
   * <pre>
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train a specific dictionary for compression.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
   * @return The dictionary.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSource getDictionary() {
    return dictionary_ == null ? io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : dictionary_;
  }
  /**
   * <pre>
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train a specific dictionary for compression.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDictionaryOrBuilder() {
    return getDictionary();
  }

  public static final int CHUNK_SIZE_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt32Value chunkSize_;
  /**
   * <pre>
   * Value for compressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  @java.lang.Override
  public boolean hasChunkSize() {
    return chunkSize_ != null;
  }
  /**
   * <pre>
   * Value for compressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getChunkSize() {
    return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
  }
  /**
   * <pre>
   * Value for compressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
    return getChunkSize();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (compressionLevel_ != null) {
      output.writeMessage(1, getCompressionLevel());
    }
    if (enableChecksum_ != false) {
      output.writeBool(2, enableChecksum_);
    }
    if (strategy_ != io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy.DEFAULT.getNumber()) {
      output.writeEnum(3, strategy_);
    }
    if (dictionary_ != null) {
      output.writeMessage(4, getDictionary());
    }
    if (chunkSize_ != null) {
      output.writeMessage(5, getChunkSize());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (compressionLevel_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCompressionLevel());
    }
    if (enableChecksum_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, enableChecksum_);
    }
    if (strategy_ != io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy.DEFAULT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, strategy_);
    }
    if (dictionary_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getDictionary());
    }
    if (chunkSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getChunkSize());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd other = (io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd) obj;

    if (hasCompressionLevel() != other.hasCompressionLevel()) return false;
    if (hasCompressionLevel()) {
      if (!getCompressionLevel()
          .equals(other.getCompressionLevel())) return false;
    }
    if (getEnableChecksum()
        != other.getEnableChecksum()) return false;
    if (strategy_ != other.strategy_) return false;
    if (hasDictionary() != other.hasDictionary()) return false;
    if (hasDictionary()) {
      if (!getDictionary()
          .equals(other.getDictionary())) return false;
    }
    if (hasChunkSize() != other.hasChunkSize()) return false;
    if (hasChunkSize()) {
      if (!getChunkSize()
          .equals(other.getChunkSize())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCompressionLevel()) {
      hash = (37 * hash) + COMPRESSION_LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + getCompressionLevel().hashCode();
    }
    hash = (37 * hash) + ENABLE_CHECKSUM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEnableChecksum());
    hash = (37 * hash) + STRATEGY_FIELD_NUMBER;
    hash = (53 * hash) + strategy_;
    if (hasDictionary()) {
      hash = (37 * hash) + DICTIONARY_FIELD_NUMBER;
      hash = (53 * hash) + getDictionary().hashCode();
    }
    if (hasChunkSize()) {
      hash = (37 * hash) + CHUNK_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getChunkSize().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.compression.zstd.compressor.v3.Zstd}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.compression.zstd.compressor.v3.Zstd)
      io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.ZstdOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_compressor_v3_Zstd_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_compressor_v3_Zstd_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.class, io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (compressionLevelBuilder_ == null) {
        compressionLevel_ = null;
      } else {
        compressionLevel_ = null;
        compressionLevelBuilder_ = null;
      }
      enableChecksum_ = false;

      strategy_ = 0;

      if (dictionaryBuilder_ == null) {
        dictionary_ = null;
      } else {
        dictionary_ = null;
        dictionaryBuilder_ = null;
      }
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = null;
      } else {
        chunkSize_ = null;
        chunkSizeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.ZstdProto.internal_static_envoy_extensions_compression_zstd_compressor_v3_Zstd_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd build() {
      io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd buildPartial() {
      io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd result = new io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd(this);
      if (compressionLevelBuilder_ == null) {
        result.compressionLevel_ = compressionLevel_;
      } else {
        result.compressionLevel_ = compressionLevelBuilder_.build();
      }
      result.enableChecksum_ = enableChecksum_;
      result.strategy_ = strategy_;
      if (dictionaryBuilder_ == null) {
        result.dictionary_ = dictionary_;
      } else {
        result.dictionary_ = dictionaryBuilder_.build();
      }
      if (chunkSizeBuilder_ == null) {
        result.chunkSize_ = chunkSize_;
      } else {
        result.chunkSize_ = chunkSizeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd) {
        return mergeFrom((io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd other) {
      if (other == io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.getDefaultInstance()) return this;
      if (other.hasCompressionLevel()) {
        mergeCompressionLevel(other.getCompressionLevel());
      }
      if (other.getEnableChecksum() != false) {
        setEnableChecksum(other.getEnableChecksum());
      }
      if (other.strategy_ != 0) {
        setStrategyValue(other.getStrategyValue());
      }
      if (other.hasDictionary()) {
        mergeDictionary(other.getDictionary());
      }
      if (other.hasChunkSize()) {
        mergeChunkSize(other.getChunkSize());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.UInt32Value compressionLevel_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> compressionLevelBuilder_;
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     * @return Whether the compressionLevel field is set.
     */
    public boolean hasCompressionLevel() {
      return compressionLevelBuilder_ != null || compressionLevel_ != null;
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     * @return The compressionLevel.
     */
    public com.google.protobuf.UInt32Value getCompressionLevel() {
      if (compressionLevelBuilder_ == null) {
        return compressionLevel_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : compressionLevel_;
      } else {
        return compressionLevelBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    public Builder setCompressionLevel(com.google.protobuf.UInt32Value value) {
      if (compressionLevelBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        compressionLevel_ = value;
        onChanged();
      } else {
        compressionLevelBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    public Builder setCompressionLevel(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (compressionLevelBuilder_ == null) {
        compressionLevel_ = builderForValue.build();
        onChanged();
      } else {
        compressionLevelBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    public Builder mergeCompressionLevel(com.google.protobuf.UInt32Value value) {
      if (compressionLevelBuilder_ == null) {
        if (compressionLevel_ != null) {
          compressionLevel_ =
            com.google.protobuf.UInt32Value.newBuilder(compressionLevel_).mergeFrom(value).buildPartial();
        } else {
          compressionLevel_ = value;
        }
        onChanged();
      } else {
        compressionLevelBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    public Builder clearCompressionLevel() {
      if (compressionLevelBuilder_ == null) {
        compressionLevel_ = null;
        onChanged();
      } else {
        compressionLevel_ = null;
        compressionLevelBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    public com.google.protobuf.UInt32Value.Builder getCompressionLevelBuilder() {
      
      onChanged();
      return getCompressionLevelFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getCompressionLevelOrBuilder() {
      if (compressionLevelBuilder_ != null) {
        return compressionLevelBuilder_.getMessageOrBuilder();
      } else {
        return compressionLevel_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : compressionLevel_;
      }
    }
    /**
     * <pre>
     * Set compression parameters according to pre-defined compression level table.
     * Note that exact compression parameters are dynamically determined,
     * depending on both compression level and source content size (when known).
     * Value 0 means default, and default level is 3.
     * Setting a level does not automatically set all other compression parameters
     * to default. Setting this will however eventually dynamically impact the compression
     * parameters which have not been manually set. The manually set
     * ones will 'stick'.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getCompressionLevelFieldBuilder() {
      if (compressionLevelBuilder_ == null) {
        compressionLevelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getCompressionLevel(),
                getParentForChildren(),
                isClean());
        compressionLevel_ = null;
      }
      return compressionLevelBuilder_;
    }

    private boolean enableChecksum_ ;
    /**
     * <pre>
     * A 32-bits checksum of content is written at end of frame. If not set, defaults to false.
     * </pre>
     *
     * <code>bool enable_checksum = 2;</code>
     * @return The enableChecksum.
     */
    @java.lang.Override
    public boolean getEnableChecksum() {
      return enableChecksum_;
    }
    /**
     * <pre>
     * A 32-bits checksum of content is written at end of frame. If not set, defaults to false.
     * </pre>
     *
     * <code>bool enable_checksum = 2;</code>
     * @param value The enableChecksum to set.
     * @return This builder for chaining.
     */
    public Builder setEnableChecksum(boolean value) {
      
      enableChecksum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A 32-bits checksum of content is written at end of frame. If not set, defaults to false.
     * </pre>
     *
     * <code>bool enable_checksum = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnableChecksum() {
      
      enableChecksum_ = false;
      onChanged();
      return this;
    }

    private int strategy_ = 0;
    /**
     * <pre>
     * The higher the value of selected strategy, the more complex it is,
     * resulting in stronger and slower compression.
     * Special: value 0 means "use default strategy".
     * </pre>
     *
     * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for strategy.
     */
    @java.lang.Override public int getStrategyValue() {
      return strategy_;
    }
    /**
     * <pre>
     * The higher the value of selected strategy, the more complex it is,
     * resulting in stronger and slower compression.
     * Special: value 0 means "use default strategy".
     * </pre>
     *
     * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for strategy to set.
     * @return This builder for chaining.
     */
    public Builder setStrategyValue(int value) {
      
      strategy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The higher the value of selected strategy, the more complex it is,
     * resulting in stronger and slower compression.
     * Special: value 0 means "use default strategy".
     * </pre>
     *
     * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
     * @return The strategy.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy getStrategy() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy result = io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy.valueOf(strategy_);
      return result == null ? io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The higher the value of selected strategy, the more complex it is,
     * resulting in stronger and slower compression.
     * Special: value 0 means "use default strategy".
     * </pre>
     *
     * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
     * @param value The strategy to set.
     * @return This builder for chaining.
     */
    public Builder setStrategy(io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      strategy_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The higher the value of selected strategy, the more complex it is,
     * resulting in stronger and slower compression.
     * Special: value 0 means "use default strategy".
     * </pre>
     *
     * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStrategy() {
      
      strategy_ = 0;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.DataSource dictionary_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> dictionaryBuilder_;
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     * @return Whether the dictionary field is set.
     */
    public boolean hasDictionary() {
      return dictionaryBuilder_ != null || dictionary_ != null;
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     * @return The dictionary.
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource getDictionary() {
      if (dictionaryBuilder_ == null) {
        return dictionary_ == null ? io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : dictionary_;
      } else {
        return dictionaryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    public Builder setDictionary(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (dictionaryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dictionary_ = value;
        onChanged();
      } else {
        dictionaryBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    public Builder setDictionary(
        io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (dictionaryBuilder_ == null) {
        dictionary_ = builderForValue.build();
        onChanged();
      } else {
        dictionaryBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    public Builder mergeDictionary(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (dictionaryBuilder_ == null) {
        if (dictionary_ != null) {
          dictionary_ =
            io.envoyproxy.envoy.config.core.v3.DataSource.newBuilder(dictionary_).mergeFrom(value).buildPartial();
        } else {
          dictionary_ = value;
        }
        onChanged();
      } else {
        dictionaryBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    public Builder clearDictionary() {
      if (dictionaryBuilder_ == null) {
        dictionary_ = null;
        onChanged();
      } else {
        dictionary_ = null;
        dictionaryBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getDictionaryBuilder() {
      
      onChanged();
      return getDictionaryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDictionaryOrBuilder() {
      if (dictionaryBuilder_ != null) {
        return dictionaryBuilder_.getMessageOrBuilder();
      } else {
        return dictionary_ == null ?
            io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : dictionary_;
      }
    }
    /**
     * <pre>
     * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
     * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
     * that can be used to search the same dictionary during decompression.
     * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
     * to train a specific dictionary for compression.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
        getDictionaryFieldBuilder() {
      if (dictionaryBuilder_ == null) {
        dictionaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                getDictionary(),
                getParentForChildren(),
                isClean());
        dictionary_ = null;
      }
      return dictionaryBuilder_;
    }

    private com.google.protobuf.UInt32Value chunkSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> chunkSizeBuilder_;
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the chunkSize field is set.
     */
    public boolean hasChunkSize() {
      return chunkSizeBuilder_ != null || chunkSize_ != null;
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     * @return The chunkSize.
     */
    public com.google.protobuf.UInt32Value getChunkSize() {
      if (chunkSizeBuilder_ == null) {
        return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      } else {
        return chunkSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        chunkSize_ = value;
        onChanged();
      } else {
        chunkSizeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = builderForValue.build();
        onChanged();
      } else {
        chunkSizeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (chunkSize_ != null) {
          chunkSize_ =
            com.google.protobuf.UInt32Value.newBuilder(chunkSize_).mergeFrom(value).buildPartial();
        } else {
          chunkSize_ = value;
        }
        onChanged();
      } else {
        chunkSizeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearChunkSize() {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = null;
        onChanged();
      } else {
        chunkSize_ = null;
        chunkSizeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getChunkSizeBuilder() {
      
      onChanged();
      return getChunkSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
      if (chunkSizeBuilder_ != null) {
        return chunkSizeBuilder_.getMessageOrBuilder();
      } else {
        return chunkSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      }
    }
    /**
     * <pre>
     * Value for compressor's next output buffer. If not set, defaults to 4096.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getChunkSizeFieldBuilder() {
      if (chunkSizeBuilder_ == null) {
        chunkSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getChunkSize(),
                getParentForChildren(),
                isClean());
        chunkSize_ = null;
      }
      return chunkSizeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.compression.zstd.compressor.v3.Zstd)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.compression.zstd.compressor.v3.Zstd)
  private static final io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd();
  }

  public static io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Zstd>
      PARSER = new com.google.protobuf.AbstractParser<Zstd>() {
    @java.lang.Override
    public Zstd parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Zstd(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Zstd> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Zstd> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

