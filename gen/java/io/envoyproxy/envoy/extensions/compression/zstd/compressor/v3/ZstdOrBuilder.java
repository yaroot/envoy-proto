// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/zstd/compressor/v3/zstd.proto

package io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3;

public interface ZstdOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.compression.zstd.compressor.v3.Zstd)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
   * @return Whether the compressionLevel field is set.
   */
  boolean hasCompressionLevel();
  /**
   * <pre>
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
   * @return The compressionLevel.
   */
  com.google.protobuf.UInt32Value getCompressionLevel();
  /**
   * <pre>
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value compression_level = 1;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getCompressionLevelOrBuilder();

  /**
   * <pre>
   * A 32-bits checksum of content is written at end of frame. If not set, defaults to false.
   * </pre>
   *
   * <code>bool enable_checksum = 2;</code>
   * @return The enableChecksum.
   */
  boolean getEnableChecksum();

  /**
   * <pre>
   * The higher the value of selected strategy, the more complex it is,
   * resulting in stronger and slower compression.
   * Special: value 0 means "use default strategy".
   * </pre>
   *
   * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for strategy.
   */
  int getStrategyValue();
  /**
   * <pre>
   * The higher the value of selected strategy, the more complex it is,
   * resulting in stronger and slower compression.
   * Special: value 0 means "use default strategy".
   * </pre>
   *
   * <code>.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The strategy.
   */
  io.envoyproxy.envoy.extensions.compression.zstd.compressor.v3.Zstd.Strategy getStrategy();

  /**
   * <pre>
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train a specific dictionary for compression.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
   * @return Whether the dictionary field is set.
   */
  boolean hasDictionary();
  /**
   * <pre>
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train a specific dictionary for compression.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
   * @return The dictionary.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getDictionary();
  /**
   * <pre>
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual &lt;https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder&gt;`_
   * to train a specific dictionary for compression.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource dictionary = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDictionaryOrBuilder();

  /**
   * <pre>
   * Value for compressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  boolean hasChunkSize();
  /**
   * <pre>
   * Value for compressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  com.google.protobuf.UInt32Value getChunkSize();
  /**
   * <pre>
   * Value for compressor's next output buffer. If not set, defaults to 4096.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder();
}
