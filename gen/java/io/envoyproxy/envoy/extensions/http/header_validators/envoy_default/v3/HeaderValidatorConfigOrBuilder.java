// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/http/header_validators/envoy_default/v3/header_validator.proto

package io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3;

public interface HeaderValidatorConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions http1_protocol_options = 1;</code>
   * @return Whether the http1ProtocolOptions field is set.
   */
  boolean hasHttp1ProtocolOptions();
  /**
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions http1_protocol_options = 1;</code>
   * @return The http1ProtocolOptions.
   */
  io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions getHttp1ProtocolOptions();
  /**
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions http1_protocol_options = 1;</code>
   */
  io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptionsOrBuilder getHttp1ProtocolOptionsOrBuilder();

  /**
   * <pre>
   * The URI path normalization options.
   * By default Envoy normalizes URI path using the default values of the :ref:`UriPathNormalizationOptions
   * &lt;envoy_v3_api_msg_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions&gt;`.
   * URI path transformations specified by the ``uri_path_normalization_options`` configuration can be applied to a portion
   * of requests by setting the ``envoy_default_header_validator.uri_path_transformations`` runtime value.
   * Caution: disabling path normalization may lead to path confusion vulnerabilities in access control or incorrect service
   * selection.
   * </pre>
   *
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions uri_path_normalization_options = 2;</code>
   * @return Whether the uriPathNormalizationOptions field is set.
   */
  boolean hasUriPathNormalizationOptions();
  /**
   * <pre>
   * The URI path normalization options.
   * By default Envoy normalizes URI path using the default values of the :ref:`UriPathNormalizationOptions
   * &lt;envoy_v3_api_msg_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions&gt;`.
   * URI path transformations specified by the ``uri_path_normalization_options`` configuration can be applied to a portion
   * of requests by setting the ``envoy_default_header_validator.uri_path_transformations`` runtime value.
   * Caution: disabling path normalization may lead to path confusion vulnerabilities in access control or incorrect service
   * selection.
   * </pre>
   *
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions uri_path_normalization_options = 2;</code>
   * @return The uriPathNormalizationOptions.
   */
  io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions getUriPathNormalizationOptions();
  /**
   * <pre>
   * The URI path normalization options.
   * By default Envoy normalizes URI path using the default values of the :ref:`UriPathNormalizationOptions
   * &lt;envoy_v3_api_msg_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions&gt;`.
   * URI path transformations specified by the ``uri_path_normalization_options`` configuration can be applied to a portion
   * of requests by setting the ``envoy_default_header_validator.uri_path_transformations`` runtime value.
   * Caution: disabling path normalization may lead to path confusion vulnerabilities in access control or incorrect service
   * selection.
   * </pre>
   *
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions uri_path_normalization_options = 2;</code>
   */
  io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptionsOrBuilder getUriPathNormalizationOptionsOrBuilder();

  /**
   * <pre>
   * Restrict HTTP methods to these defined in the `RFC 7231 section 4.1 &lt;https://datatracker.ietf.org/doc/html/rfc7231#section-4.1&gt;`_
   * Envoy will respond with 400 to requests with disallowed methods.
   * By default methods with arbitrary names are accepted.
   * </pre>
   *
   * <code>bool restrict_http_methods = 3;</code>
   * @return The restrictHttpMethods.
   */
  boolean getRestrictHttpMethods();

  /**
   * <pre>
   * Action to take when a client request with a header name containing underscore characters is received.
   * If this setting is not specified, the value defaults to ALLOW.
   * </pre>
   *
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction headers_with_underscores_action = 4;</code>
   * @return The enum numeric value on the wire for headersWithUnderscoresAction.
   */
  int getHeadersWithUnderscoresActionValue();
  /**
   * <pre>
   * Action to take when a client request with a header name containing underscore characters is received.
   * If this setting is not specified, the value defaults to ALLOW.
   * </pre>
   *
   * <code>.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction headers_with_underscores_action = 4;</code>
   * @return The headersWithUnderscoresAction.
   */
  io.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction getHeadersWithUnderscoresAction();
}
