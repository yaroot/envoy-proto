// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/http/cache/file_system_http_cache/v3/file_system_http_cache.proto

package io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3;

/**
 * <pre>
 * Configuration for a cache implementation that caches in the local file system.
 * By default this cache uses a least-recently-used eviction strategy.
 * [#next-free-field: 7]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig}
 */
public final class FileSystemHttpCacheConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)
    FileSystemHttpCacheConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FileSystemHttpCacheConfig.newBuilder() to construct.
  private FileSystemHttpCacheConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FileSystemHttpCacheConfig() {
    cachePath_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FileSystemHttpCacheConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheProto.internal_static_envoy_extensions_http_cache_file_system_http_cache_v3_FileSystemHttpCacheConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheProto.internal_static_envoy_extensions_http_cache_file_system_http_cache_v3_FileSystemHttpCacheConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.class, io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.Builder.class);
  }

  public static final int MANAGER_CONFIG_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig managerConfig_;
  /**
   * <pre>
   * Configuration of a manager for how the file system is used asynchronously.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the managerConfig field is set.
   */
  @java.lang.Override
  public boolean hasManagerConfig() {
    return managerConfig_ != null;
  }
  /**
   * <pre>
   * Configuration of a manager for how the file system is used asynchronously.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
   * @return The managerConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig getManagerConfig() {
    return managerConfig_ == null ? io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance() : managerConfig_;
  }
  /**
   * <pre>
   * Configuration of a manager for how the file system is used asynchronously.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder getManagerConfigOrBuilder() {
    return managerConfig_ == null ? io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance() : managerConfig_;
  }

  public static final int CACHE_PATH_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object cachePath_ = "";
  /**
   * <pre>
   * Path at which the cache files will be stored.
   * This also doubles as the unique identifier for a cache, so a cache can be shared
   * between different routes, or separate paths can be used to specify separate caches.
   * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
   * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
   * instance.
   * </pre>
   *
   * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
   * @return The cachePath.
   */
  @java.lang.Override
  public java.lang.String getCachePath() {
    java.lang.Object ref = cachePath_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      cachePath_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Path at which the cache files will be stored.
   * This also doubles as the unique identifier for a cache, so a cache can be shared
   * between different routes, or separate paths can be used to specify separate caches.
   * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
   * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
   * instance.
   * </pre>
   *
   * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for cachePath.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCachePathBytes() {
    java.lang.Object ref = cachePath_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      cachePath_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MAX_CACHE_SIZE_BYTES_FIELD_NUMBER = 3;
  private com.google.protobuf.UInt64Value maxCacheSizeBytes_;
  /**
   * <pre>
   * The maximum size of the cache in bytes - when reached, another entry is removed.
   * This is measured as the sum of file sizes, such that it includes headers, trailers,
   * and metadata, but does not include e.g. file system overhead and block size padding.
   * If unset there is no limit except file system failure.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
   * @return Whether the maxCacheSizeBytes field is set.
   */
  @java.lang.Override
  public boolean hasMaxCacheSizeBytes() {
    return maxCacheSizeBytes_ != null;
  }
  /**
   * <pre>
   * The maximum size of the cache in bytes - when reached, another entry is removed.
   * This is measured as the sum of file sizes, such that it includes headers, trailers,
   * and metadata, but does not include e.g. file system overhead and block size padding.
   * If unset there is no limit except file system failure.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
   * @return The maxCacheSizeBytes.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getMaxCacheSizeBytes() {
    return maxCacheSizeBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheSizeBytes_;
  }
  /**
   * <pre>
   * The maximum size of the cache in bytes - when reached, another entry is removed.
   * This is measured as the sum of file sizes, such that it includes headers, trailers,
   * and metadata, but does not include e.g. file system overhead and block size padding.
   * If unset there is no limit except file system failure.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getMaxCacheSizeBytesOrBuilder() {
    return maxCacheSizeBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheSizeBytes_;
  }

  public static final int MAX_CACHE_ENTRY_SIZE_BYTES_FIELD_NUMBER = 4;
  private com.google.protobuf.UInt64Value maxCacheEntrySizeBytes_;
  /**
   * <pre>
   * The maximum size of a cache entry in bytes - larger responses will not be cached.
   * This is measured as the file size for the cache entry, such that it includes
   * headers, trailers, and metadata.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
   * @return Whether the maxCacheEntrySizeBytes field is set.
   */
  @java.lang.Override
  public boolean hasMaxCacheEntrySizeBytes() {
    return maxCacheEntrySizeBytes_ != null;
  }
  /**
   * <pre>
   * The maximum size of a cache entry in bytes - larger responses will not be cached.
   * This is measured as the file size for the cache entry, such that it includes
   * headers, trailers, and metadata.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
   * @return The maxCacheEntrySizeBytes.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getMaxCacheEntrySizeBytes() {
    return maxCacheEntrySizeBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntrySizeBytes_;
  }
  /**
   * <pre>
   * The maximum size of a cache entry in bytes - larger responses will not be cached.
   * This is measured as the file size for the cache entry, such that it includes
   * headers, trailers, and metadata.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getMaxCacheEntrySizeBytesOrBuilder() {
    return maxCacheEntrySizeBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntrySizeBytes_;
  }

  public static final int MAX_CACHE_ENTRY_COUNT_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt64Value maxCacheEntryCount_;
  /**
   * <pre>
   * The maximum number of cache entries - when reached, another entry is removed.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
   * @return Whether the maxCacheEntryCount field is set.
   */
  @java.lang.Override
  public boolean hasMaxCacheEntryCount() {
    return maxCacheEntryCount_ != null;
  }
  /**
   * <pre>
   * The maximum number of cache entries - when reached, another entry is removed.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
   * @return The maxCacheEntryCount.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getMaxCacheEntryCount() {
    return maxCacheEntryCount_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntryCount_;
  }
  /**
   * <pre>
   * The maximum number of cache entries - when reached, another entry is removed.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getMaxCacheEntryCountOrBuilder() {
    return maxCacheEntryCount_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntryCount_;
  }

  public static final int CACHE_SUBDIVISIONS_FIELD_NUMBER = 6;
  private int cacheSubdivisions_ = 0;
  /**
   * <pre>
   * A number of folders into which to subdivide the cache.
   * Setting this can help with performance in file systems where a large number of inodes
   * in a single branch degrades performance. The optimal value in that case would be
   * ``sqrt(expected_cache_entry_count)``.
   * On file systems that perform well with many inodes, the default value of 1 should be used.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>uint32 cache_subdivisions = 6;</code>
   * @return The cacheSubdivisions.
   */
  @java.lang.Override
  public int getCacheSubdivisions() {
    return cacheSubdivisions_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (managerConfig_ != null) {
      output.writeMessage(1, getManagerConfig());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(cachePath_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, cachePath_);
    }
    if (maxCacheSizeBytes_ != null) {
      output.writeMessage(3, getMaxCacheSizeBytes());
    }
    if (maxCacheEntrySizeBytes_ != null) {
      output.writeMessage(4, getMaxCacheEntrySizeBytes());
    }
    if (maxCacheEntryCount_ != null) {
      output.writeMessage(5, getMaxCacheEntryCount());
    }
    if (cacheSubdivisions_ != 0) {
      output.writeUInt32(6, cacheSubdivisions_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (managerConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getManagerConfig());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(cachePath_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, cachePath_);
    }
    if (maxCacheSizeBytes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMaxCacheSizeBytes());
    }
    if (maxCacheEntrySizeBytes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getMaxCacheEntrySizeBytes());
    }
    if (maxCacheEntryCount_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getMaxCacheEntryCount());
    }
    if (cacheSubdivisions_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(6, cacheSubdivisions_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig other = (io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig) obj;

    if (hasManagerConfig() != other.hasManagerConfig()) return false;
    if (hasManagerConfig()) {
      if (!getManagerConfig()
          .equals(other.getManagerConfig())) return false;
    }
    if (!getCachePath()
        .equals(other.getCachePath())) return false;
    if (hasMaxCacheSizeBytes() != other.hasMaxCacheSizeBytes()) return false;
    if (hasMaxCacheSizeBytes()) {
      if (!getMaxCacheSizeBytes()
          .equals(other.getMaxCacheSizeBytes())) return false;
    }
    if (hasMaxCacheEntrySizeBytes() != other.hasMaxCacheEntrySizeBytes()) return false;
    if (hasMaxCacheEntrySizeBytes()) {
      if (!getMaxCacheEntrySizeBytes()
          .equals(other.getMaxCacheEntrySizeBytes())) return false;
    }
    if (hasMaxCacheEntryCount() != other.hasMaxCacheEntryCount()) return false;
    if (hasMaxCacheEntryCount()) {
      if (!getMaxCacheEntryCount()
          .equals(other.getMaxCacheEntryCount())) return false;
    }
    if (getCacheSubdivisions()
        != other.getCacheSubdivisions()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasManagerConfig()) {
      hash = (37 * hash) + MANAGER_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getManagerConfig().hashCode();
    }
    hash = (37 * hash) + CACHE_PATH_FIELD_NUMBER;
    hash = (53 * hash) + getCachePath().hashCode();
    if (hasMaxCacheSizeBytes()) {
      hash = (37 * hash) + MAX_CACHE_SIZE_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + getMaxCacheSizeBytes().hashCode();
    }
    if (hasMaxCacheEntrySizeBytes()) {
      hash = (37 * hash) + MAX_CACHE_ENTRY_SIZE_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + getMaxCacheEntrySizeBytes().hashCode();
    }
    if (hasMaxCacheEntryCount()) {
      hash = (37 * hash) + MAX_CACHE_ENTRY_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxCacheEntryCount().hashCode();
    }
    hash = (37 * hash) + CACHE_SUBDIVISIONS_FIELD_NUMBER;
    hash = (53 * hash) + getCacheSubdivisions();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for a cache implementation that caches in the local file system.
   * By default this cache uses a least-recently-used eviction strategy.
   * [#next-free-field: 7]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)
      io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheProto.internal_static_envoy_extensions_http_cache_file_system_http_cache_v3_FileSystemHttpCacheConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheProto.internal_static_envoy_extensions_http_cache_file_system_http_cache_v3_FileSystemHttpCacheConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.class, io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      managerConfig_ = null;
      if (managerConfigBuilder_ != null) {
        managerConfigBuilder_.dispose();
        managerConfigBuilder_ = null;
      }
      cachePath_ = "";
      maxCacheSizeBytes_ = null;
      if (maxCacheSizeBytesBuilder_ != null) {
        maxCacheSizeBytesBuilder_.dispose();
        maxCacheSizeBytesBuilder_ = null;
      }
      maxCacheEntrySizeBytes_ = null;
      if (maxCacheEntrySizeBytesBuilder_ != null) {
        maxCacheEntrySizeBytesBuilder_.dispose();
        maxCacheEntrySizeBytesBuilder_ = null;
      }
      maxCacheEntryCount_ = null;
      if (maxCacheEntryCountBuilder_ != null) {
        maxCacheEntryCountBuilder_.dispose();
        maxCacheEntryCountBuilder_ = null;
      }
      cacheSubdivisions_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheProto.internal_static_envoy_extensions_http_cache_file_system_http_cache_v3_FileSystemHttpCacheConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig build() {
      io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig buildPartial() {
      io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig result = new io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.managerConfig_ = managerConfigBuilder_ == null
            ? managerConfig_
            : managerConfigBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.cachePath_ = cachePath_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.maxCacheSizeBytes_ = maxCacheSizeBytesBuilder_ == null
            ? maxCacheSizeBytes_
            : maxCacheSizeBytesBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.maxCacheEntrySizeBytes_ = maxCacheEntrySizeBytesBuilder_ == null
            ? maxCacheEntrySizeBytes_
            : maxCacheEntrySizeBytesBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.maxCacheEntryCount_ = maxCacheEntryCountBuilder_ == null
            ? maxCacheEntryCount_
            : maxCacheEntryCountBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.cacheSubdivisions_ = cacheSubdivisions_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig other) {
      if (other == io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig.getDefaultInstance()) return this;
      if (other.hasManagerConfig()) {
        mergeManagerConfig(other.getManagerConfig());
      }
      if (!other.getCachePath().isEmpty()) {
        cachePath_ = other.cachePath_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasMaxCacheSizeBytes()) {
        mergeMaxCacheSizeBytes(other.getMaxCacheSizeBytes());
      }
      if (other.hasMaxCacheEntrySizeBytes()) {
        mergeMaxCacheEntrySizeBytes(other.getMaxCacheEntrySizeBytes());
      }
      if (other.hasMaxCacheEntryCount()) {
        mergeMaxCacheEntryCount(other.getMaxCacheEntryCount());
      }
      if (other.getCacheSubdivisions() != 0) {
        setCacheSubdivisions(other.getCacheSubdivisions());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getManagerConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              cachePath_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getMaxCacheSizeBytesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getMaxCacheEntrySizeBytesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getMaxCacheEntryCountFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 48: {
              cacheSubdivisions_ = input.readUInt32();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig managerConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder> managerConfigBuilder_;
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the managerConfig field is set.
     */
    public boolean hasManagerConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     * @return The managerConfig.
     */
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig getManagerConfig() {
      if (managerConfigBuilder_ == null) {
        return managerConfig_ == null ? io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance() : managerConfig_;
      } else {
        return managerConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setManagerConfig(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig value) {
      if (managerConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        managerConfig_ = value;
      } else {
        managerConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setManagerConfig(
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder builderForValue) {
      if (managerConfigBuilder_ == null) {
        managerConfig_ = builderForValue.build();
      } else {
        managerConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeManagerConfig(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig value) {
      if (managerConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          managerConfig_ != null &&
          managerConfig_ != io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance()) {
          getManagerConfigBuilder().mergeFrom(value);
        } else {
          managerConfig_ = value;
        }
      } else {
        managerConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearManagerConfig() {
      bitField0_ = (bitField0_ & ~0x00000001);
      managerConfig_ = null;
      if (managerConfigBuilder_ != null) {
        managerConfigBuilder_.dispose();
        managerConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder getManagerConfigBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getManagerConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder getManagerConfigOrBuilder() {
      if (managerConfigBuilder_ != null) {
        return managerConfigBuilder_.getMessageOrBuilder();
      } else {
        return managerConfig_ == null ?
            io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance() : managerConfig_;
      }
    }
    /**
     * <pre>
     * Configuration of a manager for how the file system is used asynchronously.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder> 
        getManagerConfigFieldBuilder() {
      if (managerConfigBuilder_ == null) {
        managerConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder>(
                getManagerConfig(),
                getParentForChildren(),
                isClean());
        managerConfig_ = null;
      }
      return managerConfigBuilder_;
    }

    private java.lang.Object cachePath_ = "";
    /**
     * <pre>
     * Path at which the cache files will be stored.
     * This also doubles as the unique identifier for a cache, so a cache can be shared
     * between different routes, or separate paths can be used to specify separate caches.
     * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
     * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
     * instance.
     * </pre>
     *
     * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
     * @return The cachePath.
     */
    public java.lang.String getCachePath() {
      java.lang.Object ref = cachePath_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cachePath_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Path at which the cache files will be stored.
     * This also doubles as the unique identifier for a cache, so a cache can be shared
     * between different routes, or separate paths can be used to specify separate caches.
     * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
     * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
     * instance.
     * </pre>
     *
     * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
     * @return The bytes for cachePath.
     */
    public com.google.protobuf.ByteString
        getCachePathBytes() {
      java.lang.Object ref = cachePath_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cachePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Path at which the cache files will be stored.
     * This also doubles as the unique identifier for a cache, so a cache can be shared
     * between different routes, or separate paths can be used to specify separate caches.
     * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
     * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
     * instance.
     * </pre>
     *
     * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
     * @param value The cachePath to set.
     * @return This builder for chaining.
     */
    public Builder setCachePath(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      cachePath_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Path at which the cache files will be stored.
     * This also doubles as the unique identifier for a cache, so a cache can be shared
     * between different routes, or separate paths can be used to specify separate caches.
     * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
     * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
     * instance.
     * </pre>
     *
     * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCachePath() {
      cachePath_ = getDefaultInstance().getCachePath();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Path at which the cache files will be stored.
     * This also doubles as the unique identifier for a cache, so a cache can be shared
     * between different routes, or separate paths can be used to specify separate caches.
     * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
     * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
     * instance.
     * </pre>
     *
     * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
     * @param value The bytes for cachePath to set.
     * @return This builder for chaining.
     */
    public Builder setCachePathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      cachePath_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt64Value maxCacheSizeBytes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> maxCacheSizeBytesBuilder_;
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     * @return Whether the maxCacheSizeBytes field is set.
     */
    public boolean hasMaxCacheSizeBytes() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     * @return The maxCacheSizeBytes.
     */
    public com.google.protobuf.UInt64Value getMaxCacheSizeBytes() {
      if (maxCacheSizeBytesBuilder_ == null) {
        return maxCacheSizeBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheSizeBytes_;
      } else {
        return maxCacheSizeBytesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    public Builder setMaxCacheSizeBytes(com.google.protobuf.UInt64Value value) {
      if (maxCacheSizeBytesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxCacheSizeBytes_ = value;
      } else {
        maxCacheSizeBytesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    public Builder setMaxCacheSizeBytes(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (maxCacheSizeBytesBuilder_ == null) {
        maxCacheSizeBytes_ = builderForValue.build();
      } else {
        maxCacheSizeBytesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    public Builder mergeMaxCacheSizeBytes(com.google.protobuf.UInt64Value value) {
      if (maxCacheSizeBytesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          maxCacheSizeBytes_ != null &&
          maxCacheSizeBytes_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
          getMaxCacheSizeBytesBuilder().mergeFrom(value);
        } else {
          maxCacheSizeBytes_ = value;
        }
      } else {
        maxCacheSizeBytesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    public Builder clearMaxCacheSizeBytes() {
      bitField0_ = (bitField0_ & ~0x00000004);
      maxCacheSizeBytes_ = null;
      if (maxCacheSizeBytesBuilder_ != null) {
        maxCacheSizeBytesBuilder_.dispose();
        maxCacheSizeBytesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    public com.google.protobuf.UInt64Value.Builder getMaxCacheSizeBytesBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getMaxCacheSizeBytesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getMaxCacheSizeBytesOrBuilder() {
      if (maxCacheSizeBytesBuilder_ != null) {
        return maxCacheSizeBytesBuilder_.getMessageOrBuilder();
      } else {
        return maxCacheSizeBytes_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheSizeBytes_;
      }
    }
    /**
     * <pre>
     * The maximum size of the cache in bytes - when reached, another entry is removed.
     * This is measured as the sum of file sizes, such that it includes headers, trailers,
     * and metadata, but does not include e.g. file system overhead and block size padding.
     * If unset there is no limit except file system failure.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getMaxCacheSizeBytesFieldBuilder() {
      if (maxCacheSizeBytesBuilder_ == null) {
        maxCacheSizeBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getMaxCacheSizeBytes(),
                getParentForChildren(),
                isClean());
        maxCacheSizeBytes_ = null;
      }
      return maxCacheSizeBytesBuilder_;
    }

    private com.google.protobuf.UInt64Value maxCacheEntrySizeBytes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> maxCacheEntrySizeBytesBuilder_;
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     * @return Whether the maxCacheEntrySizeBytes field is set.
     */
    public boolean hasMaxCacheEntrySizeBytes() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     * @return The maxCacheEntrySizeBytes.
     */
    public com.google.protobuf.UInt64Value getMaxCacheEntrySizeBytes() {
      if (maxCacheEntrySizeBytesBuilder_ == null) {
        return maxCacheEntrySizeBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntrySizeBytes_;
      } else {
        return maxCacheEntrySizeBytesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    public Builder setMaxCacheEntrySizeBytes(com.google.protobuf.UInt64Value value) {
      if (maxCacheEntrySizeBytesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxCacheEntrySizeBytes_ = value;
      } else {
        maxCacheEntrySizeBytesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    public Builder setMaxCacheEntrySizeBytes(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (maxCacheEntrySizeBytesBuilder_ == null) {
        maxCacheEntrySizeBytes_ = builderForValue.build();
      } else {
        maxCacheEntrySizeBytesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    public Builder mergeMaxCacheEntrySizeBytes(com.google.protobuf.UInt64Value value) {
      if (maxCacheEntrySizeBytesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          maxCacheEntrySizeBytes_ != null &&
          maxCacheEntrySizeBytes_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
          getMaxCacheEntrySizeBytesBuilder().mergeFrom(value);
        } else {
          maxCacheEntrySizeBytes_ = value;
        }
      } else {
        maxCacheEntrySizeBytesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    public Builder clearMaxCacheEntrySizeBytes() {
      bitField0_ = (bitField0_ & ~0x00000008);
      maxCacheEntrySizeBytes_ = null;
      if (maxCacheEntrySizeBytesBuilder_ != null) {
        maxCacheEntrySizeBytesBuilder_.dispose();
        maxCacheEntrySizeBytesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    public com.google.protobuf.UInt64Value.Builder getMaxCacheEntrySizeBytesBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getMaxCacheEntrySizeBytesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getMaxCacheEntrySizeBytesOrBuilder() {
      if (maxCacheEntrySizeBytesBuilder_ != null) {
        return maxCacheEntrySizeBytesBuilder_.getMessageOrBuilder();
      } else {
        return maxCacheEntrySizeBytes_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntrySizeBytes_;
      }
    }
    /**
     * <pre>
     * The maximum size of a cache entry in bytes - larger responses will not be cached.
     * This is measured as the file size for the cache entry, such that it includes
     * headers, trailers, and metadata.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getMaxCacheEntrySizeBytesFieldBuilder() {
      if (maxCacheEntrySizeBytesBuilder_ == null) {
        maxCacheEntrySizeBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getMaxCacheEntrySizeBytes(),
                getParentForChildren(),
                isClean());
        maxCacheEntrySizeBytes_ = null;
      }
      return maxCacheEntrySizeBytesBuilder_;
    }

    private com.google.protobuf.UInt64Value maxCacheEntryCount_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> maxCacheEntryCountBuilder_;
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     * @return Whether the maxCacheEntryCount field is set.
     */
    public boolean hasMaxCacheEntryCount() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     * @return The maxCacheEntryCount.
     */
    public com.google.protobuf.UInt64Value getMaxCacheEntryCount() {
      if (maxCacheEntryCountBuilder_ == null) {
        return maxCacheEntryCount_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntryCount_;
      } else {
        return maxCacheEntryCountBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    public Builder setMaxCacheEntryCount(com.google.protobuf.UInt64Value value) {
      if (maxCacheEntryCountBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxCacheEntryCount_ = value;
      } else {
        maxCacheEntryCountBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    public Builder setMaxCacheEntryCount(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (maxCacheEntryCountBuilder_ == null) {
        maxCacheEntryCount_ = builderForValue.build();
      } else {
        maxCacheEntryCountBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    public Builder mergeMaxCacheEntryCount(com.google.protobuf.UInt64Value value) {
      if (maxCacheEntryCountBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          maxCacheEntryCount_ != null &&
          maxCacheEntryCount_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
          getMaxCacheEntryCountBuilder().mergeFrom(value);
        } else {
          maxCacheEntryCount_ = value;
        }
      } else {
        maxCacheEntryCountBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    public Builder clearMaxCacheEntryCount() {
      bitField0_ = (bitField0_ & ~0x00000010);
      maxCacheEntryCount_ = null;
      if (maxCacheEntryCountBuilder_ != null) {
        maxCacheEntryCountBuilder_.dispose();
        maxCacheEntryCountBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    public com.google.protobuf.UInt64Value.Builder getMaxCacheEntryCountBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getMaxCacheEntryCountFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getMaxCacheEntryCountOrBuilder() {
      if (maxCacheEntryCountBuilder_ != null) {
        return maxCacheEntryCountBuilder_.getMessageOrBuilder();
      } else {
        return maxCacheEntryCount_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : maxCacheEntryCount_;
      }
    }
    /**
     * <pre>
     * The maximum number of cache entries - when reached, another entry is removed.
     * If unset there is no limit.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getMaxCacheEntryCountFieldBuilder() {
      if (maxCacheEntryCountBuilder_ == null) {
        maxCacheEntryCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getMaxCacheEntryCount(),
                getParentForChildren(),
                isClean());
        maxCacheEntryCount_ = null;
      }
      return maxCacheEntryCountBuilder_;
    }

    private int cacheSubdivisions_ ;
    /**
     * <pre>
     * A number of folders into which to subdivide the cache.
     * Setting this can help with performance in file systems where a large number of inodes
     * in a single branch degrades performance. The optimal value in that case would be
     * ``sqrt(expected_cache_entry_count)``.
     * On file systems that perform well with many inodes, the default value of 1 should be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>uint32 cache_subdivisions = 6;</code>
     * @return The cacheSubdivisions.
     */
    @java.lang.Override
    public int getCacheSubdivisions() {
      return cacheSubdivisions_;
    }
    /**
     * <pre>
     * A number of folders into which to subdivide the cache.
     * Setting this can help with performance in file systems where a large number of inodes
     * in a single branch degrades performance. The optimal value in that case would be
     * ``sqrt(expected_cache_entry_count)``.
     * On file systems that perform well with many inodes, the default value of 1 should be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>uint32 cache_subdivisions = 6;</code>
     * @param value The cacheSubdivisions to set.
     * @return This builder for chaining.
     */
    public Builder setCacheSubdivisions(int value) {
      
      cacheSubdivisions_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A number of folders into which to subdivide the cache.
     * Setting this can help with performance in file systems where a large number of inodes
     * in a single branch degrades performance. The optimal value in that case would be
     * ``sqrt(expected_cache_entry_count)``.
     * On file systems that perform well with many inodes, the default value of 1 should be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>uint32 cache_subdivisions = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearCacheSubdivisions() {
      bitField0_ = (bitField0_ & ~0x00000020);
      cacheSubdivisions_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)
  private static final io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig();
  }

  public static io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FileSystemHttpCacheConfig>
      PARSER = new com.google.protobuf.AbstractParser<FileSystemHttpCacheConfig>() {
    @java.lang.Override
    public FileSystemHttpCacheConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FileSystemHttpCacheConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FileSystemHttpCacheConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

