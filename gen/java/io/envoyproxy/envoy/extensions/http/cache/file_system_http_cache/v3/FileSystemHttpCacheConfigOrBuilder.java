// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/http/cache/file_system_http_cache/v3/file_system_http_cache.proto

package io.envoyproxy.envoy.extensions.http.cache.file_system_http_cache.v3;

public interface FileSystemHttpCacheConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Configuration of a manager for how the file system is used asynchronously.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the managerConfig field is set.
   */
  boolean hasManagerConfig();
  /**
   * <pre>
   * Configuration of a manager for how the file system is used asynchronously.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
   * @return The managerConfig.
   */
  io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig getManagerConfig();
  /**
   * <pre>
   * Configuration of a manager for how the file system is used asynchronously.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig manager_config = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder getManagerConfigOrBuilder();

  /**
   * <pre>
   * Path at which the cache files will be stored.
   * This also doubles as the unique identifier for a cache, so a cache can be shared
   * between different routes, or separate paths can be used to specify separate caches.
   * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
   * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
   * instance.
   * </pre>
   *
   * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
   * @return The cachePath.
   */
  java.lang.String getCachePath();
  /**
   * <pre>
   * Path at which the cache files will be stored.
   * This also doubles as the unique identifier for a cache, so a cache can be shared
   * between different routes, or separate paths can be used to specify separate caches.
   * If the same ``cache_path`` is used in more than one ``CacheConfig``, the rest of the
   * ``FileSystemHttpCacheConfig`` must also match, and will refer to the same cache
   * instance.
   * </pre>
   *
   * <code>string cache_path = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for cachePath.
   */
  com.google.protobuf.ByteString
      getCachePathBytes();

  /**
   * <pre>
   * The maximum size of the cache in bytes - when reached, another entry is removed.
   * This is measured as the sum of file sizes, such that it includes headers, trailers,
   * and metadata, but does not include e.g. file system overhead and block size padding.
   * If unset there is no limit except file system failure.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
   * @return Whether the maxCacheSizeBytes field is set.
   */
  boolean hasMaxCacheSizeBytes();
  /**
   * <pre>
   * The maximum size of the cache in bytes - when reached, another entry is removed.
   * This is measured as the sum of file sizes, such that it includes headers, trailers,
   * and metadata, but does not include e.g. file system overhead and block size padding.
   * If unset there is no limit except file system failure.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
   * @return The maxCacheSizeBytes.
   */
  com.google.protobuf.UInt64Value getMaxCacheSizeBytes();
  /**
   * <pre>
   * The maximum size of the cache in bytes - when reached, another entry is removed.
   * This is measured as the sum of file sizes, such that it includes headers, trailers,
   * and metadata, but does not include e.g. file system overhead and block size padding.
   * If unset there is no limit except file system failure.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_size_bytes = 3;</code>
   */
  com.google.protobuf.UInt64ValueOrBuilder getMaxCacheSizeBytesOrBuilder();

  /**
   * <pre>
   * The maximum size of a cache entry in bytes - larger responses will not be cached.
   * This is measured as the file size for the cache entry, such that it includes
   * headers, trailers, and metadata.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
   * @return Whether the maxCacheEntrySizeBytes field is set.
   */
  boolean hasMaxCacheEntrySizeBytes();
  /**
   * <pre>
   * The maximum size of a cache entry in bytes - larger responses will not be cached.
   * This is measured as the file size for the cache entry, such that it includes
   * headers, trailers, and metadata.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
   * @return The maxCacheEntrySizeBytes.
   */
  com.google.protobuf.UInt64Value getMaxCacheEntrySizeBytes();
  /**
   * <pre>
   * The maximum size of a cache entry in bytes - larger responses will not be cached.
   * This is measured as the file size for the cache entry, such that it includes
   * headers, trailers, and metadata.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_size_bytes = 4;</code>
   */
  com.google.protobuf.UInt64ValueOrBuilder getMaxCacheEntrySizeBytesOrBuilder();

  /**
   * <pre>
   * The maximum number of cache entries - when reached, another entry is removed.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
   * @return Whether the maxCacheEntryCount field is set.
   */
  boolean hasMaxCacheEntryCount();
  /**
   * <pre>
   * The maximum number of cache entries - when reached, another entry is removed.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
   * @return The maxCacheEntryCount.
   */
  com.google.protobuf.UInt64Value getMaxCacheEntryCount();
  /**
   * <pre>
   * The maximum number of cache entries - when reached, another entry is removed.
   * If unset there is no limit.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_cache_entry_count = 5;</code>
   */
  com.google.protobuf.UInt64ValueOrBuilder getMaxCacheEntryCountOrBuilder();

  /**
   * <pre>
   * A number of folders into which to subdivide the cache.
   * Setting this can help with performance in file systems where a large number of inodes
   * in a single branch degrades performance. The optimal value in that case would be
   * ``sqrt(expected_cache_entry_count)``.
   * On file systems that perform well with many inodes, the default value of 1 should be used.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>uint32 cache_subdivisions = 6;</code>
   * @return The cacheSubdivisions.
   */
  int getCacheSubdivisions();
}
