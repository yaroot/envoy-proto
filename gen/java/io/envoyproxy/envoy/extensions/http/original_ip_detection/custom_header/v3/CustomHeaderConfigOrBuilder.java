// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto

package io.envoyproxy.envoy.extensions.http.original_ip_detection.custom_header.v3;

public interface CustomHeaderConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The header name containing the original downstream remote address, if present.
   * Note: in the case of a multi-valued header, only the first value is tried and the rest are ignored.
   * </pre>
   *
   * <code>string header_name = 1 [(.validate.rules) = { ... }</code>
   * @return The headerName.
   */
  java.lang.String getHeaderName();
  /**
   * <pre>
   * The header name containing the original downstream remote address, if present.
   * Note: in the case of a multi-valued header, only the first value is tried and the rest are ignored.
   * </pre>
   *
   * <code>string header_name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for headerName.
   */
  com.google.protobuf.ByteString
      getHeaderNameBytes();

  /**
   * <pre>
   * If set to true, the extension could decide that the detected address should be treated as
   * trusted by the HCM. If the address is considered :ref:`trusted&lt;config_http_conn_man_headers_x-forwarded-for_trusted_client_address&gt;`,
   * it might be used as input to determine if the request is internal (among other things).
   * </pre>
   *
   * <code>bool allow_extension_to_set_address_as_trusted = 2;</code>
   * @return The allowExtensionToSetAddressAsTrusted.
   */
  boolean getAllowExtensionToSetAddressAsTrusted();

  /**
   * <pre>
   * If this is set, the request will be rejected when detection fails using it as the HTTP response status.
   * .. note::
   *   If this is set to &lt; 400 or &gt; 511, the default status 403 will be used instead.
   * </pre>
   *
   * <code>.envoy.type.v3.HttpStatus reject_with_status = 3;</code>
   * @return Whether the rejectWithStatus field is set.
   */
  boolean hasRejectWithStatus();
  /**
   * <pre>
   * If this is set, the request will be rejected when detection fails using it as the HTTP response status.
   * .. note::
   *   If this is set to &lt; 400 or &gt; 511, the default status 403 will be used instead.
   * </pre>
   *
   * <code>.envoy.type.v3.HttpStatus reject_with_status = 3;</code>
   * @return The rejectWithStatus.
   */
  io.envoyproxy.envoy.type.v3.HttpStatus getRejectWithStatus();
  /**
   * <pre>
   * If this is set, the request will be rejected when detection fails using it as the HTTP response status.
   * .. note::
   *   If this is set to &lt; 400 or &gt; 511, the default status 403 will be used instead.
   * </pre>
   *
   * <code>.envoy.type.v3.HttpStatus reject_with_status = 3;</code>
   */
  io.envoyproxy.envoy.type.v3.HttpStatusOrBuilder getRejectWithStatusOrBuilder();
}
