// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/network/dns_resolver/cares/v3/cares_dns_resolver.proto

package io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3;

/**
 * <pre>
 * Configuration for c-ares DNS resolver.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig}
 */
public final class CaresDnsResolverConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)
    CaresDnsResolverConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CaresDnsResolverConfig.newBuilder() to construct.
  private CaresDnsResolverConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CaresDnsResolverConfig() {
    resolvers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CaresDnsResolverConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverProto.internal_static_envoy_extensions_network_dns_resolver_cares_v3_CaresDnsResolverConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverProto.internal_static_envoy_extensions_network_dns_resolver_cares_v3_CaresDnsResolverConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.class, io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.Builder.class);
  }

  public static final int RESOLVERS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.config.core.v3.Address> resolvers_;
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.core.v3.Address> getResolversList() {
    return resolvers_;
  }
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
      getResolversOrBuilderList() {
    return resolvers_;
  }
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public int getResolversCount() {
    return resolvers_.size();
  }
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.Address getResolvers(int index) {
    return resolvers_.get(index);
  }
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getResolversOrBuilder(
      int index) {
    return resolvers_.get(index);
  }

  public static final int USE_RESOLVERS_AS_FALLBACK_FIELD_NUMBER = 3;
  private boolean useResolversAsFallback_ = false;
  /**
   * <pre>
   * If true use the resolvers listed in the
   * :ref:`resolvers&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers&gt;`
   * field only if c-ares is unable to obtain a
   * nameserver from the system (e.g., /etc/resolv.conf).
   * Otherwise, the resolvers listed in the resolvers list will override the default system
   * resolvers. Defaults to false.
   * </pre>
   *
   * <code>bool use_resolvers_as_fallback = 3;</code>
   * @return The useResolversAsFallback.
   */
  @java.lang.Override
  public boolean getUseResolversAsFallback() {
    return useResolversAsFallback_;
  }

  public static final int FILTER_UNROUTABLE_FAMILIES_FIELD_NUMBER = 4;
  private boolean filterUnroutableFamilies_ = false;
  /**
   * <pre>
   * The resolver will query available network interfaces and determine if there are no available
   * interfaces for a given IP family. It will then filter these addresses from the results it
   * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
   * provide IPv4 addresses.
   * </pre>
   *
   * <code>bool filter_unroutable_families = 4;</code>
   * @return The filterUnroutableFamilies.
   */
  @java.lang.Override
  public boolean getFilterUnroutableFamilies() {
    return filterUnroutableFamilies_;
  }

  public static final int DNS_RESOLVER_OPTIONS_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.core.v3.DnsResolverOptions dnsResolverOptions_;
  /**
   * <pre>
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
   * @return Whether the dnsResolverOptions field is set.
   */
  @java.lang.Override
  public boolean hasDnsResolverOptions() {
    return dnsResolverOptions_ != null;
  }
  /**
   * <pre>
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
   * @return The dnsResolverOptions.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DnsResolverOptions getDnsResolverOptions() {
    return dnsResolverOptions_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.getDefaultInstance() : dnsResolverOptions_;
  }
  /**
   * <pre>
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DnsResolverOptionsOrBuilder getDnsResolverOptionsOrBuilder() {
    return dnsResolverOptions_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.getDefaultInstance() : dnsResolverOptions_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < resolvers_.size(); i++) {
      output.writeMessage(1, resolvers_.get(i));
    }
    if (dnsResolverOptions_ != null) {
      output.writeMessage(2, getDnsResolverOptions());
    }
    if (useResolversAsFallback_ != false) {
      output.writeBool(3, useResolversAsFallback_);
    }
    if (filterUnroutableFamilies_ != false) {
      output.writeBool(4, filterUnroutableFamilies_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < resolvers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, resolvers_.get(i));
    }
    if (dnsResolverOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getDnsResolverOptions());
    }
    if (useResolversAsFallback_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, useResolversAsFallback_);
    }
    if (filterUnroutableFamilies_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, filterUnroutableFamilies_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig other = (io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig) obj;

    if (!getResolversList()
        .equals(other.getResolversList())) return false;
    if (getUseResolversAsFallback()
        != other.getUseResolversAsFallback()) return false;
    if (getFilterUnroutableFamilies()
        != other.getFilterUnroutableFamilies()) return false;
    if (hasDnsResolverOptions() != other.hasDnsResolverOptions()) return false;
    if (hasDnsResolverOptions()) {
      if (!getDnsResolverOptions()
          .equals(other.getDnsResolverOptions())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getResolversCount() > 0) {
      hash = (37 * hash) + RESOLVERS_FIELD_NUMBER;
      hash = (53 * hash) + getResolversList().hashCode();
    }
    hash = (37 * hash) + USE_RESOLVERS_AS_FALLBACK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUseResolversAsFallback());
    hash = (37 * hash) + FILTER_UNROUTABLE_FAMILIES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getFilterUnroutableFamilies());
    if (hasDnsResolverOptions()) {
      hash = (37 * hash) + DNS_RESOLVER_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getDnsResolverOptions().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for c-ares DNS resolver.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)
      io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverProto.internal_static_envoy_extensions_network_dns_resolver_cares_v3_CaresDnsResolverConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverProto.internal_static_envoy_extensions_network_dns_resolver_cares_v3_CaresDnsResolverConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.class, io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (resolversBuilder_ == null) {
        resolvers_ = java.util.Collections.emptyList();
      } else {
        resolvers_ = null;
        resolversBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      useResolversAsFallback_ = false;
      filterUnroutableFamilies_ = false;
      dnsResolverOptions_ = null;
      if (dnsResolverOptionsBuilder_ != null) {
        dnsResolverOptionsBuilder_.dispose();
        dnsResolverOptionsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverProto.internal_static_envoy_extensions_network_dns_resolver_cares_v3_CaresDnsResolverConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig build() {
      io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig buildPartial() {
      io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig result = new io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig result) {
      if (resolversBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          resolvers_ = java.util.Collections.unmodifiableList(resolvers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.resolvers_ = resolvers_;
      } else {
        result.resolvers_ = resolversBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.useResolversAsFallback_ = useResolversAsFallback_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.filterUnroutableFamilies_ = filterUnroutableFamilies_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.dnsResolverOptions_ = dnsResolverOptionsBuilder_ == null
            ? dnsResolverOptions_
            : dnsResolverOptionsBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig other) {
      if (other == io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.getDefaultInstance()) return this;
      if (resolversBuilder_ == null) {
        if (!other.resolvers_.isEmpty()) {
          if (resolvers_.isEmpty()) {
            resolvers_ = other.resolvers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureResolversIsMutable();
            resolvers_.addAll(other.resolvers_);
          }
          onChanged();
        }
      } else {
        if (!other.resolvers_.isEmpty()) {
          if (resolversBuilder_.isEmpty()) {
            resolversBuilder_.dispose();
            resolversBuilder_ = null;
            resolvers_ = other.resolvers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            resolversBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getResolversFieldBuilder() : null;
          } else {
            resolversBuilder_.addAllMessages(other.resolvers_);
          }
        }
      }
      if (other.getUseResolversAsFallback() != false) {
        setUseResolversAsFallback(other.getUseResolversAsFallback());
      }
      if (other.getFilterUnroutableFamilies() != false) {
        setFilterUnroutableFamilies(other.getFilterUnroutableFamilies());
      }
      if (other.hasDnsResolverOptions()) {
        mergeDnsResolverOptions(other.getDnsResolverOptions());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.config.core.v3.Address m =
                  input.readMessage(
                      io.envoyproxy.envoy.config.core.v3.Address.parser(),
                      extensionRegistry);
              if (resolversBuilder_ == null) {
                ensureResolversIsMutable();
                resolvers_.add(m);
              } else {
                resolversBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getDnsResolverOptionsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 18
            case 24: {
              useResolversAsFallback_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 24
            case 32: {
              filterUnroutableFamilies_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 32
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<io.envoyproxy.envoy.config.core.v3.Address> resolvers_ =
      java.util.Collections.emptyList();
    private void ensureResolversIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        resolvers_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.Address>(resolvers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.Address, io.envoyproxy.envoy.config.core.v3.Address.Builder, io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> resolversBuilder_;

    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.Address> getResolversList() {
      if (resolversBuilder_ == null) {
        return java.util.Collections.unmodifiableList(resolvers_);
      } else {
        return resolversBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public int getResolversCount() {
      if (resolversBuilder_ == null) {
        return resolvers_.size();
      } else {
        return resolversBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Address getResolvers(int index) {
      if (resolversBuilder_ == null) {
        return resolvers_.get(index);
      } else {
        return resolversBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setResolvers(
        int index, io.envoyproxy.envoy.config.core.v3.Address value) {
      if (resolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResolversIsMutable();
        resolvers_.set(index, value);
        onChanged();
      } else {
        resolversBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setResolvers(
        int index, io.envoyproxy.envoy.config.core.v3.Address.Builder builderForValue) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.set(index, builderForValue.build());
        onChanged();
      } else {
        resolversBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder addResolvers(io.envoyproxy.envoy.config.core.v3.Address value) {
      if (resolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResolversIsMutable();
        resolvers_.add(value);
        onChanged();
      } else {
        resolversBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder addResolvers(
        int index, io.envoyproxy.envoy.config.core.v3.Address value) {
      if (resolversBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResolversIsMutable();
        resolvers_.add(index, value);
        onChanged();
      } else {
        resolversBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder addResolvers(
        io.envoyproxy.envoy.config.core.v3.Address.Builder builderForValue) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.add(builderForValue.build());
        onChanged();
      } else {
        resolversBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder addResolvers(
        int index, io.envoyproxy.envoy.config.core.v3.Address.Builder builderForValue) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.add(index, builderForValue.build());
        onChanged();
      } else {
        resolversBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllResolvers(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.Address> values) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, resolvers_);
        onChanged();
      } else {
        resolversBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearResolvers() {
      if (resolversBuilder_ == null) {
        resolvers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        resolversBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder removeResolvers(int index) {
      if (resolversBuilder_ == null) {
        ensureResolversIsMutable();
        resolvers_.remove(index);
        onChanged();
      } else {
        resolversBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Address.Builder getResolversBuilder(
        int index) {
      return getResolversFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getResolversOrBuilder(
        int index) {
      if (resolversBuilder_ == null) {
        return resolvers_.get(index);  } else {
        return resolversBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
         getResolversOrBuilderList() {
      if (resolversBuilder_ != null) {
        return resolversBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(resolvers_);
      }
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Address.Builder addResolversBuilder() {
      return getResolversFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.core.v3.Address.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Address.Builder addResolversBuilder(
        int index) {
      return getResolversFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.core.v3.Address.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of dns resolver addresses.
     * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
     * below dictates if the DNS client should override system defaults or only use the provided
     * resolvers if the system defaults are not available, i.e., as a fallback.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.Address.Builder> 
         getResolversBuilderList() {
      return getResolversFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.Address, io.envoyproxy.envoy.config.core.v3.Address.Builder, io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
        getResolversFieldBuilder() {
      if (resolversBuilder_ == null) {
        resolversBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.Address, io.envoyproxy.envoy.config.core.v3.Address.Builder, io.envoyproxy.envoy.config.core.v3.AddressOrBuilder>(
                resolvers_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        resolvers_ = null;
      }
      return resolversBuilder_;
    }

    private boolean useResolversAsFallback_ ;
    /**
     * <pre>
     * If true use the resolvers listed in the
     * :ref:`resolvers&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers&gt;`
     * field only if c-ares is unable to obtain a
     * nameserver from the system (e.g., /etc/resolv.conf).
     * Otherwise, the resolvers listed in the resolvers list will override the default system
     * resolvers. Defaults to false.
     * </pre>
     *
     * <code>bool use_resolvers_as_fallback = 3;</code>
     * @return The useResolversAsFallback.
     */
    @java.lang.Override
    public boolean getUseResolversAsFallback() {
      return useResolversAsFallback_;
    }
    /**
     * <pre>
     * If true use the resolvers listed in the
     * :ref:`resolvers&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers&gt;`
     * field only if c-ares is unable to obtain a
     * nameserver from the system (e.g., /etc/resolv.conf).
     * Otherwise, the resolvers listed in the resolvers list will override the default system
     * resolvers. Defaults to false.
     * </pre>
     *
     * <code>bool use_resolvers_as_fallback = 3;</code>
     * @param value The useResolversAsFallback to set.
     * @return This builder for chaining.
     */
    public Builder setUseResolversAsFallback(boolean value) {
      
      useResolversAsFallback_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true use the resolvers listed in the
     * :ref:`resolvers&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers&gt;`
     * field only if c-ares is unable to obtain a
     * nameserver from the system (e.g., /etc/resolv.conf).
     * Otherwise, the resolvers listed in the resolvers list will override the default system
     * resolvers. Defaults to false.
     * </pre>
     *
     * <code>bool use_resolvers_as_fallback = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearUseResolversAsFallback() {
      bitField0_ = (bitField0_ & ~0x00000002);
      useResolversAsFallback_ = false;
      onChanged();
      return this;
    }

    private boolean filterUnroutableFamilies_ ;
    /**
     * <pre>
     * The resolver will query available network interfaces and determine if there are no available
     * interfaces for a given IP family. It will then filter these addresses from the results it
     * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
     * provide IPv4 addresses.
     * </pre>
     *
     * <code>bool filter_unroutable_families = 4;</code>
     * @return The filterUnroutableFamilies.
     */
    @java.lang.Override
    public boolean getFilterUnroutableFamilies() {
      return filterUnroutableFamilies_;
    }
    /**
     * <pre>
     * The resolver will query available network interfaces and determine if there are no available
     * interfaces for a given IP family. It will then filter these addresses from the results it
     * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
     * provide IPv4 addresses.
     * </pre>
     *
     * <code>bool filter_unroutable_families = 4;</code>
     * @param value The filterUnroutableFamilies to set.
     * @return This builder for chaining.
     */
    public Builder setFilterUnroutableFamilies(boolean value) {
      
      filterUnroutableFamilies_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The resolver will query available network interfaces and determine if there are no available
     * interfaces for a given IP family. It will then filter these addresses from the results it
     * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
     * provide IPv4 addresses.
     * </pre>
     *
     * <code>bool filter_unroutable_families = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearFilterUnroutableFamilies() {
      bitField0_ = (bitField0_ & ~0x00000004);
      filterUnroutableFamilies_ = false;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.DnsResolverOptions dnsResolverOptions_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DnsResolverOptions, io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolverOptionsOrBuilder> dnsResolverOptionsBuilder_;
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     * @return Whether the dnsResolverOptions field is set.
     */
    public boolean hasDnsResolverOptions() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     * @return The dnsResolverOptions.
     */
    public io.envoyproxy.envoy.config.core.v3.DnsResolverOptions getDnsResolverOptions() {
      if (dnsResolverOptionsBuilder_ == null) {
        return dnsResolverOptions_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.getDefaultInstance() : dnsResolverOptions_;
      } else {
        return dnsResolverOptionsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    public Builder setDnsResolverOptions(io.envoyproxy.envoy.config.core.v3.DnsResolverOptions value) {
      if (dnsResolverOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsResolverOptions_ = value;
      } else {
        dnsResolverOptionsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    public Builder setDnsResolverOptions(
        io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.Builder builderForValue) {
      if (dnsResolverOptionsBuilder_ == null) {
        dnsResolverOptions_ = builderForValue.build();
      } else {
        dnsResolverOptionsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    public Builder mergeDnsResolverOptions(io.envoyproxy.envoy.config.core.v3.DnsResolverOptions value) {
      if (dnsResolverOptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          dnsResolverOptions_ != null &&
          dnsResolverOptions_ != io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.getDefaultInstance()) {
          getDnsResolverOptionsBuilder().mergeFrom(value);
        } else {
          dnsResolverOptions_ = value;
        }
      } else {
        dnsResolverOptionsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    public Builder clearDnsResolverOptions() {
      bitField0_ = (bitField0_ & ~0x00000008);
      dnsResolverOptions_ = null;
      if (dnsResolverOptionsBuilder_ != null) {
        dnsResolverOptionsBuilder_.dispose();
        dnsResolverOptionsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.Builder getDnsResolverOptionsBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getDnsResolverOptionsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DnsResolverOptionsOrBuilder getDnsResolverOptionsOrBuilder() {
      if (dnsResolverOptionsBuilder_ != null) {
        return dnsResolverOptionsBuilder_.getMessageOrBuilder();
      } else {
        return dnsResolverOptions_ == null ?
            io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.getDefaultInstance() : dnsResolverOptions_;
      }
    }
    /**
     * <pre>
     * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DnsResolverOptions, io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolverOptionsOrBuilder> 
        getDnsResolverOptionsFieldBuilder() {
      if (dnsResolverOptionsBuilder_ == null) {
        dnsResolverOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DnsResolverOptions, io.envoyproxy.envoy.config.core.v3.DnsResolverOptions.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolverOptionsOrBuilder>(
                getDnsResolverOptions(),
                getParentForChildren(),
                isClean());
        dnsResolverOptions_ = null;
      }
      return dnsResolverOptionsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)
  private static final io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig();
  }

  public static io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CaresDnsResolverConfig>
      PARSER = new com.google.protobuf.AbstractParser<CaresDnsResolverConfig>() {
    @java.lang.Override
    public CaresDnsResolverConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CaresDnsResolverConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CaresDnsResolverConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

