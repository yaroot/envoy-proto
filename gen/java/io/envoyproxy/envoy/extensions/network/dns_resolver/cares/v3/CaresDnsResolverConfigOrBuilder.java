// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/network/dns_resolver/cares/v3/cares_dns_resolver.proto

package io.envoyproxy.envoy.extensions.network.dns_resolver.cares.v3;

public interface CaresDnsResolverConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.Address> 
      getResolversList();
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.Address getResolvers(int index);
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  int getResolversCount();
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
      getResolversOrBuilderList();
  /**
   * <pre>
   * A list of dns resolver addresses.
   * :ref:`use_resolvers_as_fallback&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback&gt;`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.Address resolvers = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getResolversOrBuilder(
      int index);

  /**
   * <pre>
   * If true use the resolvers listed in the
   * :ref:`resolvers&lt;envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers&gt;`
   * field only if c-ares is unable to obtain a
   * nameserver from the system (e.g., /etc/resolv.conf).
   * Otherwise, the resolvers listed in the resolvers list will override the default system
   * resolvers. Defaults to false.
   * </pre>
   *
   * <code>bool use_resolvers_as_fallback = 3;</code>
   * @return The useResolversAsFallback.
   */
  boolean getUseResolversAsFallback();

  /**
   * <pre>
   * The resolver will query available network interfaces and determine if there are no available
   * interfaces for a given IP family. It will then filter these addresses from the results it
   * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
   * provide IPv4 addresses.
   * </pre>
   *
   * <code>bool filter_unroutable_families = 4;</code>
   * @return The filterUnroutableFamilies.
   */
  boolean getFilterUnroutableFamilies();

  /**
   * <pre>
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
   * @return Whether the dnsResolverOptions field is set.
   */
  boolean hasDnsResolverOptions();
  /**
   * <pre>
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
   * @return The dnsResolverOptions.
   */
  io.envoyproxy.envoy.config.core.v3.DnsResolverOptions getDnsResolverOptions();
  /**
   * <pre>
   * Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolverOptions dns_resolver_options = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DnsResolverOptionsOrBuilder getDnsResolverOptionsOrBuilder();
}
