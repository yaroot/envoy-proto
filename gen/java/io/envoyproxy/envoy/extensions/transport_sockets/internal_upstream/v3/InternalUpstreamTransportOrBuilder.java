// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/internal_upstream/v3/internal_upstream.proto

package io.envoyproxy.envoy.extensions.transport_sockets.internal_upstream.v3;

public interface InternalUpstreamTransportOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the metadata namespaces and values to insert into the downstream
   * internal connection dynamic metadata when an internal address is used as a
   * host. If the destination name is repeated across two metadata source
   * locations, and both locations contain the metadata with the given name,
   * then the latter in the list overrides the former.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1;</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource> 
      getPassthroughMetadataList();
  /**
   * <pre>
   * Specifies the metadata namespaces and values to insert into the downstream
   * internal connection dynamic metadata when an internal address is used as a
   * host. If the destination name is repeated across two metadata source
   * locations, and both locations contain the metadata with the given name,
   * then the latter in the list overrides the former.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1;</code>
   */
  io.envoyproxy.envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource getPassthroughMetadata(int index);
  /**
   * <pre>
   * Specifies the metadata namespaces and values to insert into the downstream
   * internal connection dynamic metadata when an internal address is used as a
   * host. If the destination name is repeated across two metadata source
   * locations, and both locations contain the metadata with the given name,
   * then the latter in the list overrides the former.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1;</code>
   */
  int getPassthroughMetadataCount();
  /**
   * <pre>
   * Specifies the metadata namespaces and values to insert into the downstream
   * internal connection dynamic metadata when an internal address is used as a
   * host. If the destination name is repeated across two metadata source
   * locations, and both locations contain the metadata with the given name,
   * then the latter in the list overrides the former.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSourceOrBuilder> 
      getPassthroughMetadataOrBuilderList();
  /**
   * <pre>
   * Specifies the metadata namespaces and values to insert into the downstream
   * internal connection dynamic metadata when an internal address is used as a
   * host. If the destination name is repeated across two metadata source
   * locations, and both locations contain the metadata with the given name,
   * then the latter in the list overrides the former.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource passthrough_metadata = 1;</code>
   */
  io.envoyproxy.envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSourceOrBuilder getPassthroughMetadataOrBuilder(
      int index);

  /**
   * <pre>
   * The underlying transport socket being wrapped.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TransportSocket transport_socket = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the transportSocket field is set.
   */
  boolean hasTransportSocket();
  /**
   * <pre>
   * The underlying transport socket being wrapped.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TransportSocket transport_socket = 3 [(.validate.rules) = { ... }</code>
   * @return The transportSocket.
   */
  io.envoyproxy.envoy.config.core.v3.TransportSocket getTransportSocket();
  /**
   * <pre>
   * The underlying transport socket being wrapped.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TransportSocket transport_socket = 3 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.TransportSocketOrBuilder getTransportSocketOrBuilder();
}
