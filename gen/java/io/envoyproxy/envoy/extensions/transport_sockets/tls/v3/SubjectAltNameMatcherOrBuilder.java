// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/tls/v3/common.proto

package io.envoyproxy.envoy.extensions.transport_sockets.tls.v3;

public interface SubjectAltNameMatcherOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.tls.v3.SubjectAltNameMatcher)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specification of type of SAN. Note that the default enum value is an invalid choice.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.SubjectAltNameMatcher.SanType san_type = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for sanType.
   */
  int getSanTypeValue();
  /**
   * <pre>
   * Specification of type of SAN. Note that the default enum value is an invalid choice.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.SubjectAltNameMatcher.SanType san_type = 1 [(.validate.rules) = { ... }</code>
   * @return The sanType.
   */
  io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SubjectAltNameMatcher.SanType getSanType();

  /**
   * <pre>
   * Matcher for SAN value.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.StringMatcher matcher = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the matcher field is set.
   */
  boolean hasMatcher();
  /**
   * <pre>
   * Matcher for SAN value.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.StringMatcher matcher = 2 [(.validate.rules) = { ... }</code>
   * @return The matcher.
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcher getMatcher();
  /**
   * <pre>
   * Matcher for SAN value.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.StringMatcher matcher = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getMatcherOrBuilder();
}
