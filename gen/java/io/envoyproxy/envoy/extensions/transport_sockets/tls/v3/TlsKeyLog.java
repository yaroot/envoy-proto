// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/tls/v3/tls.proto

package io.envoyproxy.envoy.extensions.transport_sockets.tls.v3;

/**
 * <pre>
 * TLS key log configuration.
 * The key log file format is "format used by NSS for its SSLKEYLOGFILE debugging output" (text taken from openssl man page)
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.TlsKeyLog}
 */
public final class TlsKeyLog extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.transport_sockets.tls.v3.TlsKeyLog)
    TlsKeyLogOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TlsKeyLog.newBuilder() to construct.
  private TlsKeyLog(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TlsKeyLog() {
    path_ = "";
    localAddressRange_ = java.util.Collections.emptyList();
    remoteAddressRange_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TlsKeyLog();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TlsKeyLog(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            path_ = s;
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              localAddressRange_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.CidrRange>();
              mutable_bitField0_ |= 0x00000001;
            }
            localAddressRange_.add(
                input.readMessage(io.envoyproxy.envoy.config.core.v3.CidrRange.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              remoteAddressRange_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.CidrRange>();
              mutable_bitField0_ |= 0x00000002;
            }
            remoteAddressRange_.add(
                input.readMessage(io.envoyproxy.envoy.config.core.v3.CidrRange.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        localAddressRange_ = java.util.Collections.unmodifiableList(localAddressRange_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        remoteAddressRange_ = java.util.Collections.unmodifiableList(remoteAddressRange_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsKeyLog_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsKeyLog_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.Builder.class);
  }

  public static final int PATH_FIELD_NUMBER = 1;
  private volatile java.lang.Object path_;
  /**
   * <pre>
   * The path to save the TLS key log.
   * </pre>
   *
   * <code>string path = 1 [(.validate.rules) = { ... }</code>
   * @return The path.
   */
  @java.lang.Override
  public java.lang.String getPath() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      path_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The path to save the TLS key log.
   * </pre>
   *
   * <code>string path = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for path.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = path_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      path_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LOCAL_ADDRESS_RANGE_FIELD_NUMBER = 2;
  private java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> localAddressRange_;
  /**
   * <pre>
   * The local IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any local IP address  will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> getLocalAddressRangeList() {
    return localAddressRange_;
  }
  /**
   * <pre>
   * The local IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any local IP address  will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
      getLocalAddressRangeOrBuilderList() {
    return localAddressRange_;
  }
  /**
   * <pre>
   * The local IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any local IP address  will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
   */
  @java.lang.Override
  public int getLocalAddressRangeCount() {
    return localAddressRange_.size();
  }
  /**
   * <pre>
   * The local IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any local IP address  will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.CidrRange getLocalAddressRange(int index) {
    return localAddressRange_.get(index);
  }
  /**
   * <pre>
   * The local IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any local IP address  will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getLocalAddressRangeOrBuilder(
      int index) {
    return localAddressRange_.get(index);
  }

  public static final int REMOTE_ADDRESS_RANGE_FIELD_NUMBER = 3;
  private java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> remoteAddressRange_;
  /**
   * <pre>
   * The remote IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any remote IP address will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> getRemoteAddressRangeList() {
    return remoteAddressRange_;
  }
  /**
   * <pre>
   * The remote IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any remote IP address will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
      getRemoteAddressRangeOrBuilderList() {
    return remoteAddressRange_;
  }
  /**
   * <pre>
   * The remote IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any remote IP address will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
   */
  @java.lang.Override
  public int getRemoteAddressRangeCount() {
    return remoteAddressRange_.size();
  }
  /**
   * <pre>
   * The remote IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any remote IP address will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.CidrRange getRemoteAddressRange(int index) {
    return remoteAddressRange_.get(index);
  }
  /**
   * <pre>
   * The remote IP address that will be used to filter the connection which should save the TLS key log
   * If it is not set, any remote IP address will be matched.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getRemoteAddressRangeOrBuilder(
      int index) {
    return remoteAddressRange_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, path_);
    }
    for (int i = 0; i < localAddressRange_.size(); i++) {
      output.writeMessage(2, localAddressRange_.get(i));
    }
    for (int i = 0; i < remoteAddressRange_.size(); i++) {
      output.writeMessage(3, remoteAddressRange_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, path_);
    }
    for (int i = 0; i < localAddressRange_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, localAddressRange_.get(i));
    }
    for (int i = 0; i < remoteAddressRange_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, remoteAddressRange_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog other = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog) obj;

    if (!getPath()
        .equals(other.getPath())) return false;
    if (!getLocalAddressRangeList()
        .equals(other.getLocalAddressRangeList())) return false;
    if (!getRemoteAddressRangeList()
        .equals(other.getRemoteAddressRangeList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PATH_FIELD_NUMBER;
    hash = (53 * hash) + getPath().hashCode();
    if (getLocalAddressRangeCount() > 0) {
      hash = (37 * hash) + LOCAL_ADDRESS_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + getLocalAddressRangeList().hashCode();
    }
    if (getRemoteAddressRangeCount() > 0) {
      hash = (37 * hash) + REMOTE_ADDRESS_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + getRemoteAddressRangeList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * TLS key log configuration.
   * The key log file format is "format used by NSS for its SSLKEYLOGFILE debugging output" (text taken from openssl man page)
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.TlsKeyLog}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.transport_sockets.tls.v3.TlsKeyLog)
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLogOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsKeyLog_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsKeyLog_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLocalAddressRangeFieldBuilder();
        getRemoteAddressRangeFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      path_ = "";

      if (localAddressRangeBuilder_ == null) {
        localAddressRange_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        localAddressRangeBuilder_.clear();
      }
      if (remoteAddressRangeBuilder_ == null) {
        remoteAddressRange_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        remoteAddressRangeBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsKeyLog_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog build() {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog buildPartial() {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog result = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog(this);
      int from_bitField0_ = bitField0_;
      result.path_ = path_;
      if (localAddressRangeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          localAddressRange_ = java.util.Collections.unmodifiableList(localAddressRange_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.localAddressRange_ = localAddressRange_;
      } else {
        result.localAddressRange_ = localAddressRangeBuilder_.build();
      }
      if (remoteAddressRangeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          remoteAddressRange_ = java.util.Collections.unmodifiableList(remoteAddressRange_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.remoteAddressRange_ = remoteAddressRange_;
      } else {
        result.remoteAddressRange_ = remoteAddressRangeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog) {
        return mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog other) {
      if (other == io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog.getDefaultInstance()) return this;
      if (!other.getPath().isEmpty()) {
        path_ = other.path_;
        onChanged();
      }
      if (localAddressRangeBuilder_ == null) {
        if (!other.localAddressRange_.isEmpty()) {
          if (localAddressRange_.isEmpty()) {
            localAddressRange_ = other.localAddressRange_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLocalAddressRangeIsMutable();
            localAddressRange_.addAll(other.localAddressRange_);
          }
          onChanged();
        }
      } else {
        if (!other.localAddressRange_.isEmpty()) {
          if (localAddressRangeBuilder_.isEmpty()) {
            localAddressRangeBuilder_.dispose();
            localAddressRangeBuilder_ = null;
            localAddressRange_ = other.localAddressRange_;
            bitField0_ = (bitField0_ & ~0x00000001);
            localAddressRangeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLocalAddressRangeFieldBuilder() : null;
          } else {
            localAddressRangeBuilder_.addAllMessages(other.localAddressRange_);
          }
        }
      }
      if (remoteAddressRangeBuilder_ == null) {
        if (!other.remoteAddressRange_.isEmpty()) {
          if (remoteAddressRange_.isEmpty()) {
            remoteAddressRange_ = other.remoteAddressRange_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRemoteAddressRangeIsMutable();
            remoteAddressRange_.addAll(other.remoteAddressRange_);
          }
          onChanged();
        }
      } else {
        if (!other.remoteAddressRange_.isEmpty()) {
          if (remoteAddressRangeBuilder_.isEmpty()) {
            remoteAddressRangeBuilder_.dispose();
            remoteAddressRangeBuilder_ = null;
            remoteAddressRange_ = other.remoteAddressRange_;
            bitField0_ = (bitField0_ & ~0x00000002);
            remoteAddressRangeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRemoteAddressRangeFieldBuilder() : null;
          } else {
            remoteAddressRangeBuilder_.addAllMessages(other.remoteAddressRange_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object path_ = "";
    /**
     * <pre>
     * The path to save the TLS key log.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @return The path.
     */
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The path to save the TLS key log.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for path.
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The path to save the TLS key log.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      path_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The path to save the TLS key log.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      
      path_ = getDefaultInstance().getPath();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The path to save the TLS key log.
     * </pre>
     *
     * <code>string path = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      path_ = value;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> localAddressRange_ =
      java.util.Collections.emptyList();
    private void ensureLocalAddressRangeIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        localAddressRange_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.CidrRange>(localAddressRange_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> localAddressRangeBuilder_;

    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> getLocalAddressRangeList() {
      if (localAddressRangeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(localAddressRange_);
      } else {
        return localAddressRangeBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public int getLocalAddressRangeCount() {
      if (localAddressRangeBuilder_ == null) {
        return localAddressRange_.size();
      } else {
        return localAddressRangeBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange getLocalAddressRange(int index) {
      if (localAddressRangeBuilder_ == null) {
        return localAddressRange_.get(index);
      } else {
        return localAddressRangeBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder setLocalAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange value) {
      if (localAddressRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.set(index, value);
        onChanged();
      } else {
        localAddressRangeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder setLocalAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
      if (localAddressRangeBuilder_ == null) {
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.set(index, builderForValue.build());
        onChanged();
      } else {
        localAddressRangeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder addLocalAddressRange(io.envoyproxy.envoy.config.core.v3.CidrRange value) {
      if (localAddressRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.add(value);
        onChanged();
      } else {
        localAddressRangeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder addLocalAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange value) {
      if (localAddressRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.add(index, value);
        onChanged();
      } else {
        localAddressRangeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder addLocalAddressRange(
        io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
      if (localAddressRangeBuilder_ == null) {
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.add(builderForValue.build());
        onChanged();
      } else {
        localAddressRangeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder addLocalAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
      if (localAddressRangeBuilder_ == null) {
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.add(index, builderForValue.build());
        onChanged();
      } else {
        localAddressRangeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder addAllLocalAddressRange(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.CidrRange> values) {
      if (localAddressRangeBuilder_ == null) {
        ensureLocalAddressRangeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, localAddressRange_);
        onChanged();
      } else {
        localAddressRangeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder clearLocalAddressRange() {
      if (localAddressRangeBuilder_ == null) {
        localAddressRange_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        localAddressRangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public Builder removeLocalAddressRange(int index) {
      if (localAddressRangeBuilder_ == null) {
        ensureLocalAddressRangeIsMutable();
        localAddressRange_.remove(index);
        onChanged();
      } else {
        localAddressRangeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder getLocalAddressRangeBuilder(
        int index) {
      return getLocalAddressRangeFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getLocalAddressRangeOrBuilder(
        int index) {
      if (localAddressRangeBuilder_ == null) {
        return localAddressRange_.get(index);  } else {
        return localAddressRangeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
         getLocalAddressRangeOrBuilderList() {
      if (localAddressRangeBuilder_ != null) {
        return localAddressRangeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(localAddressRange_);
      }
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder addLocalAddressRangeBuilder() {
      return getLocalAddressRangeFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.core.v3.CidrRange.getDefaultInstance());
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder addLocalAddressRangeBuilder(
        int index) {
      return getLocalAddressRangeFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.core.v3.CidrRange.getDefaultInstance());
    }
    /**
     * <pre>
     * The local IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any local IP address  will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange local_address_range = 2;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange.Builder> 
         getLocalAddressRangeBuilderList() {
      return getLocalAddressRangeFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
        getLocalAddressRangeFieldBuilder() {
      if (localAddressRangeBuilder_ == null) {
        localAddressRangeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder>(
                localAddressRange_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        localAddressRange_ = null;
      }
      return localAddressRangeBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> remoteAddressRange_ =
      java.util.Collections.emptyList();
    private void ensureRemoteAddressRangeIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        remoteAddressRange_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.CidrRange>(remoteAddressRange_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> remoteAddressRangeBuilder_;

    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> getRemoteAddressRangeList() {
      if (remoteAddressRangeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(remoteAddressRange_);
      } else {
        return remoteAddressRangeBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public int getRemoteAddressRangeCount() {
      if (remoteAddressRangeBuilder_ == null) {
        return remoteAddressRange_.size();
      } else {
        return remoteAddressRangeBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange getRemoteAddressRange(int index) {
      if (remoteAddressRangeBuilder_ == null) {
        return remoteAddressRange_.get(index);
      } else {
        return remoteAddressRangeBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder setRemoteAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange value) {
      if (remoteAddressRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.set(index, value);
        onChanged();
      } else {
        remoteAddressRangeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder setRemoteAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
      if (remoteAddressRangeBuilder_ == null) {
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.set(index, builderForValue.build());
        onChanged();
      } else {
        remoteAddressRangeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder addRemoteAddressRange(io.envoyproxy.envoy.config.core.v3.CidrRange value) {
      if (remoteAddressRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.add(value);
        onChanged();
      } else {
        remoteAddressRangeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder addRemoteAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange value) {
      if (remoteAddressRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.add(index, value);
        onChanged();
      } else {
        remoteAddressRangeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder addRemoteAddressRange(
        io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
      if (remoteAddressRangeBuilder_ == null) {
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.add(builderForValue.build());
        onChanged();
      } else {
        remoteAddressRangeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder addRemoteAddressRange(
        int index, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
      if (remoteAddressRangeBuilder_ == null) {
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.add(index, builderForValue.build());
        onChanged();
      } else {
        remoteAddressRangeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder addAllRemoteAddressRange(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.CidrRange> values) {
      if (remoteAddressRangeBuilder_ == null) {
        ensureRemoteAddressRangeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, remoteAddressRange_);
        onChanged();
      } else {
        remoteAddressRangeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder clearRemoteAddressRange() {
      if (remoteAddressRangeBuilder_ == null) {
        remoteAddressRange_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        remoteAddressRangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public Builder removeRemoteAddressRange(int index) {
      if (remoteAddressRangeBuilder_ == null) {
        ensureRemoteAddressRangeIsMutable();
        remoteAddressRange_.remove(index);
        onChanged();
      } else {
        remoteAddressRangeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder getRemoteAddressRangeBuilder(
        int index) {
      return getRemoteAddressRangeFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getRemoteAddressRangeOrBuilder(
        int index) {
      if (remoteAddressRangeBuilder_ == null) {
        return remoteAddressRange_.get(index);  } else {
        return remoteAddressRangeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
         getRemoteAddressRangeOrBuilderList() {
      if (remoteAddressRangeBuilder_ != null) {
        return remoteAddressRangeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(remoteAddressRange_);
      }
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder addRemoteAddressRangeBuilder() {
      return getRemoteAddressRangeFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.core.v3.CidrRange.getDefaultInstance());
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder addRemoteAddressRangeBuilder(
        int index) {
      return getRemoteAddressRangeFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.core.v3.CidrRange.getDefaultInstance());
    }
    /**
     * <pre>
     * The remote IP address that will be used to filter the connection which should save the TLS key log
     * If it is not set, any remote IP address will be matched.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange remote_address_range = 3;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange.Builder> 
         getRemoteAddressRangeBuilderList() {
      return getRemoteAddressRangeFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
        getRemoteAddressRangeFieldBuilder() {
      if (remoteAddressRangeBuilder_ == null) {
        remoteAddressRangeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder>(
                remoteAddressRange_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        remoteAddressRange_ = null;
      }
      return remoteAddressRangeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.transport_sockets.tls.v3.TlsKeyLog)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.transport_sockets.tls.v3.TlsKeyLog)
  private static final io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog();
  }

  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TlsKeyLog>
      PARSER = new com.google.protobuf.AbstractParser<TlsKeyLog>() {
    @java.lang.Override
    public TlsKeyLog parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TlsKeyLog(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TlsKeyLog> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TlsKeyLog> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsKeyLog getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

