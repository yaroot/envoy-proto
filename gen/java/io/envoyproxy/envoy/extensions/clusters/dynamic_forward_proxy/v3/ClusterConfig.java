// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/clusters/dynamic_forward_proxy/v3/cluster.proto

package io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3;

/**
 * <pre>
 * Configuration for the dynamic forward proxy cluster. See the :ref:`architecture overview
 * &lt;arch_overview_http_dynamic_forward_proxy&gt;` for more information.
 * [#extension: envoy.clusters.dynamic_forward_proxy]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig}
 */
public final class ClusterConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig)
    ClusterConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ClusterConfig.newBuilder() to construct.
  private ClusterConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ClusterConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ClusterConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterProto.internal_static_envoy_extensions_clusters_dynamic_forward_proxy_v3_ClusterConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterProto.internal_static_envoy_extensions_clusters_dynamic_forward_proxy_v3_ClusterConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.class, io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.Builder.class);
  }

  public static final int DNS_CACHE_CONFIG_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dnsCacheConfig_;
  /**
   * <pre>
   * The DNS cache configuration that the cluster will attach to. Note this configuration must
   * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
   * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the dnsCacheConfig field is set.
   */
  @java.lang.Override
  public boolean hasDnsCacheConfig() {
    return dnsCacheConfig_ != null;
  }
  /**
   * <pre>
   * The DNS cache configuration that the cluster will attach to. Note this configuration must
   * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
   * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
   * @return The dnsCacheConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDnsCacheConfig() {
    return dnsCacheConfig_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance() : dnsCacheConfig_;
  }
  /**
   * <pre>
   * The DNS cache configuration that the cluster will attach to. Note this configuration must
   * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
   * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder getDnsCacheConfigOrBuilder() {
    return dnsCacheConfig_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance() : dnsCacheConfig_;
  }

  public static final int ALLOW_INSECURE_CLUSTER_OPTIONS_FIELD_NUMBER = 2;
  private boolean allowInsecureClusterOptions_ = false;
  /**
   * <pre>
   * If true allow the cluster configuration to disable the auto_sni and auto_san_validation options
   * in the :ref:`cluster's upstream_http_protocol_options
   * &lt;envoy_v3_api_field_config.cluster.v3.Cluster.upstream_http_protocol_options&gt;`
   * </pre>
   *
   * <code>bool allow_insecure_cluster_options = 2;</code>
   * @return The allowInsecureClusterOptions.
   */
  @java.lang.Override
  public boolean getAllowInsecureClusterOptions() {
    return allowInsecureClusterOptions_;
  }

  public static final int ALLOW_COALESCED_CONNECTIONS_FIELD_NUMBER = 3;
  private boolean allowCoalescedConnections_ = false;
  /**
   * <pre>
   * If true allow HTTP/2 and HTTP/3 connections to be reused for requests to different
   * origins than the connection was initially created for. This will only happen when the
   * resolved address for the new connection matches the peer address of the connection and
   * the TLS certificate is also valid for the new hostname. For example, if a connection
   * has previously been established to foo.example.com at IP 1.2.3.4 with a certificate
   * that is valid for `*.example.com`, then this connection could be used for requests to
   * bar.example.com if that also resolved to 1.2.3.4.
   * .. note::
   *   By design, this feature will maximize reuse of connections. This means that instead
   *   opening a new connection when an existing connection reaches the maximum number of
   *   concurrent streams, requests will instead be sent to the existing connection.
   * .. note::
   *   The coalesced connections might be to upstreams that would not be otherwise
   *   selected by Envoy. See the section `Connection Reuse in RFC 7540
   *   &lt;https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.1&gt;`_
   * </pre>
   *
   * <code>bool allow_coalesced_connections = 3;</code>
   * @return The allowCoalescedConnections.
   */
  @java.lang.Override
  public boolean getAllowCoalescedConnections() {
    return allowCoalescedConnections_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (dnsCacheConfig_ != null) {
      output.writeMessage(1, getDnsCacheConfig());
    }
    if (allowInsecureClusterOptions_ != false) {
      output.writeBool(2, allowInsecureClusterOptions_);
    }
    if (allowCoalescedConnections_ != false) {
      output.writeBool(3, allowCoalescedConnections_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (dnsCacheConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDnsCacheConfig());
    }
    if (allowInsecureClusterOptions_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, allowInsecureClusterOptions_);
    }
    if (allowCoalescedConnections_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, allowCoalescedConnections_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig other = (io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig) obj;

    if (hasDnsCacheConfig() != other.hasDnsCacheConfig()) return false;
    if (hasDnsCacheConfig()) {
      if (!getDnsCacheConfig()
          .equals(other.getDnsCacheConfig())) return false;
    }
    if (getAllowInsecureClusterOptions()
        != other.getAllowInsecureClusterOptions()) return false;
    if (getAllowCoalescedConnections()
        != other.getAllowCoalescedConnections()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDnsCacheConfig()) {
      hash = (37 * hash) + DNS_CACHE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getDnsCacheConfig().hashCode();
    }
    hash = (37 * hash) + ALLOW_INSECURE_CLUSTER_OPTIONS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowInsecureClusterOptions());
    hash = (37 * hash) + ALLOW_COALESCED_CONNECTIONS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowCoalescedConnections());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for the dynamic forward proxy cluster. See the :ref:`architecture overview
   * &lt;arch_overview_http_dynamic_forward_proxy&gt;` for more information.
   * [#extension: envoy.clusters.dynamic_forward_proxy]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig)
      io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterProto.internal_static_envoy_extensions_clusters_dynamic_forward_proxy_v3_ClusterConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterProto.internal_static_envoy_extensions_clusters_dynamic_forward_proxy_v3_ClusterConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.class, io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      dnsCacheConfig_ = null;
      if (dnsCacheConfigBuilder_ != null) {
        dnsCacheConfigBuilder_.dispose();
        dnsCacheConfigBuilder_ = null;
      }
      allowInsecureClusterOptions_ = false;
      allowCoalescedConnections_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterProto.internal_static_envoy_extensions_clusters_dynamic_forward_proxy_v3_ClusterConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig build() {
      io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig buildPartial() {
      io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig result = new io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.dnsCacheConfig_ = dnsCacheConfigBuilder_ == null
            ? dnsCacheConfig_
            : dnsCacheConfigBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.allowInsecureClusterOptions_ = allowInsecureClusterOptions_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.allowCoalescedConnections_ = allowCoalescedConnections_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig other) {
      if (other == io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.getDefaultInstance()) return this;
      if (other.hasDnsCacheConfig()) {
        mergeDnsCacheConfig(other.getDnsCacheConfig());
      }
      if (other.getAllowInsecureClusterOptions() != false) {
        setAllowInsecureClusterOptions(other.getAllowInsecureClusterOptions());
      }
      if (other.getAllowCoalescedConnections() != false) {
        setAllowCoalescedConnections(other.getAllowCoalescedConnections());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getDnsCacheConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              allowInsecureClusterOptions_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              allowCoalescedConnections_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dnsCacheConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder> dnsCacheConfigBuilder_;
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the dnsCacheConfig field is set.
     */
    public boolean hasDnsCacheConfig() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     * @return The dnsCacheConfig.
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDnsCacheConfig() {
      if (dnsCacheConfigBuilder_ == null) {
        return dnsCacheConfig_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance() : dnsCacheConfig_;
      } else {
        return dnsCacheConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsCacheConfig(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig value) {
      if (dnsCacheConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsCacheConfig_ = value;
      } else {
        dnsCacheConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsCacheConfig(
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder builderForValue) {
      if (dnsCacheConfigBuilder_ == null) {
        dnsCacheConfig_ = builderForValue.build();
      } else {
        dnsCacheConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeDnsCacheConfig(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig value) {
      if (dnsCacheConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          dnsCacheConfig_ != null &&
          dnsCacheConfig_ != io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance()) {
          getDnsCacheConfigBuilder().mergeFrom(value);
        } else {
          dnsCacheConfig_ = value;
        }
      } else {
        dnsCacheConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearDnsCacheConfig() {
      bitField0_ = (bitField0_ & ~0x00000001);
      dnsCacheConfig_ = null;
      if (dnsCacheConfigBuilder_ != null) {
        dnsCacheConfigBuilder_.dispose();
        dnsCacheConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder getDnsCacheConfigBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getDnsCacheConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder getDnsCacheConfigOrBuilder() {
      if (dnsCacheConfigBuilder_ != null) {
        return dnsCacheConfigBuilder_.getMessageOrBuilder();
      } else {
        return dnsCacheConfig_ == null ?
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance() : dnsCacheConfig_;
      }
    }
    /**
     * <pre>
     * The DNS cache configuration that the cluster will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
     * &lt;envoy_v3_api_field_extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig.dns_cache_config&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig dns_cache_config = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder> 
        getDnsCacheConfigFieldBuilder() {
      if (dnsCacheConfigBuilder_ == null) {
        dnsCacheConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder>(
                getDnsCacheConfig(),
                getParentForChildren(),
                isClean());
        dnsCacheConfig_ = null;
      }
      return dnsCacheConfigBuilder_;
    }

    private boolean allowInsecureClusterOptions_ ;
    /**
     * <pre>
     * If true allow the cluster configuration to disable the auto_sni and auto_san_validation options
     * in the :ref:`cluster's upstream_http_protocol_options
     * &lt;envoy_v3_api_field_config.cluster.v3.Cluster.upstream_http_protocol_options&gt;`
     * </pre>
     *
     * <code>bool allow_insecure_cluster_options = 2;</code>
     * @return The allowInsecureClusterOptions.
     */
    @java.lang.Override
    public boolean getAllowInsecureClusterOptions() {
      return allowInsecureClusterOptions_;
    }
    /**
     * <pre>
     * If true allow the cluster configuration to disable the auto_sni and auto_san_validation options
     * in the :ref:`cluster's upstream_http_protocol_options
     * &lt;envoy_v3_api_field_config.cluster.v3.Cluster.upstream_http_protocol_options&gt;`
     * </pre>
     *
     * <code>bool allow_insecure_cluster_options = 2;</code>
     * @param value The allowInsecureClusterOptions to set.
     * @return This builder for chaining.
     */
    public Builder setAllowInsecureClusterOptions(boolean value) {
      
      allowInsecureClusterOptions_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true allow the cluster configuration to disable the auto_sni and auto_san_validation options
     * in the :ref:`cluster's upstream_http_protocol_options
     * &lt;envoy_v3_api_field_config.cluster.v3.Cluster.upstream_http_protocol_options&gt;`
     * </pre>
     *
     * <code>bool allow_insecure_cluster_options = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowInsecureClusterOptions() {
      bitField0_ = (bitField0_ & ~0x00000002);
      allowInsecureClusterOptions_ = false;
      onChanged();
      return this;
    }

    private boolean allowCoalescedConnections_ ;
    /**
     * <pre>
     * If true allow HTTP/2 and HTTP/3 connections to be reused for requests to different
     * origins than the connection was initially created for. This will only happen when the
     * resolved address for the new connection matches the peer address of the connection and
     * the TLS certificate is also valid for the new hostname. For example, if a connection
     * has previously been established to foo.example.com at IP 1.2.3.4 with a certificate
     * that is valid for `*.example.com`, then this connection could be used for requests to
     * bar.example.com if that also resolved to 1.2.3.4.
     * .. note::
     *   By design, this feature will maximize reuse of connections. This means that instead
     *   opening a new connection when an existing connection reaches the maximum number of
     *   concurrent streams, requests will instead be sent to the existing connection.
     * .. note::
     *   The coalesced connections might be to upstreams that would not be otherwise
     *   selected by Envoy. See the section `Connection Reuse in RFC 7540
     *   &lt;https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.1&gt;`_
     * </pre>
     *
     * <code>bool allow_coalesced_connections = 3;</code>
     * @return The allowCoalescedConnections.
     */
    @java.lang.Override
    public boolean getAllowCoalescedConnections() {
      return allowCoalescedConnections_;
    }
    /**
     * <pre>
     * If true allow HTTP/2 and HTTP/3 connections to be reused for requests to different
     * origins than the connection was initially created for. This will only happen when the
     * resolved address for the new connection matches the peer address of the connection and
     * the TLS certificate is also valid for the new hostname. For example, if a connection
     * has previously been established to foo.example.com at IP 1.2.3.4 with a certificate
     * that is valid for `*.example.com`, then this connection could be used for requests to
     * bar.example.com if that also resolved to 1.2.3.4.
     * .. note::
     *   By design, this feature will maximize reuse of connections. This means that instead
     *   opening a new connection when an existing connection reaches the maximum number of
     *   concurrent streams, requests will instead be sent to the existing connection.
     * .. note::
     *   The coalesced connections might be to upstreams that would not be otherwise
     *   selected by Envoy. See the section `Connection Reuse in RFC 7540
     *   &lt;https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.1&gt;`_
     * </pre>
     *
     * <code>bool allow_coalesced_connections = 3;</code>
     * @param value The allowCoalescedConnections to set.
     * @return This builder for chaining.
     */
    public Builder setAllowCoalescedConnections(boolean value) {
      
      allowCoalescedConnections_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true allow HTTP/2 and HTTP/3 connections to be reused for requests to different
     * origins than the connection was initially created for. This will only happen when the
     * resolved address for the new connection matches the peer address of the connection and
     * the TLS certificate is also valid for the new hostname. For example, if a connection
     * has previously been established to foo.example.com at IP 1.2.3.4 with a certificate
     * that is valid for `*.example.com`, then this connection could be used for requests to
     * bar.example.com if that also resolved to 1.2.3.4.
     * .. note::
     *   By design, this feature will maximize reuse of connections. This means that instead
     *   opening a new connection when an existing connection reaches the maximum number of
     *   concurrent streams, requests will instead be sent to the existing connection.
     * .. note::
     *   The coalesced connections might be to upstreams that would not be otherwise
     *   selected by Envoy. See the section `Connection Reuse in RFC 7540
     *   &lt;https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.1&gt;`_
     * </pre>
     *
     * <code>bool allow_coalesced_connections = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowCoalescedConnections() {
      bitField0_ = (bitField0_ & ~0x00000004);
      allowCoalescedConnections_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig)
  private static final io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig();
  }

  public static io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ClusterConfig>
      PARSER = new com.google.protobuf.AbstractParser<ClusterConfig>() {
    @java.lang.Override
    public ClusterConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ClusterConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ClusterConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

