// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/local_ratelimit/v3/local_rate_limit.proto

package io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3;

/**
 * Protobuf type {@code envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit}
 */
public final class LocalRateLimit extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit)
    LocalRateLimitOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LocalRateLimit.newBuilder() to construct.
  private LocalRateLimit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LocalRateLimit() {
    statPrefix_ = "";
    shareKey_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LocalRateLimit();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimitProto.internal_static_envoy_extensions_filters_network_local_ratelimit_v3_LocalRateLimit_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimitProto.internal_static_envoy_extensions_filters_network_local_ratelimit_v3_LocalRateLimit_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.class, io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.Builder.class);
  }

  public static final int STAT_PREFIX_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object statPrefix_ = "";
  /**
   * <pre>
   * The prefix to use when emitting :ref:`statistics
   * &lt;config_network_filters_local_rate_limit_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  @java.lang.Override
  public java.lang.String getStatPrefix() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      statPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The prefix to use when emitting :ref:`statistics
   * &lt;config_network_filters_local_rate_limit_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStatPrefixBytes() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      statPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TOKEN_BUCKET_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.type.v3.TokenBucket tokenBucket_;
  /**
   * <pre>
   * The token bucket configuration to use for rate limiting connections that are processed by the
   * filter's filter chain. Each incoming connection processed by the filter consumes a single
   * token. If the token is available, the connection will be allowed. If no tokens are available,
   * the connection will be immediately closed.
   * .. note::
   *   In the current implementation each filter and filter chain has an independent rate limit, unless
   *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
   * .. note::
   *   In the current implementation the token bucket's :ref:`fill_interval
   *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
   *   refills.
   * </pre>
   *
   * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the tokenBucket field is set.
   */
  @java.lang.Override
  public boolean hasTokenBucket() {
    return tokenBucket_ != null;
  }
  /**
   * <pre>
   * The token bucket configuration to use for rate limiting connections that are processed by the
   * filter's filter chain. Each incoming connection processed by the filter consumes a single
   * token. If the token is available, the connection will be allowed. If no tokens are available,
   * the connection will be immediately closed.
   * .. note::
   *   In the current implementation each filter and filter chain has an independent rate limit, unless
   *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
   * .. note::
   *   In the current implementation the token bucket's :ref:`fill_interval
   *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
   *   refills.
   * </pre>
   *
   * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
   * @return The tokenBucket.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.TokenBucket getTokenBucket() {
    return tokenBucket_ == null ? io.envoyproxy.envoy.type.v3.TokenBucket.getDefaultInstance() : tokenBucket_;
  }
  /**
   * <pre>
   * The token bucket configuration to use for rate limiting connections that are processed by the
   * filter's filter chain. Each incoming connection processed by the filter consumes a single
   * token. If the token is available, the connection will be allowed. If no tokens are available,
   * the connection will be immediately closed.
   * .. note::
   *   In the current implementation each filter and filter chain has an independent rate limit, unless
   *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
   * .. note::
   *   In the current implementation the token bucket's :ref:`fill_interval
   *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
   *   refills.
   * </pre>
   *
   * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.TokenBucketOrBuilder getTokenBucketOrBuilder() {
    return tokenBucket_ == null ? io.envoyproxy.envoy.type.v3.TokenBucket.getDefaultInstance() : tokenBucket_;
  }

  public static final int RUNTIME_ENABLED_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag runtimeEnabled_;
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
   * @return Whether the runtimeEnabled field is set.
   */
  @java.lang.Override
  public boolean hasRuntimeEnabled() {
    return runtimeEnabled_ != null;
  }
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
   * @return The runtimeEnabled.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getRuntimeEnabled() {
    return runtimeEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
  }
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getRuntimeEnabledOrBuilder() {
    return runtimeEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
  }

  public static final int SHARE_KEY_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object shareKey_ = "";
  /**
   * <pre>
   * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
   * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
   * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
   * field is empty, this filter will not share a token bucket with any other filter.
   * </pre>
   *
   * <code>string share_key = 4;</code>
   * @return The shareKey.
   */
  @java.lang.Override
  public java.lang.String getShareKey() {
    java.lang.Object ref = shareKey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      shareKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
   * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
   * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
   * field is empty, this filter will not share a token bucket with any other filter.
   * </pre>
   *
   * <code>string share_key = 4;</code>
   * @return The bytes for shareKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getShareKeyBytes() {
    java.lang.Object ref = shareKey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      shareKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, statPrefix_);
    }
    if (tokenBucket_ != null) {
      output.writeMessage(2, getTokenBucket());
    }
    if (runtimeEnabled_ != null) {
      output.writeMessage(3, getRuntimeEnabled());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shareKey_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, shareKey_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, statPrefix_);
    }
    if (tokenBucket_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getTokenBucket());
    }
    if (runtimeEnabled_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRuntimeEnabled());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shareKey_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, shareKey_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit other = (io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit) obj;

    if (!getStatPrefix()
        .equals(other.getStatPrefix())) return false;
    if (hasTokenBucket() != other.hasTokenBucket()) return false;
    if (hasTokenBucket()) {
      if (!getTokenBucket()
          .equals(other.getTokenBucket())) return false;
    }
    if (hasRuntimeEnabled() != other.hasRuntimeEnabled()) return false;
    if (hasRuntimeEnabled()) {
      if (!getRuntimeEnabled()
          .equals(other.getRuntimeEnabled())) return false;
    }
    if (!getShareKey()
        .equals(other.getShareKey())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STAT_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getStatPrefix().hashCode();
    if (hasTokenBucket()) {
      hash = (37 * hash) + TOKEN_BUCKET_FIELD_NUMBER;
      hash = (53 * hash) + getTokenBucket().hashCode();
    }
    if (hasRuntimeEnabled()) {
      hash = (37 * hash) + RUNTIME_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + getRuntimeEnabled().hashCode();
    }
    hash = (37 * hash) + SHARE_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getShareKey().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit)
      io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimitOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimitProto.internal_static_envoy_extensions_filters_network_local_ratelimit_v3_LocalRateLimit_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimitProto.internal_static_envoy_extensions_filters_network_local_ratelimit_v3_LocalRateLimit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.class, io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      statPrefix_ = "";
      tokenBucket_ = null;
      if (tokenBucketBuilder_ != null) {
        tokenBucketBuilder_.dispose();
        tokenBucketBuilder_ = null;
      }
      runtimeEnabled_ = null;
      if (runtimeEnabledBuilder_ != null) {
        runtimeEnabledBuilder_.dispose();
        runtimeEnabledBuilder_ = null;
      }
      shareKey_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimitProto.internal_static_envoy_extensions_filters_network_local_ratelimit_v3_LocalRateLimit_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit build() {
      io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit buildPartial() {
      io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit result = new io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.statPrefix_ = statPrefix_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.tokenBucket_ = tokenBucketBuilder_ == null
            ? tokenBucket_
            : tokenBucketBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.runtimeEnabled_ = runtimeEnabledBuilder_ == null
            ? runtimeEnabled_
            : runtimeEnabledBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.shareKey_ = shareKey_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit other) {
      if (other == io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit.getDefaultInstance()) return this;
      if (!other.getStatPrefix().isEmpty()) {
        statPrefix_ = other.statPrefix_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasTokenBucket()) {
        mergeTokenBucket(other.getTokenBucket());
      }
      if (other.hasRuntimeEnabled()) {
        mergeRuntimeEnabled(other.getRuntimeEnabled());
      }
      if (!other.getShareKey().isEmpty()) {
        shareKey_ = other.shareKey_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              statPrefix_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getTokenBucketFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getRuntimeEnabledFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              shareKey_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object statPrefix_ = "";
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics
     * &lt;config_network_filters_local_rate_limit_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The statPrefix.
     */
    public java.lang.String getStatPrefix() {
      java.lang.Object ref = statPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics
     * &lt;config_network_filters_local_rate_limit_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for statPrefix.
     */
    public com.google.protobuf.ByteString
        getStatPrefixBytes() {
      java.lang.Object ref = statPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics
     * &lt;config_network_filters_local_rate_limit_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefix(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      statPrefix_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics
     * &lt;config_network_filters_local_rate_limit_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStatPrefix() {
      statPrefix_ = getDefaultInstance().getStatPrefix();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics
     * &lt;config_network_filters_local_rate_limit_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      statPrefix_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.type.v3.TokenBucket tokenBucket_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.TokenBucket, io.envoyproxy.envoy.type.v3.TokenBucket.Builder, io.envoyproxy.envoy.type.v3.TokenBucketOrBuilder> tokenBucketBuilder_;
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the tokenBucket field is set.
     */
    public boolean hasTokenBucket() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     * @return The tokenBucket.
     */
    public io.envoyproxy.envoy.type.v3.TokenBucket getTokenBucket() {
      if (tokenBucketBuilder_ == null) {
        return tokenBucket_ == null ? io.envoyproxy.envoy.type.v3.TokenBucket.getDefaultInstance() : tokenBucket_;
      } else {
        return tokenBucketBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setTokenBucket(io.envoyproxy.envoy.type.v3.TokenBucket value) {
      if (tokenBucketBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tokenBucket_ = value;
      } else {
        tokenBucketBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setTokenBucket(
        io.envoyproxy.envoy.type.v3.TokenBucket.Builder builderForValue) {
      if (tokenBucketBuilder_ == null) {
        tokenBucket_ = builderForValue.build();
      } else {
        tokenBucketBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeTokenBucket(io.envoyproxy.envoy.type.v3.TokenBucket value) {
      if (tokenBucketBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          tokenBucket_ != null &&
          tokenBucket_ != io.envoyproxy.envoy.type.v3.TokenBucket.getDefaultInstance()) {
          getTokenBucketBuilder().mergeFrom(value);
        } else {
          tokenBucket_ = value;
        }
      } else {
        tokenBucketBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearTokenBucket() {
      bitField0_ = (bitField0_ & ~0x00000002);
      tokenBucket_ = null;
      if (tokenBucketBuilder_ != null) {
        tokenBucketBuilder_.dispose();
        tokenBucketBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.type.v3.TokenBucket.Builder getTokenBucketBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getTokenBucketFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.type.v3.TokenBucketOrBuilder getTokenBucketOrBuilder() {
      if (tokenBucketBuilder_ != null) {
        return tokenBucketBuilder_.getMessageOrBuilder();
      } else {
        return tokenBucket_ == null ?
            io.envoyproxy.envoy.type.v3.TokenBucket.getDefaultInstance() : tokenBucket_;
      }
    }
    /**
     * <pre>
     * The token bucket configuration to use for rate limiting connections that are processed by the
     * filter's filter chain. Each incoming connection processed by the filter consumes a single
     * token. If the token is available, the connection will be allowed. If no tokens are available,
     * the connection will be immediately closed.
     * .. note::
     *   In the current implementation each filter and filter chain has an independent rate limit, unless
     *   a shared rate limit is configured via :ref:`share_key &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key&gt;`.
     * .. note::
     *   In the current implementation the token bucket's :ref:`fill_interval
     *   &lt;envoy_v3_api_field_type.v3.TokenBucket.fill_interval&gt;` must be &gt;= 50ms to avoid too aggressive
     *   refills.
     * </pre>
     *
     * <code>.envoy.type.v3.TokenBucket token_bucket = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.TokenBucket, io.envoyproxy.envoy.type.v3.TokenBucket.Builder, io.envoyproxy.envoy.type.v3.TokenBucketOrBuilder> 
        getTokenBucketFieldBuilder() {
      if (tokenBucketBuilder_ == null) {
        tokenBucketBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.TokenBucket, io.envoyproxy.envoy.type.v3.TokenBucket.Builder, io.envoyproxy.envoy.type.v3.TokenBucketOrBuilder>(
                getTokenBucket(),
                getParentForChildren(),
                isClean());
        tokenBucket_ = null;
      }
      return tokenBucketBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag runtimeEnabled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> runtimeEnabledBuilder_;
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     * @return Whether the runtimeEnabled field is set.
     */
    public boolean hasRuntimeEnabled() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     * @return The runtimeEnabled.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getRuntimeEnabled() {
      if (runtimeEnabledBuilder_ == null) {
        return runtimeEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
      } else {
        return runtimeEnabledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    public Builder setRuntimeEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
      if (runtimeEnabledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        runtimeEnabled_ = value;
      } else {
        runtimeEnabledBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    public Builder setRuntimeEnabled(
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder builderForValue) {
      if (runtimeEnabledBuilder_ == null) {
        runtimeEnabled_ = builderForValue.build();
      } else {
        runtimeEnabledBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    public Builder mergeRuntimeEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
      if (runtimeEnabledBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          runtimeEnabled_ != null &&
          runtimeEnabled_ != io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance()) {
          getRuntimeEnabledBuilder().mergeFrom(value);
        } else {
          runtimeEnabled_ = value;
        }
      } else {
        runtimeEnabledBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    public Builder clearRuntimeEnabled() {
      bitField0_ = (bitField0_ & ~0x00000004);
      runtimeEnabled_ = null;
      if (runtimeEnabledBuilder_ != null) {
        runtimeEnabledBuilder_.dispose();
        runtimeEnabledBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder getRuntimeEnabledBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getRuntimeEnabledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getRuntimeEnabledOrBuilder() {
      if (runtimeEnabledBuilder_ != null) {
        return runtimeEnabledBuilder_.getMessageOrBuilder();
      } else {
        return runtimeEnabled_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
      }
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
     * to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> 
        getRuntimeEnabledFieldBuilder() {
      if (runtimeEnabledBuilder_ == null) {
        runtimeEnabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder>(
                getRuntimeEnabled(),
                getParentForChildren(),
                isClean());
        runtimeEnabled_ = null;
      }
      return runtimeEnabledBuilder_;
    }

    private java.lang.Object shareKey_ = "";
    /**
     * <pre>
     * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
     * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
     * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
     * field is empty, this filter will not share a token bucket with any other filter.
     * </pre>
     *
     * <code>string share_key = 4;</code>
     * @return The shareKey.
     */
    public java.lang.String getShareKey() {
      java.lang.Object ref = shareKey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shareKey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
     * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
     * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
     * field is empty, this filter will not share a token bucket with any other filter.
     * </pre>
     *
     * <code>string share_key = 4;</code>
     * @return The bytes for shareKey.
     */
    public com.google.protobuf.ByteString
        getShareKeyBytes() {
      java.lang.Object ref = shareKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shareKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
     * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
     * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
     * field is empty, this filter will not share a token bucket with any other filter.
     * </pre>
     *
     * <code>string share_key = 4;</code>
     * @param value The shareKey to set.
     * @return This builder for chaining.
     */
    public Builder setShareKey(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      shareKey_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
     * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
     * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
     * field is empty, this filter will not share a token bucket with any other filter.
     * </pre>
     *
     * <code>string share_key = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearShareKey() {
      shareKey_ = getDefaultInstance().getShareKey();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
     * with a matching :ref:`token_bucket &lt;envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket&gt;`
     * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
     * field is empty, this filter will not share a token bucket with any other filter.
     * </pre>
     *
     * <code>string share_key = 4;</code>
     * @param value The bytes for shareKey to set.
     * @return This builder for chaining.
     */
    public Builder setShareKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      shareKey_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit)
  private static final io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit();
  }

  public static io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LocalRateLimit>
      PARSER = new com.google.protobuf.AbstractParser<LocalRateLimit>() {
    @java.lang.Override
    public LocalRateLimit parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<LocalRateLimit> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LocalRateLimit> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

