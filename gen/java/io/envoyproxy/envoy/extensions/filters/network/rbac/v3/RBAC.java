// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/rbac/v3/rbac.proto

package io.envoyproxy.envoy.extensions.filters.network.rbac.v3;

/**
 * <pre>
 * RBAC network filter config.
 * Header should not be used in rules/shadow_rules in RBAC network filter as
 * this information is only available in :ref:`RBAC http filter &lt;config_http_filters_rbac&gt;`.
 * [#next-free-field: 8]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.network.rbac.v3.RBAC}
 */
public final class RBAC extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.rbac.v3.RBAC)
    RBACOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RBAC.newBuilder() to construct.
  private RBAC(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RBAC() {
    shadowRulesStatPrefix_ = "";
    statPrefix_ = "";
    enforcementType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RBAC();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RbacProto.internal_static_envoy_extensions_filters_network_rbac_v3_RBAC_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RbacProto.internal_static_envoy_extensions_filters_network_rbac_v3_RBAC_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.class, io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.Builder.class);
  }

  /**
   * Protobuf enum {@code envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType}
   */
  public enum EnforcementType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Apply RBAC policies when the first byte of data arrives on the connection.
     * </pre>
     *
     * <code>ONE_TIME_ON_FIRST_BYTE = 0;</code>
     */
    ONE_TIME_ON_FIRST_BYTE(0),
    /**
     * <pre>
     * Continuously apply RBAC policies as data arrives. Use this mode when
     * using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
     * etc. when the protocol decoders emit dynamic metadata such as the
     * resources being accessed and the operations on the resources.
     * </pre>
     *
     * <code>CONTINUOUS = 1;</code>
     */
    CONTINUOUS(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Apply RBAC policies when the first byte of data arrives on the connection.
     * </pre>
     *
     * <code>ONE_TIME_ON_FIRST_BYTE = 0;</code>
     */
    public static final int ONE_TIME_ON_FIRST_BYTE_VALUE = 0;
    /**
     * <pre>
     * Continuously apply RBAC policies as data arrives. Use this mode when
     * using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
     * etc. when the protocol decoders emit dynamic metadata such as the
     * resources being accessed and the operations on the resources.
     * </pre>
     *
     * <code>CONTINUOUS = 1;</code>
     */
    public static final int CONTINUOUS_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EnforcementType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EnforcementType forNumber(int value) {
      switch (value) {
        case 0: return ONE_TIME_ON_FIRST_BYTE;
        case 1: return CONTINUOUS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EnforcementType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EnforcementType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EnforcementType>() {
            public EnforcementType findValueByNumber(int number) {
              return EnforcementType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.getDescriptor().getEnumTypes().get(0);
    }

    private static final EnforcementType[] VALUES = values();

    public static EnforcementType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EnforcementType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType)
  }

  public static final int RULES_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.rbac.v3.RBAC rules_;
  /**
   * <pre>
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   * If present and empty, DENY.
   * If both rules and matcher are configured, rules will be ignored.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return Whether the rules field is set.
   */
  @java.lang.Override
  public boolean hasRules() {
    return rules_ != null;
  }
  /**
   * <pre>
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   * If present and empty, DENY.
   * If both rules and matcher are configured, rules will be ignored.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return The rules.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.rbac.v3.RBAC getRules() {
    return rules_ == null ? io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : rules_;
  }
  /**
   * <pre>
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   * If present and empty, DENY.
   * If both rules and matcher are configured, rules will be ignored.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder getRulesOrBuilder() {
    return rules_ == null ? io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : rules_;
  }

  public static final int MATCHER_FIELD_NUMBER = 6;
  private com.github.xds.type.matcher.v3.Matcher matcher_;
  /**
   * <pre>
   * The match tree to use when resolving RBAC action for incoming connections. Connections do
   * not match any matcher will be denied.
   * If absent, no enforcing RBAC matcher will be applied.
   * If present and empty, deny all connections.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return Whether the matcher field is set.
   */
  @java.lang.Override
  public boolean hasMatcher() {
    return matcher_ != null;
  }
  /**
   * <pre>
   * The match tree to use when resolving RBAC action for incoming connections. Connections do
   * not match any matcher will be denied.
   * If absent, no enforcing RBAC matcher will be applied.
   * If present and empty, deny all connections.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return The matcher.
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.Matcher getMatcher() {
    return matcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : matcher_;
  }
  /**
   * <pre>
   * The match tree to use when resolving RBAC action for incoming connections. Connections do
   * not match any matcher will be denied.
   * If absent, no enforcing RBAC matcher will be applied.
   * If present and empty, deny all connections.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.MatcherOrBuilder getMatcherOrBuilder() {
    return matcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : matcher_;
  }

  public static final int SHADOW_RULES_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.rbac.v3.RBAC shadowRules_;
  /**
   * <pre>
   * Shadow rules are not enforced by the filter but will emit stats and logs
   * and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return Whether the shadowRules field is set.
   */
  @java.lang.Override
  public boolean hasShadowRules() {
    return shadowRules_ != null;
  }
  /**
   * <pre>
   * Shadow rules are not enforced by the filter but will emit stats and logs
   * and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return The shadowRules.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.rbac.v3.RBAC getShadowRules() {
    return shadowRules_ == null ? io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : shadowRules_;
  }
  /**
   * <pre>
   * Shadow rules are not enforced by the filter but will emit stats and logs
   * and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder getShadowRulesOrBuilder() {
    return shadowRules_ == null ? io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : shadowRules_;
  }

  public static final int SHADOW_MATCHER_FIELD_NUMBER = 7;
  private com.github.xds.type.matcher.v3.Matcher shadowMatcher_;
  /**
   * <pre>
   * The match tree to use for emitting stats and logs which can be used for rule testing for
   * incoming connections.
   * If absent, no shadow matcher will be applied.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return Whether the shadowMatcher field is set.
   */
  @java.lang.Override
  public boolean hasShadowMatcher() {
    return shadowMatcher_ != null;
  }
  /**
   * <pre>
   * The match tree to use for emitting stats and logs which can be used for rule testing for
   * incoming connections.
   * If absent, no shadow matcher will be applied.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return The shadowMatcher.
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.Matcher getShadowMatcher() {
    return shadowMatcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : shadowMatcher_;
  }
  /**
   * <pre>
   * The match tree to use for emitting stats and logs which can be used for rule testing for
   * incoming connections.
   * If absent, no shadow matcher will be applied.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.MatcherOrBuilder getShadowMatcherOrBuilder() {
    return shadowMatcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : shadowMatcher_;
  }

  public static final int SHADOW_RULES_STAT_PREFIX_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private volatile java.lang.Object shadowRulesStatPrefix_ = "";
  /**
   * <pre>
   * If specified, shadow rules will emit stats with the given prefix.
   * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
   * shadow rules.
   * </pre>
   *
   * <code>string shadow_rules_stat_prefix = 5;</code>
   * @return The shadowRulesStatPrefix.
   */
  @java.lang.Override
  public java.lang.String getShadowRulesStatPrefix() {
    java.lang.Object ref = shadowRulesStatPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      shadowRulesStatPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * If specified, shadow rules will emit stats with the given prefix.
   * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
   * shadow rules.
   * </pre>
   *
   * <code>string shadow_rules_stat_prefix = 5;</code>
   * @return The bytes for shadowRulesStatPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getShadowRulesStatPrefixBytes() {
    java.lang.Object ref = shadowRulesStatPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      shadowRulesStatPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STAT_PREFIX_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object statPrefix_ = "";
  /**
   * <pre>
   * The prefix to use when emitting statistics.
   * </pre>
   *
   * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  @java.lang.Override
  public java.lang.String getStatPrefix() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      statPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The prefix to use when emitting statistics.
   * </pre>
   *
   * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStatPrefixBytes() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      statPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ENFORCEMENT_TYPE_FIELD_NUMBER = 4;
  private int enforcementType_ = 0;
  /**
   * <pre>
   * RBAC enforcement strategy. By default RBAC will be enforced only once
   * when the first byte of data arrives from the downstream. When used in
   * conjunction with filters that emit dynamic metadata after decoding
   * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
   * CONTINUOUS to enforce RBAC policies on every message boundary.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
   * @return The enum numeric value on the wire for enforcementType.
   */
  @java.lang.Override public int getEnforcementTypeValue() {
    return enforcementType_;
  }
  /**
   * <pre>
   * RBAC enforcement strategy. By default RBAC will be enforced only once
   * when the first byte of data arrives from the downstream. When used in
   * conjunction with filters that emit dynamic metadata after decoding
   * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
   * CONTINUOUS to enforce RBAC policies on every message boundary.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
   * @return The enforcementType.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType getEnforcementType() {
    io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType result = io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType.forNumber(enforcementType_);
    return result == null ? io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (rules_ != null) {
      output.writeMessage(1, getRules());
    }
    if (shadowRules_ != null) {
      output.writeMessage(2, getShadowRules());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, statPrefix_);
    }
    if (enforcementType_ != io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType.ONE_TIME_ON_FIRST_BYTE.getNumber()) {
      output.writeEnum(4, enforcementType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shadowRulesStatPrefix_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, shadowRulesStatPrefix_);
    }
    if (matcher_ != null) {
      output.writeMessage(6, getMatcher());
    }
    if (shadowMatcher_ != null) {
      output.writeMessage(7, getShadowMatcher());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (rules_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getRules());
    }
    if (shadowRules_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getShadowRules());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, statPrefix_);
    }
    if (enforcementType_ != io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType.ONE_TIME_ON_FIRST_BYTE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, enforcementType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shadowRulesStatPrefix_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, shadowRulesStatPrefix_);
    }
    if (matcher_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getMatcher());
    }
    if (shadowMatcher_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getShadowMatcher());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC other = (io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC) obj;

    if (hasRules() != other.hasRules()) return false;
    if (hasRules()) {
      if (!getRules()
          .equals(other.getRules())) return false;
    }
    if (hasMatcher() != other.hasMatcher()) return false;
    if (hasMatcher()) {
      if (!getMatcher()
          .equals(other.getMatcher())) return false;
    }
    if (hasShadowRules() != other.hasShadowRules()) return false;
    if (hasShadowRules()) {
      if (!getShadowRules()
          .equals(other.getShadowRules())) return false;
    }
    if (hasShadowMatcher() != other.hasShadowMatcher()) return false;
    if (hasShadowMatcher()) {
      if (!getShadowMatcher()
          .equals(other.getShadowMatcher())) return false;
    }
    if (!getShadowRulesStatPrefix()
        .equals(other.getShadowRulesStatPrefix())) return false;
    if (!getStatPrefix()
        .equals(other.getStatPrefix())) return false;
    if (enforcementType_ != other.enforcementType_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRules()) {
      hash = (37 * hash) + RULES_FIELD_NUMBER;
      hash = (53 * hash) + getRules().hashCode();
    }
    if (hasMatcher()) {
      hash = (37 * hash) + MATCHER_FIELD_NUMBER;
      hash = (53 * hash) + getMatcher().hashCode();
    }
    if (hasShadowRules()) {
      hash = (37 * hash) + SHADOW_RULES_FIELD_NUMBER;
      hash = (53 * hash) + getShadowRules().hashCode();
    }
    if (hasShadowMatcher()) {
      hash = (37 * hash) + SHADOW_MATCHER_FIELD_NUMBER;
      hash = (53 * hash) + getShadowMatcher().hashCode();
    }
    hash = (37 * hash) + SHADOW_RULES_STAT_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getShadowRulesStatPrefix().hashCode();
    hash = (37 * hash) + STAT_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getStatPrefix().hashCode();
    hash = (37 * hash) + ENFORCEMENT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + enforcementType_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * RBAC network filter config.
   * Header should not be used in rules/shadow_rules in RBAC network filter as
   * this information is only available in :ref:`RBAC http filter &lt;config_http_filters_rbac&gt;`.
   * [#next-free-field: 8]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.network.rbac.v3.RBAC}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.rbac.v3.RBAC)
      io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBACOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RbacProto.internal_static_envoy_extensions_filters_network_rbac_v3_RBAC_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RbacProto.internal_static_envoy_extensions_filters_network_rbac_v3_RBAC_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.class, io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      rules_ = null;
      if (rulesBuilder_ != null) {
        rulesBuilder_.dispose();
        rulesBuilder_ = null;
      }
      matcher_ = null;
      if (matcherBuilder_ != null) {
        matcherBuilder_.dispose();
        matcherBuilder_ = null;
      }
      shadowRules_ = null;
      if (shadowRulesBuilder_ != null) {
        shadowRulesBuilder_.dispose();
        shadowRulesBuilder_ = null;
      }
      shadowMatcher_ = null;
      if (shadowMatcherBuilder_ != null) {
        shadowMatcherBuilder_.dispose();
        shadowMatcherBuilder_ = null;
      }
      shadowRulesStatPrefix_ = "";
      statPrefix_ = "";
      enforcementType_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RbacProto.internal_static_envoy_extensions_filters_network_rbac_v3_RBAC_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC build() {
      io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC buildPartial() {
      io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC result = new io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.rules_ = rulesBuilder_ == null
            ? rules_
            : rulesBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.matcher_ = matcherBuilder_ == null
            ? matcher_
            : matcherBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.shadowRules_ = shadowRulesBuilder_ == null
            ? shadowRules_
            : shadowRulesBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.shadowMatcher_ = shadowMatcherBuilder_ == null
            ? shadowMatcher_
            : shadowMatcherBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.shadowRulesStatPrefix_ = shadowRulesStatPrefix_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.statPrefix_ = statPrefix_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.enforcementType_ = enforcementType_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC other) {
      if (other == io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.getDefaultInstance()) return this;
      if (other.hasRules()) {
        mergeRules(other.getRules());
      }
      if (other.hasMatcher()) {
        mergeMatcher(other.getMatcher());
      }
      if (other.hasShadowRules()) {
        mergeShadowRules(other.getShadowRules());
      }
      if (other.hasShadowMatcher()) {
        mergeShadowMatcher(other.getShadowMatcher());
      }
      if (!other.getShadowRulesStatPrefix().isEmpty()) {
        shadowRulesStatPrefix_ = other.shadowRulesStatPrefix_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      if (!other.getStatPrefix().isEmpty()) {
        statPrefix_ = other.statPrefix_;
        bitField0_ |= 0x00000020;
        onChanged();
      }
      if (other.enforcementType_ != 0) {
        setEnforcementTypeValue(other.getEnforcementTypeValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getRulesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getShadowRulesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 18
            case 26: {
              statPrefix_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000020;
              break;
            } // case 26
            case 32: {
              enforcementType_ = input.readEnum();
              bitField0_ |= 0x00000040;
              break;
            } // case 32
            case 42: {
              shadowRulesStatPrefix_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getMatcherFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getShadowMatcherFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 58
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.config.rbac.v3.RBAC rules_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.rbac.v3.RBAC, io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder, io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder> rulesBuilder_;
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the rules field is set.
     */
    public boolean hasRules() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The rules.
     */
    public io.envoyproxy.envoy.config.rbac.v3.RBAC getRules() {
      if (rulesBuilder_ == null) {
        return rules_ == null ? io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : rules_;
      } else {
        return rulesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setRules(io.envoyproxy.envoy.config.rbac.v3.RBAC value) {
      if (rulesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rules_ = value;
      } else {
        rulesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setRules(
        io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder builderForValue) {
      if (rulesBuilder_ == null) {
        rules_ = builderForValue.build();
      } else {
        rulesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder mergeRules(io.envoyproxy.envoy.config.rbac.v3.RBAC value) {
      if (rulesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          rules_ != null &&
          rules_ != io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance()) {
          getRulesBuilder().mergeFrom(value);
        } else {
          rules_ = value;
        }
      } else {
        rulesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder clearRules() {
      bitField0_ = (bitField0_ & ~0x00000001);
      rules_ = null;
      if (rulesBuilder_ != null) {
        rulesBuilder_.dispose();
        rulesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder getRulesBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getRulesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder getRulesOrBuilder() {
      if (rulesBuilder_ != null) {
        return rulesBuilder_.getMessageOrBuilder();
      } else {
        return rules_ == null ?
            io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : rules_;
      }
    }
    /**
     * <pre>
     * Specify the RBAC rules to be applied globally.
     * If absent, no enforcing RBAC policy will be applied.
     * If present and empty, DENY.
     * If both rules and matcher are configured, rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC rules = 1 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.rbac.v3.RBAC, io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder, io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder> 
        getRulesFieldBuilder() {
      if (rulesBuilder_ == null) {
        rulesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.rbac.v3.RBAC, io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder, io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder>(
                getRules(),
                getParentForChildren(),
                isClean());
        rules_ = null;
      }
      return rulesBuilder_;
    }

    private com.github.xds.type.matcher.v3.Matcher matcher_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> matcherBuilder_;
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the matcher field is set.
     */
    public boolean hasMatcher() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The matcher.
     */
    public com.github.xds.type.matcher.v3.Matcher getMatcher() {
      if (matcherBuilder_ == null) {
        return matcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : matcher_;
      } else {
        return matcherBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (matcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        matcher_ = value;
      } else {
        matcherBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setMatcher(
        com.github.xds.type.matcher.v3.Matcher.Builder builderForValue) {
      if (matcherBuilder_ == null) {
        matcher_ = builderForValue.build();
      } else {
        matcherBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder mergeMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (matcherBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          matcher_ != null &&
          matcher_ != com.github.xds.type.matcher.v3.Matcher.getDefaultInstance()) {
          getMatcherBuilder().mergeFrom(value);
        } else {
          matcher_ = value;
        }
      } else {
        matcherBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder clearMatcher() {
      bitField0_ = (bitField0_ & ~0x00000002);
      matcher_ = null;
      if (matcherBuilder_ != null) {
        matcherBuilder_.dispose();
        matcherBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.Matcher.Builder getMatcherBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMatcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.MatcherOrBuilder getMatcherOrBuilder() {
      if (matcherBuilder_ != null) {
        return matcherBuilder_.getMessageOrBuilder();
      } else {
        return matcher_ == null ?
            com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : matcher_;
      }
    }
    /**
     * <pre>
     * The match tree to use when resolving RBAC action for incoming connections. Connections do
     * not match any matcher will be denied.
     * If absent, no enforcing RBAC matcher will be applied.
     * If present and empty, deny all connections.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 6 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> 
        getMatcherFieldBuilder() {
      if (matcherBuilder_ == null) {
        matcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder>(
                getMatcher(),
                getParentForChildren(),
                isClean());
        matcher_ = null;
      }
      return matcherBuilder_;
    }

    private io.envoyproxy.envoy.config.rbac.v3.RBAC shadowRules_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.rbac.v3.RBAC, io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder, io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder> shadowRulesBuilder_;
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the shadowRules field is set.
     */
    public boolean hasShadowRules() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The shadowRules.
     */
    public io.envoyproxy.envoy.config.rbac.v3.RBAC getShadowRules() {
      if (shadowRulesBuilder_ == null) {
        return shadowRules_ == null ? io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : shadowRules_;
      } else {
        return shadowRulesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setShadowRules(io.envoyproxy.envoy.config.rbac.v3.RBAC value) {
      if (shadowRulesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shadowRules_ = value;
      } else {
        shadowRulesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setShadowRules(
        io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder builderForValue) {
      if (shadowRulesBuilder_ == null) {
        shadowRules_ = builderForValue.build();
      } else {
        shadowRulesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder mergeShadowRules(io.envoyproxy.envoy.config.rbac.v3.RBAC value) {
      if (shadowRulesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          shadowRules_ != null &&
          shadowRules_ != io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance()) {
          getShadowRulesBuilder().mergeFrom(value);
        } else {
          shadowRules_ = value;
        }
      } else {
        shadowRulesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder clearShadowRules() {
      bitField0_ = (bitField0_ & ~0x00000004);
      shadowRules_ = null;
      if (shadowRulesBuilder_ != null) {
        shadowRulesBuilder_.dispose();
        shadowRulesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder getShadowRulesBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getShadowRulesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder getShadowRulesOrBuilder() {
      if (shadowRulesBuilder_ != null) {
        return shadowRulesBuilder_.getMessageOrBuilder();
      } else {
        return shadowRules_ == null ?
            io.envoyproxy.envoy.config.rbac.v3.RBAC.getDefaultInstance() : shadowRules_;
      }
    }
    /**
     * <pre>
     * Shadow rules are not enforced by the filter but will emit stats and logs
     * and can be used for rule testing.
     * If absent, no shadow RBAC policy will be applied.
     * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
     * </pre>
     *
     * <code>.envoy.config.rbac.v3.RBAC shadow_rules = 2 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.rbac.v3.RBAC, io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder, io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder> 
        getShadowRulesFieldBuilder() {
      if (shadowRulesBuilder_ == null) {
        shadowRulesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.rbac.v3.RBAC, io.envoyproxy.envoy.config.rbac.v3.RBAC.Builder, io.envoyproxy.envoy.config.rbac.v3.RBACOrBuilder>(
                getShadowRules(),
                getParentForChildren(),
                isClean());
        shadowRules_ = null;
      }
      return shadowRulesBuilder_;
    }

    private com.github.xds.type.matcher.v3.Matcher shadowMatcher_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> shadowMatcherBuilder_;
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the shadowMatcher field is set.
     */
    public boolean hasShadowMatcher() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The shadowMatcher.
     */
    public com.github.xds.type.matcher.v3.Matcher getShadowMatcher() {
      if (shadowMatcherBuilder_ == null) {
        return shadowMatcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : shadowMatcher_;
      } else {
        return shadowMatcherBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setShadowMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (shadowMatcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shadowMatcher_ = value;
      } else {
        shadowMatcherBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder setShadowMatcher(
        com.github.xds.type.matcher.v3.Matcher.Builder builderForValue) {
      if (shadowMatcherBuilder_ == null) {
        shadowMatcher_ = builderForValue.build();
      } else {
        shadowMatcherBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder mergeShadowMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (shadowMatcherBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          shadowMatcher_ != null &&
          shadowMatcher_ != com.github.xds.type.matcher.v3.Matcher.getDefaultInstance()) {
          getShadowMatcherBuilder().mergeFrom(value);
        } else {
          shadowMatcher_ = value;
        }
      } else {
        shadowMatcherBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public Builder clearShadowMatcher() {
      bitField0_ = (bitField0_ & ~0x00000008);
      shadowMatcher_ = null;
      if (shadowMatcherBuilder_ != null) {
        shadowMatcherBuilder_.dispose();
        shadowMatcherBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.Matcher.Builder getShadowMatcherBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getShadowMatcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.MatcherOrBuilder getShadowMatcherOrBuilder() {
      if (shadowMatcherBuilder_ != null) {
        return shadowMatcherBuilder_.getMessageOrBuilder();
      } else {
        return shadowMatcher_ == null ?
            com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : shadowMatcher_;
      }
    }
    /**
     * <pre>
     * The match tree to use for emitting stats and logs which can be used for rule testing for
     * incoming connections.
     * If absent, no shadow matcher will be applied.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher shadow_matcher = 7 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> 
        getShadowMatcherFieldBuilder() {
      if (shadowMatcherBuilder_ == null) {
        shadowMatcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder>(
                getShadowMatcher(),
                getParentForChildren(),
                isClean());
        shadowMatcher_ = null;
      }
      return shadowMatcherBuilder_;
    }

    private java.lang.Object shadowRulesStatPrefix_ = "";
    /**
     * <pre>
     * If specified, shadow rules will emit stats with the given prefix.
     * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
     * shadow rules.
     * </pre>
     *
     * <code>string shadow_rules_stat_prefix = 5;</code>
     * @return The shadowRulesStatPrefix.
     */
    public java.lang.String getShadowRulesStatPrefix() {
      java.lang.Object ref = shadowRulesStatPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shadowRulesStatPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If specified, shadow rules will emit stats with the given prefix.
     * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
     * shadow rules.
     * </pre>
     *
     * <code>string shadow_rules_stat_prefix = 5;</code>
     * @return The bytes for shadowRulesStatPrefix.
     */
    public com.google.protobuf.ByteString
        getShadowRulesStatPrefixBytes() {
      java.lang.Object ref = shadowRulesStatPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shadowRulesStatPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If specified, shadow rules will emit stats with the given prefix.
     * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
     * shadow rules.
     * </pre>
     *
     * <code>string shadow_rules_stat_prefix = 5;</code>
     * @param value The shadowRulesStatPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setShadowRulesStatPrefix(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      shadowRulesStatPrefix_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, shadow rules will emit stats with the given prefix.
     * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
     * shadow rules.
     * </pre>
     *
     * <code>string shadow_rules_stat_prefix = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearShadowRulesStatPrefix() {
      shadowRulesStatPrefix_ = getDefaultInstance().getShadowRulesStatPrefix();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, shadow rules will emit stats with the given prefix.
     * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
     * shadow rules.
     * </pre>
     *
     * <code>string shadow_rules_stat_prefix = 5;</code>
     * @param value The bytes for shadowRulesStatPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setShadowRulesStatPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      shadowRulesStatPrefix_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private java.lang.Object statPrefix_ = "";
    /**
     * <pre>
     * The prefix to use when emitting statistics.
     * </pre>
     *
     * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
     * @return The statPrefix.
     */
    public java.lang.String getStatPrefix() {
      java.lang.Object ref = statPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The prefix to use when emitting statistics.
     * </pre>
     *
     * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
     * @return The bytes for statPrefix.
     */
    public com.google.protobuf.ByteString
        getStatPrefixBytes() {
      java.lang.Object ref = statPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The prefix to use when emitting statistics.
     * </pre>
     *
     * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
     * @param value The statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefix(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      statPrefix_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prefix to use when emitting statistics.
     * </pre>
     *
     * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStatPrefix() {
      statPrefix_ = getDefaultInstance().getStatPrefix();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prefix to use when emitting statistics.
     * </pre>
     *
     * <code>string stat_prefix = 3 [(.validate.rules) = { ... }</code>
     * @param value The bytes for statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      statPrefix_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }

    private int enforcementType_ = 0;
    /**
     * <pre>
     * RBAC enforcement strategy. By default RBAC will be enforced only once
     * when the first byte of data arrives from the downstream. When used in
     * conjunction with filters that emit dynamic metadata after decoding
     * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
     * CONTINUOUS to enforce RBAC policies on every message boundary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
     * @return The enum numeric value on the wire for enforcementType.
     */
    @java.lang.Override public int getEnforcementTypeValue() {
      return enforcementType_;
    }
    /**
     * <pre>
     * RBAC enforcement strategy. By default RBAC will be enforced only once
     * when the first byte of data arrives from the downstream. When used in
     * conjunction with filters that emit dynamic metadata after decoding
     * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
     * CONTINUOUS to enforce RBAC policies on every message boundary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
     * @param value The enum numeric value on the wire for enforcementType to set.
     * @return This builder for chaining.
     */
    public Builder setEnforcementTypeValue(int value) {
      enforcementType_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RBAC enforcement strategy. By default RBAC will be enforced only once
     * when the first byte of data arrives from the downstream. When used in
     * conjunction with filters that emit dynamic metadata after decoding
     * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
     * CONTINUOUS to enforce RBAC policies on every message boundary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
     * @return The enforcementType.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType getEnforcementType() {
      io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType result = io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType.forNumber(enforcementType_);
      return result == null ? io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * RBAC enforcement strategy. By default RBAC will be enforced only once
     * when the first byte of data arrives from the downstream. When used in
     * conjunction with filters that emit dynamic metadata after decoding
     * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
     * CONTINUOUS to enforce RBAC policies on every message boundary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
     * @param value The enforcementType to set.
     * @return This builder for chaining.
     */
    public Builder setEnforcementType(io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000040;
      enforcementType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * RBAC enforcement strategy. By default RBAC will be enforced only once
     * when the first byte of data arrives from the downstream. When used in
     * conjunction with filters that emit dynamic metadata after decoding
     * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
     * CONTINUOUS to enforce RBAC policies on every message boundary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.rbac.v3.RBAC.EnforcementType enforcement_type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnforcementType() {
      bitField0_ = (bitField0_ & ~0x00000040);
      enforcementType_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.rbac.v3.RBAC)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.rbac.v3.RBAC)
  private static final io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC();
  }

  public static io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RBAC>
      PARSER = new com.google.protobuf.AbstractParser<RBAC>() {
    @java.lang.Override
    public RBAC parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<RBAC> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RBAC> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.rbac.v3.RBAC getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

