// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/meta_protocol_proxy/v3/meta_protocol_proxy.proto

package io.envoyproxy.envoy.extensions.filters.network.meta_protocol_proxy.v3;

public interface MetaRdsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.meta_protocol_proxy.v3.MetaRds)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Configuration source specifier for RDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource config_source = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the configSource field is set.
   */
  boolean hasConfigSource();
  /**
   * <pre>
   * Configuration source specifier for RDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource config_source = 1 [(.validate.rules) = { ... }</code>
   * @return The configSource.
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSource getConfigSource();
  /**
   * <pre>
   * Configuration source specifier for RDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource config_source = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSourceOrBuilder getConfigSourceOrBuilder();

  /**
   * <pre>
   * The name of the route configuration. This name will be passed to the RDS API. This allows an
   * Envoy configuration with multiple meta protocol proxies to use different route configurations.
   * </pre>
   *
   * <code>string route_config_name = 2 [(.validate.rules) = { ... }</code>
   * @return The routeConfigName.
   */
  java.lang.String getRouteConfigName();
  /**
   * <pre>
   * The name of the route configuration. This name will be passed to the RDS API. This allows an
   * Envoy configuration with multiple meta protocol proxies to use different route configurations.
   * </pre>
   *
   * <code>string route_config_name = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for routeConfigName.
   */
  com.google.protobuf.ByteString
      getRouteConfigNameBytes();
}
