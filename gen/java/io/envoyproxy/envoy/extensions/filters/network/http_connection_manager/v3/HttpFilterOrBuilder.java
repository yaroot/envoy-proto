// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto

package io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3;

public interface HttpFilterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name of the filter configuration. It also serves as a resource name in ExtensionConfigDS.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the filter configuration. It also serves as a resource name in ExtensionConfigDS.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Filter specific configuration which depends on the filter being instantiated. See the supported
   * filters for further documentation.
   * To support configuring a :ref:`match tree &lt;arch_overview_matching_api&gt;`, use an
   * :ref:`ExtensionWithMatcher &lt;envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher&gt;`
   * with the desired HTTP filter.
   * [#extension-category: envoy.filters.http]
   * </pre>
   *
   * <code>.google.protobuf.Any typed_config = 4;</code>
   * @return Whether the typedConfig field is set.
   */
  boolean hasTypedConfig();
  /**
   * <pre>
   * Filter specific configuration which depends on the filter being instantiated. See the supported
   * filters for further documentation.
   * To support configuring a :ref:`match tree &lt;arch_overview_matching_api&gt;`, use an
   * :ref:`ExtensionWithMatcher &lt;envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher&gt;`
   * with the desired HTTP filter.
   * [#extension-category: envoy.filters.http]
   * </pre>
   *
   * <code>.google.protobuf.Any typed_config = 4;</code>
   * @return The typedConfig.
   */
  com.google.protobuf.Any getTypedConfig();
  /**
   * <pre>
   * Filter specific configuration which depends on the filter being instantiated. See the supported
   * filters for further documentation.
   * To support configuring a :ref:`match tree &lt;arch_overview_matching_api&gt;`, use an
   * :ref:`ExtensionWithMatcher &lt;envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher&gt;`
   * with the desired HTTP filter.
   * [#extension-category: envoy.filters.http]
   * </pre>
   *
   * <code>.google.protobuf.Any typed_config = 4;</code>
   */
  com.google.protobuf.AnyOrBuilder getTypedConfigOrBuilder();

  /**
   * <pre>
   * Configuration source specifier for an extension configuration discovery service.
   * In case of a failure and without the default configuration, the HTTP listener responds with code 500.
   * Extension configs delivered through this mechanism are not expected to require warming (see https://github.com/envoyproxy/envoy/issues/12061).
   * To support configuring a :ref:`match tree &lt;arch_overview_matching_api&gt;`, use an
   * :ref:`ExtensionWithMatcher &lt;envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher&gt;`
   * with the desired HTTP filter. This works for both the default filter configuration as well
   * as for filters provided via the API.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ExtensionConfigSource config_discovery = 5;</code>
   * @return Whether the configDiscovery field is set.
   */
  boolean hasConfigDiscovery();
  /**
   * <pre>
   * Configuration source specifier for an extension configuration discovery service.
   * In case of a failure and without the default configuration, the HTTP listener responds with code 500.
   * Extension configs delivered through this mechanism are not expected to require warming (see https://github.com/envoyproxy/envoy/issues/12061).
   * To support configuring a :ref:`match tree &lt;arch_overview_matching_api&gt;`, use an
   * :ref:`ExtensionWithMatcher &lt;envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher&gt;`
   * with the desired HTTP filter. This works for both the default filter configuration as well
   * as for filters provided via the API.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ExtensionConfigSource config_discovery = 5;</code>
   * @return The configDiscovery.
   */
  io.envoyproxy.envoy.config.core.v3.ExtensionConfigSource getConfigDiscovery();
  /**
   * <pre>
   * Configuration source specifier for an extension configuration discovery service.
   * In case of a failure and without the default configuration, the HTTP listener responds with code 500.
   * Extension configs delivered through this mechanism are not expected to require warming (see https://github.com/envoyproxy/envoy/issues/12061).
   * To support configuring a :ref:`match tree &lt;arch_overview_matching_api&gt;`, use an
   * :ref:`ExtensionWithMatcher &lt;envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher&gt;`
   * with the desired HTTP filter. This works for both the default filter configuration as well
   * as for filters provided via the API.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ExtensionConfigSource config_discovery = 5;</code>
   */
  io.envoyproxy.envoy.config.core.v3.ExtensionConfigSourceOrBuilder getConfigDiscoveryOrBuilder();

  /**
   * <pre>
   * If true, clients that do not support this filter may ignore the
   * filter but otherwise accept the config.
   * Otherwise, clients that do not support this filter must reject the config.
   * This is also same with typed per filter config.
   * </pre>
   *
   * <code>bool is_optional = 6;</code>
   * @return The isOptional.
   */
  boolean getIsOptional();

  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.ConfigTypeCase getConfigTypeCase();
}
