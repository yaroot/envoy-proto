// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto

package io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3;

public interface DnsFilterConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The stat prefix used when emitting DNS filter statistics
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * The stat prefix used when emitting DNS filter statistics
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();

  /**
   * <pre>
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
   * @return Whether the serverConfig field is set.
   */
  boolean hasServerConfig();
  /**
   * <pre>
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
   * @return The serverConfig.
   */
  io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig getServerConfig();
  /**
   * <pre>
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
   */
  io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder getServerConfigOrBuilder();

  /**
   * <pre>
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
   * @return Whether the clientConfig field is set.
   */
  boolean hasClientConfig();
  /**
   * <pre>
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
   * @return The clientConfig.
   */
  io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig getClientConfig();
  /**
   * <pre>
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
   */
  io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder getClientConfigOrBuilder();
}
