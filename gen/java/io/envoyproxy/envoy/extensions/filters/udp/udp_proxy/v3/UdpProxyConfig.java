// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto

package io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3;

/**
 * <pre>
 * Configuration for the UDP proxy filter.
 * [#next-free-field: 10]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig}
 */
public final class UdpProxyConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)
    UdpProxyConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UdpProxyConfig.newBuilder() to construct.
  private UdpProxyConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UdpProxyConfig() {
    statPrefix_ = "";
    hashPolicies_ = java.util.Collections.emptyList();
    accessLog_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new UdpProxyConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private UdpProxyConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            statPrefix_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            routeSpecifierCase_ = 2;
            routeSpecifier_ = s;
            break;
          }
          case 26: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (idleTimeout_ != null) {
              subBuilder = idleTimeout_.toBuilder();
            }
            idleTimeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(idleTimeout_);
              idleTimeout_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            useOriginalSrcIp_ = input.readBool();
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              hashPolicies_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy>();
              mutable_bitField0_ |= 0x00000001;
            }
            hashPolicies_.add(
                input.readMessage(io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.parser(), extensionRegistry));
            break;
          }
          case 50: {
            io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.Builder subBuilder = null;
            if (upstreamSocketConfig_ != null) {
              subBuilder = upstreamSocketConfig_.toBuilder();
            }
            upstreamSocketConfig_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(upstreamSocketConfig_);
              upstreamSocketConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 56: {

            usePerPacketLoadBalancing_ = input.readBool();
            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              accessLog_ = new java.util.ArrayList<io.envoyproxy.envoy.config.accesslog.v3.AccessLog>();
              mutable_bitField0_ |= 0x00000002;
            }
            accessLog_.add(
                input.readMessage(io.envoyproxy.envoy.config.accesslog.v3.AccessLog.parser(), extensionRegistry));
            break;
          }
          case 74: {
            com.github.xds.type.matcher.v3.Matcher.Builder subBuilder = null;
            if (routeSpecifierCase_ == 9) {
              subBuilder = ((com.github.xds.type.matcher.v3.Matcher) routeSpecifier_).toBuilder();
            }
            routeSpecifier_ =
                input.readMessage(com.github.xds.type.matcher.v3.Matcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.github.xds.type.matcher.v3.Matcher) routeSpecifier_);
              routeSpecifier_ = subBuilder.buildPartial();
            }
            routeSpecifierCase_ = 9;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        hashPolicies_ = java.util.Collections.unmodifiableList(hashPolicies_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        accessLog_ = java.util.Collections.unmodifiableList(accessLog_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.class, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.Builder.class);
  }

  public interface HashPolicyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
     * </pre>
     *
     * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the sourceIp field is set.
     */
    boolean hasSourceIp();
    /**
     * <pre>
     * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
     * </pre>
     *
     * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
     * @return The sourceIp.
     */
    boolean getSourceIp();

    /**
     * <pre>
     * A given key will be used to compute the hash used by hash-based load balancing algorithms.
     * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
     * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
     * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
     * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the key field is set.
     */
    boolean hasKey();
    /**
     * <pre>
     * A given key will be used to compute the hash used by hash-based load balancing algorithms.
     * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
     * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
     * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
     * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <pre>
     * A given key will be used to compute the hash used by hash-based load balancing algorithms.
     * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
     * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
     * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
     * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.PolicySpecifierCase getPolicySpecifierCase();
  }
  /**
   * <pre>
   * Specifies the UDP hash policy.
   * The packets can be routed by hash policy.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy}
   */
  public static final class HashPolicy extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)
      HashPolicyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HashPolicy.newBuilder() to construct.
    private HashPolicy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HashPolicy() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HashPolicy();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HashPolicy(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              policySpecifier_ = input.readBool();
              policySpecifierCase_ = 1;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              policySpecifierCase_ = 2;
              policySpecifier_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_HashPolicy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_HashPolicy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.class, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder.class);
    }

    private int policySpecifierCase_ = 0;
    private java.lang.Object policySpecifier_;
    public enum PolicySpecifierCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      SOURCE_IP(1),
      KEY(2),
      POLICYSPECIFIER_NOT_SET(0);
      private final int value;
      private PolicySpecifierCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PolicySpecifierCase valueOf(int value) {
        return forNumber(value);
      }

      public static PolicySpecifierCase forNumber(int value) {
        switch (value) {
          case 1: return SOURCE_IP;
          case 2: return KEY;
          case 0: return POLICYSPECIFIER_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public PolicySpecifierCase
    getPolicySpecifierCase() {
      return PolicySpecifierCase.forNumber(
          policySpecifierCase_);
    }

    public static final int SOURCE_IP_FIELD_NUMBER = 1;
    /**
     * <pre>
     * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
     * </pre>
     *
     * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the sourceIp field is set.
     */
    @java.lang.Override
    public boolean hasSourceIp() {
      return policySpecifierCase_ == 1;
    }
    /**
     * <pre>
     * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
     * </pre>
     *
     * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
     * @return The sourceIp.
     */
    @java.lang.Override
    public boolean getSourceIp() {
      if (policySpecifierCase_ == 1) {
        return (java.lang.Boolean) policySpecifier_;
      }
      return false;
    }

    public static final int KEY_FIELD_NUMBER = 2;
    /**
     * <pre>
     * A given key will be used to compute the hash used by hash-based load balancing algorithms.
     * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
     * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
     * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
     * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the key field is set.
     */
    public boolean hasKey() {
      return policySpecifierCase_ == 2;
    }
    /**
     * <pre>
     * A given key will be used to compute the hash used by hash-based load balancing algorithms.
     * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
     * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
     * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
     * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     * @return The key.
     */
    public java.lang.String getKey() {
      java.lang.Object ref = "";
      if (policySpecifierCase_ == 2) {
        ref = policySpecifier_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (policySpecifierCase_ == 2) {
          policySpecifier_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * A given key will be used to compute the hash used by hash-based load balancing algorithms.
     * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
     * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
     * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
     * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     * @return The bytes for key.
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = "";
      if (policySpecifierCase_ == 2) {
        ref = policySpecifier_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (policySpecifierCase_ == 2) {
          policySpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (policySpecifierCase_ == 1) {
        output.writeBool(
            1, (boolean)((java.lang.Boolean) policySpecifier_));
      }
      if (policySpecifierCase_ == 2) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, policySpecifier_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (policySpecifierCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              1, (boolean)((java.lang.Boolean) policySpecifier_));
      }
      if (policySpecifierCase_ == 2) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, policySpecifier_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy other = (io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy) obj;

      if (!getPolicySpecifierCase().equals(other.getPolicySpecifierCase())) return false;
      switch (policySpecifierCase_) {
        case 1:
          if (getSourceIp()
              != other.getSourceIp()) return false;
          break;
        case 2:
          if (!getKey()
              .equals(other.getKey())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (policySpecifierCase_) {
        case 1:
          hash = (37 * hash) + SOURCE_IP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSourceIp());
          break;
        case 2:
          hash = (37 * hash) + KEY_FIELD_NUMBER;
          hash = (53 * hash) + getKey().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies the UDP hash policy.
     * The packets can be routed by hash policy.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_HashPolicy_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_HashPolicy_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.class, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        policySpecifierCase_ = 0;
        policySpecifier_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_HashPolicy_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy build() {
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy buildPartial() {
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy result = new io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy(this);
        if (policySpecifierCase_ == 1) {
          result.policySpecifier_ = policySpecifier_;
        }
        if (policySpecifierCase_ == 2) {
          result.policySpecifier_ = policySpecifier_;
        }
        result.policySpecifierCase_ = policySpecifierCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy other) {
        if (other == io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.getDefaultInstance()) return this;
        switch (other.getPolicySpecifierCase()) {
          case SOURCE_IP: {
            setSourceIp(other.getSourceIp());
            break;
          }
          case KEY: {
            policySpecifierCase_ = 2;
            policySpecifier_ = other.policySpecifier_;
            onChanged();
            break;
          }
          case POLICYSPECIFIER_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int policySpecifierCase_ = 0;
      private java.lang.Object policySpecifier_;
      public PolicySpecifierCase
          getPolicySpecifierCase() {
        return PolicySpecifierCase.forNumber(
            policySpecifierCase_);
      }

      public Builder clearPolicySpecifier() {
        policySpecifierCase_ = 0;
        policySpecifier_ = null;
        onChanged();
        return this;
      }


      /**
       * <pre>
       * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
       * </pre>
       *
       * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
       * @return Whether the sourceIp field is set.
       */
      public boolean hasSourceIp() {
        return policySpecifierCase_ == 1;
      }
      /**
       * <pre>
       * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
       * </pre>
       *
       * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
       * @return The sourceIp.
       */
      public boolean getSourceIp() {
        if (policySpecifierCase_ == 1) {
          return (java.lang.Boolean) policySpecifier_;
        }
        return false;
      }
      /**
       * <pre>
       * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
       * </pre>
       *
       * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
       * @param value The sourceIp to set.
       * @return This builder for chaining.
       */
      public Builder setSourceIp(boolean value) {
        policySpecifierCase_ = 1;
        policySpecifier_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The source IP will be used to compute the hash used by hash-based load balancing algorithms.
       * </pre>
       *
       * <code>bool source_ip = 1 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearSourceIp() {
        if (policySpecifierCase_ == 1) {
          policySpecifierCase_ = 0;
          policySpecifier_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * A given key will be used to compute the hash used by hash-based load balancing algorithms.
       * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
       * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
       * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
       * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
       * </pre>
       *
       * <code>string key = 2 [(.validate.rules) = { ... }</code>
       * @return Whether the key field is set.
       */
      @java.lang.Override
      public boolean hasKey() {
        return policySpecifierCase_ == 2;
      }
      /**
       * <pre>
       * A given key will be used to compute the hash used by hash-based load balancing algorithms.
       * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
       * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
       * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
       * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
       * </pre>
       *
       * <code>string key = 2 [(.validate.rules) = { ... }</code>
       * @return The key.
       */
      @java.lang.Override
      public java.lang.String getKey() {
        java.lang.Object ref = "";
        if (policySpecifierCase_ == 2) {
          ref = policySpecifier_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (policySpecifierCase_ == 2) {
            policySpecifier_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A given key will be used to compute the hash used by hash-based load balancing algorithms.
       * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
       * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
       * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
       * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
       * </pre>
       *
       * <code>string key = 2 [(.validate.rules) = { ... }</code>
       * @return The bytes for key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = "";
        if (policySpecifierCase_ == 2) {
          ref = policySpecifier_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (policySpecifierCase_ == 2) {
            policySpecifier_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A given key will be used to compute the hash used by hash-based load balancing algorithms.
       * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
       * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
       * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
       * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
       * </pre>
       *
       * <code>string key = 2 [(.validate.rules) = { ... }</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  policySpecifierCase_ = 2;
        policySpecifier_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A given key will be used to compute the hash used by hash-based load balancing algorithms.
       * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
       * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
       * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
       * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
       * </pre>
       *
       * <code>string key = 2 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        if (policySpecifierCase_ == 2) {
          policySpecifierCase_ = 0;
          policySpecifier_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * A given key will be used to compute the hash used by hash-based load balancing algorithms.
       * In certain cases there is a need to direct different UDP streams jointly towards the selected set of endpoints.
       * A possible use-case is VoIP telephony, where media (RTP) and its corresponding control (RTCP) belong to the same logical session,
       * although they travel in separate streams. To ensure that these pair of streams are load-balanced on session level
       * (instead of individual stream level), dynamically created listeners can use the same hash key for each stream in the session.
       * </pre>
       *
       * <code>string key = 2 [(.validate.rules) = { ... }</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        policySpecifierCase_ = 2;
        policySpecifier_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy)
    private static final io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy();
    }

    public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HashPolicy>
        PARSER = new com.google.protobuf.AbstractParser<HashPolicy>() {
      @java.lang.Override
      public HashPolicy parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HashPolicy(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HashPolicy> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HashPolicy> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int routeSpecifierCase_ = 0;
  private java.lang.Object routeSpecifier_;
  public enum RouteSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    @java.lang.Deprecated CLUSTER(2),
    MATCHER(9),
    ROUTESPECIFIER_NOT_SET(0);
    private final int value;
    private RouteSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RouteSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static RouteSpecifierCase forNumber(int value) {
      switch (value) {
        case 2: return CLUSTER;
        case 9: return MATCHER;
        case 0: return ROUTESPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public RouteSpecifierCase
  getRouteSpecifierCase() {
    return RouteSpecifierCase.forNumber(
        routeSpecifierCase_);
  }

  public static final int STAT_PREFIX_FIELD_NUMBER = 1;
  private volatile java.lang.Object statPrefix_;
  /**
   * <pre>
   * The stat prefix used when emitting UDP proxy filter stats.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  @java.lang.Override
  public java.lang.String getStatPrefix() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      statPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The stat prefix used when emitting UDP proxy filter stats.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStatPrefixBytes() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      statPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CLUSTER_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The upstream cluster to connect to.
   * This field is deprecated in favor of
   * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
   * </pre>
   *
   * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
   * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
   *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
   * @return Whether the cluster field is set.
   */
  @java.lang.Deprecated public boolean hasCluster() {
    return routeSpecifierCase_ == 2;
  }
  /**
   * <pre>
   * The upstream cluster to connect to.
   * This field is deprecated in favor of
   * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
   * </pre>
   *
   * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
   * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
   *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
   * @return The cluster.
   */
  @java.lang.Deprecated public java.lang.String getCluster() {
    java.lang.Object ref = "";
    if (routeSpecifierCase_ == 2) {
      ref = routeSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (routeSpecifierCase_ == 2) {
        routeSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The upstream cluster to connect to.
   * This field is deprecated in favor of
   * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
   * </pre>
   *
   * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
   * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
   *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
   * @return The bytes for cluster.
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getClusterBytes() {
    java.lang.Object ref = "";
    if (routeSpecifierCase_ == 2) {
      ref = routeSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (routeSpecifierCase_ == 2) {
        routeSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MATCHER_FIELD_NUMBER = 9;
  /**
   * <pre>
   * The match tree to use when resolving route actions for incoming requests.
   * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
   * @return Whether the matcher field is set.
   */
  @java.lang.Override
  public boolean hasMatcher() {
    return routeSpecifierCase_ == 9;
  }
  /**
   * <pre>
   * The match tree to use when resolving route actions for incoming requests.
   * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
   * @return The matcher.
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.Matcher getMatcher() {
    if (routeSpecifierCase_ == 9) {
       return (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_;
    }
    return com.github.xds.type.matcher.v3.Matcher.getDefaultInstance();
  }
  /**
   * <pre>
   * The match tree to use when resolving route actions for incoming requests.
   * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.MatcherOrBuilder getMatcherOrBuilder() {
    if (routeSpecifierCase_ == 9) {
       return (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_;
    }
    return com.github.xds.type.matcher.v3.Matcher.getDefaultInstance();
  }

  public static final int IDLE_TIMEOUT_FIELD_NUMBER = 3;
  private com.google.protobuf.Duration idleTimeout_;
  /**
   * <pre>
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 3;</code>
   * @return Whether the idleTimeout field is set.
   */
  @java.lang.Override
  public boolean hasIdleTimeout() {
    return idleTimeout_ != null;
  }
  /**
   * <pre>
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 3;</code>
   * @return The idleTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getIdleTimeout() {
    return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
  }
  /**
   * <pre>
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder() {
    return getIdleTimeout();
  }

  public static final int USE_ORIGINAL_SRC_IP_FIELD_NUMBER = 4;
  private boolean useOriginalSrcIp_;
  /**
   * <pre>
   * Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.
   * This option requires Envoy to be run with the ``CAP_NET_ADMIN`` capability on Linux.
   * And the IPv6 stack must be enabled on Linux kernel.
   * This option does not preserve the remote downstream port.
   * If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.
   * This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts
   * will send the packets with the remote downstream IP address as the destination. All packets will be routed
   * to the remote downstream directly if there are route rules on the upstream host side.
   * There are two options to return the packets back to the remote downstream.
   * The first one is to use DSR (Direct Server Return).
   * The other one is to configure routing rules on the upstream hosts to forward
   * all packets back to Envoy and configure iptables rules on the host running Envoy to
   * forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.
   * If the platform does not support this option, Envoy will raise a configuration error.
   * </pre>
   *
   * <code>bool use_original_src_ip = 4;</code>
   * @return The useOriginalSrcIp.
   */
  @java.lang.Override
  public boolean getUseOriginalSrcIp() {
    return useOriginalSrcIp_;
  }

  public static final int HASH_POLICIES_FIELD_NUMBER = 5;
  private java.util.List<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy> hashPolicies_;
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy> getHashPoliciesList() {
    return hashPolicies_;
  }
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder> 
      getHashPoliciesOrBuilderList() {
    return hashPolicies_;
  }
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public int getHashPoliciesCount() {
    return hashPolicies_.size();
  }
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy getHashPolicies(int index) {
    return hashPolicies_.get(index);
  }
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder getHashPoliciesOrBuilder(
      int index) {
    return hashPolicies_.get(index);
  }

  public static final int UPSTREAM_SOCKET_CONFIG_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.core.v3.UdpSocketConfig upstreamSocketConfig_;
  /**
   * <pre>
   * UDP socket configuration for upstream sockets. The default for
   * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
   * sockets as the assumption is datagrams will be received from a single source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
   * @return Whether the upstreamSocketConfig field is set.
   */
  @java.lang.Override
  public boolean hasUpstreamSocketConfig() {
    return upstreamSocketConfig_ != null;
  }
  /**
   * <pre>
   * UDP socket configuration for upstream sockets. The default for
   * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
   * sockets as the assumption is datagrams will be received from a single source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
   * @return The upstreamSocketConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.UdpSocketConfig getUpstreamSocketConfig() {
    return upstreamSocketConfig_ == null ? io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.getDefaultInstance() : upstreamSocketConfig_;
  }
  /**
   * <pre>
   * UDP socket configuration for upstream sockets. The default for
   * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
   * sockets as the assumption is datagrams will be received from a single source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.UdpSocketConfigOrBuilder getUpstreamSocketConfigOrBuilder() {
    return getUpstreamSocketConfig();
  }

  public static final int USE_PER_PACKET_LOAD_BALANCING_FIELD_NUMBER = 7;
  private boolean usePerPacketLoadBalancing_;
  /**
   * <pre>
   * Perform per packet load balancing (upstream host selection) on each received data chunk.
   * The default if not specified is false, that means each data chunk is forwarded
   * to upstream host selected on first chunk receival for that "session" (identified by source IP/port and local IP/port).
   * </pre>
   *
   * <code>bool use_per_packet_load_balancing = 7;</code>
   * @return The usePerPacketLoadBalancing.
   */
  @java.lang.Override
  public boolean getUsePerPacketLoadBalancing() {
    return usePerPacketLoadBalancing_;
  }

  public static final int ACCESS_LOG_FIELD_NUMBER = 8;
  private java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> accessLog_;
  /**
   * <pre>
   * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> getAccessLogList() {
    return accessLog_;
  }
  /**
   * <pre>
   * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
      getAccessLogOrBuilderList() {
    return accessLog_;
  }
  /**
   * <pre>
   * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
   */
  @java.lang.Override
  public int getAccessLogCount() {
    return accessLog_.size();
  }
  /**
   * <pre>
   * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.accesslog.v3.AccessLog getAccessLog(int index) {
    return accessLog_.get(index);
  }
  /**
   * <pre>
   * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder getAccessLogOrBuilder(
      int index) {
    return accessLog_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, statPrefix_);
    }
    if (routeSpecifierCase_ == 2) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, routeSpecifier_);
    }
    if (idleTimeout_ != null) {
      output.writeMessage(3, getIdleTimeout());
    }
    if (useOriginalSrcIp_ != false) {
      output.writeBool(4, useOriginalSrcIp_);
    }
    for (int i = 0; i < hashPolicies_.size(); i++) {
      output.writeMessage(5, hashPolicies_.get(i));
    }
    if (upstreamSocketConfig_ != null) {
      output.writeMessage(6, getUpstreamSocketConfig());
    }
    if (usePerPacketLoadBalancing_ != false) {
      output.writeBool(7, usePerPacketLoadBalancing_);
    }
    for (int i = 0; i < accessLog_.size(); i++) {
      output.writeMessage(8, accessLog_.get(i));
    }
    if (routeSpecifierCase_ == 9) {
      output.writeMessage(9, (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, statPrefix_);
    }
    if (routeSpecifierCase_ == 2) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, routeSpecifier_);
    }
    if (idleTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getIdleTimeout());
    }
    if (useOriginalSrcIp_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, useOriginalSrcIp_);
    }
    for (int i = 0; i < hashPolicies_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, hashPolicies_.get(i));
    }
    if (upstreamSocketConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getUpstreamSocketConfig());
    }
    if (usePerPacketLoadBalancing_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, usePerPacketLoadBalancing_);
    }
    for (int i = 0; i < accessLog_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, accessLog_.get(i));
    }
    if (routeSpecifierCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig other = (io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig) obj;

    if (!getStatPrefix()
        .equals(other.getStatPrefix())) return false;
    if (hasIdleTimeout() != other.hasIdleTimeout()) return false;
    if (hasIdleTimeout()) {
      if (!getIdleTimeout()
          .equals(other.getIdleTimeout())) return false;
    }
    if (getUseOriginalSrcIp()
        != other.getUseOriginalSrcIp()) return false;
    if (!getHashPoliciesList()
        .equals(other.getHashPoliciesList())) return false;
    if (hasUpstreamSocketConfig() != other.hasUpstreamSocketConfig()) return false;
    if (hasUpstreamSocketConfig()) {
      if (!getUpstreamSocketConfig()
          .equals(other.getUpstreamSocketConfig())) return false;
    }
    if (getUsePerPacketLoadBalancing()
        != other.getUsePerPacketLoadBalancing()) return false;
    if (!getAccessLogList()
        .equals(other.getAccessLogList())) return false;
    if (!getRouteSpecifierCase().equals(other.getRouteSpecifierCase())) return false;
    switch (routeSpecifierCase_) {
      case 2:
        if (!getCluster()
            .equals(other.getCluster())) return false;
        break;
      case 9:
        if (!getMatcher()
            .equals(other.getMatcher())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STAT_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getStatPrefix().hashCode();
    if (hasIdleTimeout()) {
      hash = (37 * hash) + IDLE_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getIdleTimeout().hashCode();
    }
    hash = (37 * hash) + USE_ORIGINAL_SRC_IP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUseOriginalSrcIp());
    if (getHashPoliciesCount() > 0) {
      hash = (37 * hash) + HASH_POLICIES_FIELD_NUMBER;
      hash = (53 * hash) + getHashPoliciesList().hashCode();
    }
    if (hasUpstreamSocketConfig()) {
      hash = (37 * hash) + UPSTREAM_SOCKET_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getUpstreamSocketConfig().hashCode();
    }
    hash = (37 * hash) + USE_PER_PACKET_LOAD_BALANCING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUsePerPacketLoadBalancing());
    if (getAccessLogCount() > 0) {
      hash = (37 * hash) + ACCESS_LOG_FIELD_NUMBER;
      hash = (53 * hash) + getAccessLogList().hashCode();
    }
    switch (routeSpecifierCase_) {
      case 2:
        hash = (37 * hash) + CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getCluster().hashCode();
        break;
      case 9:
        hash = (37 * hash) + MATCHER_FIELD_NUMBER;
        hash = (53 * hash) + getMatcher().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for the UDP proxy filter.
   * [#next-free-field: 10]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)
      io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.class, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getHashPoliciesFieldBuilder();
        getAccessLogFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      statPrefix_ = "";

      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = null;
      } else {
        idleTimeout_ = null;
        idleTimeoutBuilder_ = null;
      }
      useOriginalSrcIp_ = false;

      if (hashPoliciesBuilder_ == null) {
        hashPolicies_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        hashPoliciesBuilder_.clear();
      }
      if (upstreamSocketConfigBuilder_ == null) {
        upstreamSocketConfig_ = null;
      } else {
        upstreamSocketConfig_ = null;
        upstreamSocketConfigBuilder_ = null;
      }
      usePerPacketLoadBalancing_ = false;

      if (accessLogBuilder_ == null) {
        accessLog_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        accessLogBuilder_.clear();
      }
      routeSpecifierCase_ = 0;
      routeSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyProto.internal_static_envoy_extensions_filters_udp_udp_proxy_v3_UdpProxyConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig build() {
      io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig result = new io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig(this);
      int from_bitField0_ = bitField0_;
      result.statPrefix_ = statPrefix_;
      if (routeSpecifierCase_ == 2) {
        result.routeSpecifier_ = routeSpecifier_;
      }
      if (routeSpecifierCase_ == 9) {
        if (matcherBuilder_ == null) {
          result.routeSpecifier_ = routeSpecifier_;
        } else {
          result.routeSpecifier_ = matcherBuilder_.build();
        }
      }
      if (idleTimeoutBuilder_ == null) {
        result.idleTimeout_ = idleTimeout_;
      } else {
        result.idleTimeout_ = idleTimeoutBuilder_.build();
      }
      result.useOriginalSrcIp_ = useOriginalSrcIp_;
      if (hashPoliciesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          hashPolicies_ = java.util.Collections.unmodifiableList(hashPolicies_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.hashPolicies_ = hashPolicies_;
      } else {
        result.hashPolicies_ = hashPoliciesBuilder_.build();
      }
      if (upstreamSocketConfigBuilder_ == null) {
        result.upstreamSocketConfig_ = upstreamSocketConfig_;
      } else {
        result.upstreamSocketConfig_ = upstreamSocketConfigBuilder_.build();
      }
      result.usePerPacketLoadBalancing_ = usePerPacketLoadBalancing_;
      if (accessLogBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          accessLog_ = java.util.Collections.unmodifiableList(accessLog_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.accessLog_ = accessLog_;
      } else {
        result.accessLog_ = accessLogBuilder_.build();
      }
      result.routeSpecifierCase_ = routeSpecifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.getDefaultInstance()) return this;
      if (!other.getStatPrefix().isEmpty()) {
        statPrefix_ = other.statPrefix_;
        onChanged();
      }
      if (other.hasIdleTimeout()) {
        mergeIdleTimeout(other.getIdleTimeout());
      }
      if (other.getUseOriginalSrcIp() != false) {
        setUseOriginalSrcIp(other.getUseOriginalSrcIp());
      }
      if (hashPoliciesBuilder_ == null) {
        if (!other.hashPolicies_.isEmpty()) {
          if (hashPolicies_.isEmpty()) {
            hashPolicies_ = other.hashPolicies_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHashPoliciesIsMutable();
            hashPolicies_.addAll(other.hashPolicies_);
          }
          onChanged();
        }
      } else {
        if (!other.hashPolicies_.isEmpty()) {
          if (hashPoliciesBuilder_.isEmpty()) {
            hashPoliciesBuilder_.dispose();
            hashPoliciesBuilder_ = null;
            hashPolicies_ = other.hashPolicies_;
            bitField0_ = (bitField0_ & ~0x00000001);
            hashPoliciesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHashPoliciesFieldBuilder() : null;
          } else {
            hashPoliciesBuilder_.addAllMessages(other.hashPolicies_);
          }
        }
      }
      if (other.hasUpstreamSocketConfig()) {
        mergeUpstreamSocketConfig(other.getUpstreamSocketConfig());
      }
      if (other.getUsePerPacketLoadBalancing() != false) {
        setUsePerPacketLoadBalancing(other.getUsePerPacketLoadBalancing());
      }
      if (accessLogBuilder_ == null) {
        if (!other.accessLog_.isEmpty()) {
          if (accessLog_.isEmpty()) {
            accessLog_ = other.accessLog_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAccessLogIsMutable();
            accessLog_.addAll(other.accessLog_);
          }
          onChanged();
        }
      } else {
        if (!other.accessLog_.isEmpty()) {
          if (accessLogBuilder_.isEmpty()) {
            accessLogBuilder_.dispose();
            accessLogBuilder_ = null;
            accessLog_ = other.accessLog_;
            bitField0_ = (bitField0_ & ~0x00000002);
            accessLogBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAccessLogFieldBuilder() : null;
          } else {
            accessLogBuilder_.addAllMessages(other.accessLog_);
          }
        }
      }
      switch (other.getRouteSpecifierCase()) {
        case CLUSTER: {
          routeSpecifierCase_ = 2;
          routeSpecifier_ = other.routeSpecifier_;
          onChanged();
          break;
        }
        case MATCHER: {
          mergeMatcher(other.getMatcher());
          break;
        }
        case ROUTESPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int routeSpecifierCase_ = 0;
    private java.lang.Object routeSpecifier_;
    public RouteSpecifierCase
        getRouteSpecifierCase() {
      return RouteSpecifierCase.forNumber(
          routeSpecifierCase_);
    }

    public Builder clearRouteSpecifier() {
      routeSpecifierCase_ = 0;
      routeSpecifier_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.lang.Object statPrefix_ = "";
    /**
     * <pre>
     * The stat prefix used when emitting UDP proxy filter stats.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The statPrefix.
     */
    public java.lang.String getStatPrefix() {
      java.lang.Object ref = statPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The stat prefix used when emitting UDP proxy filter stats.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for statPrefix.
     */
    public com.google.protobuf.ByteString
        getStatPrefixBytes() {
      java.lang.Object ref = statPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The stat prefix used when emitting UDP proxy filter stats.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefix(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      statPrefix_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The stat prefix used when emitting UDP proxy filter stats.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStatPrefix() {
      
      statPrefix_ = getDefaultInstance().getStatPrefix();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The stat prefix used when emitting UDP proxy filter stats.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      statPrefix_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The upstream cluster to connect to.
     * This field is deprecated in favor of
     * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
     * </pre>
     *
     * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
     * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
     *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
     * @return Whether the cluster field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasCluster() {
      return routeSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * The upstream cluster to connect to.
     * This field is deprecated in favor of
     * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
     * </pre>
     *
     * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
     * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
     *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
     * @return The cluster.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.lang.String getCluster() {
      java.lang.Object ref = "";
      if (routeSpecifierCase_ == 2) {
        ref = routeSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (routeSpecifierCase_ == 2) {
          routeSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The upstream cluster to connect to.
     * This field is deprecated in favor of
     * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
     * </pre>
     *
     * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
     * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
     *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
     * @return The bytes for cluster.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getClusterBytes() {
      java.lang.Object ref = "";
      if (routeSpecifierCase_ == 2) {
        ref = routeSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (routeSpecifierCase_ == 2) {
          routeSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The upstream cluster to connect to.
     * This field is deprecated in favor of
     * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
     * </pre>
     *
     * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
     * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
     *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
     * @param value The cluster to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setCluster(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  routeSpecifierCase_ = 2;
      routeSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The upstream cluster to connect to.
     * This field is deprecated in favor of
     * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
     * </pre>
     *
     * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
     * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
     *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearCluster() {
      if (routeSpecifierCase_ == 2) {
        routeSpecifierCase_ = 0;
        routeSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The upstream cluster to connect to.
     * This field is deprecated in favor of
     * :ref:`matcher &lt;envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.matcher&gt;`.
     * </pre>
     *
     * <code>string cluster = 2 [deprecated = true, (.validate.rules) = { ... }</code>
     * @deprecated envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.cluster is deprecated.
     *     See envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto;l=60
     * @param value The bytes for cluster to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setClusterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      routeSpecifierCase_ = 2;
      routeSpecifier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> matcherBuilder_;
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     * @return Whether the matcher field is set.
     */
    @java.lang.Override
    public boolean hasMatcher() {
      return routeSpecifierCase_ == 9;
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     * @return The matcher.
     */
    @java.lang.Override
    public com.github.xds.type.matcher.v3.Matcher getMatcher() {
      if (matcherBuilder_ == null) {
        if (routeSpecifierCase_ == 9) {
          return (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_;
        }
        return com.github.xds.type.matcher.v3.Matcher.getDefaultInstance();
      } else {
        if (routeSpecifierCase_ == 9) {
          return matcherBuilder_.getMessage();
        }
        return com.github.xds.type.matcher.v3.Matcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    public Builder setMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (matcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        routeSpecifier_ = value;
        onChanged();
      } else {
        matcherBuilder_.setMessage(value);
      }
      routeSpecifierCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    public Builder setMatcher(
        com.github.xds.type.matcher.v3.Matcher.Builder builderForValue) {
      if (matcherBuilder_ == null) {
        routeSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        matcherBuilder_.setMessage(builderForValue.build());
      }
      routeSpecifierCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    public Builder mergeMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (matcherBuilder_ == null) {
        if (routeSpecifierCase_ == 9 &&
            routeSpecifier_ != com.github.xds.type.matcher.v3.Matcher.getDefaultInstance()) {
          routeSpecifier_ = com.github.xds.type.matcher.v3.Matcher.newBuilder((com.github.xds.type.matcher.v3.Matcher) routeSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          routeSpecifier_ = value;
        }
        onChanged();
      } else {
        if (routeSpecifierCase_ == 9) {
          matcherBuilder_.mergeFrom(value);
        } else {
          matcherBuilder_.setMessage(value);
        }
      }
      routeSpecifierCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    public Builder clearMatcher() {
      if (matcherBuilder_ == null) {
        if (routeSpecifierCase_ == 9) {
          routeSpecifierCase_ = 0;
          routeSpecifier_ = null;
          onChanged();
        }
      } else {
        if (routeSpecifierCase_ == 9) {
          routeSpecifierCase_ = 0;
          routeSpecifier_ = null;
        }
        matcherBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.Matcher.Builder getMatcherBuilder() {
      return getMatcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    @java.lang.Override
    public com.github.xds.type.matcher.v3.MatcherOrBuilder getMatcherOrBuilder() {
      if ((routeSpecifierCase_ == 9) && (matcherBuilder_ != null)) {
        return matcherBuilder_.getMessageOrBuilder();
      } else {
        if (routeSpecifierCase_ == 9) {
          return (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_;
        }
        return com.github.xds.type.matcher.v3.Matcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The match tree to use when resolving route actions for incoming requests.
     * See :ref:`Routing &lt;config_udp_listener_filters_udp_proxy_routing&gt;` for more information.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher matcher = 9 [(.xds.annotations.v3.field_status) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> 
        getMatcherFieldBuilder() {
      if (matcherBuilder_ == null) {
        if (!(routeSpecifierCase_ == 9)) {
          routeSpecifier_ = com.github.xds.type.matcher.v3.Matcher.getDefaultInstance();
        }
        matcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder>(
                (com.github.xds.type.matcher.v3.Matcher) routeSpecifier_,
                getParentForChildren(),
                isClean());
        routeSpecifier_ = null;
      }
      routeSpecifierCase_ = 9;
      onChanged();;
      return matcherBuilder_;
    }

    private com.google.protobuf.Duration idleTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> idleTimeoutBuilder_;
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     * @return Whether the idleTimeout field is set.
     */
    public boolean hasIdleTimeout() {
      return idleTimeoutBuilder_ != null || idleTimeout_ != null;
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     * @return The idleTimeout.
     */
    public com.google.protobuf.Duration getIdleTimeout() {
      if (idleTimeoutBuilder_ == null) {
        return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
      } else {
        return idleTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    public Builder setIdleTimeout(com.google.protobuf.Duration value) {
      if (idleTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idleTimeout_ = value;
        onChanged();
      } else {
        idleTimeoutBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    public Builder setIdleTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = builderForValue.build();
        onChanged();
      } else {
        idleTimeoutBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    public Builder mergeIdleTimeout(com.google.protobuf.Duration value) {
      if (idleTimeoutBuilder_ == null) {
        if (idleTimeout_ != null) {
          idleTimeout_ =
            com.google.protobuf.Duration.newBuilder(idleTimeout_).mergeFrom(value).buildPartial();
        } else {
          idleTimeout_ = value;
        }
        onChanged();
      } else {
        idleTimeoutBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    public Builder clearIdleTimeout() {
      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = null;
        onChanged();
      } else {
        idleTimeout_ = null;
        idleTimeoutBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    public com.google.protobuf.Duration.Builder getIdleTimeoutBuilder() {
      
      onChanged();
      return getIdleTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    public com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder() {
      if (idleTimeoutBuilder_ != null) {
        return idleTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return idleTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
      }
    }
    /**
     * <pre>
     * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
     * the session. The default if not specified is 1 minute.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getIdleTimeoutFieldBuilder() {
      if (idleTimeoutBuilder_ == null) {
        idleTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getIdleTimeout(),
                getParentForChildren(),
                isClean());
        idleTimeout_ = null;
      }
      return idleTimeoutBuilder_;
    }

    private boolean useOriginalSrcIp_ ;
    /**
     * <pre>
     * Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.
     * This option requires Envoy to be run with the ``CAP_NET_ADMIN`` capability on Linux.
     * And the IPv6 stack must be enabled on Linux kernel.
     * This option does not preserve the remote downstream port.
     * If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.
     * This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts
     * will send the packets with the remote downstream IP address as the destination. All packets will be routed
     * to the remote downstream directly if there are route rules on the upstream host side.
     * There are two options to return the packets back to the remote downstream.
     * The first one is to use DSR (Direct Server Return).
     * The other one is to configure routing rules on the upstream hosts to forward
     * all packets back to Envoy and configure iptables rules on the host running Envoy to
     * forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.
     * If the platform does not support this option, Envoy will raise a configuration error.
     * </pre>
     *
     * <code>bool use_original_src_ip = 4;</code>
     * @return The useOriginalSrcIp.
     */
    @java.lang.Override
    public boolean getUseOriginalSrcIp() {
      return useOriginalSrcIp_;
    }
    /**
     * <pre>
     * Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.
     * This option requires Envoy to be run with the ``CAP_NET_ADMIN`` capability on Linux.
     * And the IPv6 stack must be enabled on Linux kernel.
     * This option does not preserve the remote downstream port.
     * If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.
     * This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts
     * will send the packets with the remote downstream IP address as the destination. All packets will be routed
     * to the remote downstream directly if there are route rules on the upstream host side.
     * There are two options to return the packets back to the remote downstream.
     * The first one is to use DSR (Direct Server Return).
     * The other one is to configure routing rules on the upstream hosts to forward
     * all packets back to Envoy and configure iptables rules on the host running Envoy to
     * forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.
     * If the platform does not support this option, Envoy will raise a configuration error.
     * </pre>
     *
     * <code>bool use_original_src_ip = 4;</code>
     * @param value The useOriginalSrcIp to set.
     * @return This builder for chaining.
     */
    public Builder setUseOriginalSrcIp(boolean value) {
      
      useOriginalSrcIp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.
     * This option requires Envoy to be run with the ``CAP_NET_ADMIN`` capability on Linux.
     * And the IPv6 stack must be enabled on Linux kernel.
     * This option does not preserve the remote downstream port.
     * If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.
     * This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts
     * will send the packets with the remote downstream IP address as the destination. All packets will be routed
     * to the remote downstream directly if there are route rules on the upstream host side.
     * There are two options to return the packets back to the remote downstream.
     * The first one is to use DSR (Direct Server Return).
     * The other one is to configure routing rules on the upstream hosts to forward
     * all packets back to Envoy and configure iptables rules on the host running Envoy to
     * forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.
     * If the platform does not support this option, Envoy will raise a configuration error.
     * </pre>
     *
     * <code>bool use_original_src_ip = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearUseOriginalSrcIp() {
      
      useOriginalSrcIp_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy> hashPolicies_ =
      java.util.Collections.emptyList();
    private void ensureHashPoliciesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        hashPolicies_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy>(hashPolicies_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder> hashPoliciesBuilder_;

    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy> getHashPoliciesList() {
      if (hashPoliciesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(hashPolicies_);
      } else {
        return hashPoliciesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public int getHashPoliciesCount() {
      if (hashPoliciesBuilder_ == null) {
        return hashPolicies_.size();
      } else {
        return hashPoliciesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy getHashPolicies(int index) {
      if (hashPoliciesBuilder_ == null) {
        return hashPolicies_.get(index);
      } else {
        return hashPoliciesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setHashPolicies(
        int index, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy value) {
      if (hashPoliciesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHashPoliciesIsMutable();
        hashPolicies_.set(index, value);
        onChanged();
      } else {
        hashPoliciesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setHashPolicies(
        int index, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder builderForValue) {
      if (hashPoliciesBuilder_ == null) {
        ensureHashPoliciesIsMutable();
        hashPolicies_.set(index, builderForValue.build());
        onChanged();
      } else {
        hashPoliciesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder addHashPolicies(io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy value) {
      if (hashPoliciesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHashPoliciesIsMutable();
        hashPolicies_.add(value);
        onChanged();
      } else {
        hashPoliciesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder addHashPolicies(
        int index, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy value) {
      if (hashPoliciesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHashPoliciesIsMutable();
        hashPolicies_.add(index, value);
        onChanged();
      } else {
        hashPoliciesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder addHashPolicies(
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder builderForValue) {
      if (hashPoliciesBuilder_ == null) {
        ensureHashPoliciesIsMutable();
        hashPolicies_.add(builderForValue.build());
        onChanged();
      } else {
        hashPoliciesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder addHashPolicies(
        int index, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder builderForValue) {
      if (hashPoliciesBuilder_ == null) {
        ensureHashPoliciesIsMutable();
        hashPolicies_.add(index, builderForValue.build());
        onChanged();
      } else {
        hashPoliciesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllHashPolicies(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy> values) {
      if (hashPoliciesBuilder_ == null) {
        ensureHashPoliciesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hashPolicies_);
        onChanged();
      } else {
        hashPoliciesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearHashPolicies() {
      if (hashPoliciesBuilder_ == null) {
        hashPolicies_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        hashPoliciesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder removeHashPolicies(int index) {
      if (hashPoliciesBuilder_ == null) {
        ensureHashPoliciesIsMutable();
        hashPolicies_.remove(index);
        onChanged();
      } else {
        hashPoliciesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder getHashPoliciesBuilder(
        int index) {
      return getHashPoliciesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder getHashPoliciesOrBuilder(
        int index) {
      if (hashPoliciesBuilder_ == null) {
        return hashPolicies_.get(index);  } else {
        return hashPoliciesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder> 
         getHashPoliciesOrBuilderList() {
      if (hashPoliciesBuilder_ != null) {
        return hashPoliciesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(hashPolicies_);
      }
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder addHashPoliciesBuilder() {
      return getHashPoliciesFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder addHashPoliciesBuilder(
        int index) {
      return getHashPoliciesFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
     * load balancing algorithms will select a host randomly. Currently the number of hash policies is
     * limited to 1.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder> 
         getHashPoliciesBuilderList() {
      return getHashPoliciesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder> 
        getHashPoliciesFieldBuilder() {
      if (hashPoliciesBuilder_ == null) {
        hashPoliciesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy.Builder, io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder>(
                hashPolicies_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        hashPolicies_ = null;
      }
      return hashPoliciesBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.UdpSocketConfig upstreamSocketConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.UdpSocketConfig, io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.Builder, io.envoyproxy.envoy.config.core.v3.UdpSocketConfigOrBuilder> upstreamSocketConfigBuilder_;
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     * @return Whether the upstreamSocketConfig field is set.
     */
    public boolean hasUpstreamSocketConfig() {
      return upstreamSocketConfigBuilder_ != null || upstreamSocketConfig_ != null;
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     * @return The upstreamSocketConfig.
     */
    public io.envoyproxy.envoy.config.core.v3.UdpSocketConfig getUpstreamSocketConfig() {
      if (upstreamSocketConfigBuilder_ == null) {
        return upstreamSocketConfig_ == null ? io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.getDefaultInstance() : upstreamSocketConfig_;
      } else {
        return upstreamSocketConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    public Builder setUpstreamSocketConfig(io.envoyproxy.envoy.config.core.v3.UdpSocketConfig value) {
      if (upstreamSocketConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        upstreamSocketConfig_ = value;
        onChanged();
      } else {
        upstreamSocketConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    public Builder setUpstreamSocketConfig(
        io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.Builder builderForValue) {
      if (upstreamSocketConfigBuilder_ == null) {
        upstreamSocketConfig_ = builderForValue.build();
        onChanged();
      } else {
        upstreamSocketConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    public Builder mergeUpstreamSocketConfig(io.envoyproxy.envoy.config.core.v3.UdpSocketConfig value) {
      if (upstreamSocketConfigBuilder_ == null) {
        if (upstreamSocketConfig_ != null) {
          upstreamSocketConfig_ =
            io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.newBuilder(upstreamSocketConfig_).mergeFrom(value).buildPartial();
        } else {
          upstreamSocketConfig_ = value;
        }
        onChanged();
      } else {
        upstreamSocketConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    public Builder clearUpstreamSocketConfig() {
      if (upstreamSocketConfigBuilder_ == null) {
        upstreamSocketConfig_ = null;
        onChanged();
      } else {
        upstreamSocketConfig_ = null;
        upstreamSocketConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.Builder getUpstreamSocketConfigBuilder() {
      
      onChanged();
      return getUpstreamSocketConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.UdpSocketConfigOrBuilder getUpstreamSocketConfigOrBuilder() {
      if (upstreamSocketConfigBuilder_ != null) {
        return upstreamSocketConfigBuilder_.getMessageOrBuilder();
      } else {
        return upstreamSocketConfig_ == null ?
            io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.getDefaultInstance() : upstreamSocketConfig_;
      }
    }
    /**
     * <pre>
     * UDP socket configuration for upstream sockets. The default for
     * :ref:`prefer_gro &lt;envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro&gt;` is true for upstream
     * sockets as the assumption is datagrams will be received from a single source.
     * </pre>
     *
     * <code>.envoy.config.core.v3.UdpSocketConfig upstream_socket_config = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.UdpSocketConfig, io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.Builder, io.envoyproxy.envoy.config.core.v3.UdpSocketConfigOrBuilder> 
        getUpstreamSocketConfigFieldBuilder() {
      if (upstreamSocketConfigBuilder_ == null) {
        upstreamSocketConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.UdpSocketConfig, io.envoyproxy.envoy.config.core.v3.UdpSocketConfig.Builder, io.envoyproxy.envoy.config.core.v3.UdpSocketConfigOrBuilder>(
                getUpstreamSocketConfig(),
                getParentForChildren(),
                isClean());
        upstreamSocketConfig_ = null;
      }
      return upstreamSocketConfigBuilder_;
    }

    private boolean usePerPacketLoadBalancing_ ;
    /**
     * <pre>
     * Perform per packet load balancing (upstream host selection) on each received data chunk.
     * The default if not specified is false, that means each data chunk is forwarded
     * to upstream host selected on first chunk receival for that "session" (identified by source IP/port and local IP/port).
     * </pre>
     *
     * <code>bool use_per_packet_load_balancing = 7;</code>
     * @return The usePerPacketLoadBalancing.
     */
    @java.lang.Override
    public boolean getUsePerPacketLoadBalancing() {
      return usePerPacketLoadBalancing_;
    }
    /**
     * <pre>
     * Perform per packet load balancing (upstream host selection) on each received data chunk.
     * The default if not specified is false, that means each data chunk is forwarded
     * to upstream host selected on first chunk receival for that "session" (identified by source IP/port and local IP/port).
     * </pre>
     *
     * <code>bool use_per_packet_load_balancing = 7;</code>
     * @param value The usePerPacketLoadBalancing to set.
     * @return This builder for chaining.
     */
    public Builder setUsePerPacketLoadBalancing(boolean value) {
      
      usePerPacketLoadBalancing_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Perform per packet load balancing (upstream host selection) on each received data chunk.
     * The default if not specified is false, that means each data chunk is forwarded
     * to upstream host selected on first chunk receival for that "session" (identified by source IP/port and local IP/port).
     * </pre>
     *
     * <code>bool use_per_packet_load_balancing = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearUsePerPacketLoadBalancing() {
      
      usePerPacketLoadBalancing_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> accessLog_ =
      java.util.Collections.emptyList();
    private void ensureAccessLogIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        accessLog_ = new java.util.ArrayList<io.envoyproxy.envoy.config.accesslog.v3.AccessLog>(accessLog_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.accesslog.v3.AccessLog, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder, io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> accessLogBuilder_;

    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> getAccessLogList() {
      if (accessLogBuilder_ == null) {
        return java.util.Collections.unmodifiableList(accessLog_);
      } else {
        return accessLogBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public int getAccessLogCount() {
      if (accessLogBuilder_ == null) {
        return accessLog_.size();
      } else {
        return accessLogBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog getAccessLog(int index) {
      if (accessLogBuilder_ == null) {
        return accessLog_.get(index);
      } else {
        return accessLogBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder setAccessLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog value) {
      if (accessLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAccessLogIsMutable();
        accessLog_.set(index, value);
        onChanged();
      } else {
        accessLogBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder setAccessLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder builderForValue) {
      if (accessLogBuilder_ == null) {
        ensureAccessLogIsMutable();
        accessLog_.set(index, builderForValue.build());
        onChanged();
      } else {
        accessLogBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder addAccessLog(io.envoyproxy.envoy.config.accesslog.v3.AccessLog value) {
      if (accessLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAccessLogIsMutable();
        accessLog_.add(value);
        onChanged();
      } else {
        accessLogBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder addAccessLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog value) {
      if (accessLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAccessLogIsMutable();
        accessLog_.add(index, value);
        onChanged();
      } else {
        accessLogBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder addAccessLog(
        io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder builderForValue) {
      if (accessLogBuilder_ == null) {
        ensureAccessLogIsMutable();
        accessLog_.add(builderForValue.build());
        onChanged();
      } else {
        accessLogBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder addAccessLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder builderForValue) {
      if (accessLogBuilder_ == null) {
        ensureAccessLogIsMutable();
        accessLog_.add(index, builderForValue.build());
        onChanged();
      } else {
        accessLogBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder addAllAccessLog(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLog> values) {
      if (accessLogBuilder_ == null) {
        ensureAccessLogIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, accessLog_);
        onChanged();
      } else {
        accessLogBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder clearAccessLog() {
      if (accessLogBuilder_ == null) {
        accessLog_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        accessLogBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public Builder removeAccessLog(int index) {
      if (accessLogBuilder_ == null) {
        ensureAccessLogIsMutable();
        accessLog_.remove(index);
        onChanged();
      } else {
        accessLogBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder getAccessLogBuilder(
        int index) {
      return getAccessLogFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder getAccessLogOrBuilder(
        int index) {
      if (accessLogBuilder_ == null) {
        return accessLog_.get(index);  } else {
        return accessLogBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
         getAccessLogOrBuilderList() {
      if (accessLogBuilder_ != null) {
        return accessLogBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(accessLog_);
      }
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder addAccessLogBuilder() {
      return getAccessLogFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.accesslog.v3.AccessLog.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder addAccessLogBuilder(
        int index) {
      return getAccessLogFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration for access logs emitted by the UDP proxy. Note that certain UDP specific data is emitted as :ref:`Dynamic Metadata &lt;config_access_log_format_dynamic_metadata&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog access_log = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder> 
         getAccessLogBuilderList() {
      return getAccessLogFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.accesslog.v3.AccessLog, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder, io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
        getAccessLogFieldBuilder() {
      if (accessLogBuilder_ == null) {
        accessLogBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.accesslog.v3.AccessLog, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder, io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder>(
                accessLog_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        accessLog_ = null;
      }
      return accessLogBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)
  private static final io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UdpProxyConfig>
      PARSER = new com.google.protobuf.AbstractParser<UdpProxyConfig>() {
    @java.lang.Override
    public UdpProxyConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new UdpProxyConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<UdpProxyConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UdpProxyConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

