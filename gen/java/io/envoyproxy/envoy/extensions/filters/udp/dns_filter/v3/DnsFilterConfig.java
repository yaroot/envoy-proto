// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto

package io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3;

/**
 * <pre>
 * Configuration for the DNS filter.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig}
 */
public final class DnsFilterConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)
    DnsFilterConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DnsFilterConfig.newBuilder() to construct.
  private DnsFilterConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DnsFilterConfig() {
    statPrefix_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DnsFilterConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DnsFilterConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            statPrefix_ = s;
            break;
          }
          case 18: {
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder subBuilder = null;
            if (serverConfig_ != null) {
              subBuilder = serverConfig_.toBuilder();
            }
            serverConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(serverConfig_);
              serverConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder subBuilder = null;
            if (clientConfig_ != null) {
              subBuilder = clientConfig_.toBuilder();
            }
            clientConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(clientConfig_);
              clientConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.class, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.Builder.class);
  }

  public interface ServerContextConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Load the configuration specified from the control plane
     * </pre>
     *
     * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
     * @return Whether the inlineDnsTable field is set.
     */
    boolean hasInlineDnsTable();
    /**
     * <pre>
     * Load the configuration specified from the control plane
     * </pre>
     *
     * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
     * @return The inlineDnsTable.
     */
    io.envoyproxy.envoy.data.dns.v3.DnsTable getInlineDnsTable();
    /**
     * <pre>
     * Load the configuration specified from the control plane
     * </pre>
     *
     * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
     */
    io.envoyproxy.envoy.data.dns.v3.DnsTableOrBuilder getInlineDnsTableOrBuilder();

    /**
     * <pre>
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
     * @return Whether the externalDnsTable field is set.
     */
    boolean hasExternalDnsTable();
    /**
     * <pre>
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
     * @return The externalDnsTable.
     */
    io.envoyproxy.envoy.config.core.v3.DataSource getExternalDnsTable();
    /**
     * <pre>
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
     */
    io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getExternalDnsTableOrBuilder();

    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.ConfigSourceCase getConfigSourceCase();
  }
  /**
   * <pre>
   * This message contains the configuration for the DNS Filter operating
   * in a server context. This message will contain the virtual hosts and
   * associated addresses with which Envoy will respond to queries
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig}
   */
  public static final class ServerContextConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)
      ServerContextConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ServerContextConfig.newBuilder() to construct.
    private ServerContextConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ServerContextConfig() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ServerContextConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ServerContextConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.data.dns.v3.DnsTable.Builder subBuilder = null;
              if (configSourceCase_ == 1) {
                subBuilder = ((io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_).toBuilder();
              }
              configSource_ =
                  input.readMessage(io.envoyproxy.envoy.data.dns.v3.DnsTable.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_);
                configSource_ = subBuilder.buildPartial();
              }
              configSourceCase_ = 1;
              break;
            }
            case 18: {
              io.envoyproxy.envoy.config.core.v3.DataSource.Builder subBuilder = null;
              if (configSourceCase_ == 2) {
                subBuilder = ((io.envoyproxy.envoy.config.core.v3.DataSource) configSource_).toBuilder();
              }
              configSource_ =
                  input.readMessage(io.envoyproxy.envoy.config.core.v3.DataSource.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.envoyproxy.envoy.config.core.v3.DataSource) configSource_);
                configSource_ = subBuilder.buildPartial();
              }
              configSourceCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ServerContextConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ServerContextConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.class, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder.class);
    }

    private int configSourceCase_ = 0;
    private java.lang.Object configSource_;
    public enum ConfigSourceCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      INLINE_DNS_TABLE(1),
      EXTERNAL_DNS_TABLE(2),
      CONFIGSOURCE_NOT_SET(0);
      private final int value;
      private ConfigSourceCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConfigSourceCase valueOf(int value) {
        return forNumber(value);
      }

      public static ConfigSourceCase forNumber(int value) {
        switch (value) {
          case 1: return INLINE_DNS_TABLE;
          case 2: return EXTERNAL_DNS_TABLE;
          case 0: return CONFIGSOURCE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ConfigSourceCase
    getConfigSourceCase() {
      return ConfigSourceCase.forNumber(
          configSourceCase_);
    }

    public static final int INLINE_DNS_TABLE_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Load the configuration specified from the control plane
     * </pre>
     *
     * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
     * @return Whether the inlineDnsTable field is set.
     */
    @java.lang.Override
    public boolean hasInlineDnsTable() {
      return configSourceCase_ == 1;
    }
    /**
     * <pre>
     * Load the configuration specified from the control plane
     * </pre>
     *
     * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
     * @return The inlineDnsTable.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.data.dns.v3.DnsTable getInlineDnsTable() {
      if (configSourceCase_ == 1) {
         return (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_;
      }
      return io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance();
    }
    /**
     * <pre>
     * Load the configuration specified from the control plane
     * </pre>
     *
     * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.data.dns.v3.DnsTableOrBuilder getInlineDnsTableOrBuilder() {
      if (configSourceCase_ == 1) {
         return (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_;
      }
      return io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance();
    }

    public static final int EXTERNAL_DNS_TABLE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
     * @return Whether the externalDnsTable field is set.
     */
    @java.lang.Override
    public boolean hasExternalDnsTable() {
      return configSourceCase_ == 2;
    }
    /**
     * <pre>
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
     * @return The externalDnsTable.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.DataSource getExternalDnsTable() {
      if (configSourceCase_ == 2) {
         return (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_;
      }
      return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
    }
    /**
     * <pre>
     * Seed the filter configuration from an external path. This source
     * is a yaml formatted file that contains the DnsTable driving Envoy's
     * responses to DNS queries
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getExternalDnsTableOrBuilder() {
      if (configSourceCase_ == 2) {
         return (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_;
      }
      return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (configSourceCase_ == 1) {
        output.writeMessage(1, (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_);
      }
      if (configSourceCase_ == 2) {
        output.writeMessage(2, (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (configSourceCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_);
      }
      if (configSourceCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig other = (io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig) obj;

      if (!getConfigSourceCase().equals(other.getConfigSourceCase())) return false;
      switch (configSourceCase_) {
        case 1:
          if (!getInlineDnsTable()
              .equals(other.getInlineDnsTable())) return false;
          break;
        case 2:
          if (!getExternalDnsTable()
              .equals(other.getExternalDnsTable())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (configSourceCase_) {
        case 1:
          hash = (37 * hash) + INLINE_DNS_TABLE_FIELD_NUMBER;
          hash = (53 * hash) + getInlineDnsTable().hashCode();
          break;
        case 2:
          hash = (37 * hash) + EXTERNAL_DNS_TABLE_FIELD_NUMBER;
          hash = (53 * hash) + getExternalDnsTable().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This message contains the configuration for the DNS Filter operating
     * in a server context. This message will contain the virtual hosts and
     * associated addresses with which Envoy will respond to queries
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ServerContextConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ServerContextConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.class, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        configSourceCase_ = 0;
        configSource_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ServerContextConfig_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig build() {
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig buildPartial() {
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig result = new io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig(this);
        if (configSourceCase_ == 1) {
          if (inlineDnsTableBuilder_ == null) {
            result.configSource_ = configSource_;
          } else {
            result.configSource_ = inlineDnsTableBuilder_.build();
          }
        }
        if (configSourceCase_ == 2) {
          if (externalDnsTableBuilder_ == null) {
            result.configSource_ = configSource_;
          } else {
            result.configSource_ = externalDnsTableBuilder_.build();
          }
        }
        result.configSourceCase_ = configSourceCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig other) {
        if (other == io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.getDefaultInstance()) return this;
        switch (other.getConfigSourceCase()) {
          case INLINE_DNS_TABLE: {
            mergeInlineDnsTable(other.getInlineDnsTable());
            break;
          }
          case EXTERNAL_DNS_TABLE: {
            mergeExternalDnsTable(other.getExternalDnsTable());
            break;
          }
          case CONFIGSOURCE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int configSourceCase_ = 0;
      private java.lang.Object configSource_;
      public ConfigSourceCase
          getConfigSourceCase() {
        return ConfigSourceCase.forNumber(
            configSourceCase_);
      }

      public Builder clearConfigSource() {
        configSourceCase_ = 0;
        configSource_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.data.dns.v3.DnsTable, io.envoyproxy.envoy.data.dns.v3.DnsTable.Builder, io.envoyproxy.envoy.data.dns.v3.DnsTableOrBuilder> inlineDnsTableBuilder_;
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       * @return Whether the inlineDnsTable field is set.
       */
      @java.lang.Override
      public boolean hasInlineDnsTable() {
        return configSourceCase_ == 1;
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       * @return The inlineDnsTable.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.data.dns.v3.DnsTable getInlineDnsTable() {
        if (inlineDnsTableBuilder_ == null) {
          if (configSourceCase_ == 1) {
            return (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_;
          }
          return io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance();
        } else {
          if (configSourceCase_ == 1) {
            return inlineDnsTableBuilder_.getMessage();
          }
          return io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      public Builder setInlineDnsTable(io.envoyproxy.envoy.data.dns.v3.DnsTable value) {
        if (inlineDnsTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          configSource_ = value;
          onChanged();
        } else {
          inlineDnsTableBuilder_.setMessage(value);
        }
        configSourceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      public Builder setInlineDnsTable(
          io.envoyproxy.envoy.data.dns.v3.DnsTable.Builder builderForValue) {
        if (inlineDnsTableBuilder_ == null) {
          configSource_ = builderForValue.build();
          onChanged();
        } else {
          inlineDnsTableBuilder_.setMessage(builderForValue.build());
        }
        configSourceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      public Builder mergeInlineDnsTable(io.envoyproxy.envoy.data.dns.v3.DnsTable value) {
        if (inlineDnsTableBuilder_ == null) {
          if (configSourceCase_ == 1 &&
              configSource_ != io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance()) {
            configSource_ = io.envoyproxy.envoy.data.dns.v3.DnsTable.newBuilder((io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_)
                .mergeFrom(value).buildPartial();
          } else {
            configSource_ = value;
          }
          onChanged();
        } else {
          if (configSourceCase_ == 1) {
            inlineDnsTableBuilder_.mergeFrom(value);
          } else {
            inlineDnsTableBuilder_.setMessage(value);
          }
        }
        configSourceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      public Builder clearInlineDnsTable() {
        if (inlineDnsTableBuilder_ == null) {
          if (configSourceCase_ == 1) {
            configSourceCase_ = 0;
            configSource_ = null;
            onChanged();
          }
        } else {
          if (configSourceCase_ == 1) {
            configSourceCase_ = 0;
            configSource_ = null;
          }
          inlineDnsTableBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      public io.envoyproxy.envoy.data.dns.v3.DnsTable.Builder getInlineDnsTableBuilder() {
        return getInlineDnsTableFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.data.dns.v3.DnsTableOrBuilder getInlineDnsTableOrBuilder() {
        if ((configSourceCase_ == 1) && (inlineDnsTableBuilder_ != null)) {
          return inlineDnsTableBuilder_.getMessageOrBuilder();
        } else {
          if (configSourceCase_ == 1) {
            return (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_;
          }
          return io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Load the configuration specified from the control plane
       * </pre>
       *
       * <code>.envoy.data.dns.v3.DnsTable inline_dns_table = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.data.dns.v3.DnsTable, io.envoyproxy.envoy.data.dns.v3.DnsTable.Builder, io.envoyproxy.envoy.data.dns.v3.DnsTableOrBuilder> 
          getInlineDnsTableFieldBuilder() {
        if (inlineDnsTableBuilder_ == null) {
          if (!(configSourceCase_ == 1)) {
            configSource_ = io.envoyproxy.envoy.data.dns.v3.DnsTable.getDefaultInstance();
          }
          inlineDnsTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.data.dns.v3.DnsTable, io.envoyproxy.envoy.data.dns.v3.DnsTable.Builder, io.envoyproxy.envoy.data.dns.v3.DnsTableOrBuilder>(
                  (io.envoyproxy.envoy.data.dns.v3.DnsTable) configSource_,
                  getParentForChildren(),
                  isClean());
          configSource_ = null;
        }
        configSourceCase_ = 1;
        onChanged();;
        return inlineDnsTableBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> externalDnsTableBuilder_;
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       * @return Whether the externalDnsTable field is set.
       */
      @java.lang.Override
      public boolean hasExternalDnsTable() {
        return configSourceCase_ == 2;
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       * @return The externalDnsTable.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.DataSource getExternalDnsTable() {
        if (externalDnsTableBuilder_ == null) {
          if (configSourceCase_ == 2) {
            return (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_;
          }
          return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
        } else {
          if (configSourceCase_ == 2) {
            return externalDnsTableBuilder_.getMessage();
          }
          return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      public Builder setExternalDnsTable(io.envoyproxy.envoy.config.core.v3.DataSource value) {
        if (externalDnsTableBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          configSource_ = value;
          onChanged();
        } else {
          externalDnsTableBuilder_.setMessage(value);
        }
        configSourceCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      public Builder setExternalDnsTable(
          io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
        if (externalDnsTableBuilder_ == null) {
          configSource_ = builderForValue.build();
          onChanged();
        } else {
          externalDnsTableBuilder_.setMessage(builderForValue.build());
        }
        configSourceCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      public Builder mergeExternalDnsTable(io.envoyproxy.envoy.config.core.v3.DataSource value) {
        if (externalDnsTableBuilder_ == null) {
          if (configSourceCase_ == 2 &&
              configSource_ != io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance()) {
            configSource_ = io.envoyproxy.envoy.config.core.v3.DataSource.newBuilder((io.envoyproxy.envoy.config.core.v3.DataSource) configSource_)
                .mergeFrom(value).buildPartial();
          } else {
            configSource_ = value;
          }
          onChanged();
        } else {
          if (configSourceCase_ == 2) {
            externalDnsTableBuilder_.mergeFrom(value);
          } else {
            externalDnsTableBuilder_.setMessage(value);
          }
        }
        configSourceCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      public Builder clearExternalDnsTable() {
        if (externalDnsTableBuilder_ == null) {
          if (configSourceCase_ == 2) {
            configSourceCase_ = 0;
            configSource_ = null;
            onChanged();
          }
        } else {
          if (configSourceCase_ == 2) {
            configSourceCase_ = 0;
            configSource_ = null;
          }
          externalDnsTableBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getExternalDnsTableBuilder() {
        return getExternalDnsTableFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getExternalDnsTableOrBuilder() {
        if ((configSourceCase_ == 2) && (externalDnsTableBuilder_ != null)) {
          return externalDnsTableBuilder_.getMessageOrBuilder();
        } else {
          if (configSourceCase_ == 2) {
            return (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_;
          }
          return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Seed the filter configuration from an external path. This source
       * is a yaml formatted file that contains the DnsTable driving Envoy's
       * responses to DNS queries
       * </pre>
       *
       * <code>.envoy.config.core.v3.DataSource external_dns_table = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
          getExternalDnsTableFieldBuilder() {
        if (externalDnsTableBuilder_ == null) {
          if (!(configSourceCase_ == 2)) {
            configSource_ = io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
          }
          externalDnsTableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                  (io.envoyproxy.envoy.config.core.v3.DataSource) configSource_,
                  getParentForChildren(),
                  isClean());
          configSource_ = null;
        }
        configSourceCase_ = 2;
        onChanged();;
        return externalDnsTableBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig)
    private static final io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig();
    }

    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ServerContextConfig>
        PARSER = new com.google.protobuf.AbstractParser<ServerContextConfig>() {
      @java.lang.Override
      public ServerContextConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ServerContextConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ServerContextConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ServerContextConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClientContextConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Sets the maximum time we will wait for the upstream query to complete
     * We allow 5s for the upstream resolution to complete, so the minimum
     * value here is 1. Note that the total latency for a failed query is the
     * number of retries multiplied by the resolver_timeout.
     * </pre>
     *
     * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the resolverTimeout field is set.
     */
    boolean hasResolverTimeout();
    /**
     * <pre>
     * Sets the maximum time we will wait for the upstream query to complete
     * We allow 5s for the upstream resolution to complete, so the minimum
     * value here is 1. Note that the total latency for a failed query is the
     * number of retries multiplied by the resolver_timeout.
     * </pre>
     *
     * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return The resolverTimeout.
     */
    com.google.protobuf.Duration getResolverTimeout();
    /**
     * <pre>
     * Sets the maximum time we will wait for the upstream query to complete
     * We allow 5s for the upstream resolution to complete, so the minimum
     * value here is 1. Note that the total latency for a failed query is the
     * number of retries multiplied by the resolver_timeout.
     * </pre>
     *
     * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
     */
    com.google.protobuf.DurationOrBuilder getResolverTimeoutOrBuilder();

    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated java.util.List<io.envoyproxy.envoy.config.core.v3.Address> 
        getUpstreamResolversList();
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated io.envoyproxy.envoy.config.core.v3.Address getUpstreamResolvers(int index);
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated int getUpstreamResolversCount();
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
        getUpstreamResolversOrBuilderList();
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getUpstreamResolversOrBuilder(
        int index);

    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config is deprecated.
     *     See envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto;l=73
     * @return Whether the dnsResolutionConfig field is set.
     */
    @java.lang.Deprecated boolean hasDnsResolutionConfig();
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config is deprecated.
     *     See envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto;l=73
     * @return The dnsResolutionConfig.
     */
    @java.lang.Deprecated io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig getDnsResolutionConfig();
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder getDnsResolutionConfigOrBuilder();

    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
     * @return Whether the typedDnsResolverConfig field is set.
     */
    boolean hasTypedDnsResolverConfig();
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
     * @return The typedDnsResolverConfig.
     */
    io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedDnsResolverConfig();
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
     */
    io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedDnsResolverConfigOrBuilder();

    /**
     * <pre>
     * Controls how many outstanding external lookup contexts the filter tracks.
     * The context structure allows the filter to respond to every query even if the external
     * resolution times out or is otherwise unsuccessful
     * </pre>
     *
     * <code>uint64 max_pending_lookups = 3 [(.validate.rules) = { ... }</code>
     * @return The maxPendingLookups.
     */
    long getMaxPendingLookups();
  }
  /**
   * <pre>
   * This message contains the configuration for the DNS Filter operating
   * in a client context. This message will contain the timeouts, retry,
   * and forwarding configuration for Envoy to make DNS requests to other
   * resolvers
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig}
   */
  public static final class ClientContextConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)
      ClientContextConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClientContextConfig.newBuilder() to construct.
    private ClientContextConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClientContextConfig() {
      upstreamResolvers_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ClientContextConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClientContextConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (resolverTimeout_ != null) {
                subBuilder = resolverTimeout_.toBuilder();
              }
              resolverTimeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resolverTimeout_);
                resolverTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                upstreamResolvers_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.Address>();
                mutable_bitField0_ |= 0x00000001;
              }
              upstreamResolvers_.add(
                  input.readMessage(io.envoyproxy.envoy.config.core.v3.Address.parser(), extensionRegistry));
              break;
            }
            case 24: {

              maxPendingLookups_ = input.readUInt64();
              break;
            }
            case 34: {
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder subBuilder = null;
              if (typedDnsResolverConfig_ != null) {
                subBuilder = typedDnsResolverConfig_.toBuilder();
              }
              typedDnsResolverConfig_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(typedDnsResolverConfig_);
                typedDnsResolverConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder subBuilder = null;
              if (dnsResolutionConfig_ != null) {
                subBuilder = dnsResolutionConfig_.toBuilder();
              }
              dnsResolutionConfig_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dnsResolutionConfig_);
                dnsResolutionConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          upstreamResolvers_ = java.util.Collections.unmodifiableList(upstreamResolvers_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ClientContextConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ClientContextConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.class, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder.class);
    }

    public static final int RESOLVER_TIMEOUT_FIELD_NUMBER = 1;
    private com.google.protobuf.Duration resolverTimeout_;
    /**
     * <pre>
     * Sets the maximum time we will wait for the upstream query to complete
     * We allow 5s for the upstream resolution to complete, so the minimum
     * value here is 1. Note that the total latency for a failed query is the
     * number of retries multiplied by the resolver_timeout.
     * </pre>
     *
     * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the resolverTimeout field is set.
     */
    @java.lang.Override
    public boolean hasResolverTimeout() {
      return resolverTimeout_ != null;
    }
    /**
     * <pre>
     * Sets the maximum time we will wait for the upstream query to complete
     * We allow 5s for the upstream resolution to complete, so the minimum
     * value here is 1. Note that the total latency for a failed query is the
     * number of retries multiplied by the resolver_timeout.
     * </pre>
     *
     * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return The resolverTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getResolverTimeout() {
      return resolverTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : resolverTimeout_;
    }
    /**
     * <pre>
     * Sets the maximum time we will wait for the upstream query to complete
     * We allow 5s for the upstream resolution to complete, so the minimum
     * value here is 1. Note that the total latency for a failed query is the
     * number of retries multiplied by the resolver_timeout.
     * </pre>
     *
     * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getResolverTimeoutOrBuilder() {
      return getResolverTimeout();
    }

    public static final int UPSTREAM_RESOLVERS_FIELD_NUMBER = 2;
    private java.util.List<io.envoyproxy.envoy.config.core.v3.Address> upstreamResolvers_;
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public java.util.List<io.envoyproxy.envoy.config.core.v3.Address> getUpstreamResolversList() {
      return upstreamResolvers_;
    }
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
        getUpstreamResolversOrBuilderList() {
      return upstreamResolvers_;
    }
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public int getUpstreamResolversCount() {
      return upstreamResolvers_.size();
    }
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.Address getUpstreamResolvers(int index) {
      return upstreamResolvers_.get(index);
    }
    /**
     * <pre>
     * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
     * 1.19.1.
     * Control planes that need to set this field for Envoy 1.19.0 and
     * 1.19.1 clients should fork the protobufs and change the field type
     * to `DnsResolutionConfig`.
     * Control planes that need to simultaneously support Envoy 1.18.x and
     * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getUpstreamResolversOrBuilder(
        int index) {
      return upstreamResolvers_.get(index);
    }

    public static final int DNS_RESOLUTION_CONFIG_FIELD_NUMBER = 5;
    private io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig dnsResolutionConfig_;
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config is deprecated.
     *     See envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto;l=73
     * @return Whether the dnsResolutionConfig field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasDnsResolutionConfig() {
      return dnsResolutionConfig_ != null;
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config is deprecated.
     *     See envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto;l=73
     * @return The dnsResolutionConfig.
     */
    @java.lang.Override
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig getDnsResolutionConfig() {
      return dnsResolutionConfig_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder getDnsResolutionConfigOrBuilder() {
      return getDnsResolutionConfig();
    }

    public static final int TYPED_DNS_RESOLVER_CONFIG_FIELD_NUMBER = 4;
    private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig typedDnsResolverConfig_;
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
     * @return Whether the typedDnsResolverConfig field is set.
     */
    @java.lang.Override
    public boolean hasTypedDnsResolverConfig() {
      return typedDnsResolverConfig_ != null;
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
     * @return The typedDnsResolverConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedDnsResolverConfig() {
      return typedDnsResolverConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedDnsResolverConfigOrBuilder() {
      return getTypedDnsResolverConfig();
    }

    public static final int MAX_PENDING_LOOKUPS_FIELD_NUMBER = 3;
    private long maxPendingLookups_;
    /**
     * <pre>
     * Controls how many outstanding external lookup contexts the filter tracks.
     * The context structure allows the filter to respond to every query even if the external
     * resolution times out or is otherwise unsuccessful
     * </pre>
     *
     * <code>uint64 max_pending_lookups = 3 [(.validate.rules) = { ... }</code>
     * @return The maxPendingLookups.
     */
    @java.lang.Override
    public long getMaxPendingLookups() {
      return maxPendingLookups_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (resolverTimeout_ != null) {
        output.writeMessage(1, getResolverTimeout());
      }
      for (int i = 0; i < upstreamResolvers_.size(); i++) {
        output.writeMessage(2, upstreamResolvers_.get(i));
      }
      if (maxPendingLookups_ != 0L) {
        output.writeUInt64(3, maxPendingLookups_);
      }
      if (typedDnsResolverConfig_ != null) {
        output.writeMessage(4, getTypedDnsResolverConfig());
      }
      if (dnsResolutionConfig_ != null) {
        output.writeMessage(5, getDnsResolutionConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (resolverTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getResolverTimeout());
      }
      for (int i = 0; i < upstreamResolvers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, upstreamResolvers_.get(i));
      }
      if (maxPendingLookups_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, maxPendingLookups_);
      }
      if (typedDnsResolverConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getTypedDnsResolverConfig());
      }
      if (dnsResolutionConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getDnsResolutionConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig other = (io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig) obj;

      if (hasResolverTimeout() != other.hasResolverTimeout()) return false;
      if (hasResolverTimeout()) {
        if (!getResolverTimeout()
            .equals(other.getResolverTimeout())) return false;
      }
      if (!getUpstreamResolversList()
          .equals(other.getUpstreamResolversList())) return false;
      if (hasDnsResolutionConfig() != other.hasDnsResolutionConfig()) return false;
      if (hasDnsResolutionConfig()) {
        if (!getDnsResolutionConfig()
            .equals(other.getDnsResolutionConfig())) return false;
      }
      if (hasTypedDnsResolverConfig() != other.hasTypedDnsResolverConfig()) return false;
      if (hasTypedDnsResolverConfig()) {
        if (!getTypedDnsResolverConfig()
            .equals(other.getTypedDnsResolverConfig())) return false;
      }
      if (getMaxPendingLookups()
          != other.getMaxPendingLookups()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasResolverTimeout()) {
        hash = (37 * hash) + RESOLVER_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getResolverTimeout().hashCode();
      }
      if (getUpstreamResolversCount() > 0) {
        hash = (37 * hash) + UPSTREAM_RESOLVERS_FIELD_NUMBER;
        hash = (53 * hash) + getUpstreamResolversList().hashCode();
      }
      if (hasDnsResolutionConfig()) {
        hash = (37 * hash) + DNS_RESOLUTION_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getDnsResolutionConfig().hashCode();
      }
      if (hasTypedDnsResolverConfig()) {
        hash = (37 * hash) + TYPED_DNS_RESOLVER_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getTypedDnsResolverConfig().hashCode();
      }
      hash = (37 * hash) + MAX_PENDING_LOOKUPS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxPendingLookups());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This message contains the configuration for the DNS Filter operating
     * in a client context. This message will contain the timeouts, retry,
     * and forwarding configuration for Envoy to make DNS requests to other
     * resolvers
     * [#next-free-field: 6]
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ClientContextConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ClientContextConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.class, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getUpstreamResolversFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (resolverTimeoutBuilder_ == null) {
          resolverTimeout_ = null;
        } else {
          resolverTimeout_ = null;
          resolverTimeoutBuilder_ = null;
        }
        if (upstreamResolversBuilder_ == null) {
          upstreamResolvers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          upstreamResolversBuilder_.clear();
        }
        if (dnsResolutionConfigBuilder_ == null) {
          dnsResolutionConfig_ = null;
        } else {
          dnsResolutionConfig_ = null;
          dnsResolutionConfigBuilder_ = null;
        }
        if (typedDnsResolverConfigBuilder_ == null) {
          typedDnsResolverConfig_ = null;
        } else {
          typedDnsResolverConfig_ = null;
          typedDnsResolverConfigBuilder_ = null;
        }
        maxPendingLookups_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_ClientContextConfig_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig build() {
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig buildPartial() {
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig result = new io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig(this);
        int from_bitField0_ = bitField0_;
        if (resolverTimeoutBuilder_ == null) {
          result.resolverTimeout_ = resolverTimeout_;
        } else {
          result.resolverTimeout_ = resolverTimeoutBuilder_.build();
        }
        if (upstreamResolversBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            upstreamResolvers_ = java.util.Collections.unmodifiableList(upstreamResolvers_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.upstreamResolvers_ = upstreamResolvers_;
        } else {
          result.upstreamResolvers_ = upstreamResolversBuilder_.build();
        }
        if (dnsResolutionConfigBuilder_ == null) {
          result.dnsResolutionConfig_ = dnsResolutionConfig_;
        } else {
          result.dnsResolutionConfig_ = dnsResolutionConfigBuilder_.build();
        }
        if (typedDnsResolverConfigBuilder_ == null) {
          result.typedDnsResolverConfig_ = typedDnsResolverConfig_;
        } else {
          result.typedDnsResolverConfig_ = typedDnsResolverConfigBuilder_.build();
        }
        result.maxPendingLookups_ = maxPendingLookups_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig other) {
        if (other == io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.getDefaultInstance()) return this;
        if (other.hasResolverTimeout()) {
          mergeResolverTimeout(other.getResolverTimeout());
        }
        if (upstreamResolversBuilder_ == null) {
          if (!other.upstreamResolvers_.isEmpty()) {
            if (upstreamResolvers_.isEmpty()) {
              upstreamResolvers_ = other.upstreamResolvers_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUpstreamResolversIsMutable();
              upstreamResolvers_.addAll(other.upstreamResolvers_);
            }
            onChanged();
          }
        } else {
          if (!other.upstreamResolvers_.isEmpty()) {
            if (upstreamResolversBuilder_.isEmpty()) {
              upstreamResolversBuilder_.dispose();
              upstreamResolversBuilder_ = null;
              upstreamResolvers_ = other.upstreamResolvers_;
              bitField0_ = (bitField0_ & ~0x00000001);
              upstreamResolversBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUpstreamResolversFieldBuilder() : null;
            } else {
              upstreamResolversBuilder_.addAllMessages(other.upstreamResolvers_);
            }
          }
        }
        if (other.hasDnsResolutionConfig()) {
          mergeDnsResolutionConfig(other.getDnsResolutionConfig());
        }
        if (other.hasTypedDnsResolverConfig()) {
          mergeTypedDnsResolverConfig(other.getTypedDnsResolverConfig());
        }
        if (other.getMaxPendingLookups() != 0L) {
          setMaxPendingLookups(other.getMaxPendingLookups());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Duration resolverTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> resolverTimeoutBuilder_;
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       * @return Whether the resolverTimeout field is set.
       */
      public boolean hasResolverTimeout() {
        return resolverTimeoutBuilder_ != null || resolverTimeout_ != null;
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       * @return The resolverTimeout.
       */
      public com.google.protobuf.Duration getResolverTimeout() {
        if (resolverTimeoutBuilder_ == null) {
          return resolverTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : resolverTimeout_;
        } else {
          return resolverTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setResolverTimeout(com.google.protobuf.Duration value) {
        if (resolverTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resolverTimeout_ = value;
          onChanged();
        } else {
          resolverTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setResolverTimeout(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (resolverTimeoutBuilder_ == null) {
          resolverTimeout_ = builderForValue.build();
          onChanged();
        } else {
          resolverTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeResolverTimeout(com.google.protobuf.Duration value) {
        if (resolverTimeoutBuilder_ == null) {
          if (resolverTimeout_ != null) {
            resolverTimeout_ =
              com.google.protobuf.Duration.newBuilder(resolverTimeout_).mergeFrom(value).buildPartial();
          } else {
            resolverTimeout_ = value;
          }
          onChanged();
        } else {
          resolverTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder clearResolverTimeout() {
        if (resolverTimeoutBuilder_ == null) {
          resolverTimeout_ = null;
          onChanged();
        } else {
          resolverTimeout_ = null;
          resolverTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.Duration.Builder getResolverTimeoutBuilder() {
        
        onChanged();
        return getResolverTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.DurationOrBuilder getResolverTimeoutOrBuilder() {
        if (resolverTimeoutBuilder_ != null) {
          return resolverTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return resolverTimeout_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : resolverTimeout_;
        }
      }
      /**
       * <pre>
       * Sets the maximum time we will wait for the upstream query to complete
       * We allow 5s for the upstream resolution to complete, so the minimum
       * value here is 1. Note that the total latency for a failed query is the
       * number of retries multiplied by the resolver_timeout.
       * </pre>
       *
       * <code>.google.protobuf.Duration resolver_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getResolverTimeoutFieldBuilder() {
        if (resolverTimeoutBuilder_ == null) {
          resolverTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getResolverTimeout(),
                  getParentForChildren(),
                  isClean());
          resolverTimeout_ = null;
        }
        return resolverTimeoutBuilder_;
      }

      private java.util.List<io.envoyproxy.envoy.config.core.v3.Address> upstreamResolvers_ =
        java.util.Collections.emptyList();
      private void ensureUpstreamResolversIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          upstreamResolvers_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.Address>(upstreamResolvers_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.Address, io.envoyproxy.envoy.config.core.v3.Address.Builder, io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> upstreamResolversBuilder_;

      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public java.util.List<io.envoyproxy.envoy.config.core.v3.Address> getUpstreamResolversList() {
        if (upstreamResolversBuilder_ == null) {
          return java.util.Collections.unmodifiableList(upstreamResolvers_);
        } else {
          return upstreamResolversBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public int getUpstreamResolversCount() {
        if (upstreamResolversBuilder_ == null) {
          return upstreamResolvers_.size();
        } else {
          return upstreamResolversBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.Address getUpstreamResolvers(int index) {
        if (upstreamResolversBuilder_ == null) {
          return upstreamResolvers_.get(index);
        } else {
          return upstreamResolversBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder setUpstreamResolvers(
          int index, io.envoyproxy.envoy.config.core.v3.Address value) {
        if (upstreamResolversBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.set(index, value);
          onChanged();
        } else {
          upstreamResolversBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder setUpstreamResolvers(
          int index, io.envoyproxy.envoy.config.core.v3.Address.Builder builderForValue) {
        if (upstreamResolversBuilder_ == null) {
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.set(index, builderForValue.build());
          onChanged();
        } else {
          upstreamResolversBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder addUpstreamResolvers(io.envoyproxy.envoy.config.core.v3.Address value) {
        if (upstreamResolversBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.add(value);
          onChanged();
        } else {
          upstreamResolversBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder addUpstreamResolvers(
          int index, io.envoyproxy.envoy.config.core.v3.Address value) {
        if (upstreamResolversBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.add(index, value);
          onChanged();
        } else {
          upstreamResolversBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder addUpstreamResolvers(
          io.envoyproxy.envoy.config.core.v3.Address.Builder builderForValue) {
        if (upstreamResolversBuilder_ == null) {
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.add(builderForValue.build());
          onChanged();
        } else {
          upstreamResolversBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder addUpstreamResolvers(
          int index, io.envoyproxy.envoy.config.core.v3.Address.Builder builderForValue) {
        if (upstreamResolversBuilder_ == null) {
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.add(index, builderForValue.build());
          onChanged();
        } else {
          upstreamResolversBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder addAllUpstreamResolvers(
          java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.Address> values) {
        if (upstreamResolversBuilder_ == null) {
          ensureUpstreamResolversIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, upstreamResolvers_);
          onChanged();
        } else {
          upstreamResolversBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder clearUpstreamResolvers() {
        if (upstreamResolversBuilder_ == null) {
          upstreamResolvers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          upstreamResolversBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder removeUpstreamResolvers(int index) {
        if (upstreamResolversBuilder_ == null) {
          ensureUpstreamResolversIsMutable();
          upstreamResolvers_.remove(index);
          onChanged();
        } else {
          upstreamResolversBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.Address.Builder getUpstreamResolversBuilder(
          int index) {
        return getUpstreamResolversFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getUpstreamResolversOrBuilder(
          int index) {
        if (upstreamResolversBuilder_ == null) {
          return upstreamResolvers_.get(index);  } else {
          return upstreamResolversBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
           getUpstreamResolversOrBuilderList() {
        if (upstreamResolversBuilder_ != null) {
          return upstreamResolversBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(upstreamResolvers_);
        }
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.Address.Builder addUpstreamResolversBuilder() {
        return getUpstreamResolversFieldBuilder().addBuilder(
            io.envoyproxy.envoy.config.core.v3.Address.getDefaultInstance());
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.Address.Builder addUpstreamResolversBuilder(
          int index) {
        return getUpstreamResolversFieldBuilder().addBuilder(
            index, io.envoyproxy.envoy.config.core.v3.Address.getDefaultInstance());
      }
      /**
       * <pre>
       * This field was used for `dns_resolution_config` in Envoy 1.19.0 and
       * 1.19.1.
       * Control planes that need to set this field for Envoy 1.19.0 and
       * 1.19.1 clients should fork the protobufs and change the field type
       * to `DnsResolutionConfig`.
       * Control planes that need to simultaneously support Envoy 1.18.x and
       * Envoy 1.19.x should avoid Envoy 1.19.0 and 1.19.1.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.Address upstream_resolvers = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public java.util.List<io.envoyproxy.envoy.config.core.v3.Address.Builder> 
           getUpstreamResolversBuilderList() {
        return getUpstreamResolversFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.Address, io.envoyproxy.envoy.config.core.v3.Address.Builder, io.envoyproxy.envoy.config.core.v3.AddressOrBuilder> 
          getUpstreamResolversFieldBuilder() {
        if (upstreamResolversBuilder_ == null) {
          upstreamResolversBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.Address, io.envoyproxy.envoy.config.core.v3.Address.Builder, io.envoyproxy.envoy.config.core.v3.AddressOrBuilder>(
                  upstreamResolvers_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          upstreamResolvers_ = null;
        }
        return upstreamResolversBuilder_;
      }

      private io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig dnsResolutionConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder> dnsResolutionConfigBuilder_;
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       * @deprecated envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config is deprecated.
       *     See envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto;l=73
       * @return Whether the dnsResolutionConfig field is set.
       */
      @java.lang.Deprecated public boolean hasDnsResolutionConfig() {
        return dnsResolutionConfigBuilder_ != null || dnsResolutionConfig_ != null;
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       * @deprecated envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config is deprecated.
       *     See envoy/extensions/filters/udp/dns_filter/v3/dns_filter.proto;l=73
       * @return The dnsResolutionConfig.
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig getDnsResolutionConfig() {
        if (dnsResolutionConfigBuilder_ == null) {
          return dnsResolutionConfig_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
        } else {
          return dnsResolutionConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder setDnsResolutionConfig(io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig value) {
        if (dnsResolutionConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dnsResolutionConfig_ = value;
          onChanged();
        } else {
          dnsResolutionConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder setDnsResolutionConfig(
          io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder builderForValue) {
        if (dnsResolutionConfigBuilder_ == null) {
          dnsResolutionConfig_ = builderForValue.build();
          onChanged();
        } else {
          dnsResolutionConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder mergeDnsResolutionConfig(io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig value) {
        if (dnsResolutionConfigBuilder_ == null) {
          if (dnsResolutionConfig_ != null) {
            dnsResolutionConfig_ =
              io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.newBuilder(dnsResolutionConfig_).mergeFrom(value).buildPartial();
          } else {
            dnsResolutionConfig_ = value;
          }
          onChanged();
        } else {
          dnsResolutionConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public Builder clearDnsResolutionConfig() {
        if (dnsResolutionConfigBuilder_ == null) {
          dnsResolutionConfig_ = null;
          onChanged();
        } else {
          dnsResolutionConfig_ = null;
          dnsResolutionConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder getDnsResolutionConfigBuilder() {
        
        onChanged();
        return getDnsResolutionConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder getDnsResolutionConfigOrBuilder() {
        if (dnsResolutionConfigBuilder_ != null) {
          return dnsResolutionConfigBuilder_.getMessageOrBuilder();
        } else {
          return dnsResolutionConfig_ == null ?
              io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
        }
      }
      /**
       * <pre>
       * DNS resolution configuration which includes the underlying dns resolver addresses and options.
       * This field is deprecated in favor of
       * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config&gt;`.
       * </pre>
       *
       * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder> 
          getDnsResolutionConfigFieldBuilder() {
        if (dnsResolutionConfigBuilder_ == null) {
          dnsResolutionConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder>(
                  getDnsResolutionConfig(),
                  getParentForChildren(),
                  isClean());
          dnsResolutionConfig_ = null;
        }
        return dnsResolutionConfigBuilder_;
      }

      private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig typedDnsResolverConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> typedDnsResolverConfigBuilder_;
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       * @return Whether the typedDnsResolverConfig field is set.
       */
      public boolean hasTypedDnsResolverConfig() {
        return typedDnsResolverConfigBuilder_ != null || typedDnsResolverConfig_ != null;
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       * @return The typedDnsResolverConfig.
       */
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedDnsResolverConfig() {
        if (typedDnsResolverConfigBuilder_ == null) {
          return typedDnsResolverConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
        } else {
          return typedDnsResolverConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      public Builder setTypedDnsResolverConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
        if (typedDnsResolverConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          typedDnsResolverConfig_ = value;
          onChanged();
        } else {
          typedDnsResolverConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      public Builder setTypedDnsResolverConfig(
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
        if (typedDnsResolverConfigBuilder_ == null) {
          typedDnsResolverConfig_ = builderForValue.build();
          onChanged();
        } else {
          typedDnsResolverConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      public Builder mergeTypedDnsResolverConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
        if (typedDnsResolverConfigBuilder_ == null) {
          if (typedDnsResolverConfig_ != null) {
            typedDnsResolverConfig_ =
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder(typedDnsResolverConfig_).mergeFrom(value).buildPartial();
          } else {
            typedDnsResolverConfig_ = value;
          }
          onChanged();
        } else {
          typedDnsResolverConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      public Builder clearTypedDnsResolverConfig() {
        if (typedDnsResolverConfigBuilder_ == null) {
          typedDnsResolverConfig_ = null;
          onChanged();
        } else {
          typedDnsResolverConfig_ = null;
          typedDnsResolverConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getTypedDnsResolverConfigBuilder() {
        
        onChanged();
        return getTypedDnsResolverConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedDnsResolverConfigOrBuilder() {
        if (typedDnsResolverConfigBuilder_ != null) {
          return typedDnsResolverConfigBuilder_.getMessageOrBuilder();
        } else {
          return typedDnsResolverConfig_ == null ?
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
        }
      }
      /**
       * <pre>
       * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
       * or any other DNS resolver types and the related parameters.
       * For example, an object of
       * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
       * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
       * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config&gt;`
       * configuration.
       * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
       * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
       * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
       * [#extension-category: envoy.network.dns_resolver]
       * </pre>
       *
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
          getTypedDnsResolverConfigFieldBuilder() {
        if (typedDnsResolverConfigBuilder_ == null) {
          typedDnsResolverConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                  getTypedDnsResolverConfig(),
                  getParentForChildren(),
                  isClean());
          typedDnsResolverConfig_ = null;
        }
        return typedDnsResolverConfigBuilder_;
      }

      private long maxPendingLookups_ ;
      /**
       * <pre>
       * Controls how many outstanding external lookup contexts the filter tracks.
       * The context structure allows the filter to respond to every query even if the external
       * resolution times out or is otherwise unsuccessful
       * </pre>
       *
       * <code>uint64 max_pending_lookups = 3 [(.validate.rules) = { ... }</code>
       * @return The maxPendingLookups.
       */
      @java.lang.Override
      public long getMaxPendingLookups() {
        return maxPendingLookups_;
      }
      /**
       * <pre>
       * Controls how many outstanding external lookup contexts the filter tracks.
       * The context structure allows the filter to respond to every query even if the external
       * resolution times out or is otherwise unsuccessful
       * </pre>
       *
       * <code>uint64 max_pending_lookups = 3 [(.validate.rules) = { ... }</code>
       * @param value The maxPendingLookups to set.
       * @return This builder for chaining.
       */
      public Builder setMaxPendingLookups(long value) {
        
        maxPendingLookups_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Controls how many outstanding external lookup contexts the filter tracks.
       * The context structure allows the filter to respond to every query even if the external
       * resolution times out or is otherwise unsuccessful
       * </pre>
       *
       * <code>uint64 max_pending_lookups = 3 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxPendingLookups() {
        
        maxPendingLookups_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig)
    private static final io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig();
    }

    public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClientContextConfig>
        PARSER = new com.google.protobuf.AbstractParser<ClientContextConfig>() {
      @java.lang.Override
      public ClientContextConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClientContextConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClientContextConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClientContextConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int STAT_PREFIX_FIELD_NUMBER = 1;
  private volatile java.lang.Object statPrefix_;
  /**
   * <pre>
   * The stat prefix used when emitting DNS filter statistics
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  @java.lang.Override
  public java.lang.String getStatPrefix() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      statPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The stat prefix used when emitting DNS filter statistics
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStatPrefixBytes() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      statPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SERVER_CONFIG_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig serverConfig_;
  /**
   * <pre>
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
   * @return Whether the serverConfig field is set.
   */
  @java.lang.Override
  public boolean hasServerConfig() {
    return serverConfig_ != null;
  }
  /**
   * <pre>
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
   * @return The serverConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig getServerConfig() {
    return serverConfig_ == null ? io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.getDefaultInstance() : serverConfig_;
  }
  /**
   * <pre>
   * Server context configuration contains the data that the filter uses to respond
   * to DNS requests.
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder getServerConfigOrBuilder() {
    return getServerConfig();
  }

  public static final int CLIENT_CONFIG_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig clientConfig_;
  /**
   * <pre>
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
   * @return Whether the clientConfig field is set.
   */
  @java.lang.Override
  public boolean hasClientConfig() {
    return clientConfig_ != null;
  }
  /**
   * <pre>
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
   * @return The clientConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig getClientConfig() {
    return clientConfig_ == null ? io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.getDefaultInstance() : clientConfig_;
  }
  /**
   * <pre>
   * Client context configuration controls Envoy's behavior when it must use external
   * resolvers to answer a query. This object is optional and if omitted instructs
   * the filter to resolve queries from the data in the server_config
   * </pre>
   *
   * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder getClientConfigOrBuilder() {
    return getClientConfig();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, statPrefix_);
    }
    if (serverConfig_ != null) {
      output.writeMessage(2, getServerConfig());
    }
    if (clientConfig_ != null) {
      output.writeMessage(3, getClientConfig());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statPrefix_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, statPrefix_);
    }
    if (serverConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getServerConfig());
    }
    if (clientConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getClientConfig());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig other = (io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig) obj;

    if (!getStatPrefix()
        .equals(other.getStatPrefix())) return false;
    if (hasServerConfig() != other.hasServerConfig()) return false;
    if (hasServerConfig()) {
      if (!getServerConfig()
          .equals(other.getServerConfig())) return false;
    }
    if (hasClientConfig() != other.hasClientConfig()) return false;
    if (hasClientConfig()) {
      if (!getClientConfig()
          .equals(other.getClientConfig())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STAT_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getStatPrefix().hashCode();
    if (hasServerConfig()) {
      hash = (37 * hash) + SERVER_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getServerConfig().hashCode();
    }
    if (hasClientConfig()) {
      hash = (37 * hash) + CLIENT_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getClientConfig().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for the DNS filter.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)
      io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.class, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      statPrefix_ = "";

      if (serverConfigBuilder_ == null) {
        serverConfig_ = null;
      } else {
        serverConfig_ = null;
        serverConfigBuilder_ = null;
      }
      if (clientConfigBuilder_ == null) {
        clientConfig_ = null;
      } else {
        clientConfig_ = null;
        clientConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterProto.internal_static_envoy_extensions_filters_udp_dns_filter_v3_DnsFilterConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig build() {
      io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig result = new io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig(this);
      result.statPrefix_ = statPrefix_;
      if (serverConfigBuilder_ == null) {
        result.serverConfig_ = serverConfig_;
      } else {
        result.serverConfig_ = serverConfigBuilder_.build();
      }
      if (clientConfigBuilder_ == null) {
        result.clientConfig_ = clientConfig_;
      } else {
        result.clientConfig_ = clientConfigBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.getDefaultInstance()) return this;
      if (!other.getStatPrefix().isEmpty()) {
        statPrefix_ = other.statPrefix_;
        onChanged();
      }
      if (other.hasServerConfig()) {
        mergeServerConfig(other.getServerConfig());
      }
      if (other.hasClientConfig()) {
        mergeClientConfig(other.getClientConfig());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object statPrefix_ = "";
    /**
     * <pre>
     * The stat prefix used when emitting DNS filter statistics
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The statPrefix.
     */
    public java.lang.String getStatPrefix() {
      java.lang.Object ref = statPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The stat prefix used when emitting DNS filter statistics
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for statPrefix.
     */
    public com.google.protobuf.ByteString
        getStatPrefixBytes() {
      java.lang.Object ref = statPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The stat prefix used when emitting DNS filter statistics
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefix(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      statPrefix_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The stat prefix used when emitting DNS filter statistics
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStatPrefix() {
      
      statPrefix_ = getDefaultInstance().getStatPrefix();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The stat prefix used when emitting DNS filter statistics
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      statPrefix_ = value;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig serverConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder> serverConfigBuilder_;
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     * @return Whether the serverConfig field is set.
     */
    public boolean hasServerConfig() {
      return serverConfigBuilder_ != null || serverConfig_ != null;
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     * @return The serverConfig.
     */
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig getServerConfig() {
      if (serverConfigBuilder_ == null) {
        return serverConfig_ == null ? io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.getDefaultInstance() : serverConfig_;
      } else {
        return serverConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    public Builder setServerConfig(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig value) {
      if (serverConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        serverConfig_ = value;
        onChanged();
      } else {
        serverConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    public Builder setServerConfig(
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder builderForValue) {
      if (serverConfigBuilder_ == null) {
        serverConfig_ = builderForValue.build();
        onChanged();
      } else {
        serverConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    public Builder mergeServerConfig(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig value) {
      if (serverConfigBuilder_ == null) {
        if (serverConfig_ != null) {
          serverConfig_ =
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.newBuilder(serverConfig_).mergeFrom(value).buildPartial();
        } else {
          serverConfig_ = value;
        }
        onChanged();
      } else {
        serverConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    public Builder clearServerConfig() {
      if (serverConfigBuilder_ == null) {
        serverConfig_ = null;
        onChanged();
      } else {
        serverConfig_ = null;
        serverConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder getServerConfigBuilder() {
      
      onChanged();
      return getServerConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder getServerConfigOrBuilder() {
      if (serverConfigBuilder_ != null) {
        return serverConfigBuilder_.getMessageOrBuilder();
      } else {
        return serverConfig_ == null ?
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.getDefaultInstance() : serverConfig_;
      }
    }
    /**
     * <pre>
     * Server context configuration contains the data that the filter uses to respond
     * to DNS requests.
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig server_config = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder> 
        getServerConfigFieldBuilder() {
      if (serverConfigBuilder_ == null) {
        serverConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfig.Builder, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ServerContextConfigOrBuilder>(
                getServerConfig(),
                getParentForChildren(),
                isClean());
        serverConfig_ = null;
      }
      return serverConfigBuilder_;
    }

    private io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig clientConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder> clientConfigBuilder_;
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     * @return Whether the clientConfig field is set.
     */
    public boolean hasClientConfig() {
      return clientConfigBuilder_ != null || clientConfig_ != null;
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     * @return The clientConfig.
     */
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig getClientConfig() {
      if (clientConfigBuilder_ == null) {
        return clientConfig_ == null ? io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.getDefaultInstance() : clientConfig_;
      } else {
        return clientConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    public Builder setClientConfig(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig value) {
      if (clientConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        clientConfig_ = value;
        onChanged();
      } else {
        clientConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    public Builder setClientConfig(
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder builderForValue) {
      if (clientConfigBuilder_ == null) {
        clientConfig_ = builderForValue.build();
        onChanged();
      } else {
        clientConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    public Builder mergeClientConfig(io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig value) {
      if (clientConfigBuilder_ == null) {
        if (clientConfig_ != null) {
          clientConfig_ =
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.newBuilder(clientConfig_).mergeFrom(value).buildPartial();
        } else {
          clientConfig_ = value;
        }
        onChanged();
      } else {
        clientConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    public Builder clearClientConfig() {
      if (clientConfigBuilder_ == null) {
        clientConfig_ = null;
        onChanged();
      } else {
        clientConfig_ = null;
        clientConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder getClientConfigBuilder() {
      
      onChanged();
      return getClientConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder getClientConfigOrBuilder() {
      if (clientConfigBuilder_ != null) {
        return clientConfigBuilder_.getMessageOrBuilder();
      } else {
        return clientConfig_ == null ?
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.getDefaultInstance() : clientConfig_;
      }
    }
    /**
     * <pre>
     * Client context configuration controls Envoy's behavior when it must use external
     * resolvers to answer a query. This object is optional and if omitted instructs
     * the filter to resolve queries from the data in the server_config
     * </pre>
     *
     * <code>.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig client_config = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder> 
        getClientConfigFieldBuilder() {
      if (clientConfigBuilder_ == null) {
        clientConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.Builder, io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfigOrBuilder>(
                getClientConfig(),
                getParentForChildren(),
                isClean());
        clientConfig_ = null;
      }
      return clientConfigBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig)
  private static final io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DnsFilterConfig>
      PARSER = new com.google.protobuf.AbstractParser<DnsFilterConfig>() {
    @java.lang.Override
    public DnsFilterConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DnsFilterConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DnsFilterConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DnsFilterConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

