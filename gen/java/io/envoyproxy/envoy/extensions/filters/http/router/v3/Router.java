// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/router/v3/router.proto

package io.envoyproxy.envoy.extensions.filters.http.router.v3;

/**
 * <pre>
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.router.v3.Router}
 */
public final class Router extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.router.v3.Router)
    RouterOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Router.newBuilder() to construct.
  private Router(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Router() {
    upstreamLog_ = java.util.Collections.emptyList();
    strictCheckHeaders_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    upstreamHttpFilters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Router();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.router.v3.RouterProto.internal_static_envoy_extensions_filters_http_router_v3_Router_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.router.v3.RouterProto.internal_static_envoy_extensions_filters_http_router_v3_Router_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.class, io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.Builder.class);
  }

  public static final int DYNAMIC_STATS_FIELD_NUMBER = 1;
  private com.google.protobuf.BoolValue dynamicStats_;
  /**
   * <pre>
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
   * @return Whether the dynamicStats field is set.
   */
  @java.lang.Override
  public boolean hasDynamicStats() {
    return dynamicStats_ != null;
  }
  /**
   * <pre>
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
   * @return The dynamicStats.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getDynamicStats() {
    return dynamicStats_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : dynamicStats_;
  }
  /**
   * <pre>
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getDynamicStatsOrBuilder() {
    return dynamicStats_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : dynamicStats_;
  }

  public static final int START_CHILD_SPAN_FIELD_NUMBER = 2;
  private boolean startChildSpan_ = false;
  /**
   * <pre>
   * Whether to start a child span for egress routed calls. This can be
   * useful in scenarios where other filters (auth, ratelimit, etc.) make
   * outbound calls and have child spans rooted at the same ingress
   * parent. Defaults to false.
   * </pre>
   *
   * <code>bool start_child_span = 2;</code>
   * @return The startChildSpan.
   */
  @java.lang.Override
  public boolean getStartChildSpan() {
    return startChildSpan_;
  }

  public static final int UPSTREAM_LOG_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> upstreamLog_;
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> getUpstreamLogList() {
    return upstreamLog_;
  }
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
      getUpstreamLogOrBuilderList() {
    return upstreamLog_;
  }
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  @java.lang.Override
  public int getUpstreamLogCount() {
    return upstreamLog_.size();
  }
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.accesslog.v3.AccessLog getUpstreamLog(int index) {
    return upstreamLog_.get(index);
  }
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder getUpstreamLogOrBuilder(
      int index) {
    return upstreamLog_.get(index);
  }

  public static final int SUPPRESS_ENVOY_HEADERS_FIELD_NUMBER = 4;
  private boolean suppressEnvoyHeaders_ = false;
  /**
   * <pre>
   * Do not add any additional ``x-envoy-`` headers to requests or responses. This
   * only affects the :ref:`router filter generated x-envoy- headers
   * &lt;config_http_filters_router_headers_set&gt;`, other Envoy filters and the HTTP
   * connection manager may continue to set ``x-envoy-`` headers.
   * </pre>
   *
   * <code>bool suppress_envoy_headers = 4;</code>
   * @return The suppressEnvoyHeaders.
   */
  @java.lang.Override
  public boolean getSuppressEnvoyHeaders() {
    return suppressEnvoyHeaders_;
  }

  public static final int STRICT_CHECK_HEADERS_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList strictCheckHeaders_;
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @return A list containing the strictCheckHeaders.
   */
  public com.google.protobuf.ProtocolStringList
      getStrictCheckHeadersList() {
    return strictCheckHeaders_;
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @return The count of strictCheckHeaders.
   */
  public int getStrictCheckHeadersCount() {
    return strictCheckHeaders_.size();
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @param index The index of the element to return.
   * @return The strictCheckHeaders at the given index.
   */
  public java.lang.String getStrictCheckHeaders(int index) {
    return strictCheckHeaders_.get(index);
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the strictCheckHeaders at the given index.
   */
  public com.google.protobuf.ByteString
      getStrictCheckHeadersBytes(int index) {
    return strictCheckHeaders_.getByteString(index);
  }

  public static final int RESPECT_EXPECTED_RQ_TIMEOUT_FIELD_NUMBER = 6;
  private boolean respectExpectedRqTimeout_ = false;
  /**
   * <pre>
   * If not set, ingress Envoy will ignore
   * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
   * Envoy, when deriving timeout for upstream cluster.
   * </pre>
   *
   * <code>bool respect_expected_rq_timeout = 6;</code>
   * @return The respectExpectedRqTimeout.
   */
  @java.lang.Override
  public boolean getRespectExpectedRqTimeout() {
    return respectExpectedRqTimeout_;
  }

  public static final int SUPPRESS_GRPC_REQUEST_FAILURE_CODE_STATS_FIELD_NUMBER = 7;
  private boolean suppressGrpcRequestFailureCodeStats_ = false;
  /**
   * <pre>
   * If set, Envoy will avoid incrementing HTTP failure code stats
   * on gRPC requests. This includes the individual status code value
   * (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
   * This field is useful if interested in relying only on the gRPC
   * stats filter to define success and failure metrics for gRPC requests
   * as not all failed gRPC requests charge HTTP status code metrics. See
   * :ref:`gRPC stats filter&lt;config_http_filters_grpc_stats&gt;` documentation
   * for more details.
   * </pre>
   *
   * <code>bool suppress_grpc_request_failure_code_stats = 7;</code>
   * @return The suppressGrpcRequestFailureCodeStats.
   */
  @java.lang.Override
  public boolean getSuppressGrpcRequestFailureCodeStats() {
    return suppressGrpcRequestFailureCodeStats_;
  }

  public static final int UPSTREAM_HTTP_FILTERS_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter> upstreamHttpFilters_;
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream filters cannot change route or cluster.
   * Upstream filters specified on the cluster will override these filters.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter> getUpstreamHttpFiltersList() {
    return upstreamHttpFilters_;
  }
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream filters cannot change route or cluster.
   * Upstream filters specified on the cluster will override these filters.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder> 
      getUpstreamHttpFiltersOrBuilderList() {
    return upstreamHttpFilters_;
  }
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream filters cannot change route or cluster.
   * Upstream filters specified on the cluster will override these filters.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
   */
  @java.lang.Override
  public int getUpstreamHttpFiltersCount() {
    return upstreamHttpFilters_.size();
  }
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream filters cannot change route or cluster.
   * Upstream filters specified on the cluster will override these filters.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter getUpstreamHttpFilters(int index) {
    return upstreamHttpFilters_.get(index);
  }
  /**
   * <pre>
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   * Optional HTTP filters for the upstream filter chain.
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream filters cannot change route or cluster.
   * Upstream filters specified on the cluster will override these filters.
   * If using upstream filters, please be aware that local errors sent by
   * upstream filters will not trigger retries, and local errors sent by
   * upstream filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder getUpstreamHttpFiltersOrBuilder(
      int index) {
    return upstreamHttpFilters_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (dynamicStats_ != null) {
      output.writeMessage(1, getDynamicStats());
    }
    if (startChildSpan_ != false) {
      output.writeBool(2, startChildSpan_);
    }
    for (int i = 0; i < upstreamLog_.size(); i++) {
      output.writeMessage(3, upstreamLog_.get(i));
    }
    if (suppressEnvoyHeaders_ != false) {
      output.writeBool(4, suppressEnvoyHeaders_);
    }
    for (int i = 0; i < strictCheckHeaders_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, strictCheckHeaders_.getRaw(i));
    }
    if (respectExpectedRqTimeout_ != false) {
      output.writeBool(6, respectExpectedRqTimeout_);
    }
    if (suppressGrpcRequestFailureCodeStats_ != false) {
      output.writeBool(7, suppressGrpcRequestFailureCodeStats_);
    }
    for (int i = 0; i < upstreamHttpFilters_.size(); i++) {
      output.writeMessage(8, upstreamHttpFilters_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (dynamicStats_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDynamicStats());
    }
    if (startChildSpan_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, startChildSpan_);
    }
    for (int i = 0; i < upstreamLog_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, upstreamLog_.get(i));
    }
    if (suppressEnvoyHeaders_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, suppressEnvoyHeaders_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < strictCheckHeaders_.size(); i++) {
        dataSize += computeStringSizeNoTag(strictCheckHeaders_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getStrictCheckHeadersList().size();
    }
    if (respectExpectedRqTimeout_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, respectExpectedRqTimeout_);
    }
    if (suppressGrpcRequestFailureCodeStats_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, suppressGrpcRequestFailureCodeStats_);
    }
    for (int i = 0; i < upstreamHttpFilters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, upstreamHttpFilters_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.router.v3.Router)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.router.v3.Router other = (io.envoyproxy.envoy.extensions.filters.http.router.v3.Router) obj;

    if (hasDynamicStats() != other.hasDynamicStats()) return false;
    if (hasDynamicStats()) {
      if (!getDynamicStats()
          .equals(other.getDynamicStats())) return false;
    }
    if (getStartChildSpan()
        != other.getStartChildSpan()) return false;
    if (!getUpstreamLogList()
        .equals(other.getUpstreamLogList())) return false;
    if (getSuppressEnvoyHeaders()
        != other.getSuppressEnvoyHeaders()) return false;
    if (!getStrictCheckHeadersList()
        .equals(other.getStrictCheckHeadersList())) return false;
    if (getRespectExpectedRqTimeout()
        != other.getRespectExpectedRqTimeout()) return false;
    if (getSuppressGrpcRequestFailureCodeStats()
        != other.getSuppressGrpcRequestFailureCodeStats()) return false;
    if (!getUpstreamHttpFiltersList()
        .equals(other.getUpstreamHttpFiltersList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDynamicStats()) {
      hash = (37 * hash) + DYNAMIC_STATS_FIELD_NUMBER;
      hash = (53 * hash) + getDynamicStats().hashCode();
    }
    hash = (37 * hash) + START_CHILD_SPAN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getStartChildSpan());
    if (getUpstreamLogCount() > 0) {
      hash = (37 * hash) + UPSTREAM_LOG_FIELD_NUMBER;
      hash = (53 * hash) + getUpstreamLogList().hashCode();
    }
    hash = (37 * hash) + SUPPRESS_ENVOY_HEADERS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSuppressEnvoyHeaders());
    if (getStrictCheckHeadersCount() > 0) {
      hash = (37 * hash) + STRICT_CHECK_HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getStrictCheckHeadersList().hashCode();
    }
    hash = (37 * hash) + RESPECT_EXPECTED_RQ_TIMEOUT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRespectExpectedRqTimeout());
    hash = (37 * hash) + SUPPRESS_GRPC_REQUEST_FAILURE_CODE_STATS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSuppressGrpcRequestFailureCodeStats());
    if (getUpstreamHttpFiltersCount() > 0) {
      hash = (37 * hash) + UPSTREAM_HTTP_FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getUpstreamHttpFiltersList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.router.v3.Router prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.router.v3.Router}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.router.v3.Router)
      io.envoyproxy.envoy.extensions.filters.http.router.v3.RouterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.router.v3.RouterProto.internal_static_envoy_extensions_filters_http_router_v3_Router_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.router.v3.RouterProto.internal_static_envoy_extensions_filters_http_router_v3_Router_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.class, io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      dynamicStats_ = null;
      if (dynamicStatsBuilder_ != null) {
        dynamicStatsBuilder_.dispose();
        dynamicStatsBuilder_ = null;
      }
      startChildSpan_ = false;
      if (upstreamLogBuilder_ == null) {
        upstreamLog_ = java.util.Collections.emptyList();
      } else {
        upstreamLog_ = null;
        upstreamLogBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      suppressEnvoyHeaders_ = false;
      strictCheckHeaders_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      respectExpectedRqTimeout_ = false;
      suppressGrpcRequestFailureCodeStats_ = false;
      if (upstreamHttpFiltersBuilder_ == null) {
        upstreamHttpFilters_ = java.util.Collections.emptyList();
      } else {
        upstreamHttpFilters_ = null;
        upstreamHttpFiltersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000080);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.router.v3.RouterProto.internal_static_envoy_extensions_filters_http_router_v3_Router_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.router.v3.Router getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.router.v3.Router build() {
      io.envoyproxy.envoy.extensions.filters.http.router.v3.Router result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.router.v3.Router buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.router.v3.Router result = new io.envoyproxy.envoy.extensions.filters.http.router.v3.Router(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.extensions.filters.http.router.v3.Router result) {
      if (upstreamLogBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          upstreamLog_ = java.util.Collections.unmodifiableList(upstreamLog_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.upstreamLog_ = upstreamLog_;
      } else {
        result.upstreamLog_ = upstreamLogBuilder_.build();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        strictCheckHeaders_ = strictCheckHeaders_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.strictCheckHeaders_ = strictCheckHeaders_;
      if (upstreamHttpFiltersBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0)) {
          upstreamHttpFilters_ = java.util.Collections.unmodifiableList(upstreamHttpFilters_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.upstreamHttpFilters_ = upstreamHttpFilters_;
      } else {
        result.upstreamHttpFilters_ = upstreamHttpFiltersBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.router.v3.Router result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.dynamicStats_ = dynamicStatsBuilder_ == null
            ? dynamicStats_
            : dynamicStatsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.startChildSpan_ = startChildSpan_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.suppressEnvoyHeaders_ = suppressEnvoyHeaders_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.respectExpectedRqTimeout_ = respectExpectedRqTimeout_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.suppressGrpcRequestFailureCodeStats_ = suppressGrpcRequestFailureCodeStats_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.router.v3.Router) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.router.v3.Router)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.router.v3.Router other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.router.v3.Router.getDefaultInstance()) return this;
      if (other.hasDynamicStats()) {
        mergeDynamicStats(other.getDynamicStats());
      }
      if (other.getStartChildSpan() != false) {
        setStartChildSpan(other.getStartChildSpan());
      }
      if (upstreamLogBuilder_ == null) {
        if (!other.upstreamLog_.isEmpty()) {
          if (upstreamLog_.isEmpty()) {
            upstreamLog_ = other.upstreamLog_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureUpstreamLogIsMutable();
            upstreamLog_.addAll(other.upstreamLog_);
          }
          onChanged();
        }
      } else {
        if (!other.upstreamLog_.isEmpty()) {
          if (upstreamLogBuilder_.isEmpty()) {
            upstreamLogBuilder_.dispose();
            upstreamLogBuilder_ = null;
            upstreamLog_ = other.upstreamLog_;
            bitField0_ = (bitField0_ & ~0x00000004);
            upstreamLogBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getUpstreamLogFieldBuilder() : null;
          } else {
            upstreamLogBuilder_.addAllMessages(other.upstreamLog_);
          }
        }
      }
      if (other.getSuppressEnvoyHeaders() != false) {
        setSuppressEnvoyHeaders(other.getSuppressEnvoyHeaders());
      }
      if (!other.strictCheckHeaders_.isEmpty()) {
        if (strictCheckHeaders_.isEmpty()) {
          strictCheckHeaders_ = other.strictCheckHeaders_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureStrictCheckHeadersIsMutable();
          strictCheckHeaders_.addAll(other.strictCheckHeaders_);
        }
        onChanged();
      }
      if (other.getRespectExpectedRqTimeout() != false) {
        setRespectExpectedRqTimeout(other.getRespectExpectedRqTimeout());
      }
      if (other.getSuppressGrpcRequestFailureCodeStats() != false) {
        setSuppressGrpcRequestFailureCodeStats(other.getSuppressGrpcRequestFailureCodeStats());
      }
      if (upstreamHttpFiltersBuilder_ == null) {
        if (!other.upstreamHttpFilters_.isEmpty()) {
          if (upstreamHttpFilters_.isEmpty()) {
            upstreamHttpFilters_ = other.upstreamHttpFilters_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureUpstreamHttpFiltersIsMutable();
            upstreamHttpFilters_.addAll(other.upstreamHttpFilters_);
          }
          onChanged();
        }
      } else {
        if (!other.upstreamHttpFilters_.isEmpty()) {
          if (upstreamHttpFiltersBuilder_.isEmpty()) {
            upstreamHttpFiltersBuilder_.dispose();
            upstreamHttpFiltersBuilder_ = null;
            upstreamHttpFilters_ = other.upstreamHttpFilters_;
            bitField0_ = (bitField0_ & ~0x00000080);
            upstreamHttpFiltersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getUpstreamHttpFiltersFieldBuilder() : null;
          } else {
            upstreamHttpFiltersBuilder_.addAllMessages(other.upstreamHttpFilters_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getDynamicStatsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              startChildSpan_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              io.envoyproxy.envoy.config.accesslog.v3.AccessLog m =
                  input.readMessage(
                      io.envoyproxy.envoy.config.accesslog.v3.AccessLog.parser(),
                      extensionRegistry);
              if (upstreamLogBuilder_ == null) {
                ensureUpstreamLogIsMutable();
                upstreamLog_.add(m);
              } else {
                upstreamLogBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 32: {
              suppressEnvoyHeaders_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureStrictCheckHeadersIsMutable();
              strictCheckHeaders_.add(s);
              break;
            } // case 42
            case 48: {
              respectExpectedRqTimeout_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 56: {
              suppressGrpcRequestFailureCodeStats_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 66: {
              io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter m =
                  input.readMessage(
                      io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.parser(),
                      extensionRegistry);
              if (upstreamHttpFiltersBuilder_ == null) {
                ensureUpstreamHttpFiltersIsMutable();
                upstreamHttpFilters_.add(m);
              } else {
                upstreamHttpFiltersBuilder_.addMessage(m);
              }
              break;
            } // case 66
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.BoolValue dynamicStats_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> dynamicStatsBuilder_;
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     * @return Whether the dynamicStats field is set.
     */
    public boolean hasDynamicStats() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     * @return The dynamicStats.
     */
    public com.google.protobuf.BoolValue getDynamicStats() {
      if (dynamicStatsBuilder_ == null) {
        return dynamicStats_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : dynamicStats_;
      } else {
        return dynamicStatsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    public Builder setDynamicStats(com.google.protobuf.BoolValue value) {
      if (dynamicStatsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dynamicStats_ = value;
      } else {
        dynamicStatsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    public Builder setDynamicStats(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (dynamicStatsBuilder_ == null) {
        dynamicStats_ = builderForValue.build();
      } else {
        dynamicStatsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    public Builder mergeDynamicStats(com.google.protobuf.BoolValue value) {
      if (dynamicStatsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          dynamicStats_ != null &&
          dynamicStats_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
          getDynamicStatsBuilder().mergeFrom(value);
        } else {
          dynamicStats_ = value;
        }
      } else {
        dynamicStatsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    public Builder clearDynamicStats() {
      bitField0_ = (bitField0_ & ~0x00000001);
      dynamicStats_ = null;
      if (dynamicStatsBuilder_ != null) {
        dynamicStatsBuilder_.dispose();
        dynamicStatsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    public com.google.protobuf.BoolValue.Builder getDynamicStatsBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getDynamicStatsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getDynamicStatsOrBuilder() {
      if (dynamicStatsBuilder_ != null) {
        return dynamicStatsBuilder_.getMessageOrBuilder();
      } else {
        return dynamicStats_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : dynamicStats_;
      }
    }
    /**
     * <pre>
     * Whether the router generates dynamic cluster statistics. Defaults to
     * true. Can be disabled in high performance scenarios.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getDynamicStatsFieldBuilder() {
      if (dynamicStatsBuilder_ == null) {
        dynamicStatsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getDynamicStats(),
                getParentForChildren(),
                isClean());
        dynamicStats_ = null;
      }
      return dynamicStatsBuilder_;
    }

    private boolean startChildSpan_ ;
    /**
     * <pre>
     * Whether to start a child span for egress routed calls. This can be
     * useful in scenarios where other filters (auth, ratelimit, etc.) make
     * outbound calls and have child spans rooted at the same ingress
     * parent. Defaults to false.
     * </pre>
     *
     * <code>bool start_child_span = 2;</code>
     * @return The startChildSpan.
     */
    @java.lang.Override
    public boolean getStartChildSpan() {
      return startChildSpan_;
    }
    /**
     * <pre>
     * Whether to start a child span for egress routed calls. This can be
     * useful in scenarios where other filters (auth, ratelimit, etc.) make
     * outbound calls and have child spans rooted at the same ingress
     * parent. Defaults to false.
     * </pre>
     *
     * <code>bool start_child_span = 2;</code>
     * @param value The startChildSpan to set.
     * @return This builder for chaining.
     */
    public Builder setStartChildSpan(boolean value) {
      
      startChildSpan_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to start a child span for egress routed calls. This can be
     * useful in scenarios where other filters (auth, ratelimit, etc.) make
     * outbound calls and have child spans rooted at the same ingress
     * parent. Defaults to false.
     * </pre>
     *
     * <code>bool start_child_span = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartChildSpan() {
      bitField0_ = (bitField0_ & ~0x00000002);
      startChildSpan_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> upstreamLog_ =
      java.util.Collections.emptyList();
    private void ensureUpstreamLogIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        upstreamLog_ = new java.util.ArrayList<io.envoyproxy.envoy.config.accesslog.v3.AccessLog>(upstreamLog_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.accesslog.v3.AccessLog, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder, io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> upstreamLogBuilder_;

    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> getUpstreamLogList() {
      if (upstreamLogBuilder_ == null) {
        return java.util.Collections.unmodifiableList(upstreamLog_);
      } else {
        return upstreamLogBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public int getUpstreamLogCount() {
      if (upstreamLogBuilder_ == null) {
        return upstreamLog_.size();
      } else {
        return upstreamLogBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog getUpstreamLog(int index) {
      if (upstreamLogBuilder_ == null) {
        return upstreamLog_.get(index);
      } else {
        return upstreamLogBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder setUpstreamLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog value) {
      if (upstreamLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpstreamLogIsMutable();
        upstreamLog_.set(index, value);
        onChanged();
      } else {
        upstreamLogBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder setUpstreamLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder builderForValue) {
      if (upstreamLogBuilder_ == null) {
        ensureUpstreamLogIsMutable();
        upstreamLog_.set(index, builderForValue.build());
        onChanged();
      } else {
        upstreamLogBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder addUpstreamLog(io.envoyproxy.envoy.config.accesslog.v3.AccessLog value) {
      if (upstreamLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpstreamLogIsMutable();
        upstreamLog_.add(value);
        onChanged();
      } else {
        upstreamLogBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder addUpstreamLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog value) {
      if (upstreamLogBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpstreamLogIsMutable();
        upstreamLog_.add(index, value);
        onChanged();
      } else {
        upstreamLogBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder addUpstreamLog(
        io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder builderForValue) {
      if (upstreamLogBuilder_ == null) {
        ensureUpstreamLogIsMutable();
        upstreamLog_.add(builderForValue.build());
        onChanged();
      } else {
        upstreamLogBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder addUpstreamLog(
        int index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder builderForValue) {
      if (upstreamLogBuilder_ == null) {
        ensureUpstreamLogIsMutable();
        upstreamLog_.add(index, builderForValue.build());
        onChanged();
      } else {
        upstreamLogBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder addAllUpstreamLog(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLog> values) {
      if (upstreamLogBuilder_ == null) {
        ensureUpstreamLogIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, upstreamLog_);
        onChanged();
      } else {
        upstreamLogBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder clearUpstreamLog() {
      if (upstreamLogBuilder_ == null) {
        upstreamLog_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        upstreamLogBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public Builder removeUpstreamLog(int index) {
      if (upstreamLogBuilder_ == null) {
        ensureUpstreamLogIsMutable();
        upstreamLog_.remove(index);
        onChanged();
      } else {
        upstreamLogBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder getUpstreamLogBuilder(
        int index) {
      return getUpstreamLogFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder getUpstreamLogOrBuilder(
        int index) {
      if (upstreamLogBuilder_ == null) {
        return upstreamLog_.get(index);  } else {
        return upstreamLogBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
         getUpstreamLogOrBuilderList() {
      if (upstreamLogBuilder_ != null) {
        return upstreamLogBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(upstreamLog_);
      }
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder addUpstreamLogBuilder() {
      return getUpstreamLogFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.accesslog.v3.AccessLog.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder addUpstreamLogBuilder(
        int index) {
      return getUpstreamLogFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration for HTTP upstream logs emitted by the router. Upstream logs
     * are configured in the same way as access logs, but each log entry represents
     * an upstream request. Presuming retries are configured, multiple upstream
     * requests may be made for each downstream (inbound) request.
     * </pre>
     *
     * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder> 
         getUpstreamLogBuilderList() {
      return getUpstreamLogFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.accesslog.v3.AccessLog, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder, io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
        getUpstreamLogFieldBuilder() {
      if (upstreamLogBuilder_ == null) {
        upstreamLogBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.accesslog.v3.AccessLog, io.envoyproxy.envoy.config.accesslog.v3.AccessLog.Builder, io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder>(
                upstreamLog_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        upstreamLog_ = null;
      }
      return upstreamLogBuilder_;
    }

    private boolean suppressEnvoyHeaders_ ;
    /**
     * <pre>
     * Do not add any additional ``x-envoy-`` headers to requests or responses. This
     * only affects the :ref:`router filter generated x-envoy- headers
     * &lt;config_http_filters_router_headers_set&gt;`, other Envoy filters and the HTTP
     * connection manager may continue to set ``x-envoy-`` headers.
     * </pre>
     *
     * <code>bool suppress_envoy_headers = 4;</code>
     * @return The suppressEnvoyHeaders.
     */
    @java.lang.Override
    public boolean getSuppressEnvoyHeaders() {
      return suppressEnvoyHeaders_;
    }
    /**
     * <pre>
     * Do not add any additional ``x-envoy-`` headers to requests or responses. This
     * only affects the :ref:`router filter generated x-envoy- headers
     * &lt;config_http_filters_router_headers_set&gt;`, other Envoy filters and the HTTP
     * connection manager may continue to set ``x-envoy-`` headers.
     * </pre>
     *
     * <code>bool suppress_envoy_headers = 4;</code>
     * @param value The suppressEnvoyHeaders to set.
     * @return This builder for chaining.
     */
    public Builder setSuppressEnvoyHeaders(boolean value) {
      
      suppressEnvoyHeaders_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Do not add any additional ``x-envoy-`` headers to requests or responses. This
     * only affects the :ref:`router filter generated x-envoy- headers
     * &lt;config_http_filters_router_headers_set&gt;`, other Envoy filters and the HTTP
     * connection manager may continue to set ``x-envoy-`` headers.
     * </pre>
     *
     * <code>bool suppress_envoy_headers = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearSuppressEnvoyHeaders() {
      bitField0_ = (bitField0_ & ~0x00000008);
      suppressEnvoyHeaders_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList strictCheckHeaders_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureStrictCheckHeadersIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        strictCheckHeaders_ = new com.google.protobuf.LazyStringArrayList(strictCheckHeaders_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @return A list containing the strictCheckHeaders.
     */
    public com.google.protobuf.ProtocolStringList
        getStrictCheckHeadersList() {
      return strictCheckHeaders_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @return The count of strictCheckHeaders.
     */
    public int getStrictCheckHeadersCount() {
      return strictCheckHeaders_.size();
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @param index The index of the element to return.
     * @return The strictCheckHeaders at the given index.
     */
    public java.lang.String getStrictCheckHeaders(int index) {
      return strictCheckHeaders_.get(index);
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the strictCheckHeaders at the given index.
     */
    public com.google.protobuf.ByteString
        getStrictCheckHeadersBytes(int index) {
      return strictCheckHeaders_.getByteString(index);
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @param index The index to set the value at.
     * @param value The strictCheckHeaders to set.
     * @return This builder for chaining.
     */
    public Builder setStrictCheckHeaders(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureStrictCheckHeadersIsMutable();
      strictCheckHeaders_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @param value The strictCheckHeaders to add.
     * @return This builder for chaining.
     */
    public Builder addStrictCheckHeaders(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureStrictCheckHeadersIsMutable();
      strictCheckHeaders_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @param values The strictCheckHeaders to add.
     * @return This builder for chaining.
     */
    public Builder addAllStrictCheckHeaders(
        java.lang.Iterable<java.lang.String> values) {
      ensureStrictCheckHeadersIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, strictCheckHeaders_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStrictCheckHeaders() {
      strictCheckHeaders_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
     * request and respond with HTTP status 400 if the request contains an invalid
     * value for any of the headers listed in this field. Strict header checking
     * is only supported for the following headers:
     * Value must be a ','-delimited list (i.e. no spaces) of supported retry
     * policy values:
     * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
     * * :ref:`config_http_filters_router_x-envoy-retry-on`
     * Value must be an integer:
     * * :ref:`config_http_filters_router_x-envoy-max-retries`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
     * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
     * </pre>
     *
     * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
     * @param value The bytes of the strictCheckHeaders to add.
     * @return This builder for chaining.
     */
    public Builder addStrictCheckHeadersBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureStrictCheckHeadersIsMutable();
      strictCheckHeaders_.add(value);
      onChanged();
      return this;
    }

    private boolean respectExpectedRqTimeout_ ;
    /**
     * <pre>
     * If not set, ingress Envoy will ignore
     * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
     * Envoy, when deriving timeout for upstream cluster.
     * </pre>
     *
     * <code>bool respect_expected_rq_timeout = 6;</code>
     * @return The respectExpectedRqTimeout.
     */
    @java.lang.Override
    public boolean getRespectExpectedRqTimeout() {
      return respectExpectedRqTimeout_;
    }
    /**
     * <pre>
     * If not set, ingress Envoy will ignore
     * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
     * Envoy, when deriving timeout for upstream cluster.
     * </pre>
     *
     * <code>bool respect_expected_rq_timeout = 6;</code>
     * @param value The respectExpectedRqTimeout to set.
     * @return This builder for chaining.
     */
    public Builder setRespectExpectedRqTimeout(boolean value) {
      
      respectExpectedRqTimeout_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If not set, ingress Envoy will ignore
     * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
     * Envoy, when deriving timeout for upstream cluster.
     * </pre>
     *
     * <code>bool respect_expected_rq_timeout = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearRespectExpectedRqTimeout() {
      bitField0_ = (bitField0_ & ~0x00000020);
      respectExpectedRqTimeout_ = false;
      onChanged();
      return this;
    }

    private boolean suppressGrpcRequestFailureCodeStats_ ;
    /**
     * <pre>
     * If set, Envoy will avoid incrementing HTTP failure code stats
     * on gRPC requests. This includes the individual status code value
     * (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
     * This field is useful if interested in relying only on the gRPC
     * stats filter to define success and failure metrics for gRPC requests
     * as not all failed gRPC requests charge HTTP status code metrics. See
     * :ref:`gRPC stats filter&lt;config_http_filters_grpc_stats&gt;` documentation
     * for more details.
     * </pre>
     *
     * <code>bool suppress_grpc_request_failure_code_stats = 7;</code>
     * @return The suppressGrpcRequestFailureCodeStats.
     */
    @java.lang.Override
    public boolean getSuppressGrpcRequestFailureCodeStats() {
      return suppressGrpcRequestFailureCodeStats_;
    }
    /**
     * <pre>
     * If set, Envoy will avoid incrementing HTTP failure code stats
     * on gRPC requests. This includes the individual status code value
     * (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
     * This field is useful if interested in relying only on the gRPC
     * stats filter to define success and failure metrics for gRPC requests
     * as not all failed gRPC requests charge HTTP status code metrics. See
     * :ref:`gRPC stats filter&lt;config_http_filters_grpc_stats&gt;` documentation
     * for more details.
     * </pre>
     *
     * <code>bool suppress_grpc_request_failure_code_stats = 7;</code>
     * @param value The suppressGrpcRequestFailureCodeStats to set.
     * @return This builder for chaining.
     */
    public Builder setSuppressGrpcRequestFailureCodeStats(boolean value) {
      
      suppressGrpcRequestFailureCodeStats_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, Envoy will avoid incrementing HTTP failure code stats
     * on gRPC requests. This includes the individual status code value
     * (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
     * This field is useful if interested in relying only on the gRPC
     * stats filter to define success and failure metrics for gRPC requests
     * as not all failed gRPC requests charge HTTP status code metrics. See
     * :ref:`gRPC stats filter&lt;config_http_filters_grpc_stats&gt;` documentation
     * for more details.
     * </pre>
     *
     * <code>bool suppress_grpc_request_failure_code_stats = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSuppressGrpcRequestFailureCodeStats() {
      bitField0_ = (bitField0_ & ~0x00000040);
      suppressGrpcRequestFailureCodeStats_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter> upstreamHttpFilters_ =
      java.util.Collections.emptyList();
    private void ensureUpstreamHttpFiltersIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        upstreamHttpFilters_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter>(upstreamHttpFilters_);
        bitField0_ |= 0x00000080;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder> upstreamHttpFiltersBuilder_;

    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter> getUpstreamHttpFiltersList() {
      if (upstreamHttpFiltersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(upstreamHttpFilters_);
      } else {
        return upstreamHttpFiltersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public int getUpstreamHttpFiltersCount() {
      if (upstreamHttpFiltersBuilder_ == null) {
        return upstreamHttpFilters_.size();
      } else {
        return upstreamHttpFiltersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter getUpstreamHttpFilters(int index) {
      if (upstreamHttpFiltersBuilder_ == null) {
        return upstreamHttpFilters_.get(index);
      } else {
        return upstreamHttpFiltersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder setUpstreamHttpFilters(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter value) {
      if (upstreamHttpFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.set(index, value);
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder setUpstreamHttpFilters(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder builderForValue) {
      if (upstreamHttpFiltersBuilder_ == null) {
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.set(index, builderForValue.build());
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder addUpstreamHttpFilters(io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter value) {
      if (upstreamHttpFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.add(value);
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder addUpstreamHttpFilters(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter value) {
      if (upstreamHttpFiltersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.add(index, value);
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder addUpstreamHttpFilters(
        io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder builderForValue) {
      if (upstreamHttpFiltersBuilder_ == null) {
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.add(builderForValue.build());
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder addUpstreamHttpFilters(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder builderForValue) {
      if (upstreamHttpFiltersBuilder_ == null) {
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.add(index, builderForValue.build());
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder addAllUpstreamHttpFilters(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter> values) {
      if (upstreamHttpFiltersBuilder_ == null) {
        ensureUpstreamHttpFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, upstreamHttpFilters_);
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder clearUpstreamHttpFilters() {
      if (upstreamHttpFiltersBuilder_ == null) {
        upstreamHttpFilters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public Builder removeUpstreamHttpFilters(int index) {
      if (upstreamHttpFiltersBuilder_ == null) {
        ensureUpstreamHttpFiltersIsMutable();
        upstreamHttpFilters_.remove(index);
        onChanged();
      } else {
        upstreamHttpFiltersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder getUpstreamHttpFiltersBuilder(
        int index) {
      return getUpstreamHttpFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder getUpstreamHttpFiltersOrBuilder(
        int index) {
      if (upstreamHttpFiltersBuilder_ == null) {
        return upstreamHttpFilters_.get(index);  } else {
        return upstreamHttpFiltersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder> 
         getUpstreamHttpFiltersOrBuilderList() {
      if (upstreamHttpFiltersBuilder_ != null) {
        return upstreamHttpFiltersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(upstreamHttpFilters_);
      }
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder addUpstreamHttpFiltersBuilder() {
      return getUpstreamHttpFiltersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder addUpstreamHttpFiltersBuilder(
        int index) {
      return getUpstreamHttpFiltersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * .. note::
     *   Upstream HTTP filters are currently in alpha.
     * Optional HTTP filters for the upstream filter chain.
     * These filters will be applied for all requests that pass through the router.
     * They will also be applied to shadowed requests.
     * Upstream filters cannot change route or cluster.
     * Upstream filters specified on the cluster will override these filters.
     * If using upstream filters, please be aware that local errors sent by
     * upstream filters will not trigger retries, and local errors sent by
     * upstream filters will count as a final response if hedging is configured.
     * [#extension-category: envoy.filters.http.upstream]
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter upstream_http_filters = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder> 
         getUpstreamHttpFiltersBuilderList() {
      return getUpstreamHttpFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder> 
        getUpstreamHttpFiltersFieldBuilder() {
      if (upstreamHttpFiltersBuilder_ == null) {
        upstreamHttpFiltersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter.Builder, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpFilterOrBuilder>(
                upstreamHttpFilters_,
                ((bitField0_ & 0x00000080) != 0),
                getParentForChildren(),
                isClean());
        upstreamHttpFilters_ = null;
      }
      return upstreamHttpFiltersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.router.v3.Router)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.router.v3.Router)
  private static final io.envoyproxy.envoy.extensions.filters.http.router.v3.Router DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.router.v3.Router();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.router.v3.Router getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Router>
      PARSER = new com.google.protobuf.AbstractParser<Router>() {
    @java.lang.Override
    public Router parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Router> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Router> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.router.v3.Router getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

