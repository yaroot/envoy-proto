// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/file_system_buffer/v3/file_system_buffer.proto

package io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3;

/**
 * <pre>
 * The configuration for one direction of the filter behavior.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig}
 */
public final class StreamConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig)
    StreamConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use StreamConfig.newBuilder() to construct.
  private StreamConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private StreamConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new StreamConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferProto.internal_static_envoy_extensions_filters_http_file_system_buffer_v3_StreamConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferProto.internal_static_envoy_extensions_filters_http_file_system_buffer_v3_StreamConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.class, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.Builder.class);
  }

  public static final int BEHAVIOR_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior_;
  /**
   * <pre>
   * Whether to bypass / stream / fully buffer / etc.
   * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
   * @return Whether the behavior field is set.
   */
  @java.lang.Override
  public boolean hasBehavior() {
    return behavior_ != null;
  }
  /**
   * <pre>
   * Whether to bypass / stream / fully buffer / etc.
   * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
   * @return The behavior.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior getBehavior() {
    return behavior_ == null ? io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.getDefaultInstance() : behavior_;
  }
  /**
   * <pre>
   * Whether to bypass / stream / fully buffer / etc.
   * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehaviorOrBuilder getBehaviorOrBuilder() {
    return behavior_ == null ? io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.getDefaultInstance() : behavior_;
  }

  public static final int MEMORY_BUFFER_BYTES_LIMIT_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt64Value memoryBufferBytesLimit_;
  /**
   * <pre>
   * The amount stored in the memory buffer before buffering to disk.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the memoryBufferBytesLimit field is set.
   */
  @java.lang.Override
  public boolean hasMemoryBufferBytesLimit() {
    return memoryBufferBytesLimit_ != null;
  }
  /**
   * <pre>
   * The amount stored in the memory buffer before buffering to disk.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
   * @return The memoryBufferBytesLimit.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getMemoryBufferBytesLimit() {
    return memoryBufferBytesLimit_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : memoryBufferBytesLimit_;
  }
  /**
   * <pre>
   * The amount stored in the memory buffer before buffering to disk.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getMemoryBufferBytesLimitOrBuilder() {
    return memoryBufferBytesLimit_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : memoryBufferBytesLimit_;
  }

  public static final int STORAGE_BUFFER_BYTES_LIMIT_FIELD_NUMBER = 3;
  private com.google.protobuf.UInt64Value storageBufferBytesLimit_;
  /**
   * <pre>
   * The maximum storage (excluding memory) to be buffered in this filter.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
   * @return Whether the storageBufferBytesLimit field is set.
   */
  @java.lang.Override
  public boolean hasStorageBufferBytesLimit() {
    return storageBufferBytesLimit_ != null;
  }
  /**
   * <pre>
   * The maximum storage (excluding memory) to be buffered in this filter.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
   * @return The storageBufferBytesLimit.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getStorageBufferBytesLimit() {
    return storageBufferBytesLimit_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferBytesLimit_;
  }
  /**
   * <pre>
   * The maximum storage (excluding memory) to be buffered in this filter.
   * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getStorageBufferBytesLimitOrBuilder() {
    return storageBufferBytesLimit_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferBytesLimit_;
  }

  public static final int STORAGE_BUFFER_QUEUE_HIGH_WATERMARK_BYTES_FIELD_NUMBER = 4;
  private com.google.protobuf.UInt64Value storageBufferQueueHighWatermarkBytes_;
  /**
   * <pre>
   * The maximum amount that can be queued for writing to storage, above which the
   * source is requested to pause. If unset, defaults to the same value as
   * ``memory_buffer_bytes_limit``.
   * For example, assuming the recipient is not consuming data at all, if
   * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
   * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
   * then:
   * * Any request less than 32MiB will eventually pass through without ever attempting
   *   to write to disk.
   * * Any request with over 32MiB buffered will start trying to write to disk.
   *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
   *   watermark signal is sent to the source.
   * * Any stream whose total size exceeds
   *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
   *   (Note, if the recipient *is* consuming data then it is possible for such an
   *   oversized request to pass through the buffer filter, provided the recipient
   *   isn't consuming data too slowly.)
   * The low watermark signal is sent when the memory buffer is at size
   * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
   * @return Whether the storageBufferQueueHighWatermarkBytes field is set.
   */
  @java.lang.Override
  public boolean hasStorageBufferQueueHighWatermarkBytes() {
    return storageBufferQueueHighWatermarkBytes_ != null;
  }
  /**
   * <pre>
   * The maximum amount that can be queued for writing to storage, above which the
   * source is requested to pause. If unset, defaults to the same value as
   * ``memory_buffer_bytes_limit``.
   * For example, assuming the recipient is not consuming data at all, if
   * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
   * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
   * then:
   * * Any request less than 32MiB will eventually pass through without ever attempting
   *   to write to disk.
   * * Any request with over 32MiB buffered will start trying to write to disk.
   *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
   *   watermark signal is sent to the source.
   * * Any stream whose total size exceeds
   *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
   *   (Note, if the recipient *is* consuming data then it is possible for such an
   *   oversized request to pass through the buffer filter, provided the recipient
   *   isn't consuming data too slowly.)
   * The low watermark signal is sent when the memory buffer is at size
   * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
   * @return The storageBufferQueueHighWatermarkBytes.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getStorageBufferQueueHighWatermarkBytes() {
    return storageBufferQueueHighWatermarkBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferQueueHighWatermarkBytes_;
  }
  /**
   * <pre>
   * The maximum amount that can be queued for writing to storage, above which the
   * source is requested to pause. If unset, defaults to the same value as
   * ``memory_buffer_bytes_limit``.
   * For example, assuming the recipient is not consuming data at all, if
   * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
   * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
   * then:
   * * Any request less than 32MiB will eventually pass through without ever attempting
   *   to write to disk.
   * * Any request with over 32MiB buffered will start trying to write to disk.
   *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
   *   watermark signal is sent to the source.
   * * Any stream whose total size exceeds
   *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
   *   (Note, if the recipient *is* consuming data then it is possible for such an
   *   oversized request to pass through the buffer filter, provided the recipient
   *   isn't consuming data too slowly.)
   * The low watermark signal is sent when the memory buffer is at size
   * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getStorageBufferQueueHighWatermarkBytesOrBuilder() {
    return storageBufferQueueHighWatermarkBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferQueueHighWatermarkBytes_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (behavior_ != null) {
      output.writeMessage(1, getBehavior());
    }
    if (memoryBufferBytesLimit_ != null) {
      output.writeMessage(2, getMemoryBufferBytesLimit());
    }
    if (storageBufferBytesLimit_ != null) {
      output.writeMessage(3, getStorageBufferBytesLimit());
    }
    if (storageBufferQueueHighWatermarkBytes_ != null) {
      output.writeMessage(4, getStorageBufferQueueHighWatermarkBytes());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (behavior_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getBehavior());
    }
    if (memoryBufferBytesLimit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMemoryBufferBytesLimit());
    }
    if (storageBufferBytesLimit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getStorageBufferBytesLimit());
    }
    if (storageBufferQueueHighWatermarkBytes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getStorageBufferQueueHighWatermarkBytes());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig other = (io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig) obj;

    if (hasBehavior() != other.hasBehavior()) return false;
    if (hasBehavior()) {
      if (!getBehavior()
          .equals(other.getBehavior())) return false;
    }
    if (hasMemoryBufferBytesLimit() != other.hasMemoryBufferBytesLimit()) return false;
    if (hasMemoryBufferBytesLimit()) {
      if (!getMemoryBufferBytesLimit()
          .equals(other.getMemoryBufferBytesLimit())) return false;
    }
    if (hasStorageBufferBytesLimit() != other.hasStorageBufferBytesLimit()) return false;
    if (hasStorageBufferBytesLimit()) {
      if (!getStorageBufferBytesLimit()
          .equals(other.getStorageBufferBytesLimit())) return false;
    }
    if (hasStorageBufferQueueHighWatermarkBytes() != other.hasStorageBufferQueueHighWatermarkBytes()) return false;
    if (hasStorageBufferQueueHighWatermarkBytes()) {
      if (!getStorageBufferQueueHighWatermarkBytes()
          .equals(other.getStorageBufferQueueHighWatermarkBytes())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasBehavior()) {
      hash = (37 * hash) + BEHAVIOR_FIELD_NUMBER;
      hash = (53 * hash) + getBehavior().hashCode();
    }
    if (hasMemoryBufferBytesLimit()) {
      hash = (37 * hash) + MEMORY_BUFFER_BYTES_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getMemoryBufferBytesLimit().hashCode();
    }
    if (hasStorageBufferBytesLimit()) {
      hash = (37 * hash) + STORAGE_BUFFER_BYTES_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getStorageBufferBytesLimit().hashCode();
    }
    if (hasStorageBufferQueueHighWatermarkBytes()) {
      hash = (37 * hash) + STORAGE_BUFFER_QUEUE_HIGH_WATERMARK_BYTES_FIELD_NUMBER;
      hash = (53 * hash) + getStorageBufferQueueHighWatermarkBytes().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The configuration for one direction of the filter behavior.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig)
      io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferProto.internal_static_envoy_extensions_filters_http_file_system_buffer_v3_StreamConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferProto.internal_static_envoy_extensions_filters_http_file_system_buffer_v3_StreamConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.class, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      behavior_ = null;
      if (behaviorBuilder_ != null) {
        behaviorBuilder_.dispose();
        behaviorBuilder_ = null;
      }
      memoryBufferBytesLimit_ = null;
      if (memoryBufferBytesLimitBuilder_ != null) {
        memoryBufferBytesLimitBuilder_.dispose();
        memoryBufferBytesLimitBuilder_ = null;
      }
      storageBufferBytesLimit_ = null;
      if (storageBufferBytesLimitBuilder_ != null) {
        storageBufferBytesLimitBuilder_.dispose();
        storageBufferBytesLimitBuilder_ = null;
      }
      storageBufferQueueHighWatermarkBytes_ = null;
      if (storageBufferQueueHighWatermarkBytesBuilder_ != null) {
        storageBufferQueueHighWatermarkBytesBuilder_.dispose();
        storageBufferQueueHighWatermarkBytesBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferProto.internal_static_envoy_extensions_filters_http_file_system_buffer_v3_StreamConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig build() {
      io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig result = new io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.behavior_ = behaviorBuilder_ == null
            ? behavior_
            : behaviorBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.memoryBufferBytesLimit_ = memoryBufferBytesLimitBuilder_ == null
            ? memoryBufferBytesLimit_
            : memoryBufferBytesLimitBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.storageBufferBytesLimit_ = storageBufferBytesLimitBuilder_ == null
            ? storageBufferBytesLimit_
            : storageBufferBytesLimitBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.storageBufferQueueHighWatermarkBytes_ = storageBufferQueueHighWatermarkBytesBuilder_ == null
            ? storageBufferQueueHighWatermarkBytes_
            : storageBufferQueueHighWatermarkBytesBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.getDefaultInstance()) return this;
      if (other.hasBehavior()) {
        mergeBehavior(other.getBehavior());
      }
      if (other.hasMemoryBufferBytesLimit()) {
        mergeMemoryBufferBytesLimit(other.getMemoryBufferBytesLimit());
      }
      if (other.hasStorageBufferBytesLimit()) {
        mergeStorageBufferBytesLimit(other.getStorageBufferBytesLimit());
      }
      if (other.hasStorageBufferQueueHighWatermarkBytes()) {
        mergeStorageBufferQueueHighWatermarkBytes(other.getStorageBufferQueueHighWatermarkBytes());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getBehaviorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getMemoryBufferBytesLimitFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getStorageBufferBytesLimitFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getStorageBufferQueueHighWatermarkBytesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Builder, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehaviorOrBuilder> behaviorBuilder_;
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     * @return Whether the behavior field is set.
     */
    public boolean hasBehavior() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     * @return The behavior.
     */
    public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior getBehavior() {
      if (behaviorBuilder_ == null) {
        return behavior_ == null ? io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.getDefaultInstance() : behavior_;
      } else {
        return behaviorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    public Builder setBehavior(io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior value) {
      if (behaviorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        behavior_ = value;
      } else {
        behaviorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    public Builder setBehavior(
        io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Builder builderForValue) {
      if (behaviorBuilder_ == null) {
        behavior_ = builderForValue.build();
      } else {
        behaviorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    public Builder mergeBehavior(io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior value) {
      if (behaviorBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          behavior_ != null &&
          behavior_ != io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.getDefaultInstance()) {
          getBehaviorBuilder().mergeFrom(value);
        } else {
          behavior_ = value;
        }
      } else {
        behaviorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    public Builder clearBehavior() {
      bitField0_ = (bitField0_ & ~0x00000001);
      behavior_ = null;
      if (behaviorBuilder_ != null) {
        behaviorBuilder_.dispose();
        behaviorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Builder getBehaviorBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getBehaviorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehaviorOrBuilder getBehaviorOrBuilder() {
      if (behaviorBuilder_ != null) {
        return behaviorBuilder_.getMessageOrBuilder();
      } else {
        return behavior_ == null ?
            io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.getDefaultInstance() : behavior_;
      }
    }
    /**
     * <pre>
     * Whether to bypass / stream / fully buffer / etc.
     * If unset in route, vhost and listener config, the default is ``stream_when_possible``.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior behavior = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Builder, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehaviorOrBuilder> 
        getBehaviorFieldBuilder() {
      if (behaviorBuilder_ == null) {
        behaviorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Builder, io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.BufferBehaviorOrBuilder>(
                getBehavior(),
                getParentForChildren(),
                isClean());
        behavior_ = null;
      }
      return behaviorBuilder_;
    }

    private com.google.protobuf.UInt64Value memoryBufferBytesLimit_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> memoryBufferBytesLimitBuilder_;
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the memoryBufferBytesLimit field is set.
     */
    public boolean hasMemoryBufferBytesLimit() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     * @return The memoryBufferBytesLimit.
     */
    public com.google.protobuf.UInt64Value getMemoryBufferBytesLimit() {
      if (memoryBufferBytesLimitBuilder_ == null) {
        return memoryBufferBytesLimit_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : memoryBufferBytesLimit_;
      } else {
        return memoryBufferBytesLimitBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMemoryBufferBytesLimit(com.google.protobuf.UInt64Value value) {
      if (memoryBufferBytesLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        memoryBufferBytesLimit_ = value;
      } else {
        memoryBufferBytesLimitBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMemoryBufferBytesLimit(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (memoryBufferBytesLimitBuilder_ == null) {
        memoryBufferBytesLimit_ = builderForValue.build();
      } else {
        memoryBufferBytesLimitBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMemoryBufferBytesLimit(com.google.protobuf.UInt64Value value) {
      if (memoryBufferBytesLimitBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          memoryBufferBytesLimit_ != null &&
          memoryBufferBytesLimit_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
          getMemoryBufferBytesLimitBuilder().mergeFrom(value);
        } else {
          memoryBufferBytesLimit_ = value;
        }
      } else {
        memoryBufferBytesLimitBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMemoryBufferBytesLimit() {
      bitField0_ = (bitField0_ & ~0x00000002);
      memoryBufferBytesLimit_ = null;
      if (memoryBufferBytesLimitBuilder_ != null) {
        memoryBufferBytesLimitBuilder_.dispose();
        memoryBufferBytesLimitBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt64Value.Builder getMemoryBufferBytesLimitBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMemoryBufferBytesLimitFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getMemoryBufferBytesLimitOrBuilder() {
      if (memoryBufferBytesLimitBuilder_ != null) {
        return memoryBufferBytesLimitBuilder_.getMessageOrBuilder();
      } else {
        return memoryBufferBytesLimit_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : memoryBufferBytesLimit_;
      }
    }
    /**
     * <pre>
     * The amount stored in the memory buffer before buffering to disk.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value memory_buffer_bytes_limit = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getMemoryBufferBytesLimitFieldBuilder() {
      if (memoryBufferBytesLimitBuilder_ == null) {
        memoryBufferBytesLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getMemoryBufferBytesLimit(),
                getParentForChildren(),
                isClean());
        memoryBufferBytesLimit_ = null;
      }
      return memoryBufferBytesLimitBuilder_;
    }

    private com.google.protobuf.UInt64Value storageBufferBytesLimit_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> storageBufferBytesLimitBuilder_;
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     * @return Whether the storageBufferBytesLimit field is set.
     */
    public boolean hasStorageBufferBytesLimit() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     * @return The storageBufferBytesLimit.
     */
    public com.google.protobuf.UInt64Value getStorageBufferBytesLimit() {
      if (storageBufferBytesLimitBuilder_ == null) {
        return storageBufferBytesLimit_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferBytesLimit_;
      } else {
        return storageBufferBytesLimitBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    public Builder setStorageBufferBytesLimit(com.google.protobuf.UInt64Value value) {
      if (storageBufferBytesLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        storageBufferBytesLimit_ = value;
      } else {
        storageBufferBytesLimitBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    public Builder setStorageBufferBytesLimit(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (storageBufferBytesLimitBuilder_ == null) {
        storageBufferBytesLimit_ = builderForValue.build();
      } else {
        storageBufferBytesLimitBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    public Builder mergeStorageBufferBytesLimit(com.google.protobuf.UInt64Value value) {
      if (storageBufferBytesLimitBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          storageBufferBytesLimit_ != null &&
          storageBufferBytesLimit_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
          getStorageBufferBytesLimitBuilder().mergeFrom(value);
        } else {
          storageBufferBytesLimit_ = value;
        }
      } else {
        storageBufferBytesLimitBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    public Builder clearStorageBufferBytesLimit() {
      bitField0_ = (bitField0_ & ~0x00000004);
      storageBufferBytesLimit_ = null;
      if (storageBufferBytesLimitBuilder_ != null) {
        storageBufferBytesLimitBuilder_.dispose();
        storageBufferBytesLimitBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    public com.google.protobuf.UInt64Value.Builder getStorageBufferBytesLimitBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getStorageBufferBytesLimitFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getStorageBufferBytesLimitOrBuilder() {
      if (storageBufferBytesLimitBuilder_ != null) {
        return storageBufferBytesLimitBuilder_.getMessageOrBuilder();
      } else {
        return storageBufferBytesLimit_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferBytesLimit_;
      }
    }
    /**
     * <pre>
     * The maximum storage (excluding memory) to be buffered in this filter.
     * If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_bytes_limit = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getStorageBufferBytesLimitFieldBuilder() {
      if (storageBufferBytesLimitBuilder_ == null) {
        storageBufferBytesLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getStorageBufferBytesLimit(),
                getParentForChildren(),
                isClean());
        storageBufferBytesLimit_ = null;
      }
      return storageBufferBytesLimitBuilder_;
    }

    private com.google.protobuf.UInt64Value storageBufferQueueHighWatermarkBytes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> storageBufferQueueHighWatermarkBytesBuilder_;
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     * @return Whether the storageBufferQueueHighWatermarkBytes field is set.
     */
    public boolean hasStorageBufferQueueHighWatermarkBytes() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     * @return The storageBufferQueueHighWatermarkBytes.
     */
    public com.google.protobuf.UInt64Value getStorageBufferQueueHighWatermarkBytes() {
      if (storageBufferQueueHighWatermarkBytesBuilder_ == null) {
        return storageBufferQueueHighWatermarkBytes_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferQueueHighWatermarkBytes_;
      } else {
        return storageBufferQueueHighWatermarkBytesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    public Builder setStorageBufferQueueHighWatermarkBytes(com.google.protobuf.UInt64Value value) {
      if (storageBufferQueueHighWatermarkBytesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        storageBufferQueueHighWatermarkBytes_ = value;
      } else {
        storageBufferQueueHighWatermarkBytesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    public Builder setStorageBufferQueueHighWatermarkBytes(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (storageBufferQueueHighWatermarkBytesBuilder_ == null) {
        storageBufferQueueHighWatermarkBytes_ = builderForValue.build();
      } else {
        storageBufferQueueHighWatermarkBytesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    public Builder mergeStorageBufferQueueHighWatermarkBytes(com.google.protobuf.UInt64Value value) {
      if (storageBufferQueueHighWatermarkBytesBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          storageBufferQueueHighWatermarkBytes_ != null &&
          storageBufferQueueHighWatermarkBytes_ != com.google.protobuf.UInt64Value.getDefaultInstance()) {
          getStorageBufferQueueHighWatermarkBytesBuilder().mergeFrom(value);
        } else {
          storageBufferQueueHighWatermarkBytes_ = value;
        }
      } else {
        storageBufferQueueHighWatermarkBytesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    public Builder clearStorageBufferQueueHighWatermarkBytes() {
      bitField0_ = (bitField0_ & ~0x00000008);
      storageBufferQueueHighWatermarkBytes_ = null;
      if (storageBufferQueueHighWatermarkBytesBuilder_ != null) {
        storageBufferQueueHighWatermarkBytesBuilder_.dispose();
        storageBufferQueueHighWatermarkBytesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    public com.google.protobuf.UInt64Value.Builder getStorageBufferQueueHighWatermarkBytesBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getStorageBufferQueueHighWatermarkBytesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getStorageBufferQueueHighWatermarkBytesOrBuilder() {
      if (storageBufferQueueHighWatermarkBytesBuilder_ != null) {
        return storageBufferQueueHighWatermarkBytesBuilder_.getMessageOrBuilder();
      } else {
        return storageBufferQueueHighWatermarkBytes_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : storageBufferQueueHighWatermarkBytes_;
      }
    }
    /**
     * <pre>
     * The maximum amount that can be queued for writing to storage, above which the
     * source is requested to pause. If unset, defaults to the same value as
     * ``memory_buffer_bytes_limit``.
     * For example, assuming the recipient is not consuming data at all, if
     * ``memory_buffer_bytes_limit`` was 32MiB, and ``storage_buffer_queue_high_watermark_bytes``
     * was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
     * then:
     * * Any request less than 32MiB will eventually pass through without ever attempting
     *   to write to disk.
     * * Any request with over 32MiB buffered will start trying to write to disk.
     *   If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
     *   watermark signal is sent to the source.
     * * Any stream whose total size exceeds
     *   ``memory_buffer_bytes_limit + storage_buffer_bytes_limit`` will provoke an error.
     *   (Note, if the recipient *is* consuming data then it is possible for such an
     *   oversized request to pass through the buffer filter, provided the recipient
     *   isn't consuming data too slowly.)
     * The low watermark signal is sent when the memory buffer is at size
     * ``memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)``.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value storage_buffer_queue_high_watermark_bytes = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getStorageBufferQueueHighWatermarkBytesFieldBuilder() {
      if (storageBufferQueueHighWatermarkBytesBuilder_ == null) {
        storageBufferQueueHighWatermarkBytesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getStorageBufferQueueHighWatermarkBytes(),
                getParentForChildren(),
                isClean());
        storageBufferQueueHighWatermarkBytes_ = null;
      }
      return storageBufferQueueHighWatermarkBytesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig)
  private static final io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<StreamConfig>
      PARSER = new com.google.protobuf.AbstractParser<StreamConfig>() {
    @java.lang.Override
    public StreamConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<StreamConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<StreamConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

