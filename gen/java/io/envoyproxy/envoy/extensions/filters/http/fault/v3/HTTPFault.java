// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/fault/v3/fault.proto

package io.envoyproxy.envoy.extensions.filters.http.fault.v3;

/**
 * <pre>
 * [#next-free-field: 16]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.fault.v3.HTTPFault}
 */
public final class HTTPFault extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.fault.v3.HTTPFault)
    HTTPFaultOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HTTPFault.newBuilder() to construct.
  private HTTPFault(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HTTPFault() {
    upstreamCluster_ = "";
    headers_ = java.util.Collections.emptyList();
    downstreamNodes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    delayPercentRuntime_ = "";
    abortPercentRuntime_ = "";
    delayDurationRuntime_ = "";
    abortHttpStatusRuntime_ = "";
    maxActiveFaultsRuntime_ = "";
    responseRateLimitPercentRuntime_ = "";
    abortGrpcStatusRuntime_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new HTTPFault();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultProto.internal_static_envoy_extensions_filters_http_fault_v3_HTTPFault_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultProto.internal_static_envoy_extensions_filters_http_fault_v3_HTTPFault_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.class, io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.Builder.class);
  }

  public static final int DELAY_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay delay_;
  /**
   * <pre>
   * If specified, the filter will inject delays based on the values in the
   * object.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
   * @return Whether the delay field is set.
   */
  @java.lang.Override
  public boolean hasDelay() {
    return delay_ != null;
  }
  /**
   * <pre>
   * If specified, the filter will inject delays based on the values in the
   * object.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
   * @return The delay.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay getDelay() {
    return delay_ == null ? io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.getDefaultInstance() : delay_;
  }
  /**
   * <pre>
   * If specified, the filter will inject delays based on the values in the
   * object.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelayOrBuilder getDelayOrBuilder() {
    return delay_ == null ? io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.getDefaultInstance() : delay_;
  }

  public static final int ABORT_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort abort_;
  /**
   * <pre>
   * If specified, the filter will abort requests based on the values in
   * the object. At least ``abort`` or ``delay`` must be specified.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
   * @return Whether the abort field is set.
   */
  @java.lang.Override
  public boolean hasAbort() {
    return abort_ != null;
  }
  /**
   * <pre>
   * If specified, the filter will abort requests based on the values in
   * the object. At least ``abort`` or ``delay`` must be specified.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
   * @return The abort.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort getAbort() {
    return abort_ == null ? io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.getDefaultInstance() : abort_;
  }
  /**
   * <pre>
   * If specified, the filter will abort requests based on the values in
   * the object. At least ``abort`` or ``delay`` must be specified.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbortOrBuilder getAbortOrBuilder() {
    return abort_ == null ? io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.getDefaultInstance() : abort_;
  }

  public static final int UPSTREAM_CLUSTER_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object upstreamCluster_ = "";
  /**
   * <pre>
   * Specifies the name of the (destination) upstream cluster that the
   * filter should match on. Fault injection will be restricted to requests
   * bound to the specific upstream cluster.
   * </pre>
   *
   * <code>string upstream_cluster = 3;</code>
   * @return The upstreamCluster.
   */
  @java.lang.Override
  public java.lang.String getUpstreamCluster() {
    java.lang.Object ref = upstreamCluster_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      upstreamCluster_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies the name of the (destination) upstream cluster that the
   * filter should match on. Fault injection will be restricted to requests
   * bound to the specific upstream cluster.
   * </pre>
   *
   * <code>string upstream_cluster = 3;</code>
   * @return The bytes for upstreamCluster.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUpstreamClusterBytes() {
    java.lang.Object ref = upstreamCluster_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      upstreamCluster_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HEADERS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> headers_;
  /**
   * <pre>
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> getHeadersList() {
    return headers_;
  }
  /**
   * <pre>
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> 
      getHeadersOrBuilderList() {
    return headers_;
  }
  /**
   * <pre>
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
   */
  @java.lang.Override
  public int getHeadersCount() {
    return headers_.size();
  }
  /**
   * <pre>
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.HeaderMatcher getHeaders(int index) {
    return headers_.get(index);
  }
  /**
   * <pre>
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder getHeadersOrBuilder(
      int index) {
    return headers_.get(index);
  }

  public static final int DOWNSTREAM_NODES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList downstreamNodes_;
  /**
   * <pre>
   * Faults are injected for the specified list of downstream hosts. If this
   * setting is not set, faults are injected for all downstream nodes.
   * Downstream node name is taken from :ref:`the HTTP
   * x-envoy-downstream-service-node
   * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
   * against downstream_nodes list.
   * </pre>
   *
   * <code>repeated string downstream_nodes = 5;</code>
   * @return A list containing the downstreamNodes.
   */
  public com.google.protobuf.ProtocolStringList
      getDownstreamNodesList() {
    return downstreamNodes_;
  }
  /**
   * <pre>
   * Faults are injected for the specified list of downstream hosts. If this
   * setting is not set, faults are injected for all downstream nodes.
   * Downstream node name is taken from :ref:`the HTTP
   * x-envoy-downstream-service-node
   * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
   * against downstream_nodes list.
   * </pre>
   *
   * <code>repeated string downstream_nodes = 5;</code>
   * @return The count of downstreamNodes.
   */
  public int getDownstreamNodesCount() {
    return downstreamNodes_.size();
  }
  /**
   * <pre>
   * Faults are injected for the specified list of downstream hosts. If this
   * setting is not set, faults are injected for all downstream nodes.
   * Downstream node name is taken from :ref:`the HTTP
   * x-envoy-downstream-service-node
   * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
   * against downstream_nodes list.
   * </pre>
   *
   * <code>repeated string downstream_nodes = 5;</code>
   * @param index The index of the element to return.
   * @return The downstreamNodes at the given index.
   */
  public java.lang.String getDownstreamNodes(int index) {
    return downstreamNodes_.get(index);
  }
  /**
   * <pre>
   * Faults are injected for the specified list of downstream hosts. If this
   * setting is not set, faults are injected for all downstream nodes.
   * Downstream node name is taken from :ref:`the HTTP
   * x-envoy-downstream-service-node
   * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
   * against downstream_nodes list.
   * </pre>
   *
   * <code>repeated string downstream_nodes = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the downstreamNodes at the given index.
   */
  public com.google.protobuf.ByteString
      getDownstreamNodesBytes(int index) {
    return downstreamNodes_.getByteString(index);
  }

  public static final int MAX_ACTIVE_FAULTS_FIELD_NUMBER = 6;
  private com.google.protobuf.UInt32Value maxActiveFaults_;
  /**
   * <pre>
   * The maximum number of faults that can be active at a single time via the configured fault
   * filter. Note that because this setting can be overridden at the route level, it's possible
   * for the number of active faults to be greater than this value (if injected via a different
   * route). If not specified, defaults to unlimited. This setting can be overridden via
   * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
   * due to overflow will be indicated via the ``faults_overflow
   * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
   * .. attention::
   *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
   *   limit. It's possible for the number of active faults to rise slightly above the configured
   *   amount due to the implementation details.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
   * @return Whether the maxActiveFaults field is set.
   */
  @java.lang.Override
  public boolean hasMaxActiveFaults() {
    return maxActiveFaults_ != null;
  }
  /**
   * <pre>
   * The maximum number of faults that can be active at a single time via the configured fault
   * filter. Note that because this setting can be overridden at the route level, it's possible
   * for the number of active faults to be greater than this value (if injected via a different
   * route). If not specified, defaults to unlimited. This setting can be overridden via
   * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
   * due to overflow will be indicated via the ``faults_overflow
   * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
   * .. attention::
   *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
   *   limit. It's possible for the number of active faults to rise slightly above the configured
   *   amount due to the implementation details.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
   * @return The maxActiveFaults.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxActiveFaults() {
    return maxActiveFaults_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxActiveFaults_;
  }
  /**
   * <pre>
   * The maximum number of faults that can be active at a single time via the configured fault
   * filter. Note that because this setting can be overridden at the route level, it's possible
   * for the number of active faults to be greater than this value (if injected via a different
   * route). If not specified, defaults to unlimited. This setting can be overridden via
   * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
   * due to overflow will be indicated via the ``faults_overflow
   * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
   * .. attention::
   *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
   *   limit. It's possible for the number of active faults to rise slightly above the configured
   *   amount due to the implementation details.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxActiveFaultsOrBuilder() {
    return maxActiveFaults_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxActiveFaults_;
  }

  public static final int RESPONSE_RATE_LIMIT_FIELD_NUMBER = 7;
  private io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit responseRateLimit_;
  /**
   * <pre>
   * The response rate limit to be applied to the response body of the stream. When configured,
   * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
   * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
   * .. attention::
   *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
   *  will each get an independent limit.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
   * @return Whether the responseRateLimit field is set.
   */
  @java.lang.Override
  public boolean hasResponseRateLimit() {
    return responseRateLimit_ != null;
  }
  /**
   * <pre>
   * The response rate limit to be applied to the response body of the stream. When configured,
   * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
   * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
   * .. attention::
   *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
   *  will each get an independent limit.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
   * @return The responseRateLimit.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit getResponseRateLimit() {
    return responseRateLimit_ == null ? io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.getDefaultInstance() : responseRateLimit_;
  }
  /**
   * <pre>
   * The response rate limit to be applied to the response body of the stream. When configured,
   * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
   * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
   * .. attention::
   *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
   *  will each get an independent limit.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimitOrBuilder getResponseRateLimitOrBuilder() {
    return responseRateLimit_ == null ? io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.getDefaultInstance() : responseRateLimit_;
  }

  public static final int DELAY_PERCENT_RUNTIME_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private volatile java.lang.Object delayPercentRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.delay.fixed_delay_percent
   * </pre>
   *
   * <code>string delay_percent_runtime = 8;</code>
   * @return The delayPercentRuntime.
   */
  @java.lang.Override
  public java.lang.String getDelayPercentRuntime() {
    java.lang.Object ref = delayPercentRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      delayPercentRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.delay.fixed_delay_percent
   * </pre>
   *
   * <code>string delay_percent_runtime = 8;</code>
   * @return The bytes for delayPercentRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDelayPercentRuntimeBytes() {
    java.lang.Object ref = delayPercentRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      delayPercentRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ABORT_PERCENT_RUNTIME_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private volatile java.lang.Object abortPercentRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.abort.abort_percent
   * </pre>
   *
   * <code>string abort_percent_runtime = 9;</code>
   * @return The abortPercentRuntime.
   */
  @java.lang.Override
  public java.lang.String getAbortPercentRuntime() {
    java.lang.Object ref = abortPercentRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      abortPercentRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.abort.abort_percent
   * </pre>
   *
   * <code>string abort_percent_runtime = 9;</code>
   * @return The bytes for abortPercentRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAbortPercentRuntimeBytes() {
    java.lang.Object ref = abortPercentRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      abortPercentRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DELAY_DURATION_RUNTIME_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private volatile java.lang.Object delayDurationRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.delay.fixed_duration_ms
   * </pre>
   *
   * <code>string delay_duration_runtime = 10;</code>
   * @return The delayDurationRuntime.
   */
  @java.lang.Override
  public java.lang.String getDelayDurationRuntime() {
    java.lang.Object ref = delayDurationRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      delayDurationRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.delay.fixed_duration_ms
   * </pre>
   *
   * <code>string delay_duration_runtime = 10;</code>
   * @return The bytes for delayDurationRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDelayDurationRuntimeBytes() {
    java.lang.Object ref = delayDurationRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      delayDurationRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ABORT_HTTP_STATUS_RUNTIME_FIELD_NUMBER = 11;
  @SuppressWarnings("serial")
  private volatile java.lang.Object abortHttpStatusRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.abort.http_status
   * </pre>
   *
   * <code>string abort_http_status_runtime = 11;</code>
   * @return The abortHttpStatusRuntime.
   */
  @java.lang.Override
  public java.lang.String getAbortHttpStatusRuntime() {
    java.lang.Object ref = abortHttpStatusRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      abortHttpStatusRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.abort.http_status
   * </pre>
   *
   * <code>string abort_http_status_runtime = 11;</code>
   * @return The bytes for abortHttpStatusRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAbortHttpStatusRuntimeBytes() {
    java.lang.Object ref = abortHttpStatusRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      abortHttpStatusRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MAX_ACTIVE_FAULTS_RUNTIME_FIELD_NUMBER = 12;
  @SuppressWarnings("serial")
  private volatile java.lang.Object maxActiveFaultsRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.max_active_faults
   * </pre>
   *
   * <code>string max_active_faults_runtime = 12;</code>
   * @return The maxActiveFaultsRuntime.
   */
  @java.lang.Override
  public java.lang.String getMaxActiveFaultsRuntime() {
    java.lang.Object ref = maxActiveFaultsRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      maxActiveFaultsRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.max_active_faults
   * </pre>
   *
   * <code>string max_active_faults_runtime = 12;</code>
   * @return The bytes for maxActiveFaultsRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMaxActiveFaultsRuntimeBytes() {
    java.lang.Object ref = maxActiveFaultsRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      maxActiveFaultsRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESPONSE_RATE_LIMIT_PERCENT_RUNTIME_FIELD_NUMBER = 13;
  @SuppressWarnings("serial")
  private volatile java.lang.Object responseRateLimitPercentRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.rate_limit.response_percent
   * </pre>
   *
   * <code>string response_rate_limit_percent_runtime = 13;</code>
   * @return The responseRateLimitPercentRuntime.
   */
  @java.lang.Override
  public java.lang.String getResponseRateLimitPercentRuntime() {
    java.lang.Object ref = responseRateLimitPercentRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      responseRateLimitPercentRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.rate_limit.response_percent
   * </pre>
   *
   * <code>string response_rate_limit_percent_runtime = 13;</code>
   * @return The bytes for responseRateLimitPercentRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getResponseRateLimitPercentRuntimeBytes() {
    java.lang.Object ref = responseRateLimitPercentRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      responseRateLimitPercentRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ABORT_GRPC_STATUS_RUNTIME_FIELD_NUMBER = 14;
  @SuppressWarnings("serial")
  private volatile java.lang.Object abortGrpcStatusRuntime_ = "";
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.abort.grpc_status
   * </pre>
   *
   * <code>string abort_grpc_status_runtime = 14;</code>
   * @return The abortGrpcStatusRuntime.
   */
  @java.lang.Override
  public java.lang.String getAbortGrpcStatusRuntime() {
    java.lang.Object ref = abortGrpcStatusRuntime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      abortGrpcStatusRuntime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
   * runtime. The default is: fault.http.abort.grpc_status
   * </pre>
   *
   * <code>string abort_grpc_status_runtime = 14;</code>
   * @return The bytes for abortGrpcStatusRuntime.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAbortGrpcStatusRuntimeBytes() {
    java.lang.Object ref = abortGrpcStatusRuntime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      abortGrpcStatusRuntime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DISABLE_DOWNSTREAM_CLUSTER_STATS_FIELD_NUMBER = 15;
  private boolean disableDownstreamClusterStats_ = false;
  /**
   * <pre>
   * To control whether stats storage is allocated dynamically for each downstream server.
   * If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
   * If set to false, dynamic stats storage will be allocated for the downstream cluster name.
   * Default value is false.
   * </pre>
   *
   * <code>bool disable_downstream_cluster_stats = 15;</code>
   * @return The disableDownstreamClusterStats.
   */
  @java.lang.Override
  public boolean getDisableDownstreamClusterStats() {
    return disableDownstreamClusterStats_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (delay_ != null) {
      output.writeMessage(1, getDelay());
    }
    if (abort_ != null) {
      output.writeMessage(2, getAbort());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(upstreamCluster_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, upstreamCluster_);
    }
    for (int i = 0; i < headers_.size(); i++) {
      output.writeMessage(4, headers_.get(i));
    }
    for (int i = 0; i < downstreamNodes_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, downstreamNodes_.getRaw(i));
    }
    if (maxActiveFaults_ != null) {
      output.writeMessage(6, getMaxActiveFaults());
    }
    if (responseRateLimit_ != null) {
      output.writeMessage(7, getResponseRateLimit());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(delayPercentRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, delayPercentRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(abortPercentRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, abortPercentRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(delayDurationRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, delayDurationRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(abortHttpStatusRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, abortHttpStatusRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(maxActiveFaultsRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, maxActiveFaultsRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(responseRateLimitPercentRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 13, responseRateLimitPercentRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(abortGrpcStatusRuntime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 14, abortGrpcStatusRuntime_);
    }
    if (disableDownstreamClusterStats_ != false) {
      output.writeBool(15, disableDownstreamClusterStats_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (delay_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDelay());
    }
    if (abort_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getAbort());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(upstreamCluster_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, upstreamCluster_);
    }
    for (int i = 0; i < headers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, headers_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < downstreamNodes_.size(); i++) {
        dataSize += computeStringSizeNoTag(downstreamNodes_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getDownstreamNodesList().size();
    }
    if (maxActiveFaults_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getMaxActiveFaults());
    }
    if (responseRateLimit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getResponseRateLimit());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(delayPercentRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, delayPercentRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(abortPercentRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, abortPercentRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(delayDurationRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, delayDurationRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(abortHttpStatusRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, abortHttpStatusRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(maxActiveFaultsRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, maxActiveFaultsRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(responseRateLimitPercentRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, responseRateLimitPercentRuntime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(abortGrpcStatusRuntime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, abortGrpcStatusRuntime_);
    }
    if (disableDownstreamClusterStats_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(15, disableDownstreamClusterStats_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault other = (io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault) obj;

    if (hasDelay() != other.hasDelay()) return false;
    if (hasDelay()) {
      if (!getDelay()
          .equals(other.getDelay())) return false;
    }
    if (hasAbort() != other.hasAbort()) return false;
    if (hasAbort()) {
      if (!getAbort()
          .equals(other.getAbort())) return false;
    }
    if (!getUpstreamCluster()
        .equals(other.getUpstreamCluster())) return false;
    if (!getHeadersList()
        .equals(other.getHeadersList())) return false;
    if (!getDownstreamNodesList()
        .equals(other.getDownstreamNodesList())) return false;
    if (hasMaxActiveFaults() != other.hasMaxActiveFaults()) return false;
    if (hasMaxActiveFaults()) {
      if (!getMaxActiveFaults()
          .equals(other.getMaxActiveFaults())) return false;
    }
    if (hasResponseRateLimit() != other.hasResponseRateLimit()) return false;
    if (hasResponseRateLimit()) {
      if (!getResponseRateLimit()
          .equals(other.getResponseRateLimit())) return false;
    }
    if (!getDelayPercentRuntime()
        .equals(other.getDelayPercentRuntime())) return false;
    if (!getAbortPercentRuntime()
        .equals(other.getAbortPercentRuntime())) return false;
    if (!getDelayDurationRuntime()
        .equals(other.getDelayDurationRuntime())) return false;
    if (!getAbortHttpStatusRuntime()
        .equals(other.getAbortHttpStatusRuntime())) return false;
    if (!getMaxActiveFaultsRuntime()
        .equals(other.getMaxActiveFaultsRuntime())) return false;
    if (!getResponseRateLimitPercentRuntime()
        .equals(other.getResponseRateLimitPercentRuntime())) return false;
    if (!getAbortGrpcStatusRuntime()
        .equals(other.getAbortGrpcStatusRuntime())) return false;
    if (getDisableDownstreamClusterStats()
        != other.getDisableDownstreamClusterStats()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDelay()) {
      hash = (37 * hash) + DELAY_FIELD_NUMBER;
      hash = (53 * hash) + getDelay().hashCode();
    }
    if (hasAbort()) {
      hash = (37 * hash) + ABORT_FIELD_NUMBER;
      hash = (53 * hash) + getAbort().hashCode();
    }
    hash = (37 * hash) + UPSTREAM_CLUSTER_FIELD_NUMBER;
    hash = (53 * hash) + getUpstreamCluster().hashCode();
    if (getHeadersCount() > 0) {
      hash = (37 * hash) + HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getHeadersList().hashCode();
    }
    if (getDownstreamNodesCount() > 0) {
      hash = (37 * hash) + DOWNSTREAM_NODES_FIELD_NUMBER;
      hash = (53 * hash) + getDownstreamNodesList().hashCode();
    }
    if (hasMaxActiveFaults()) {
      hash = (37 * hash) + MAX_ACTIVE_FAULTS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxActiveFaults().hashCode();
    }
    if (hasResponseRateLimit()) {
      hash = (37 * hash) + RESPONSE_RATE_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getResponseRateLimit().hashCode();
    }
    hash = (37 * hash) + DELAY_PERCENT_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getDelayPercentRuntime().hashCode();
    hash = (37 * hash) + ABORT_PERCENT_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getAbortPercentRuntime().hashCode();
    hash = (37 * hash) + DELAY_DURATION_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getDelayDurationRuntime().hashCode();
    hash = (37 * hash) + ABORT_HTTP_STATUS_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getAbortHttpStatusRuntime().hashCode();
    hash = (37 * hash) + MAX_ACTIVE_FAULTS_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getMaxActiveFaultsRuntime().hashCode();
    hash = (37 * hash) + RESPONSE_RATE_LIMIT_PERCENT_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getResponseRateLimitPercentRuntime().hashCode();
    hash = (37 * hash) + ABORT_GRPC_STATUS_RUNTIME_FIELD_NUMBER;
    hash = (53 * hash) + getAbortGrpcStatusRuntime().hashCode();
    hash = (37 * hash) + DISABLE_DOWNSTREAM_CLUSTER_STATS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDisableDownstreamClusterStats());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 16]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.fault.v3.HTTPFault}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.fault.v3.HTTPFault)
      io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFaultOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultProto.internal_static_envoy_extensions_filters_http_fault_v3_HTTPFault_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultProto.internal_static_envoy_extensions_filters_http_fault_v3_HTTPFault_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.class, io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      delay_ = null;
      if (delayBuilder_ != null) {
        delayBuilder_.dispose();
        delayBuilder_ = null;
      }
      abort_ = null;
      if (abortBuilder_ != null) {
        abortBuilder_.dispose();
        abortBuilder_ = null;
      }
      upstreamCluster_ = "";
      if (headersBuilder_ == null) {
        headers_ = java.util.Collections.emptyList();
      } else {
        headers_ = null;
        headersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      downstreamNodes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      maxActiveFaults_ = null;
      if (maxActiveFaultsBuilder_ != null) {
        maxActiveFaultsBuilder_.dispose();
        maxActiveFaultsBuilder_ = null;
      }
      responseRateLimit_ = null;
      if (responseRateLimitBuilder_ != null) {
        responseRateLimitBuilder_.dispose();
        responseRateLimitBuilder_ = null;
      }
      delayPercentRuntime_ = "";
      abortPercentRuntime_ = "";
      delayDurationRuntime_ = "";
      abortHttpStatusRuntime_ = "";
      maxActiveFaultsRuntime_ = "";
      responseRateLimitPercentRuntime_ = "";
      abortGrpcStatusRuntime_ = "";
      disableDownstreamClusterStats_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultProto.internal_static_envoy_extensions_filters_http_fault_v3_HTTPFault_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault build() {
      io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault result = new io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault result) {
      if (headersBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          headers_ = java.util.Collections.unmodifiableList(headers_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.headers_ = headers_;
      } else {
        result.headers_ = headersBuilder_.build();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        downstreamNodes_ = downstreamNodes_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.downstreamNodes_ = downstreamNodes_;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.delay_ = delayBuilder_ == null
            ? delay_
            : delayBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.abort_ = abortBuilder_ == null
            ? abort_
            : abortBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.upstreamCluster_ = upstreamCluster_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.maxActiveFaults_ = maxActiveFaultsBuilder_ == null
            ? maxActiveFaults_
            : maxActiveFaultsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.responseRateLimit_ = responseRateLimitBuilder_ == null
            ? responseRateLimit_
            : responseRateLimitBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.delayPercentRuntime_ = delayPercentRuntime_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.abortPercentRuntime_ = abortPercentRuntime_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.delayDurationRuntime_ = delayDurationRuntime_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.abortHttpStatusRuntime_ = abortHttpStatusRuntime_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.maxActiveFaultsRuntime_ = maxActiveFaultsRuntime_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.responseRateLimitPercentRuntime_ = responseRateLimitPercentRuntime_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.abortGrpcStatusRuntime_ = abortGrpcStatusRuntime_;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.disableDownstreamClusterStats_ = disableDownstreamClusterStats_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault.getDefaultInstance()) return this;
      if (other.hasDelay()) {
        mergeDelay(other.getDelay());
      }
      if (other.hasAbort()) {
        mergeAbort(other.getAbort());
      }
      if (!other.getUpstreamCluster().isEmpty()) {
        upstreamCluster_ = other.upstreamCluster_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (headersBuilder_ == null) {
        if (!other.headers_.isEmpty()) {
          if (headers_.isEmpty()) {
            headers_ = other.headers_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureHeadersIsMutable();
            headers_.addAll(other.headers_);
          }
          onChanged();
        }
      } else {
        if (!other.headers_.isEmpty()) {
          if (headersBuilder_.isEmpty()) {
            headersBuilder_.dispose();
            headersBuilder_ = null;
            headers_ = other.headers_;
            bitField0_ = (bitField0_ & ~0x00000008);
            headersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHeadersFieldBuilder() : null;
          } else {
            headersBuilder_.addAllMessages(other.headers_);
          }
        }
      }
      if (!other.downstreamNodes_.isEmpty()) {
        if (downstreamNodes_.isEmpty()) {
          downstreamNodes_ = other.downstreamNodes_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureDownstreamNodesIsMutable();
          downstreamNodes_.addAll(other.downstreamNodes_);
        }
        onChanged();
      }
      if (other.hasMaxActiveFaults()) {
        mergeMaxActiveFaults(other.getMaxActiveFaults());
      }
      if (other.hasResponseRateLimit()) {
        mergeResponseRateLimit(other.getResponseRateLimit());
      }
      if (!other.getDelayPercentRuntime().isEmpty()) {
        delayPercentRuntime_ = other.delayPercentRuntime_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      if (!other.getAbortPercentRuntime().isEmpty()) {
        abortPercentRuntime_ = other.abortPercentRuntime_;
        bitField0_ |= 0x00000100;
        onChanged();
      }
      if (!other.getDelayDurationRuntime().isEmpty()) {
        delayDurationRuntime_ = other.delayDurationRuntime_;
        bitField0_ |= 0x00000200;
        onChanged();
      }
      if (!other.getAbortHttpStatusRuntime().isEmpty()) {
        abortHttpStatusRuntime_ = other.abortHttpStatusRuntime_;
        bitField0_ |= 0x00000400;
        onChanged();
      }
      if (!other.getMaxActiveFaultsRuntime().isEmpty()) {
        maxActiveFaultsRuntime_ = other.maxActiveFaultsRuntime_;
        bitField0_ |= 0x00000800;
        onChanged();
      }
      if (!other.getResponseRateLimitPercentRuntime().isEmpty()) {
        responseRateLimitPercentRuntime_ = other.responseRateLimitPercentRuntime_;
        bitField0_ |= 0x00001000;
        onChanged();
      }
      if (!other.getAbortGrpcStatusRuntime().isEmpty()) {
        abortGrpcStatusRuntime_ = other.abortGrpcStatusRuntime_;
        bitField0_ |= 0x00002000;
        onChanged();
      }
      if (other.getDisableDownstreamClusterStats() != false) {
        setDisableDownstreamClusterStats(other.getDisableDownstreamClusterStats());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getDelayFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getAbortFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              upstreamCluster_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              io.envoyproxy.envoy.config.route.v3.HeaderMatcher m =
                  input.readMessage(
                      io.envoyproxy.envoy.config.route.v3.HeaderMatcher.parser(),
                      extensionRegistry);
              if (headersBuilder_ == null) {
                ensureHeadersIsMutable();
                headers_.add(m);
              } else {
                headersBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureDownstreamNodesIsMutable();
              downstreamNodes_.add(s);
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getMaxActiveFaultsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getResponseRateLimitFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              delayPercentRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 74: {
              abortPercentRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000100;
              break;
            } // case 74
            case 82: {
              delayDurationRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000200;
              break;
            } // case 82
            case 90: {
              abortHttpStatusRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000400;
              break;
            } // case 90
            case 98: {
              maxActiveFaultsRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000800;
              break;
            } // case 98
            case 106: {
              responseRateLimitPercentRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00001000;
              break;
            } // case 106
            case 114: {
              abortGrpcStatusRuntime_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00002000;
              break;
            } // case 114
            case 120: {
              disableDownstreamClusterStats_ = input.readBool();
              bitField0_ |= 0x00004000;
              break;
            } // case 120
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay delay_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.Builder, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelayOrBuilder> delayBuilder_;
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     * @return Whether the delay field is set.
     */
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     * @return The delay.
     */
    public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay getDelay() {
      if (delayBuilder_ == null) {
        return delay_ == null ? io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.getDefaultInstance() : delay_;
      } else {
        return delayBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    public Builder setDelay(io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay value) {
      if (delayBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        delay_ = value;
      } else {
        delayBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    public Builder setDelay(
        io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.Builder builderForValue) {
      if (delayBuilder_ == null) {
        delay_ = builderForValue.build();
      } else {
        delayBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    public Builder mergeDelay(io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay value) {
      if (delayBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          delay_ != null &&
          delay_ != io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.getDefaultInstance()) {
          getDelayBuilder().mergeFrom(value);
        } else {
          delay_ = value;
        }
      } else {
        delayBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    public Builder clearDelay() {
      bitField0_ = (bitField0_ & ~0x00000001);
      delay_ = null;
      if (delayBuilder_ != null) {
        delayBuilder_.dispose();
        delayBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.Builder getDelayBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getDelayFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelayOrBuilder getDelayOrBuilder() {
      if (delayBuilder_ != null) {
        return delayBuilder_.getMessageOrBuilder();
      } else {
        return delay_ == null ?
            io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.getDefaultInstance() : delay_;
      }
    }
    /**
     * <pre>
     * If specified, the filter will inject delays based on the values in the
     * object.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.Builder, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelayOrBuilder> 
        getDelayFieldBuilder() {
      if (delayBuilder_ == null) {
        delayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.Builder, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelayOrBuilder>(
                getDelay(),
                getParentForChildren(),
                isClean());
        delay_ = null;
      }
      return delayBuilder_;
    }

    private io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort abort_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort, io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.Builder, io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbortOrBuilder> abortBuilder_;
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     * @return Whether the abort field is set.
     */
    public boolean hasAbort() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     * @return The abort.
     */
    public io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort getAbort() {
      if (abortBuilder_ == null) {
        return abort_ == null ? io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.getDefaultInstance() : abort_;
      } else {
        return abortBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    public Builder setAbort(io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort value) {
      if (abortBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        abort_ = value;
      } else {
        abortBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    public Builder setAbort(
        io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.Builder builderForValue) {
      if (abortBuilder_ == null) {
        abort_ = builderForValue.build();
      } else {
        abortBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    public Builder mergeAbort(io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort value) {
      if (abortBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          abort_ != null &&
          abort_ != io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.getDefaultInstance()) {
          getAbortBuilder().mergeFrom(value);
        } else {
          abort_ = value;
        }
      } else {
        abortBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    public Builder clearAbort() {
      bitField0_ = (bitField0_ & ~0x00000002);
      abort_ = null;
      if (abortBuilder_ != null) {
        abortBuilder_.dispose();
        abortBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.Builder getAbortBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getAbortFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbortOrBuilder getAbortOrBuilder() {
      if (abortBuilder_ != null) {
        return abortBuilder_.getMessageOrBuilder();
      } else {
        return abort_ == null ?
            io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.getDefaultInstance() : abort_;
      }
    }
    /**
     * <pre>
     * If specified, the filter will abort requests based on the values in
     * the object. At least ``abort`` or ``delay`` must be specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.fault.v3.FaultAbort abort = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort, io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.Builder, io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbortOrBuilder> 
        getAbortFieldBuilder() {
      if (abortBuilder_ == null) {
        abortBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort, io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbort.Builder, io.envoyproxy.envoy.extensions.filters.http.fault.v3.FaultAbortOrBuilder>(
                getAbort(),
                getParentForChildren(),
                isClean());
        abort_ = null;
      }
      return abortBuilder_;
    }

    private java.lang.Object upstreamCluster_ = "";
    /**
     * <pre>
     * Specifies the name of the (destination) upstream cluster that the
     * filter should match on. Fault injection will be restricted to requests
     * bound to the specific upstream cluster.
     * </pre>
     *
     * <code>string upstream_cluster = 3;</code>
     * @return The upstreamCluster.
     */
    public java.lang.String getUpstreamCluster() {
      java.lang.Object ref = upstreamCluster_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        upstreamCluster_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies the name of the (destination) upstream cluster that the
     * filter should match on. Fault injection will be restricted to requests
     * bound to the specific upstream cluster.
     * </pre>
     *
     * <code>string upstream_cluster = 3;</code>
     * @return The bytes for upstreamCluster.
     */
    public com.google.protobuf.ByteString
        getUpstreamClusterBytes() {
      java.lang.Object ref = upstreamCluster_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        upstreamCluster_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies the name of the (destination) upstream cluster that the
     * filter should match on. Fault injection will be restricted to requests
     * bound to the specific upstream cluster.
     * </pre>
     *
     * <code>string upstream_cluster = 3;</code>
     * @param value The upstreamCluster to set.
     * @return This builder for chaining.
     */
    public Builder setUpstreamCluster(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      upstreamCluster_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the name of the (destination) upstream cluster that the
     * filter should match on. Fault injection will be restricted to requests
     * bound to the specific upstream cluster.
     * </pre>
     *
     * <code>string upstream_cluster = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearUpstreamCluster() {
      upstreamCluster_ = getDefaultInstance().getUpstreamCluster();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the name of the (destination) upstream cluster that the
     * filter should match on. Fault injection will be restricted to requests
     * bound to the specific upstream cluster.
     * </pre>
     *
     * <code>string upstream_cluster = 3;</code>
     * @param value The bytes for upstreamCluster to set.
     * @return This builder for chaining.
     */
    public Builder setUpstreamClusterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      upstreamCluster_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> headers_ =
      java.util.Collections.emptyList();
    private void ensureHeadersIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        headers_ = new java.util.ArrayList<io.envoyproxy.envoy.config.route.v3.HeaderMatcher>(headers_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.HeaderMatcher, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder, io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> headersBuilder_;

    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> getHeadersList() {
      if (headersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(headers_);
      } else {
        return headersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public int getHeadersCount() {
      if (headersBuilder_ == null) {
        return headers_.size();
      } else {
        return headersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher getHeaders(int index) {
      if (headersBuilder_ == null) {
        return headers_.get(index);
      } else {
        return headersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder setHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.set(index, value);
        onChanged();
      } else {
        headersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder setHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.set(index, builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder addHeaders(io.envoyproxy.envoy.config.route.v3.HeaderMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.add(value);
        onChanged();
      } else {
        headersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder addHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.add(index, value);
        onChanged();
      } else {
        headersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder addHeaders(
        io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.add(builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder addHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.add(index, builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder addAllHeaders(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.route.v3.HeaderMatcher> values) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, headers_);
        onChanged();
      } else {
        headersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder clearHeaders() {
      if (headersBuilder_ == null) {
        headers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        headersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public Builder removeHeaders(int index) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.remove(index);
        onChanged();
      } else {
        headersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder getHeadersBuilder(
        int index) {
      return getHeadersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder getHeadersOrBuilder(
        int index) {
      if (headersBuilder_ == null) {
        return headers_.get(index);  } else {
        return headersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> 
         getHeadersOrBuilderList() {
      if (headersBuilder_ != null) {
        return headersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(headers_);
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder addHeadersBuilder() {
      return getHeadersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.route.v3.HeaderMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder addHeadersBuilder(
        int index) {
      return getHeadersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a set of headers that the filter should match on. The fault
     * injection filter can be applied selectively to requests that match a set of
     * headers specified in the fault filter config. The chances of actual fault
     * injection further depend on the value of the :ref:`percentage
     * &lt;envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage&gt;` field.
     * The filter will check the request's headers against all the specified
     * headers in the filter config. A match will happen if all the headers in the
     * config are present in the request with the same values (or based on
     * presence if the ``value`` field is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 4;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder> 
         getHeadersBuilderList() {
      return getHeadersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.HeaderMatcher, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder, io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> 
        getHeadersFieldBuilder() {
      if (headersBuilder_ == null) {
        headersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.route.v3.HeaderMatcher, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder, io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder>(
                headers_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        headers_ = null;
      }
      return headersBuilder_;
    }

    private com.google.protobuf.LazyStringList downstreamNodes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureDownstreamNodesIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        downstreamNodes_ = new com.google.protobuf.LazyStringArrayList(downstreamNodes_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @return A list containing the downstreamNodes.
     */
    public com.google.protobuf.ProtocolStringList
        getDownstreamNodesList() {
      return downstreamNodes_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @return The count of downstreamNodes.
     */
    public int getDownstreamNodesCount() {
      return downstreamNodes_.size();
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @param index The index of the element to return.
     * @return The downstreamNodes at the given index.
     */
    public java.lang.String getDownstreamNodes(int index) {
      return downstreamNodes_.get(index);
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the downstreamNodes at the given index.
     */
    public com.google.protobuf.ByteString
        getDownstreamNodesBytes(int index) {
      return downstreamNodes_.getByteString(index);
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @param index The index to set the value at.
     * @param value The downstreamNodes to set.
     * @return This builder for chaining.
     */
    public Builder setDownstreamNodes(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureDownstreamNodesIsMutable();
      downstreamNodes_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @param value The downstreamNodes to add.
     * @return This builder for chaining.
     */
    public Builder addDownstreamNodes(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureDownstreamNodesIsMutable();
      downstreamNodes_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @param values The downstreamNodes to add.
     * @return This builder for chaining.
     */
    public Builder addAllDownstreamNodes(
        java.lang.Iterable<java.lang.String> values) {
      ensureDownstreamNodesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, downstreamNodes_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDownstreamNodes() {
      downstreamNodes_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Faults are injected for the specified list of downstream hosts. If this
     * setting is not set, faults are injected for all downstream nodes.
     * Downstream node name is taken from :ref:`the HTTP
     * x-envoy-downstream-service-node
     * &lt;config_http_conn_man_headers_downstream-service-node&gt;` header and compared
     * against downstream_nodes list.
     * </pre>
     *
     * <code>repeated string downstream_nodes = 5;</code>
     * @param value The bytes of the downstreamNodes to add.
     * @return This builder for chaining.
     */
    public Builder addDownstreamNodesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureDownstreamNodesIsMutable();
      downstreamNodes_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt32Value maxActiveFaults_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxActiveFaultsBuilder_;
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     * @return Whether the maxActiveFaults field is set.
     */
    public boolean hasMaxActiveFaults() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     * @return The maxActiveFaults.
     */
    public com.google.protobuf.UInt32Value getMaxActiveFaults() {
      if (maxActiveFaultsBuilder_ == null) {
        return maxActiveFaults_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxActiveFaults_;
      } else {
        return maxActiveFaultsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    public Builder setMaxActiveFaults(com.google.protobuf.UInt32Value value) {
      if (maxActiveFaultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxActiveFaults_ = value;
      } else {
        maxActiveFaultsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    public Builder setMaxActiveFaults(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxActiveFaultsBuilder_ == null) {
        maxActiveFaults_ = builderForValue.build();
      } else {
        maxActiveFaultsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    public Builder mergeMaxActiveFaults(com.google.protobuf.UInt32Value value) {
      if (maxActiveFaultsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          maxActiveFaults_ != null &&
          maxActiveFaults_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxActiveFaultsBuilder().mergeFrom(value);
        } else {
          maxActiveFaults_ = value;
        }
      } else {
        maxActiveFaultsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    public Builder clearMaxActiveFaults() {
      bitField0_ = (bitField0_ & ~0x00000020);
      maxActiveFaults_ = null;
      if (maxActiveFaultsBuilder_ != null) {
        maxActiveFaultsBuilder_.dispose();
        maxActiveFaultsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxActiveFaultsBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getMaxActiveFaultsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxActiveFaultsOrBuilder() {
      if (maxActiveFaultsBuilder_ != null) {
        return maxActiveFaultsBuilder_.getMessageOrBuilder();
      } else {
        return maxActiveFaults_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxActiveFaults_;
      }
    }
    /**
     * <pre>
     * The maximum number of faults that can be active at a single time via the configured fault
     * filter. Note that because this setting can be overridden at the route level, it's possible
     * for the number of active faults to be greater than this value (if injected via a different
     * route). If not specified, defaults to unlimited. This setting can be overridden via
     * ``runtime &lt;config_http_filters_fault_injection_runtime&gt;`` and any faults that are not injected
     * due to overflow will be indicated via the ``faults_overflow
     * &lt;config_http_filters_fault_injection_stats&gt;`` stat.
     * .. attention::
     *   Like other :ref:`circuit breakers &lt;arch_overview_circuit_break&gt;` in Envoy, this is a fuzzy
     *   limit. It's possible for the number of active faults to rise slightly above the configured
     *   amount due to the implementation details.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_active_faults = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxActiveFaultsFieldBuilder() {
      if (maxActiveFaultsBuilder_ == null) {
        maxActiveFaultsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxActiveFaults(),
                getParentForChildren(),
                isClean());
        maxActiveFaults_ = null;
      }
      return maxActiveFaultsBuilder_;
    }

    private io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit responseRateLimit_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.Builder, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimitOrBuilder> responseRateLimitBuilder_;
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     * @return Whether the responseRateLimit field is set.
     */
    public boolean hasResponseRateLimit() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     * @return The responseRateLimit.
     */
    public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit getResponseRateLimit() {
      if (responseRateLimitBuilder_ == null) {
        return responseRateLimit_ == null ? io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.getDefaultInstance() : responseRateLimit_;
      } else {
        return responseRateLimitBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    public Builder setResponseRateLimit(io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit value) {
      if (responseRateLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        responseRateLimit_ = value;
      } else {
        responseRateLimitBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    public Builder setResponseRateLimit(
        io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.Builder builderForValue) {
      if (responseRateLimitBuilder_ == null) {
        responseRateLimit_ = builderForValue.build();
      } else {
        responseRateLimitBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    public Builder mergeResponseRateLimit(io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit value) {
      if (responseRateLimitBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          responseRateLimit_ != null &&
          responseRateLimit_ != io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.getDefaultInstance()) {
          getResponseRateLimitBuilder().mergeFrom(value);
        } else {
          responseRateLimit_ = value;
        }
      } else {
        responseRateLimitBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    public Builder clearResponseRateLimit() {
      bitField0_ = (bitField0_ & ~0x00000040);
      responseRateLimit_ = null;
      if (responseRateLimitBuilder_ != null) {
        responseRateLimitBuilder_.dispose();
        responseRateLimitBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.Builder getResponseRateLimitBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getResponseRateLimitFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimitOrBuilder getResponseRateLimitOrBuilder() {
      if (responseRateLimitBuilder_ != null) {
        return responseRateLimitBuilder_.getMessageOrBuilder();
      } else {
        return responseRateLimit_ == null ?
            io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.getDefaultInstance() : responseRateLimit_;
      }
    }
    /**
     * <pre>
     * The response rate limit to be applied to the response body of the stream. When configured,
     * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
     * &lt;config_http_filters_fault_injection_runtime&gt;` runtime key.
     * .. attention::
     *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
     *  will each get an independent limit.
     * </pre>
     *
     * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.Builder, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimitOrBuilder> 
        getResponseRateLimitFieldBuilder() {
      if (responseRateLimitBuilder_ == null) {
        responseRateLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.Builder, io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimitOrBuilder>(
                getResponseRateLimit(),
                getParentForChildren(),
                isClean());
        responseRateLimit_ = null;
      }
      return responseRateLimitBuilder_;
    }

    private java.lang.Object delayPercentRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_delay_percent
     * </pre>
     *
     * <code>string delay_percent_runtime = 8;</code>
     * @return The delayPercentRuntime.
     */
    public java.lang.String getDelayPercentRuntime() {
      java.lang.Object ref = delayPercentRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        delayPercentRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_delay_percent
     * </pre>
     *
     * <code>string delay_percent_runtime = 8;</code>
     * @return The bytes for delayPercentRuntime.
     */
    public com.google.protobuf.ByteString
        getDelayPercentRuntimeBytes() {
      java.lang.Object ref = delayPercentRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        delayPercentRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_delay_percent
     * </pre>
     *
     * <code>string delay_percent_runtime = 8;</code>
     * @param value The delayPercentRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setDelayPercentRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      delayPercentRuntime_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_delay_percent
     * </pre>
     *
     * <code>string delay_percent_runtime = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearDelayPercentRuntime() {
      delayPercentRuntime_ = getDefaultInstance().getDelayPercentRuntime();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_delay_percent
     * </pre>
     *
     * <code>string delay_percent_runtime = 8;</code>
     * @param value The bytes for delayPercentRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setDelayPercentRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      delayPercentRuntime_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private java.lang.Object abortPercentRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.abort_percent
     * </pre>
     *
     * <code>string abort_percent_runtime = 9;</code>
     * @return The abortPercentRuntime.
     */
    public java.lang.String getAbortPercentRuntime() {
      java.lang.Object ref = abortPercentRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        abortPercentRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.abort_percent
     * </pre>
     *
     * <code>string abort_percent_runtime = 9;</code>
     * @return The bytes for abortPercentRuntime.
     */
    public com.google.protobuf.ByteString
        getAbortPercentRuntimeBytes() {
      java.lang.Object ref = abortPercentRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        abortPercentRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.abort_percent
     * </pre>
     *
     * <code>string abort_percent_runtime = 9;</code>
     * @param value The abortPercentRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setAbortPercentRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      abortPercentRuntime_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.abort_percent
     * </pre>
     *
     * <code>string abort_percent_runtime = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearAbortPercentRuntime() {
      abortPercentRuntime_ = getDefaultInstance().getAbortPercentRuntime();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.abort_percent
     * </pre>
     *
     * <code>string abort_percent_runtime = 9;</code>
     * @param value The bytes for abortPercentRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setAbortPercentRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      abortPercentRuntime_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    private java.lang.Object delayDurationRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_duration_ms
     * </pre>
     *
     * <code>string delay_duration_runtime = 10;</code>
     * @return The delayDurationRuntime.
     */
    public java.lang.String getDelayDurationRuntime() {
      java.lang.Object ref = delayDurationRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        delayDurationRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_duration_ms
     * </pre>
     *
     * <code>string delay_duration_runtime = 10;</code>
     * @return The bytes for delayDurationRuntime.
     */
    public com.google.protobuf.ByteString
        getDelayDurationRuntimeBytes() {
      java.lang.Object ref = delayDurationRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        delayDurationRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_duration_ms
     * </pre>
     *
     * <code>string delay_duration_runtime = 10;</code>
     * @param value The delayDurationRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setDelayDurationRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      delayDurationRuntime_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_duration_ms
     * </pre>
     *
     * <code>string delay_duration_runtime = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearDelayDurationRuntime() {
      delayDurationRuntime_ = getDefaultInstance().getDelayDurationRuntime();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.delay.fixed_duration_ms
     * </pre>
     *
     * <code>string delay_duration_runtime = 10;</code>
     * @param value The bytes for delayDurationRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setDelayDurationRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      delayDurationRuntime_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }

    private java.lang.Object abortHttpStatusRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.http_status
     * </pre>
     *
     * <code>string abort_http_status_runtime = 11;</code>
     * @return The abortHttpStatusRuntime.
     */
    public java.lang.String getAbortHttpStatusRuntime() {
      java.lang.Object ref = abortHttpStatusRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        abortHttpStatusRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.http_status
     * </pre>
     *
     * <code>string abort_http_status_runtime = 11;</code>
     * @return The bytes for abortHttpStatusRuntime.
     */
    public com.google.protobuf.ByteString
        getAbortHttpStatusRuntimeBytes() {
      java.lang.Object ref = abortHttpStatusRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        abortHttpStatusRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.http_status
     * </pre>
     *
     * <code>string abort_http_status_runtime = 11;</code>
     * @param value The abortHttpStatusRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setAbortHttpStatusRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      abortHttpStatusRuntime_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.http_status
     * </pre>
     *
     * <code>string abort_http_status_runtime = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearAbortHttpStatusRuntime() {
      abortHttpStatusRuntime_ = getDefaultInstance().getAbortHttpStatusRuntime();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.http_status
     * </pre>
     *
     * <code>string abort_http_status_runtime = 11;</code>
     * @param value The bytes for abortHttpStatusRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setAbortHttpStatusRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      abortHttpStatusRuntime_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }

    private java.lang.Object maxActiveFaultsRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.max_active_faults
     * </pre>
     *
     * <code>string max_active_faults_runtime = 12;</code>
     * @return The maxActiveFaultsRuntime.
     */
    public java.lang.String getMaxActiveFaultsRuntime() {
      java.lang.Object ref = maxActiveFaultsRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        maxActiveFaultsRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.max_active_faults
     * </pre>
     *
     * <code>string max_active_faults_runtime = 12;</code>
     * @return The bytes for maxActiveFaultsRuntime.
     */
    public com.google.protobuf.ByteString
        getMaxActiveFaultsRuntimeBytes() {
      java.lang.Object ref = maxActiveFaultsRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        maxActiveFaultsRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.max_active_faults
     * </pre>
     *
     * <code>string max_active_faults_runtime = 12;</code>
     * @param value The maxActiveFaultsRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setMaxActiveFaultsRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      maxActiveFaultsRuntime_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.max_active_faults
     * </pre>
     *
     * <code>string max_active_faults_runtime = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxActiveFaultsRuntime() {
      maxActiveFaultsRuntime_ = getDefaultInstance().getMaxActiveFaultsRuntime();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.max_active_faults
     * </pre>
     *
     * <code>string max_active_faults_runtime = 12;</code>
     * @param value The bytes for maxActiveFaultsRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setMaxActiveFaultsRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      maxActiveFaultsRuntime_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }

    private java.lang.Object responseRateLimitPercentRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.rate_limit.response_percent
     * </pre>
     *
     * <code>string response_rate_limit_percent_runtime = 13;</code>
     * @return The responseRateLimitPercentRuntime.
     */
    public java.lang.String getResponseRateLimitPercentRuntime() {
      java.lang.Object ref = responseRateLimitPercentRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        responseRateLimitPercentRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.rate_limit.response_percent
     * </pre>
     *
     * <code>string response_rate_limit_percent_runtime = 13;</code>
     * @return The bytes for responseRateLimitPercentRuntime.
     */
    public com.google.protobuf.ByteString
        getResponseRateLimitPercentRuntimeBytes() {
      java.lang.Object ref = responseRateLimitPercentRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        responseRateLimitPercentRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.rate_limit.response_percent
     * </pre>
     *
     * <code>string response_rate_limit_percent_runtime = 13;</code>
     * @param value The responseRateLimitPercentRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setResponseRateLimitPercentRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      responseRateLimitPercentRuntime_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.rate_limit.response_percent
     * </pre>
     *
     * <code>string response_rate_limit_percent_runtime = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearResponseRateLimitPercentRuntime() {
      responseRateLimitPercentRuntime_ = getDefaultInstance().getResponseRateLimitPercentRuntime();
      bitField0_ = (bitField0_ & ~0x00001000);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.rate_limit.response_percent
     * </pre>
     *
     * <code>string response_rate_limit_percent_runtime = 13;</code>
     * @param value The bytes for responseRateLimitPercentRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setResponseRateLimitPercentRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      responseRateLimitPercentRuntime_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }

    private java.lang.Object abortGrpcStatusRuntime_ = "";
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.grpc_status
     * </pre>
     *
     * <code>string abort_grpc_status_runtime = 14;</code>
     * @return The abortGrpcStatusRuntime.
     */
    public java.lang.String getAbortGrpcStatusRuntime() {
      java.lang.Object ref = abortGrpcStatusRuntime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        abortGrpcStatusRuntime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.grpc_status
     * </pre>
     *
     * <code>string abort_grpc_status_runtime = 14;</code>
     * @return The bytes for abortGrpcStatusRuntime.
     */
    public com.google.protobuf.ByteString
        getAbortGrpcStatusRuntimeBytes() {
      java.lang.Object ref = abortGrpcStatusRuntime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        abortGrpcStatusRuntime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.grpc_status
     * </pre>
     *
     * <code>string abort_grpc_status_runtime = 14;</code>
     * @param value The abortGrpcStatusRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setAbortGrpcStatusRuntime(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      abortGrpcStatusRuntime_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.grpc_status
     * </pre>
     *
     * <code>string abort_grpc_status_runtime = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearAbortGrpcStatusRuntime() {
      abortGrpcStatusRuntime_ = getDefaultInstance().getAbortGrpcStatusRuntime();
      bitField0_ = (bitField0_ & ~0x00002000);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The runtime key to override the :ref:`default &lt;config_http_filters_fault_injection_runtime&gt;`
     * runtime. The default is: fault.http.abort.grpc_status
     * </pre>
     *
     * <code>string abort_grpc_status_runtime = 14;</code>
     * @param value The bytes for abortGrpcStatusRuntime to set.
     * @return This builder for chaining.
     */
    public Builder setAbortGrpcStatusRuntimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      abortGrpcStatusRuntime_ = value;
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }

    private boolean disableDownstreamClusterStats_ ;
    /**
     * <pre>
     * To control whether stats storage is allocated dynamically for each downstream server.
     * If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
     * If set to false, dynamic stats storage will be allocated for the downstream cluster name.
     * Default value is false.
     * </pre>
     *
     * <code>bool disable_downstream_cluster_stats = 15;</code>
     * @return The disableDownstreamClusterStats.
     */
    @java.lang.Override
    public boolean getDisableDownstreamClusterStats() {
      return disableDownstreamClusterStats_;
    }
    /**
     * <pre>
     * To control whether stats storage is allocated dynamically for each downstream server.
     * If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
     * If set to false, dynamic stats storage will be allocated for the downstream cluster name.
     * Default value is false.
     * </pre>
     *
     * <code>bool disable_downstream_cluster_stats = 15;</code>
     * @param value The disableDownstreamClusterStats to set.
     * @return This builder for chaining.
     */
    public Builder setDisableDownstreamClusterStats(boolean value) {
      
      disableDownstreamClusterStats_ = value;
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * To control whether stats storage is allocated dynamically for each downstream server.
     * If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
     * If set to false, dynamic stats storage will be allocated for the downstream cluster name.
     * Default value is false.
     * </pre>
     *
     * <code>bool disable_downstream_cluster_stats = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisableDownstreamClusterStats() {
      bitField0_ = (bitField0_ & ~0x00004000);
      disableDownstreamClusterStats_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.fault.v3.HTTPFault)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.fault.v3.HTTPFault)
  private static final io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HTTPFault>
      PARSER = new com.google.protobuf.AbstractParser<HTTPFault>() {
    @java.lang.Override
    public HTTPFault parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<HTTPFault> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HTTPFault> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.fault.v3.HTTPFault getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

