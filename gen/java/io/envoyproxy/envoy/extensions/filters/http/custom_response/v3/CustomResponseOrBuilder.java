// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/custom_response/v3/custom_response.proto

package io.envoyproxy.envoy.extensions.filters.http.custom_response.v3;

public interface CustomResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.custom_response.v3.CustomResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
   * @return Whether the customResponseMatcher field is set.
   */
  boolean hasCustomResponseMatcher();
  /**
   * <pre>
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
   * @return The customResponseMatcher.
   */
  com.github.xds.type.matcher.v3.Matcher getCustomResponseMatcher();
  /**
   * <pre>
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
   */
  com.github.xds.type.matcher.v3.MatcherOrBuilder getCustomResponseMatcherOrBuilder();
}
