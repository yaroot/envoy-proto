// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/aws_request_signing/v3/aws_request_signing.proto

package io.envoyproxy.envoy.extensions.filters.http.aws_request_signing.v3;

public final class AwsRequestSigningProto {
  private AwsRequestSigningProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_envoy_extensions_filters_http_aws_request_signing_v3_AwsRequestSigning_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_envoy_extensions_filters_http_aws_request_signing_v3_AwsRequestSigning_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nNenvoy/extensions/filters/http/aws_requ" +
      "est_signing/v3/aws_request_signing.proto" +
      "\0224envoy.extensions.filters.http.aws_requ" +
      "est_signing.v3\032\"envoy/type/matcher/v3/st" +
      "ring.proto\032\035udpa/annotations/status.prot" +
      "o\032!udpa/annotations/versioning.proto\032\027va" +
      "lidate/validate.proto\"\224\002\n\021AwsRequestSign" +
      "ing\022\035\n\014service_name\030\001 \001(\tB\007\372B\004r\002\020\001\022\027\n\006re" +
      "gion\030\002 \001(\tB\007\372B\004r\002\020\001\022\024\n\014host_rewrite\030\003 \001(" +
      "\t\022\034\n\024use_unsigned_payload\030\004 \001(\010\022D\n\026match" +
      "_excluded_headers\030\005 \003(\0132$.envoy.type.mat" +
      "cher.v3.StringMatcher:M\232\305\210\036H\nFenvoy.conf" +
      "ig.filter.http.aws_request_signing.v2alp" +
      "ha.AwsRequestSigningB\331\001\nBio.envoyproxy.e" +
      "nvoy.extensions.filters.http.aws_request" +
      "_signing.v3B\026AwsRequestSigningProtoP\001Zqg" +
      "ithub.com/envoyproxy/go-control-plane/en" +
      "voy/extensions/filters/http/aws_request_" +
      "signing/v3;aws_request_signingv3\272\200\310\321\006\002\020\002" +
      "b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.envoyproxy.envoy.type.matcher.v3.StringProto.getDescriptor(),
          udpa.annotations.Status.getDescriptor(),
          udpa.annotations.Versioning.getDescriptor(),
          io.envoyproxy.pgv.validate.Validate.getDescriptor(),
        });
    internal_static_envoy_extensions_filters_http_aws_request_signing_v3_AwsRequestSigning_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_envoy_extensions_filters_http_aws_request_signing_v3_AwsRequestSigning_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_envoy_extensions_filters_http_aws_request_signing_v3_AwsRequestSigning_descriptor,
        new java.lang.String[] { "ServiceName", "Region", "HostRewrite", "UseUnsignedPayload", "MatchExcludedHeaders", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(udpa.annotations.Status.fileStatus);
    registry.add(udpa.annotations.Versioning.versioning);
    registry.add(io.envoyproxy.pgv.validate.Validate.rules);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    io.envoyproxy.envoy.type.matcher.v3.StringProto.getDescriptor();
    udpa.annotations.Status.getDescriptor();
    udpa.annotations.Versioning.getDescriptor();
    io.envoyproxy.pgv.validate.Validate.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
