// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3;

public interface FilterConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The content-type to pass to the upstream when the gRPC bridge filter is applied.
   * The filter will also validate that the upstream responds with the same content type.
   * </pre>
   *
   * <code>string content_type = 1 [(.validate.rules) = { ... }</code>
   * @return The contentType.
   */
  java.lang.String getContentType();
  /**
   * <pre>
   * The content-type to pass to the upstream when the gRPC bridge filter is applied.
   * The filter will also validate that the upstream responds with the same content type.
   * </pre>
   *
   * <code>string content_type = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for contentType.
   */
  com.google.protobuf.ByteString
      getContentTypeBytes();

  /**
   * <pre>
   * If true, Envoy will assume that the upstream doesn't understand gRPC frames and
   * strip the gRPC frame from the request, and add it back in to the response. This will
   * hide the gRPC semantics from the upstream, allowing it to receive and respond with a
   * simple binary encoded protobuf. In order to calculate the ``Content-Length`` header value, Envoy
   * will buffer the upstream response unless :ref:`response_size_header
   * &lt;envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.response_size_header&gt;`
   * is set, in which case Envoy will use the value of an upstream header to calculate the content
   * length.
   * </pre>
   *
   * <code>bool withhold_grpc_frames = 2;</code>
   * @return The withholdGrpcFrames.
   */
  boolean getWithholdGrpcFrames();

  /**
   * <pre>
   * When :ref:`withhold_grpc_frames
   * &lt;envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.withhold_grpc_frames&gt;`
   * is true, this option controls how Envoy calculates the ``Content-Length``. When
   * ``response_size_header`` is empty, Envoy will buffer the upstream response to calculate its
   * size. When ``response_size_header`` is set to a non-empty string, Envoy will stream the response
   * to the downstream and it will use the value of the response header with this name to set the
   * ``Content-Length`` header and gRPC frame size. If the header with this name is repeated, only
   * the first value will be used.
   * Envoy will treat the upstream response as an error if this option is specified and the header
   * is missing or if the value does not match the actual response body size.
   * </pre>
   *
   * <code>string response_size_header = 3 [(.validate.rules) = { ... }</code>
   * @return The responseSizeHeader.
   */
  java.lang.String getResponseSizeHeader();
  /**
   * <pre>
   * When :ref:`withhold_grpc_frames
   * &lt;envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.withhold_grpc_frames&gt;`
   * is true, this option controls how Envoy calculates the ``Content-Length``. When
   * ``response_size_header`` is empty, Envoy will buffer the upstream response to calculate its
   * size. When ``response_size_header`` is set to a non-empty string, Envoy will stream the response
   * to the downstream and it will use the value of the response header with this name to set the
   * ``Content-Length`` header and gRPC frame size. If the header with this name is repeated, only
   * the first value will be used.
   * Envoy will treat the upstream response as an error if this option is specified and the header
   * is missing or if the value does not match the actual response body size.
   * </pre>
   *
   * <code>string response_size_header = 3 [(.validate.rules) = { ... }</code>
   * @return The bytes for responseSizeHeader.
   */
  com.google.protobuf.ByteString
      getResponseSizeHeaderBytes();
}
