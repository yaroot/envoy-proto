// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto

package io.envoyproxy.envoy.extensions.filters.http.stateful_session.v3;

public interface StatefulSessionPerRouteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Disable the stateful session filter for this particular vhost or route. If disabled is
   * specified in multiple per-filter-configs, the most specific one will be used.
   * </pre>
   *
   * <code>bool disabled = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the disabled field is set.
   */
  boolean hasDisabled();
  /**
   * <pre>
   * Disable the stateful session filter for this particular vhost or route. If disabled is
   * specified in multiple per-filter-configs, the most specific one will be used.
   * </pre>
   *
   * <code>bool disabled = 1 [(.validate.rules) = { ... }</code>
   * @return The disabled.
   */
  boolean getDisabled();

  /**
   * <pre>
   * Per-route stateful session configuration that can be served by RDS or static route table.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session = 2;</code>
   * @return Whether the statefulSession field is set.
   */
  boolean hasStatefulSession();
  /**
   * <pre>
   * Per-route stateful session configuration that can be served by RDS or static route table.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session = 2;</code>
   * @return The statefulSession.
   */
  io.envoyproxy.envoy.extensions.filters.http.stateful_session.v3.StatefulSession getStatefulSession();
  /**
   * <pre>
   * Per-route stateful session configuration that can be served by RDS or static route table.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.stateful_session.v3.StatefulSession stateful_session = 2;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.stateful_session.v3.StatefulSessionOrBuilder getStatefulSessionOrBuilder();

  public io.envoyproxy.envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.OverrideCase getOverrideCase();
}
