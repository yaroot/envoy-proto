// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3;

public interface RemoteJwksOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The HTTP URI to fetch the JWKS. For example:
   * .. code-block:: yaml
   *    http_uri:
   *      uri: https://www.googleapis.com/oauth2/v1/certs
   *      cluster: jwt.www.googleapis.com|443
   *      timeout: 1s
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
   * @return Whether the httpUri field is set.
   */
  boolean hasHttpUri();
  /**
   * <pre>
   * The HTTP URI to fetch the JWKS. For example:
   * .. code-block:: yaml
   *    http_uri:
   *      uri: https://www.googleapis.com/oauth2/v1/certs
   *      cluster: jwt.www.googleapis.com|443
   *      timeout: 1s
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
   * @return The httpUri.
   */
  io.envoyproxy.envoy.config.core.v3.HttpUri getHttpUri();
  /**
   * <pre>
   * The HTTP URI to fetch the JWKS. For example:
   * .. code-block:: yaml
   *    http_uri:
   *      uri: https://www.googleapis.com/oauth2/v1/certs
   *      cluster: jwt.www.googleapis.com|443
   *      timeout: 1s
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder getHttpUriOrBuilder();

  /**
   * <pre>
   * Duration after which the cached JWKS should be expired. If not specified, default cache
   * duration is 10 minutes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cache_duration = 2;</code>
   * @return Whether the cacheDuration field is set.
   */
  boolean hasCacheDuration();
  /**
   * <pre>
   * Duration after which the cached JWKS should be expired. If not specified, default cache
   * duration is 10 minutes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cache_duration = 2;</code>
   * @return The cacheDuration.
   */
  com.google.protobuf.Duration getCacheDuration();
  /**
   * <pre>
   * Duration after which the cached JWKS should be expired. If not specified, default cache
   * duration is 10 minutes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cache_duration = 2;</code>
   */
  com.google.protobuf.DurationOrBuilder getCacheDurationOrBuilder();

  /**
   * <pre>
   * Fetch Jwks asynchronously in the main thread before the listener is activated.
   * Fetched Jwks can be used by all worker threads.
   * If this feature is not enabled:
   * * The Jwks is fetched on-demand when the requests come. During the fetching, first
   *   few requests are paused until the Jwks is fetched.
   * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
   * If this feature is enabled:
   * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
   *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
   * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
   * @return Whether the asyncFetch field is set.
   */
  boolean hasAsyncFetch();
  /**
   * <pre>
   * Fetch Jwks asynchronously in the main thread before the listener is activated.
   * Fetched Jwks can be used by all worker threads.
   * If this feature is not enabled:
   * * The Jwks is fetched on-demand when the requests come. During the fetching, first
   *   few requests are paused until the Jwks is fetched.
   * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
   * If this feature is enabled:
   * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
   *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
   * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
   * @return The asyncFetch.
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch getAsyncFetch();
  /**
   * <pre>
   * Fetch Jwks asynchronously in the main thread before the listener is activated.
   * Fetched Jwks can be used by all worker threads.
   * If this feature is not enabled:
   * * The Jwks is fetched on-demand when the requests come. During the fetching, first
   *   few requests are paused until the Jwks is fetched.
   * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
   * If this feature is enabled:
   * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
   *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
   * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchOrBuilder getAsyncFetchOrBuilder();

  /**
   * <pre>
   * Retry policy for fetching Jwks. optional. turned off by default.
   * For example:
   * .. code-block:: yaml
   *   retry_policy:
   *     retry_back_off:
   *       base_interval: 0.01s
   *       max_interval: 20s
   *     num_retries: 10
   * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
   * 10 maximum attempts spaced at most 20s seconds.
   * .. code-block:: yaml
   *   retry_policy:
   *     num_retries:1
   * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
   * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
   * if num_retries is omitted, the default is to allow only one retry.
   * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
   * @return Whether the retryPolicy field is set.
   */
  boolean hasRetryPolicy();
  /**
   * <pre>
   * Retry policy for fetching Jwks. optional. turned off by default.
   * For example:
   * .. code-block:: yaml
   *   retry_policy:
   *     retry_back_off:
   *       base_interval: 0.01s
   *       max_interval: 20s
   *     num_retries: 10
   * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
   * 10 maximum attempts spaced at most 20s seconds.
   * .. code-block:: yaml
   *   retry_policy:
   *     num_retries:1
   * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
   * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
   * if num_retries is omitted, the default is to allow only one retry.
   * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
   * @return The retryPolicy.
   */
  io.envoyproxy.envoy.config.core.v3.RetryPolicy getRetryPolicy();
  /**
   * <pre>
   * Retry policy for fetching Jwks. optional. turned off by default.
   * For example:
   * .. code-block:: yaml
   *   retry_policy:
   *     retry_back_off:
   *       base_interval: 0.01s
   *       max_interval: 20s
   *     num_retries: 10
   * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
   * 10 maximum attempts spaced at most 20s seconds.
   * .. code-block:: yaml
   *   retry_policy:
   *     num_retries:1
   * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
   * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
   * if num_retries is omitted, the default is to allow only one retry.
   * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder getRetryPolicyOrBuilder();
}
