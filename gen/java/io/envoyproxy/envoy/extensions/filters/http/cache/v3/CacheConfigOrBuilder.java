// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/cache/v3/cache.proto

package io.envoyproxy.envoy.extensions.filters.http.cache.v3;

public interface CacheConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.cache.v3.CacheConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Config specific to the cache storage implementation.
   * [#extension-category: envoy.http.cache]
   * </pre>
   *
   * <code>.google.protobuf.Any typed_config = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the typedConfig field is set.
   */
  boolean hasTypedConfig();
  /**
   * <pre>
   * Config specific to the cache storage implementation.
   * [#extension-category: envoy.http.cache]
   * </pre>
   *
   * <code>.google.protobuf.Any typed_config = 1 [(.validate.rules) = { ... }</code>
   * @return The typedConfig.
   */
  com.google.protobuf.Any getTypedConfig();
  /**
   * <pre>
   * Config specific to the cache storage implementation.
   * [#extension-category: envoy.http.cache]
   * </pre>
   *
   * <code>.google.protobuf.Any typed_config = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.AnyOrBuilder getTypedConfigOrBuilder();

  /**
   * <pre>
   * List of matching rules that defines allowed ``Vary`` headers.
   * The ``vary`` response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   * During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
   * response's ``vary`` header mentions any header names that aren't matched by any rules in
   * ``allowed_vary_headers``, that response will not be cached.
   * During lookup, ``allowed_vary_headers`` controls what request headers will be
   * sent to the cache storage implementation.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allowed_vary_headers = 2;</code>
   */
  java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> 
      getAllowedVaryHeadersList();
  /**
   * <pre>
   * List of matching rules that defines allowed ``Vary`` headers.
   * The ``vary`` response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   * During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
   * response's ``vary`` header mentions any header names that aren't matched by any rules in
   * ``allowed_vary_headers``, that response will not be cached.
   * During lookup, ``allowed_vary_headers`` controls what request headers will be
   * sent to the cache storage implementation.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allowed_vary_headers = 2;</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcher getAllowedVaryHeaders(int index);
  /**
   * <pre>
   * List of matching rules that defines allowed ``Vary`` headers.
   * The ``vary`` response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   * During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
   * response's ``vary`` header mentions any header names that aren't matched by any rules in
   * ``allowed_vary_headers``, that response will not be cached.
   * During lookup, ``allowed_vary_headers`` controls what request headers will be
   * sent to the cache storage implementation.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allowed_vary_headers = 2;</code>
   */
  int getAllowedVaryHeadersCount();
  /**
   * <pre>
   * List of matching rules that defines allowed ``Vary`` headers.
   * The ``vary`` response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   * During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
   * response's ``vary`` header mentions any header names that aren't matched by any rules in
   * ``allowed_vary_headers``, that response will not be cached.
   * During lookup, ``allowed_vary_headers`` controls what request headers will be
   * sent to the cache storage implementation.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allowed_vary_headers = 2;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> 
      getAllowedVaryHeadersOrBuilderList();
  /**
   * <pre>
   * List of matching rules that defines allowed ``Vary`` headers.
   * The ``vary`` response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   * During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
   * response's ``vary`` header mentions any header names that aren't matched by any rules in
   * ``allowed_vary_headers``, that response will not be cached.
   * During lookup, ``allowed_vary_headers`` controls what request headers will be
   * sent to the cache storage implementation.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allowed_vary_headers = 2;</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getAllowedVaryHeadersOrBuilder(
      int index);

  /**
   * <pre>
   * [#not-implemented-hide:]
   * &lt;TODO(toddmgreer) implement key customization&gt;
   * Modifies cache key creation by restricting which parts of the URL are included.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams key_creator_params = 3;</code>
   * @return Whether the keyCreatorParams field is set.
   */
  boolean hasKeyCreatorParams();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * &lt;TODO(toddmgreer) implement key customization&gt;
   * Modifies cache key creation by restricting which parts of the URL are included.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams key_creator_params = 3;</code>
   * @return The keyCreatorParams.
   */
  io.envoyproxy.envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams getKeyCreatorParams();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * &lt;TODO(toddmgreer) implement key customization&gt;
   * Modifies cache key creation by restricting which parts of the URL are included.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParams key_creator_params = 3;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.cache.v3.CacheConfig.KeyCreatorParamsOrBuilder getKeyCreatorParamsOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * &lt;TODO(toddmgreer) implement size limit&gt;
   * Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
   * storage implementation may have its own limit beyond which it will reject insertions).
   * </pre>
   *
   * <code>uint32 max_body_bytes = 4;</code>
   * @return The maxBodyBytes.
   */
  int getMaxBodyBytes();
}
