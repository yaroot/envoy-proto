// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3;

public interface JwtClaimToHeaderOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The HTTP header name to copy the claim to.
   * The header name will be sanitized and replaced.
   * </pre>
   *
   * <code>string header_name = 1 [(.validate.rules) = { ... }</code>
   * @return The headerName.
   */
  java.lang.String getHeaderName();
  /**
   * <pre>
   * The HTTP header name to copy the claim to.
   * The header name will be sanitized and replaced.
   * </pre>
   *
   * <code>string header_name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for headerName.
   */
  com.google.protobuf.ByteString
      getHeaderNameBytes();

  /**
   * <pre>
   * The field name for the JWT Claim : it can be a nested claim of type (eg. "claim.nested.key", "sub")
   * String separated with "." in case of nested claims. The nested claim name must use dot "." to separate
   * the JSON name path.
   * </pre>
   *
   * <code>string claim_name = 2 [(.validate.rules) = { ... }</code>
   * @return The claimName.
   */
  java.lang.String getClaimName();
  /**
   * <pre>
   * The field name for the JWT Claim : it can be a nested claim of type (eg. "claim.nested.key", "sub")
   * String separated with "." in case of nested claims. The nested claim name must use dot "." to separate
   * the JSON name path.
   * </pre>
   *
   * <code>string claim_name = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for claimName.
   */
  com.google.protobuf.ByteString
      getClaimNameBytes();
}
