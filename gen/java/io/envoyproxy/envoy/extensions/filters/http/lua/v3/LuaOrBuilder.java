// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/lua/v3/lua.proto

package io.envoyproxy.envoy.extensions.filters.http.lua.v3;

public interface LuaOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.lua.v3.Lua)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The Lua code that Envoy will execute. This can be a very small script that
   * further loads code from disk if desired. Note that if JSON configuration is used, the code must
   * be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
   * strings so complex scripts can be easily expressed inline in the configuration.
   * This field is deprecated. Please use
   * :ref:`default_source_code &lt;envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code&gt;`.
   * Only one of :ref:`inline_code &lt;envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.inline_code&gt;`
   * or :ref:`default_source_code &lt;envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code&gt;`
   * can be set for the Lua filter.
   * </pre>
   *
   * <code>string inline_code = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.lua.v3.Lua.inline_code is deprecated.
   *     See envoy/extensions/filters/http/lua/v3/lua.proto;l=35
   * @return The inlineCode.
   */
  @java.lang.Deprecated java.lang.String getInlineCode();
  /**
   * <pre>
   * The Lua code that Envoy will execute. This can be a very small script that
   * further loads code from disk if desired. Note that if JSON configuration is used, the code must
   * be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
   * strings so complex scripts can be easily expressed inline in the configuration.
   * This field is deprecated. Please use
   * :ref:`default_source_code &lt;envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code&gt;`.
   * Only one of :ref:`inline_code &lt;envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.inline_code&gt;`
   * or :ref:`default_source_code &lt;envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code&gt;`
   * can be set for the Lua filter.
   * </pre>
   *
   * <code>string inline_code = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.lua.v3.Lua.inline_code is deprecated.
   *     See envoy/extensions/filters/http/lua/v3/lua.proto;l=35
   * @return The bytes for inlineCode.
   */
  @java.lang.Deprecated com.google.protobuf.ByteString
      getInlineCodeBytes();

  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  int getSourceCodesCount();
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  boolean containsSourceCodes(
      java.lang.String key);
  /**
   * Use {@link #getSourceCodesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.core.v3.DataSource>
  getSourceCodes();
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.core.v3.DataSource>
  getSourceCodesMap();
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  /* nullable */
io.envoyproxy.envoy.config.core.v3.DataSource getSourceCodesOrDefault(
      java.lang.String key,
      /* nullable */
io.envoyproxy.envoy.config.core.v3.DataSource defaultValue);
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getSourceCodesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The default Lua code that Envoy will execute. If no per route config is provided
   * for the request, this Lua code will be applied.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource default_source_code = 3;</code>
   * @return Whether the defaultSourceCode field is set.
   */
  boolean hasDefaultSourceCode();
  /**
   * <pre>
   * The default Lua code that Envoy will execute. If no per route config is provided
   * for the request, this Lua code will be applied.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource default_source_code = 3;</code>
   * @return The defaultSourceCode.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getDefaultSourceCode();
  /**
   * <pre>
   * The default Lua code that Envoy will execute. If no per route config is provided
   * for the request, this Lua code will be applied.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource default_source_code = 3;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDefaultSourceCodeOrBuilder();

  /**
   * <pre>
   * Optional additional prefix to use when emitting statistics. By default
   * metrics are emitted in *.lua.* namespace. If multiple lua filters are
   * configured in a filter chain, the stats from each filter instance can
   * be emitted using custom stat prefix to distinguish emitted
   * statistics. For example:
   * .. code-block:: yaml
   *   http_filters:
   *     - name: envoy.filters.http.lua
   *       typed_config:
   *         "&#64;type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
   *         stat_prefix: foo_script # This emits lua.foo_script.errors etc.
   *     - name: envoy.filters.http.lua
   *       typed_config:
   *         "&#64;type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
   *         stat_prefix: bar_script # This emits lua.bar_script.errors etc.
   * </pre>
   *
   * <code>string stat_prefix = 4;</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * Optional additional prefix to use when emitting statistics. By default
   * metrics are emitted in *.lua.* namespace. If multiple lua filters are
   * configured in a filter chain, the stats from each filter instance can
   * be emitted using custom stat prefix to distinguish emitted
   * statistics. For example:
   * .. code-block:: yaml
   *   http_filters:
   *     - name: envoy.filters.http.lua
   *       typed_config:
   *         "&#64;type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
   *         stat_prefix: foo_script # This emits lua.foo_script.errors etc.
   *     - name: envoy.filters.http.lua
   *       typed_config:
   *         "&#64;type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
   *         stat_prefix: bar_script # This emits lua.bar_script.errors etc.
   * </pre>
   *
   * <code>string stat_prefix = 4;</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();
}
