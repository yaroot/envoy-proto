// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/gcp_authn/v3/gcp_authn.proto

package io.envoyproxy.envoy.extensions.filters.http.gcp_authn.v3;

public interface GcpAuthnFilterConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The HTTP URI to fetch tokens from GCE Metadata Server(https://cloud.google.com/compute/docs/metadata/overview).
   * The URL format is "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]"
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the httpUri field is set.
   */
  boolean hasHttpUri();
  /**
   * <pre>
   * The HTTP URI to fetch tokens from GCE Metadata Server(https://cloud.google.com/compute/docs/metadata/overview).
   * The URL format is "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]"
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = { ... }</code>
   * @return The httpUri.
   */
  io.envoyproxy.envoy.config.core.v3.HttpUri getHttpUri();
  /**
   * <pre>
   * The HTTP URI to fetch tokens from GCE Metadata Server(https://cloud.google.com/compute/docs/metadata/overview).
   * The URL format is "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]"
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder getHttpUriOrBuilder();

  /**
   * <pre>
   * Retry policy for fetching tokens.
   * This field is optional. If it is not configured, the filter will be fail-closed (i.e., reject the requests).
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 2;</code>
   * @return Whether the retryPolicy field is set.
   */
  boolean hasRetryPolicy();
  /**
   * <pre>
   * Retry policy for fetching tokens.
   * This field is optional. If it is not configured, the filter will be fail-closed (i.e., reject the requests).
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 2;</code>
   * @return The retryPolicy.
   */
  io.envoyproxy.envoy.config.core.v3.RetryPolicy getRetryPolicy();
  /**
   * <pre>
   * Retry policy for fetching tokens.
   * This field is optional. If it is not configured, the filter will be fail-closed (i.e., reject the requests).
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder getRetryPolicyOrBuilder();

  /**
   * <pre>
   * Token cache configuration. This field is optional.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig cache_config = 3;</code>
   * @return Whether the cacheConfig field is set.
   */
  boolean hasCacheConfig();
  /**
   * <pre>
   * Token cache configuration. This field is optional.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig cache_config = 3;</code>
   * @return The cacheConfig.
   */
  io.envoyproxy.envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig getCacheConfig();
  /**
   * <pre>
   * Token cache configuration. This field is optional.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfig cache_config = 3;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.gcp_authn.v3.TokenCacheConfigOrBuilder getCacheConfigOrBuilder();
}
