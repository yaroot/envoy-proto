// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/rate_limit_quota/v3/rate_limit_quota.proto

package io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3;

/**
 * <pre>
 * Configures the Rate Limit Quota filter.
 * Can be overridden in the per-route and per-host configurations.
 * The more specific definition completely overrides the less specific definition.
 * [#next-free-field: 7]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig}
 */
public final class RateLimitQuotaFilterConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig)
    RateLimitQuotaFilterConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RateLimitQuotaFilterConfig.newBuilder() to construct.
  private RateLimitQuotaFilterConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RateLimitQuotaFilterConfig() {
    domain_ = "";
    requestHeadersToAddWhenNotEnforced_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RateLimitQuotaFilterConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaProto.internal_static_envoy_extensions_filters_http_rate_limit_quota_v3_RateLimitQuotaFilterConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaProto.internal_static_envoy_extensions_filters_http_rate_limit_quota_v3_RateLimitQuotaFilterConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.class, io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.Builder.class);
  }

  public static final int RLQS_SERVER_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.core.v3.GrpcService rlqsServer_;
  /**
   * <pre>
   * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the rlqsServer field is set.
   */
  @java.lang.Override
  public boolean hasRlqsServer() {
    return rlqsServer_ != null;
  }
  /**
   * <pre>
   * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
   * @return The rlqsServer.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.GrpcService getRlqsServer() {
    return rlqsServer_ == null ? io.envoyproxy.envoy.config.core.v3.GrpcService.getDefaultInstance() : rlqsServer_;
  }
  /**
   * <pre>
   * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder getRlqsServerOrBuilder() {
    return rlqsServer_ == null ? io.envoyproxy.envoy.config.core.v3.GrpcService.getDefaultInstance() : rlqsServer_;
  }

  public static final int DOMAIN_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object domain_ = "";
  /**
   * <pre>
   * The application domain to use when calling the service. This enables sharing the quota
   * server between different applications without fear of overlap.
   * E.g., "envoy".
   * </pre>
   *
   * <code>string domain = 2 [(.validate.rules) = { ... }</code>
   * @return The domain.
   */
  @java.lang.Override
  public java.lang.String getDomain() {
    java.lang.Object ref = domain_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      domain_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The application domain to use when calling the service. This enables sharing the quota
   * server between different applications without fear of overlap.
   * E.g., "envoy".
   * </pre>
   *
   * <code>string domain = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for domain.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDomainBytes() {
    java.lang.Object ref = domain_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      domain_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BUCKET_MATCHERS_FIELD_NUMBER = 3;
  private com.github.xds.type.matcher.v3.Matcher bucketMatchers_;
  /**
   * <pre>
   * The match tree to use for grouping incoming requests into buckets.
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
   *               header_name: env
   *           value_match:
   *             exact: staging
   *       on_match:
   *         action:
   *           typed_config:
   *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *             bucket_id_builder:
   *               bucket_id_builder:
   *                 name:
   *                   string_value: staging
   *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
   *           custom_match:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
   *               expr_match:
   *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
   *                 # request.headers['user_group'] == 'admin'
   *                 parsed_expr: {}
   *       on_match:
   *         action:
   *           typed_config:
   *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *             bucket_id_builder:
   *               bucket_id_builder:
   *                 acl:
   *                   string_value: admin_users
   *   # Catch-all clause for the requests not matched by any of the matchers.
   *   # In this example, deny all requests.
   *   on_no_match:
   *     action:
   *       typed_config:
   *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *         no_assignment_behavior:
   *           fallback_rate_limit:
   *             blanket_rule: DENY_ALL
   * .. attention::
   *  The first matched group wins. Once the request is matched into a bucket, matcher
   *  evaluation ends.
   * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
   * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
   * ALLOWED by default. It will NOT be reported to the RLQS server.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the bucketMatchers field is set.
   */
  @java.lang.Override
  public boolean hasBucketMatchers() {
    return bucketMatchers_ != null;
  }
  /**
   * <pre>
   * The match tree to use for grouping incoming requests into buckets.
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
   *               header_name: env
   *           value_match:
   *             exact: staging
   *       on_match:
   *         action:
   *           typed_config:
   *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *             bucket_id_builder:
   *               bucket_id_builder:
   *                 name:
   *                   string_value: staging
   *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
   *           custom_match:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
   *               expr_match:
   *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
   *                 # request.headers['user_group'] == 'admin'
   *                 parsed_expr: {}
   *       on_match:
   *         action:
   *           typed_config:
   *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *             bucket_id_builder:
   *               bucket_id_builder:
   *                 acl:
   *                   string_value: admin_users
   *   # Catch-all clause for the requests not matched by any of the matchers.
   *   # In this example, deny all requests.
   *   on_no_match:
   *     action:
   *       typed_config:
   *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *         no_assignment_behavior:
   *           fallback_rate_limit:
   *             blanket_rule: DENY_ALL
   * .. attention::
   *  The first matched group wins. Once the request is matched into a bucket, matcher
   *  evaluation ends.
   * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
   * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
   * ALLOWED by default. It will NOT be reported to the RLQS server.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
   * @return The bucketMatchers.
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.Matcher getBucketMatchers() {
    return bucketMatchers_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : bucketMatchers_;
  }
  /**
   * <pre>
   * The match tree to use for grouping incoming requests into buckets.
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
   *               header_name: env
   *           value_match:
   *             exact: staging
   *       on_match:
   *         action:
   *           typed_config:
   *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *             bucket_id_builder:
   *               bucket_id_builder:
   *                 name:
   *                   string_value: staging
   *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
   *           custom_match:
   *             typed_config:
   *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
   *               expr_match:
   *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
   *                 # request.headers['user_group'] == 'admin'
   *                 parsed_expr: {}
   *       on_match:
   *         action:
   *           typed_config:
   *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *             bucket_id_builder:
   *               bucket_id_builder:
   *                 acl:
   *                   string_value: admin_users
   *   # Catch-all clause for the requests not matched by any of the matchers.
   *   # In this example, deny all requests.
   *   on_no_match:
   *     action:
   *       typed_config:
   *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
   *         no_assignment_behavior:
   *           fallback_rate_limit:
   *             blanket_rule: DENY_ALL
   * .. attention::
   *  The first matched group wins. Once the request is matched into a bucket, matcher
   *  evaluation ends.
   * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
   * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
   * ALLOWED by default. It will NOT be reported to the RLQS server.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.MatcherOrBuilder getBucketMatchersOrBuilder() {
    return bucketMatchers_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : bucketMatchers_;
  }

  public static final int FILTER_ENABLED_FIELD_NUMBER = 4;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent filterEnabled_;
  /**
   * <pre>
   * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
   * fraction of requests.
   * Defaults to 100% of requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
   * @return Whether the filterEnabled field is set.
   */
  @java.lang.Override
  public boolean hasFilterEnabled() {
    return filterEnabled_ != null;
  }
  /**
   * <pre>
   * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
   * fraction of requests.
   * Defaults to 100% of requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
   * @return The filterEnabled.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnabled() {
    return filterEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
  }
  /**
   * <pre>
   * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
   * fraction of requests.
   * Defaults to 100% of requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnabledOrBuilder() {
    return filterEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
  }

  public static final int FILTER_ENFORCED_FIELD_NUMBER = 5;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent filterEnforced_;
  /**
   * <pre>
   * If set, this will enforce the rate limit decisions for the given fraction of requests.
   * For requests that are not enforced the filter will still obtain the quota and include it
   * in the load computation, however the request will always be allowed regardless of the outcome
   * of quota application. This allows validation or testing of the rate limiting service
   * infrastructure without disrupting existing traffic.
   * Note: this only applies to the fraction of enabled requests.
   * Defaults to 100% of requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
   * @return Whether the filterEnforced field is set.
   */
  @java.lang.Override
  public boolean hasFilterEnforced() {
    return filterEnforced_ != null;
  }
  /**
   * <pre>
   * If set, this will enforce the rate limit decisions for the given fraction of requests.
   * For requests that are not enforced the filter will still obtain the quota and include it
   * in the load computation, however the request will always be allowed regardless of the outcome
   * of quota application. This allows validation or testing of the rate limiting service
   * infrastructure without disrupting existing traffic.
   * Note: this only applies to the fraction of enabled requests.
   * Defaults to 100% of requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
   * @return The filterEnforced.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnforced() {
    return filterEnforced_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnforced_;
  }
  /**
   * <pre>
   * If set, this will enforce the rate limit decisions for the given fraction of requests.
   * For requests that are not enforced the filter will still obtain the quota and include it
   * in the load computation, however the request will always be allowed regardless of the outcome
   * of quota application. This allows validation or testing of the rate limiting service
   * infrastructure without disrupting existing traffic.
   * Note: this only applies to the fraction of enabled requests.
   * Defaults to 100% of requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnforcedOrBuilder() {
    return filterEnforced_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnforced_;
  }

  public static final int REQUEST_HEADERS_TO_ADD_WHEN_NOT_ENFORCED_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> requestHeadersToAddWhenNotEnforced_;
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request that
   * has been rate limited and is also forwarded upstream. This can only occur when the
   * filter is enabled but not enforced.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> getRequestHeadersToAddWhenNotEnforcedList() {
    return requestHeadersToAddWhenNotEnforced_;
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request that
   * has been rate limited and is also forwarded upstream. This can only occur when the
   * filter is enabled but not enforced.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> 
      getRequestHeadersToAddWhenNotEnforcedOrBuilderList() {
    return requestHeadersToAddWhenNotEnforced_;
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request that
   * has been rate limited and is also forwarded upstream. This can only occur when the
   * filter is enabled but not enforced.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public int getRequestHeadersToAddWhenNotEnforcedCount() {
    return requestHeadersToAddWhenNotEnforced_.size();
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request that
   * has been rate limited and is also forwarded upstream. This can only occur when the
   * filter is enabled but not enforced.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.HeaderValueOption getRequestHeadersToAddWhenNotEnforced(int index) {
    return requestHeadersToAddWhenNotEnforced_.get(index);
  }
  /**
   * <pre>
   * Specifies a list of HTTP headers that should be added to each request that
   * has been rate limited and is also forwarded upstream. This can only occur when the
   * filter is enabled but not enforced.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder getRequestHeadersToAddWhenNotEnforcedOrBuilder(
      int index) {
    return requestHeadersToAddWhenNotEnforced_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (rlqsServer_ != null) {
      output.writeMessage(1, getRlqsServer());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, domain_);
    }
    if (bucketMatchers_ != null) {
      output.writeMessage(3, getBucketMatchers());
    }
    if (filterEnabled_ != null) {
      output.writeMessage(4, getFilterEnabled());
    }
    if (filterEnforced_ != null) {
      output.writeMessage(5, getFilterEnforced());
    }
    for (int i = 0; i < requestHeadersToAddWhenNotEnforced_.size(); i++) {
      output.writeMessage(6, requestHeadersToAddWhenNotEnforced_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (rlqsServer_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getRlqsServer());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, domain_);
    }
    if (bucketMatchers_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getBucketMatchers());
    }
    if (filterEnabled_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getFilterEnabled());
    }
    if (filterEnforced_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getFilterEnforced());
    }
    for (int i = 0; i < requestHeadersToAddWhenNotEnforced_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, requestHeadersToAddWhenNotEnforced_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig other = (io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig) obj;

    if (hasRlqsServer() != other.hasRlqsServer()) return false;
    if (hasRlqsServer()) {
      if (!getRlqsServer()
          .equals(other.getRlqsServer())) return false;
    }
    if (!getDomain()
        .equals(other.getDomain())) return false;
    if (hasBucketMatchers() != other.hasBucketMatchers()) return false;
    if (hasBucketMatchers()) {
      if (!getBucketMatchers()
          .equals(other.getBucketMatchers())) return false;
    }
    if (hasFilterEnabled() != other.hasFilterEnabled()) return false;
    if (hasFilterEnabled()) {
      if (!getFilterEnabled()
          .equals(other.getFilterEnabled())) return false;
    }
    if (hasFilterEnforced() != other.hasFilterEnforced()) return false;
    if (hasFilterEnforced()) {
      if (!getFilterEnforced()
          .equals(other.getFilterEnforced())) return false;
    }
    if (!getRequestHeadersToAddWhenNotEnforcedList()
        .equals(other.getRequestHeadersToAddWhenNotEnforcedList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRlqsServer()) {
      hash = (37 * hash) + RLQS_SERVER_FIELD_NUMBER;
      hash = (53 * hash) + getRlqsServer().hashCode();
    }
    hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
    hash = (53 * hash) + getDomain().hashCode();
    if (hasBucketMatchers()) {
      hash = (37 * hash) + BUCKET_MATCHERS_FIELD_NUMBER;
      hash = (53 * hash) + getBucketMatchers().hashCode();
    }
    if (hasFilterEnabled()) {
      hash = (37 * hash) + FILTER_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + getFilterEnabled().hashCode();
    }
    if (hasFilterEnforced()) {
      hash = (37 * hash) + FILTER_ENFORCED_FIELD_NUMBER;
      hash = (53 * hash) + getFilterEnforced().hashCode();
    }
    if (getRequestHeadersToAddWhenNotEnforcedCount() > 0) {
      hash = (37 * hash) + REQUEST_HEADERS_TO_ADD_WHEN_NOT_ENFORCED_FIELD_NUMBER;
      hash = (53 * hash) + getRequestHeadersToAddWhenNotEnforcedList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configures the Rate Limit Quota filter.
   * Can be overridden in the per-route and per-host configurations.
   * The more specific definition completely overrides the less specific definition.
   * [#next-free-field: 7]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig)
      io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaProto.internal_static_envoy_extensions_filters_http_rate_limit_quota_v3_RateLimitQuotaFilterConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaProto.internal_static_envoy_extensions_filters_http_rate_limit_quota_v3_RateLimitQuotaFilterConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.class, io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      rlqsServer_ = null;
      if (rlqsServerBuilder_ != null) {
        rlqsServerBuilder_.dispose();
        rlqsServerBuilder_ = null;
      }
      domain_ = "";
      bucketMatchers_ = null;
      if (bucketMatchersBuilder_ != null) {
        bucketMatchersBuilder_.dispose();
        bucketMatchersBuilder_ = null;
      }
      filterEnabled_ = null;
      if (filterEnabledBuilder_ != null) {
        filterEnabledBuilder_.dispose();
        filterEnabledBuilder_ = null;
      }
      filterEnforced_ = null;
      if (filterEnforcedBuilder_ != null) {
        filterEnforcedBuilder_.dispose();
        filterEnforcedBuilder_ = null;
      }
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        requestHeadersToAddWhenNotEnforced_ = java.util.Collections.emptyList();
      } else {
        requestHeadersToAddWhenNotEnforced_ = null;
        requestHeadersToAddWhenNotEnforcedBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaProto.internal_static_envoy_extensions_filters_http_rate_limit_quota_v3_RateLimitQuotaFilterConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig build() {
      io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig result = new io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig result) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          requestHeadersToAddWhenNotEnforced_ = java.util.Collections.unmodifiableList(requestHeadersToAddWhenNotEnforced_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.requestHeadersToAddWhenNotEnforced_ = requestHeadersToAddWhenNotEnforced_;
      } else {
        result.requestHeadersToAddWhenNotEnforced_ = requestHeadersToAddWhenNotEnforcedBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.rlqsServer_ = rlqsServerBuilder_ == null
            ? rlqsServer_
            : rlqsServerBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.domain_ = domain_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.bucketMatchers_ = bucketMatchersBuilder_ == null
            ? bucketMatchers_
            : bucketMatchersBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.filterEnabled_ = filterEnabledBuilder_ == null
            ? filterEnabled_
            : filterEnabledBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.filterEnforced_ = filterEnforcedBuilder_ == null
            ? filterEnforced_
            : filterEnforcedBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig.getDefaultInstance()) return this;
      if (other.hasRlqsServer()) {
        mergeRlqsServer(other.getRlqsServer());
      }
      if (!other.getDomain().isEmpty()) {
        domain_ = other.domain_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasBucketMatchers()) {
        mergeBucketMatchers(other.getBucketMatchers());
      }
      if (other.hasFilterEnabled()) {
        mergeFilterEnabled(other.getFilterEnabled());
      }
      if (other.hasFilterEnforced()) {
        mergeFilterEnforced(other.getFilterEnforced());
      }
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        if (!other.requestHeadersToAddWhenNotEnforced_.isEmpty()) {
          if (requestHeadersToAddWhenNotEnforced_.isEmpty()) {
            requestHeadersToAddWhenNotEnforced_ = other.requestHeadersToAddWhenNotEnforced_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
            requestHeadersToAddWhenNotEnforced_.addAll(other.requestHeadersToAddWhenNotEnforced_);
          }
          onChanged();
        }
      } else {
        if (!other.requestHeadersToAddWhenNotEnforced_.isEmpty()) {
          if (requestHeadersToAddWhenNotEnforcedBuilder_.isEmpty()) {
            requestHeadersToAddWhenNotEnforcedBuilder_.dispose();
            requestHeadersToAddWhenNotEnforcedBuilder_ = null;
            requestHeadersToAddWhenNotEnforced_ = other.requestHeadersToAddWhenNotEnforced_;
            bitField0_ = (bitField0_ & ~0x00000020);
            requestHeadersToAddWhenNotEnforcedBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRequestHeadersToAddWhenNotEnforcedFieldBuilder() : null;
          } else {
            requestHeadersToAddWhenNotEnforcedBuilder_.addAllMessages(other.requestHeadersToAddWhenNotEnforced_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getRlqsServerFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              domain_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getBucketMatchersFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getFilterEnabledFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getFilterEnforcedFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              io.envoyproxy.envoy.config.core.v3.HeaderValueOption m =
                  input.readMessage(
                      io.envoyproxy.envoy.config.core.v3.HeaderValueOption.parser(),
                      extensionRegistry);
              if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
                ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
                requestHeadersToAddWhenNotEnforced_.add(m);
              } else {
                requestHeadersToAddWhenNotEnforcedBuilder_.addMessage(m);
              }
              break;
            } // case 50
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.config.core.v3.GrpcService rlqsServer_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.GrpcService, io.envoyproxy.envoy.config.core.v3.GrpcService.Builder, io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder> rlqsServerBuilder_;
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the rlqsServer field is set.
     */
    public boolean hasRlqsServer() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     * @return The rlqsServer.
     */
    public io.envoyproxy.envoy.config.core.v3.GrpcService getRlqsServer() {
      if (rlqsServerBuilder_ == null) {
        return rlqsServer_ == null ? io.envoyproxy.envoy.config.core.v3.GrpcService.getDefaultInstance() : rlqsServer_;
      } else {
        return rlqsServerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setRlqsServer(io.envoyproxy.envoy.config.core.v3.GrpcService value) {
      if (rlqsServerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rlqsServer_ = value;
      } else {
        rlqsServerBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setRlqsServer(
        io.envoyproxy.envoy.config.core.v3.GrpcService.Builder builderForValue) {
      if (rlqsServerBuilder_ == null) {
        rlqsServer_ = builderForValue.build();
      } else {
        rlqsServerBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeRlqsServer(io.envoyproxy.envoy.config.core.v3.GrpcService value) {
      if (rlqsServerBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          rlqsServer_ != null &&
          rlqsServer_ != io.envoyproxy.envoy.config.core.v3.GrpcService.getDefaultInstance()) {
          getRlqsServerBuilder().mergeFrom(value);
        } else {
          rlqsServer_ = value;
        }
      } else {
        rlqsServerBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearRlqsServer() {
      bitField0_ = (bitField0_ & ~0x00000001);
      rlqsServer_ = null;
      if (rlqsServerBuilder_ != null) {
        rlqsServerBuilder_.dispose();
        rlqsServerBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.GrpcService.Builder getRlqsServerBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getRlqsServerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder getRlqsServerOrBuilder() {
      if (rlqsServerBuilder_ != null) {
        return rlqsServerBuilder_.getMessageOrBuilder();
      } else {
        return rlqsServer_ == null ?
            io.envoyproxy.envoy.config.core.v3.GrpcService.getDefaultInstance() : rlqsServer_;
      }
    }
    /**
     * <pre>
     * Configures the gRPC Rate Limit Quota Service (RLQS) RateLimitQuotaService.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcService rlqs_server = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.GrpcService, io.envoyproxy.envoy.config.core.v3.GrpcService.Builder, io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder> 
        getRlqsServerFieldBuilder() {
      if (rlqsServerBuilder_ == null) {
        rlqsServerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.GrpcService, io.envoyproxy.envoy.config.core.v3.GrpcService.Builder, io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder>(
                getRlqsServer(),
                getParentForChildren(),
                isClean());
        rlqsServer_ = null;
      }
      return rlqsServerBuilder_;
    }

    private java.lang.Object domain_ = "";
    /**
     * <pre>
     * The application domain to use when calling the service. This enables sharing the quota
     * server between different applications without fear of overlap.
     * E.g., "envoy".
     * </pre>
     *
     * <code>string domain = 2 [(.validate.rules) = { ... }</code>
     * @return The domain.
     */
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        domain_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The application domain to use when calling the service. This enables sharing the quota
     * server between different applications without fear of overlap.
     * E.g., "envoy".
     * </pre>
     *
     * <code>string domain = 2 [(.validate.rules) = { ... }</code>
     * @return The bytes for domain.
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The application domain to use when calling the service. This enables sharing the quota
     * server between different applications without fear of overlap.
     * E.g., "envoy".
     * </pre>
     *
     * <code>string domain = 2 [(.validate.rules) = { ... }</code>
     * @param value The domain to set.
     * @return This builder for chaining.
     */
    public Builder setDomain(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      domain_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The application domain to use when calling the service. This enables sharing the quota
     * server between different applications without fear of overlap.
     * E.g., "envoy".
     * </pre>
     *
     * <code>string domain = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearDomain() {
      domain_ = getDefaultInstance().getDomain();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The application domain to use when calling the service. This enables sharing the quota
     * server between different applications without fear of overlap.
     * E.g., "envoy".
     * </pre>
     *
     * <code>string domain = 2 [(.validate.rules) = { ... }</code>
     * @param value The bytes for domain to set.
     * @return This builder for chaining.
     */
    public Builder setDomainBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      domain_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.github.xds.type.matcher.v3.Matcher bucketMatchers_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> bucketMatchersBuilder_;
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the bucketMatchers field is set.
     */
    public boolean hasBucketMatchers() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     * @return The bucketMatchers.
     */
    public com.github.xds.type.matcher.v3.Matcher getBucketMatchers() {
      if (bucketMatchersBuilder_ == null) {
        return bucketMatchers_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : bucketMatchers_;
      } else {
        return bucketMatchersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setBucketMatchers(com.github.xds.type.matcher.v3.Matcher value) {
      if (bucketMatchersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        bucketMatchers_ = value;
      } else {
        bucketMatchersBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setBucketMatchers(
        com.github.xds.type.matcher.v3.Matcher.Builder builderForValue) {
      if (bucketMatchersBuilder_ == null) {
        bucketMatchers_ = builderForValue.build();
      } else {
        bucketMatchersBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeBucketMatchers(com.github.xds.type.matcher.v3.Matcher value) {
      if (bucketMatchersBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          bucketMatchers_ != null &&
          bucketMatchers_ != com.github.xds.type.matcher.v3.Matcher.getDefaultInstance()) {
          getBucketMatchersBuilder().mergeFrom(value);
        } else {
          bucketMatchers_ = value;
        }
      } else {
        bucketMatchersBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearBucketMatchers() {
      bitField0_ = (bitField0_ & ~0x00000004);
      bucketMatchers_ = null;
      if (bucketMatchersBuilder_ != null) {
        bucketMatchersBuilder_.dispose();
        bucketMatchersBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.Matcher.Builder getBucketMatchersBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getBucketMatchersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    public com.github.xds.type.matcher.v3.MatcherOrBuilder getBucketMatchersOrBuilder() {
      if (bucketMatchersBuilder_ != null) {
        return bucketMatchersBuilder_.getMessageOrBuilder();
      } else {
        return bucketMatchers_ == null ?
            com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : bucketMatchers_;
      }
    }
    /**
     * <pre>
     * The match tree to use for grouping incoming requests into buckets.
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *     # Assign requests with header['env'] set to 'staging' to the bucket { name: 'staging' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
     *               header_name: env
     *           value_match:
     *             exact: staging
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 name:
     *                   string_value: staging
     *     # Assign requests with header['user_group'] set to 'admin' to the bucket { acl: 'admin_users' }
     *     - predicate:
     *         single_predicate:
     *           input:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.HttpAttributesCelMatchInput
     *           custom_match:
     *             typed_config:
     *               '&#64;type': type.googleapis.com/xds.type.matcher.v3.CelMatcher
     *               expr_match:
     *                 # Shortened for illustration purposes. Here should be parsed CEL expression:
     *                 # request.headers['user_group'] == 'admin'
     *                 parsed_expr: {}
     *       on_match:
     *         action:
     *           typed_config:
     *             '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *             bucket_id_builder:
     *               bucket_id_builder:
     *                 acl:
     *                   string_value: admin_users
     *   # Catch-all clause for the requests not matched by any of the matchers.
     *   # In this example, deny all requests.
     *   on_no_match:
     *     action:
     *       typed_config:
     *         '&#64;type': type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings
     *         no_assignment_behavior:
     *           fallback_rate_limit:
     *             blanket_rule: DENY_ALL
     * .. attention::
     *  The first matched group wins. Once the request is matched into a bucket, matcher
     *  evaluation ends.
     * Use ``on_no_match`` field to assign the catch-all bucket. If a request is not matched
     * into any bucket, and there's no  ``on_no_match`` field configured, the request will be
     * ALLOWED by default. It will NOT be reported to the RLQS server.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher bucket_matchers = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> 
        getBucketMatchersFieldBuilder() {
      if (bucketMatchersBuilder_ == null) {
        bucketMatchersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder>(
                getBucketMatchers(),
                getParentForChildren(),
                isClean());
        bucketMatchers_ = null;
      }
      return bucketMatchersBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent filterEnabled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> filterEnabledBuilder_;
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     * @return Whether the filterEnabled field is set.
     */
    public boolean hasFilterEnabled() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     * @return The filterEnabled.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnabled() {
      if (filterEnabledBuilder_ == null) {
        return filterEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
      } else {
        return filterEnabledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    public Builder setFilterEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (filterEnabledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filterEnabled_ = value;
      } else {
        filterEnabledBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    public Builder setFilterEnabled(
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
      if (filterEnabledBuilder_ == null) {
        filterEnabled_ = builderForValue.build();
      } else {
        filterEnabledBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    public Builder mergeFilterEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (filterEnabledBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          filterEnabled_ != null &&
          filterEnabled_ != io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance()) {
          getFilterEnabledBuilder().mergeFrom(value);
        } else {
          filterEnabled_ = value;
        }
      } else {
        filterEnabledBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    public Builder clearFilterEnabled() {
      bitField0_ = (bitField0_ & ~0x00000008);
      filterEnabled_ = null;
      if (filterEnabledBuilder_ != null) {
        filterEnabledBuilder_.dispose();
        filterEnabledBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getFilterEnabledBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getFilterEnabledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnabledOrBuilder() {
      if (filterEnabledBuilder_ != null) {
        return filterEnabledBuilder_.getMessageOrBuilder();
      } else {
        return filterEnabled_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
      }
    }
    /**
     * <pre>
     * If set, this will enable -- but not necessarily enforce -- the rate limit for the given
     * fraction of requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
        getFilterEnabledFieldBuilder() {
      if (filterEnabledBuilder_ == null) {
        filterEnabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                getFilterEnabled(),
                getParentForChildren(),
                isClean());
        filterEnabled_ = null;
      }
      return filterEnabledBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent filterEnforced_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> filterEnforcedBuilder_;
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     * @return Whether the filterEnforced field is set.
     */
    public boolean hasFilterEnforced() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     * @return The filterEnforced.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnforced() {
      if (filterEnforcedBuilder_ == null) {
        return filterEnforced_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnforced_;
      } else {
        return filterEnforcedBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    public Builder setFilterEnforced(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (filterEnforcedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filterEnforced_ = value;
      } else {
        filterEnforcedBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    public Builder setFilterEnforced(
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
      if (filterEnforcedBuilder_ == null) {
        filterEnforced_ = builderForValue.build();
      } else {
        filterEnforcedBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    public Builder mergeFilterEnforced(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (filterEnforcedBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          filterEnforced_ != null &&
          filterEnforced_ != io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance()) {
          getFilterEnforcedBuilder().mergeFrom(value);
        } else {
          filterEnforced_ = value;
        }
      } else {
        filterEnforcedBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    public Builder clearFilterEnforced() {
      bitField0_ = (bitField0_ & ~0x00000010);
      filterEnforced_ = null;
      if (filterEnforcedBuilder_ != null) {
        filterEnforcedBuilder_.dispose();
        filterEnforcedBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getFilterEnforcedBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getFilterEnforcedFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnforcedOrBuilder() {
      if (filterEnforcedBuilder_ != null) {
        return filterEnforcedBuilder_.getMessageOrBuilder();
      } else {
        return filterEnforced_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnforced_;
      }
    }
    /**
     * <pre>
     * If set, this will enforce the rate limit decisions for the given fraction of requests.
     * For requests that are not enforced the filter will still obtain the quota and include it
     * in the load computation, however the request will always be allowed regardless of the outcome
     * of quota application. This allows validation or testing of the rate limiting service
     * infrastructure without disrupting existing traffic.
     * Note: this only applies to the fraction of enabled requests.
     * Defaults to 100% of requests.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enforced = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
        getFilterEnforcedFieldBuilder() {
      if (filterEnforcedBuilder_ == null) {
        filterEnforcedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                getFilterEnforced(),
                getParentForChildren(),
                isClean());
        filterEnforced_ = null;
      }
      return filterEnforcedBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> requestHeadersToAddWhenNotEnforced_ =
      java.util.Collections.emptyList();
    private void ensureRequestHeadersToAddWhenNotEnforcedIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        requestHeadersToAddWhenNotEnforced_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.HeaderValueOption>(requestHeadersToAddWhenNotEnforced_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.HeaderValueOption, io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder, io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> requestHeadersToAddWhenNotEnforcedBuilder_;

    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> getRequestHeadersToAddWhenNotEnforcedList() {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        return java.util.Collections.unmodifiableList(requestHeadersToAddWhenNotEnforced_);
      } else {
        return requestHeadersToAddWhenNotEnforcedBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public int getRequestHeadersToAddWhenNotEnforcedCount() {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        return requestHeadersToAddWhenNotEnforced_.size();
      } else {
        return requestHeadersToAddWhenNotEnforcedBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HeaderValueOption getRequestHeadersToAddWhenNotEnforced(int index) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        return requestHeadersToAddWhenNotEnforced_.get(index);
      } else {
        return requestHeadersToAddWhenNotEnforcedBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setRequestHeadersToAddWhenNotEnforced(
        int index, io.envoyproxy.envoy.config.core.v3.HeaderValueOption value) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.set(index, value);
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setRequestHeadersToAddWhenNotEnforced(
        int index, io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder builderForValue) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.set(index, builderForValue.build());
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addRequestHeadersToAddWhenNotEnforced(io.envoyproxy.envoy.config.core.v3.HeaderValueOption value) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.add(value);
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addRequestHeadersToAddWhenNotEnforced(
        int index, io.envoyproxy.envoy.config.core.v3.HeaderValueOption value) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.add(index, value);
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addRequestHeadersToAddWhenNotEnforced(
        io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder builderForValue) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.add(builderForValue.build());
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addRequestHeadersToAddWhenNotEnforced(
        int index, io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder builderForValue) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.add(index, builderForValue.build());
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllRequestHeadersToAddWhenNotEnforced(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.HeaderValueOption> values) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, requestHeadersToAddWhenNotEnforced_);
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder clearRequestHeadersToAddWhenNotEnforced() {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        requestHeadersToAddWhenNotEnforced_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder removeRequestHeadersToAddWhenNotEnforced(int index) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        ensureRequestHeadersToAddWhenNotEnforcedIsMutable();
        requestHeadersToAddWhenNotEnforced_.remove(index);
        onChanged();
      } else {
        requestHeadersToAddWhenNotEnforcedBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder getRequestHeadersToAddWhenNotEnforcedBuilder(
        int index) {
      return getRequestHeadersToAddWhenNotEnforcedFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder getRequestHeadersToAddWhenNotEnforcedOrBuilder(
        int index) {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        return requestHeadersToAddWhenNotEnforced_.get(index);  } else {
        return requestHeadersToAddWhenNotEnforcedBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> 
         getRequestHeadersToAddWhenNotEnforcedOrBuilderList() {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ != null) {
        return requestHeadersToAddWhenNotEnforcedBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(requestHeadersToAddWhenNotEnforced_);
      }
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder addRequestHeadersToAddWhenNotEnforcedBuilder() {
      return getRequestHeadersToAddWhenNotEnforcedFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.core.v3.HeaderValueOption.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder addRequestHeadersToAddWhenNotEnforcedBuilder(
        int index) {
      return getRequestHeadersToAddWhenNotEnforcedFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.core.v3.HeaderValueOption.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a list of HTTP headers that should be added to each request that
     * has been rate limited and is also forwarded upstream. This can only occur when the
     * filter is enabled but not enforced.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.HeaderValueOption request_headers_to_add_when_not_enforced = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder> 
         getRequestHeadersToAddWhenNotEnforcedBuilderList() {
      return getRequestHeadersToAddWhenNotEnforcedFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.HeaderValueOption, io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder, io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> 
        getRequestHeadersToAddWhenNotEnforcedFieldBuilder() {
      if (requestHeadersToAddWhenNotEnforcedBuilder_ == null) {
        requestHeadersToAddWhenNotEnforcedBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.HeaderValueOption, io.envoyproxy.envoy.config.core.v3.HeaderValueOption.Builder, io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder>(
                requestHeadersToAddWhenNotEnforced_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        requestHeadersToAddWhenNotEnforced_ = null;
      }
      return requestHeadersToAddWhenNotEnforcedBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig)
  private static final io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RateLimitQuotaFilterConfig>
      PARSER = new com.google.protobuf.AbstractParser<RateLimitQuotaFilterConfig>() {
    @java.lang.Override
    public RateLimitQuotaFilterConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<RateLimitQuotaFilterConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RateLimitQuotaFilterConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

