// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/admission_control/v3/admission_control.proto

package io.envoyproxy.envoy.extensions.filters.http.admission_control.v3;

public interface AdmissionControlOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.admission_control.v3.AdmissionControl)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If set to false, the admission control filter will operate as a pass-through filter. If the
   * message is unspecified, the filter will be enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
   * @return Whether the enabled field is set.
   */
  boolean hasEnabled();
  /**
   * <pre>
   * If set to false, the admission control filter will operate as a pass-through filter. If the
   * message is unspecified, the filter will be enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
   * @return The enabled.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled();
  /**
   * <pre>
   * If set to false, the admission control filter will operate as a pass-through filter. If the
   * message is unspecified, the filter will be enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder();

  /**
   * <code>.envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria success_criteria = 2;</code>
   * @return Whether the successCriteria field is set.
   */
  boolean hasSuccessCriteria();
  /**
   * <code>.envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria success_criteria = 2;</code>
   * @return The successCriteria.
   */
  io.envoyproxy.envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria getSuccessCriteria();
  /**
   * <code>.envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteria success_criteria = 2;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.admission_control.v3.AdmissionControl.SuccessCriteriaOrBuilder getSuccessCriteriaOrBuilder();

  /**
   * <pre>
   * The sliding time window over which the success rate is calculated. The window is rounded to the
   * nearest second. Defaults to 30s.
   * </pre>
   *
   * <code>.google.protobuf.Duration sampling_window = 3;</code>
   * @return Whether the samplingWindow field is set.
   */
  boolean hasSamplingWindow();
  /**
   * <pre>
   * The sliding time window over which the success rate is calculated. The window is rounded to the
   * nearest second. Defaults to 30s.
   * </pre>
   *
   * <code>.google.protobuf.Duration sampling_window = 3;</code>
   * @return The samplingWindow.
   */
  com.google.protobuf.Duration getSamplingWindow();
  /**
   * <pre>
   * The sliding time window over which the success rate is calculated. The window is rounded to the
   * nearest second. Defaults to 30s.
   * </pre>
   *
   * <code>.google.protobuf.Duration sampling_window = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getSamplingWindowOrBuilder();

  /**
   * <pre>
   * Rejection probability is defined by the formula::
   *     max(0, (rq_count -  rq_success_count / sr_threshold) / (rq_count + 1)) ^ (1 / aggression)
   * The aggression dictates how heavily the admission controller will throttle requests upon SR
   * dropping at or below the threshold. A value of 1 will result in a linear increase in
   * rejection probability as SR drops. Any values less than 1.0, will be set to 1.0. If the
   * message is unspecified, the aggression is 1.0. See `the admission control documentation
   * &lt;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/admission_control_filter.html&gt;`_
   * for a diagram illustrating this.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 4;</code>
   * @return Whether the aggression field is set.
   */
  boolean hasAggression();
  /**
   * <pre>
   * Rejection probability is defined by the formula::
   *     max(0, (rq_count -  rq_success_count / sr_threshold) / (rq_count + 1)) ^ (1 / aggression)
   * The aggression dictates how heavily the admission controller will throttle requests upon SR
   * dropping at or below the threshold. A value of 1 will result in a linear increase in
   * rejection probability as SR drops. Any values less than 1.0, will be set to 1.0. If the
   * message is unspecified, the aggression is 1.0. See `the admission control documentation
   * &lt;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/admission_control_filter.html&gt;`_
   * for a diagram illustrating this.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 4;</code>
   * @return The aggression.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeDouble getAggression();
  /**
   * <pre>
   * Rejection probability is defined by the formula::
   *     max(0, (rq_count -  rq_success_count / sr_threshold) / (rq_count + 1)) ^ (1 / aggression)
   * The aggression dictates how heavily the admission controller will throttle requests upon SR
   * dropping at or below the threshold. A value of 1 will result in a linear increase in
   * rejection probability as SR drops. Any values less than 1.0, will be set to 1.0. If the
   * message is unspecified, the aggression is 1.0. See `the admission control documentation
   * &lt;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/admission_control_filter.html&gt;`_
   * for a diagram illustrating this.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getAggressionOrBuilder();

  /**
   * <pre>
   * Dictates the success rate at which the rejection probability is non-zero. As success rate drops
   * below this threshold, rejection probability will increase. Any success rate above the threshold
   * results in a rejection probability of 0. Defaults to 95%.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimePercent sr_threshold = 5;</code>
   * @return Whether the srThreshold field is set.
   */
  boolean hasSrThreshold();
  /**
   * <pre>
   * Dictates the success rate at which the rejection probability is non-zero. As success rate drops
   * below this threshold, rejection probability will increase. Any success rate above the threshold
   * results in a rejection probability of 0. Defaults to 95%.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimePercent sr_threshold = 5;</code>
   * @return The srThreshold.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimePercent getSrThreshold();
  /**
   * <pre>
   * Dictates the success rate at which the rejection probability is non-zero. As success rate drops
   * below this threshold, rejection probability will increase. Any success rate above the threshold
   * results in a rejection probability of 0. Defaults to 95%.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimePercent sr_threshold = 5;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimePercentOrBuilder getSrThresholdOrBuilder();

  /**
   * <pre>
   * If the average RPS of the sampling window is below this threshold, the request
   * will not be rejected, even if the success rate is lower than sr_threshold.
   * Defaults to 0.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeUInt32 rps_threshold = 6;</code>
   * @return Whether the rpsThreshold field is set.
   */
  boolean hasRpsThreshold();
  /**
   * <pre>
   * If the average RPS of the sampling window is below this threshold, the request
   * will not be rejected, even if the success rate is lower than sr_threshold.
   * Defaults to 0.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeUInt32 rps_threshold = 6;</code>
   * @return The rpsThreshold.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeUInt32 getRpsThreshold();
  /**
   * <pre>
   * If the average RPS of the sampling window is below this threshold, the request
   * will not be rejected, even if the success rate is lower than sr_threshold.
   * Defaults to 0.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeUInt32 rps_threshold = 6;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeUInt32OrBuilder getRpsThresholdOrBuilder();

  /**
   * <pre>
   * The probability of rejection will never exceed this value, even if the failure rate is rising.
   * Defaults to 80%.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimePercent max_rejection_probability = 7;</code>
   * @return Whether the maxRejectionProbability field is set.
   */
  boolean hasMaxRejectionProbability();
  /**
   * <pre>
   * The probability of rejection will never exceed this value, even if the failure rate is rising.
   * Defaults to 80%.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimePercent max_rejection_probability = 7;</code>
   * @return The maxRejectionProbability.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimePercent getMaxRejectionProbability();
  /**
   * <pre>
   * The probability of rejection will never exceed this value, even if the failure rate is rising.
   * Defaults to 80%.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimePercent max_rejection_probability = 7;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimePercentOrBuilder getMaxRejectionProbabilityOrBuilder();

  public io.envoyproxy.envoy.extensions.filters.http.admission_control.v3.AdmissionControl.EvaluationCriteriaCase getEvaluationCriteriaCase();
}
