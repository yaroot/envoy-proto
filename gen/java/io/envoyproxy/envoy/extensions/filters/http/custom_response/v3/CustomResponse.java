// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/custom_response/v3/custom_response.proto

package io.envoyproxy.envoy.extensions.filters.http.custom_response.v3;

/**
 * <pre>
 * The filter configuration is a collection of custom response
 * policies in a matcher tree. The configuration can be defined at the filter,
 * virtual host or route level. The most specific configuration will apply.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.custom_response.v3.CustomResponse}
 */
public final class CustomResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.custom_response.v3.CustomResponse)
    CustomResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CustomResponse.newBuilder() to construct.
  private CustomResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CustomResponse() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CustomResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponseProto.internal_static_envoy_extensions_filters_http_custom_response_v3_CustomResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponseProto.internal_static_envoy_extensions_filters_http_custom_response_v3_CustomResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.class, io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.Builder.class);
  }

  public static final int CUSTOM_RESPONSE_MATCHER_FIELD_NUMBER = 1;
  private com.github.xds.type.matcher.v3.Matcher customResponseMatcher_;
  /**
   * <pre>
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
   * @return Whether the customResponseMatcher field is set.
   */
  @java.lang.Override
  public boolean hasCustomResponseMatcher() {
    return customResponseMatcher_ != null;
  }
  /**
   * <pre>
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
   * @return The customResponseMatcher.
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.Matcher getCustomResponseMatcher() {
    return customResponseMatcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : customResponseMatcher_;
  }
  /**
   * <pre>
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
   * Example:
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   * </pre>
   *
   * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
   */
  @java.lang.Override
  public com.github.xds.type.matcher.v3.MatcherOrBuilder getCustomResponseMatcherOrBuilder() {
    return customResponseMatcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : customResponseMatcher_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (customResponseMatcher_ != null) {
      output.writeMessage(1, getCustomResponseMatcher());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (customResponseMatcher_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCustomResponseMatcher());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse other = (io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse) obj;

    if (hasCustomResponseMatcher() != other.hasCustomResponseMatcher()) return false;
    if (hasCustomResponseMatcher()) {
      if (!getCustomResponseMatcher()
          .equals(other.getCustomResponseMatcher())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCustomResponseMatcher()) {
      hash = (37 * hash) + CUSTOM_RESPONSE_MATCHER_FIELD_NUMBER;
      hash = (53 * hash) + getCustomResponseMatcher().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The filter configuration is a collection of custom response
   * policies in a matcher tree. The configuration can be defined at the filter,
   * virtual host or route level. The most specific configuration will apply.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.custom_response.v3.CustomResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.custom_response.v3.CustomResponse)
      io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponseProto.internal_static_envoy_extensions_filters_http_custom_response_v3_CustomResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponseProto.internal_static_envoy_extensions_filters_http_custom_response_v3_CustomResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.class, io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      customResponseMatcher_ = null;
      if (customResponseMatcherBuilder_ != null) {
        customResponseMatcherBuilder_.dispose();
        customResponseMatcherBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponseProto.internal_static_envoy_extensions_filters_http_custom_response_v3_CustomResponse_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse build() {
      io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse result = new io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.customResponseMatcher_ = customResponseMatcherBuilder_ == null
            ? customResponseMatcher_
            : customResponseMatcherBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse.getDefaultInstance()) return this;
      if (other.hasCustomResponseMatcher()) {
        mergeCustomResponseMatcher(other.getCustomResponseMatcher());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getCustomResponseMatcherFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.github.xds.type.matcher.v3.Matcher customResponseMatcher_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> customResponseMatcherBuilder_;
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     * @return Whether the customResponseMatcher field is set.
     */
    public boolean hasCustomResponseMatcher() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     * @return The customResponseMatcher.
     */
    public com.github.xds.type.matcher.v3.Matcher getCustomResponseMatcher() {
      if (customResponseMatcherBuilder_ == null) {
        return customResponseMatcher_ == null ? com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : customResponseMatcher_;
      } else {
        return customResponseMatcherBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    public Builder setCustomResponseMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (customResponseMatcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        customResponseMatcher_ = value;
      } else {
        customResponseMatcherBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    public Builder setCustomResponseMatcher(
        com.github.xds.type.matcher.v3.Matcher.Builder builderForValue) {
      if (customResponseMatcherBuilder_ == null) {
        customResponseMatcher_ = builderForValue.build();
      } else {
        customResponseMatcherBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    public Builder mergeCustomResponseMatcher(com.github.xds.type.matcher.v3.Matcher value) {
      if (customResponseMatcherBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          customResponseMatcher_ != null &&
          customResponseMatcher_ != com.github.xds.type.matcher.v3.Matcher.getDefaultInstance()) {
          getCustomResponseMatcherBuilder().mergeFrom(value);
        } else {
          customResponseMatcher_ = value;
        }
      } else {
        customResponseMatcherBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    public Builder clearCustomResponseMatcher() {
      bitField0_ = (bitField0_ & ~0x00000001);
      customResponseMatcher_ = null;
      if (customResponseMatcherBuilder_ != null) {
        customResponseMatcherBuilder_.dispose();
        customResponseMatcherBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    public com.github.xds.type.matcher.v3.Matcher.Builder getCustomResponseMatcherBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getCustomResponseMatcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    public com.github.xds.type.matcher.v3.MatcherOrBuilder getCustomResponseMatcherOrBuilder() {
      if (customResponseMatcherBuilder_ != null) {
        return customResponseMatcherBuilder_.getMessageOrBuilder();
      } else {
        return customResponseMatcher_ == null ?
            com.github.xds.type.matcher.v3.Matcher.getDefaultInstance() : customResponseMatcher_;
      }
    }
    /**
     * <pre>
     * Matcher to match against the original response to select a
     * :ref:`Custom Response Policy &lt;extension_category_envoy.http.custom_response&gt;`
     * that will override the original response. The matching is done by matching
     * against :ref:`response header values&lt;extension_category_envoy.matching.http.input&gt;`
     * Example:
     * .. validated-code-block:: yaml
     *   :type-name: xds.type.matcher.v3.Matcher
     *   matcher_list:
     *     matchers:
     *       # Apply a locally stored custom response to any 4xx response.
     *     - predicate:
     *         single_predicate:
     *           input:
     *             name: 4xx_response
     *             typed_config:
     *               "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
     *           value_match:
     *             exact: "4xx"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.LocalResponsePolicy
     *             status_code: 499
     *             body:
     *               inline_string: "not allowed"
     *             body_format:
     *               json_format:
     *                 status: "%RESPONSE_CODE%"
     *                 message: "%LOCAL_REPLY_BODY%"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo"
     *                 value: "x-bar"
     *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
     *     - predicate:
     *         or_matcher:
     *           predicate:
     *           - single_predicate:
     *               input:
     *                 name: "502_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "502"
     *           - single_predicate:
     *               input:
     *                 name: "503_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "503"
     *           - single_predicate:
     *               input:
     *                 name: "504_response"
     *                 typed_config:
     *                   "&#64;type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
     *               value_match:
     *                 exact: "504"
     *       on_match:
     *         action:
     *           name: action
     *           typed_config:
     *             "&#64;type": type.googleapis.com/envoy.extensions.filters.http.custom_response.v3.RedirectPolicy
     *             status_code: 299
     *             uri: "https://foo.example/gateway_error"
     *             response_headers_to_add:
     *             - header:
     *                 key: "foo2"
     *                 value: "x-bar2"
     * -- attention::
     *  The first matched policy wins. Once the response is matched, matcher
     *  evaluations end.
     * Refer to :ref:`Unified Matcher API &lt;envoy_v3_api_msg_.xds.type.matcher.v3.Matcher&gt;`
     * documentation for more information on the matcher trees.
     * [#extension-category: envoy.http.custom_response]
     * </pre>
     *
     * <code>.xds.type.matcher.v3.Matcher custom_response_matcher = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder> 
        getCustomResponseMatcherFieldBuilder() {
      if (customResponseMatcherBuilder_ == null) {
        customResponseMatcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.github.xds.type.matcher.v3.Matcher, com.github.xds.type.matcher.v3.Matcher.Builder, com.github.xds.type.matcher.v3.MatcherOrBuilder>(
                getCustomResponseMatcher(),
                getParentForChildren(),
                isClean());
        customResponseMatcher_ = null;
      }
      return customResponseMatcherBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.custom_response.v3.CustomResponse)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.custom_response.v3.CustomResponse)
  private static final io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CustomResponse>
      PARSER = new com.google.protobuf.AbstractParser<CustomResponse>() {
    @java.lang.Override
    public CustomResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CustomResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CustomResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.custom_response.v3.CustomResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

