// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3;

/**
 * <pre>
 * Please see following for JWT authentication flow:
 * * `JSON Web Token (JWT) &lt;https://tools.ietf.org/html/rfc7519&gt;`_
 * * `The OAuth 2.0 Authorization Framework &lt;https://tools.ietf.org/html/rfc6749&gt;`_
 * * `OpenID Connect &lt;http://openid.net/connect&gt;`_
 * A JwtProvider message specifies how a JSON Web Token (JWT) can be verified. It specifies:
 * * issuer: the principal that issues the JWT. If specified, it has to match the ``iss`` field in JWT.
 * * allowed audiences: the ones in the token have to be listed here.
 * * how to fetch public key JWKS to verify the token signature.
 * * how to extract JWT token in the request.
 * * how to pass successfully verified token payload.
 * Example:
 * .. code-block:: yaml
 *     issuer: https://example.com
 *     audiences:
 *     - bookstore_android.apps.googleusercontent.com
 *     - bookstore_web.apps.googleusercontent.com
 *     remote_jwks:
 *       http_uri:
 *         uri: https://example.com/.well-known/jwks.json
 *         cluster: example_jwks_cluster
 *         timeout: 1s
 *       cache_duration:
 *         seconds: 300
 * [#next-free-field: 16]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.jwt_authn.v3.JwtProvider}
 */
public final class JwtProvider extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)
    JwtProviderOrBuilder {
private static final long serialVersionUID = 0L;
  // Use JwtProvider.newBuilder() to construct.
  private JwtProvider(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private JwtProvider() {
    issuer_ = "";
    audiences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    fromHeaders_ = java.util.Collections.emptyList();
    fromParams_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    fromCookies_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    forwardPayloadHeader_ = "";
    payloadInMetadata_ = "";
    headerInMetadata_ = "";
    claimToHeaders_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new JwtProvider();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_JwtProvider_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_JwtProvider_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.class, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.Builder.class);
  }

  private int jwksSourceSpecifierCase_ = 0;
  private java.lang.Object jwksSourceSpecifier_;
  public enum JwksSourceSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    REMOTE_JWKS(3),
    LOCAL_JWKS(4),
    JWKSSOURCESPECIFIER_NOT_SET(0);
    private final int value;
    private JwksSourceSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static JwksSourceSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static JwksSourceSpecifierCase forNumber(int value) {
      switch (value) {
        case 3: return REMOTE_JWKS;
        case 4: return LOCAL_JWKS;
        case 0: return JWKSSOURCESPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public JwksSourceSpecifierCase
  getJwksSourceSpecifierCase() {
    return JwksSourceSpecifierCase.forNumber(
        jwksSourceSpecifierCase_);
  }

  public static final int ISSUER_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object issuer_ = "";
  /**
   * <pre>
   * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
   * the JWT, usually a URL or an email address.
   * It is optional. If specified, it has to match the ``iss`` field in JWT,
   * otherwise the JWT ``iss`` field is not checked.
   * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
   * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
   * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
   * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
   * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
   * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
   * * Multiple ``JwtProviders`` should not have same value in this field.
   * Example: https://securetoken.google.com
   * Example: 1234567-compute&#64;developer.gserviceaccount.com
   * </pre>
   *
   * <code>string issuer = 1;</code>
   * @return The issuer.
   */
  @java.lang.Override
  public java.lang.String getIssuer() {
    java.lang.Object ref = issuer_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      issuer_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
   * the JWT, usually a URL or an email address.
   * It is optional. If specified, it has to match the ``iss`` field in JWT,
   * otherwise the JWT ``iss`` field is not checked.
   * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
   * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
   * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
   * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
   * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
   * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
   * * Multiple ``JwtProviders`` should not have same value in this field.
   * Example: https://securetoken.google.com
   * Example: 1234567-compute&#64;developer.gserviceaccount.com
   * </pre>
   *
   * <code>string issuer = 1;</code>
   * @return The bytes for issuer.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIssuerBytes() {
    java.lang.Object ref = issuer_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      issuer_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int AUDIENCES_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList audiences_;
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @return A list containing the audiences.
   */
  public com.google.protobuf.ProtocolStringList
      getAudiencesList() {
    return audiences_;
  }
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @return The count of audiences.
   */
  public int getAudiencesCount() {
    return audiences_.size();
  }
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @param index The index of the element to return.
   * @return The audiences at the given index.
   */
  public java.lang.String getAudiences(int index) {
    return audiences_.get(index);
  }
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the audiences at the given index.
   */
  public com.google.protobuf.ByteString
      getAudiencesBytes(int index) {
    return audiences_.getByteString(index);
  }

  public static final int REMOTE_JWKS_FIELD_NUMBER = 3;
  /**
   * <pre>
   * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
   * URI and how the fetched JWKS should be cached.
   * Example:
   * .. code-block:: yaml
   *    remote_jwks:
   *      http_uri:
   *        uri: https://www.googleapis.com/oauth2/v1/certs
   *        cluster: jwt.www.googleapis.com|443
   *        timeout: 1s
   *      cache_duration:
   *        seconds: 300
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
   * @return Whether the remoteJwks field is set.
   */
  @java.lang.Override
  public boolean hasRemoteJwks() {
    return jwksSourceSpecifierCase_ == 3;
  }
  /**
   * <pre>
   * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
   * URI and how the fetched JWKS should be cached.
   * Example:
   * .. code-block:: yaml
   *    remote_jwks:
   *      http_uri:
   *        uri: https://www.googleapis.com/oauth2/v1/certs
   *        cluster: jwt.www.googleapis.com|443
   *        timeout: 1s
   *      cache_duration:
   *        seconds: 300
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
   * @return The remoteJwks.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks getRemoteJwks() {
    if (jwksSourceSpecifierCase_ == 3) {
       return (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_;
    }
    return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
  }
  /**
   * <pre>
   * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
   * URI and how the fetched JWKS should be cached.
   * Example:
   * .. code-block:: yaml
   *    remote_jwks:
   *      http_uri:
   *        uri: https://www.googleapis.com/oauth2/v1/certs
   *        cluster: jwt.www.googleapis.com|443
   *        timeout: 1s
   *      cache_duration:
   *        seconds: 300
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder getRemoteJwksOrBuilder() {
    if (jwksSourceSpecifierCase_ == 3) {
       return (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_;
    }
    return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
  }

  public static final int LOCAL_JWKS_FIELD_NUMBER = 4;
  /**
   * <pre>
   * JWKS is in local data source. It could be either in a local file or embedded in the
   * inline_string.
   * Example: local file
   * .. code-block:: yaml
   *    local_jwks:
   *      filename: /etc/envoy/jwks/jwks1.txt
   * Example: inline_string
   * .. code-block:: yaml
   *    local_jwks:
   *      inline_string: ACADADADADA
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
   * @return Whether the localJwks field is set.
   */
  @java.lang.Override
  public boolean hasLocalJwks() {
    return jwksSourceSpecifierCase_ == 4;
  }
  /**
   * <pre>
   * JWKS is in local data source. It could be either in a local file or embedded in the
   * inline_string.
   * Example: local file
   * .. code-block:: yaml
   *    local_jwks:
   *      filename: /etc/envoy/jwks/jwks1.txt
   * Example: inline_string
   * .. code-block:: yaml
   *    local_jwks:
   *      inline_string: ACADADADADA
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
   * @return The localJwks.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSource getLocalJwks() {
    if (jwksSourceSpecifierCase_ == 4) {
       return (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
  }
  /**
   * <pre>
   * JWKS is in local data source. It could be either in a local file or embedded in the
   * inline_string.
   * Example: local file
   * .. code-block:: yaml
   *    local_jwks:
   *      filename: /etc/envoy/jwks/jwks1.txt
   * Example: inline_string
   * .. code-block:: yaml
   *    local_jwks:
   *      inline_string: ACADADADADA
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getLocalJwksOrBuilder() {
    if (jwksSourceSpecifierCase_ == 4) {
       return (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
  }

  public static final int FORWARD_FIELD_NUMBER = 5;
  private boolean forward_ = false;
  /**
   * <pre>
   * If false, the JWT is removed in the request after a success verification. If true, the JWT is
   * not removed in the request. Default value is false.
   * caveat: only works for from_header &amp; has no effect for JWTs extracted through from_params &amp; from_cookies.
   * </pre>
   *
   * <code>bool forward = 5;</code>
   * @return The forward.
   */
  @java.lang.Override
  public boolean getForward() {
    return forward_;
  }

  public static final int FROM_HEADERS_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader> fromHeaders_;
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader> getFromHeadersList() {
    return fromHeaders_;
  }
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder> 
      getFromHeadersOrBuilderList() {
    return fromHeaders_;
  }
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  @java.lang.Override
  public int getFromHeadersCount() {
    return fromHeaders_.size();
  }
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader getFromHeaders(int index) {
    return fromHeaders_.get(index);
  }
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder getFromHeadersOrBuilder(
      int index) {
    return fromHeaders_.get(index);
  }

  public static final int FROM_PARAMS_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList fromParams_;
  /**
   * <pre>
   * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @return A list containing the fromParams.
   */
  public com.google.protobuf.ProtocolStringList
      getFromParamsList() {
    return fromParams_;
  }
  /**
   * <pre>
   * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @return The count of fromParams.
   */
  public int getFromParamsCount() {
    return fromParams_.size();
  }
  /**
   * <pre>
   * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @param index The index of the element to return.
   * @return The fromParams at the given index.
   */
  public java.lang.String getFromParams(int index) {
    return fromParams_.get(index);
  }
  /**
   * <pre>
   * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the fromParams at the given index.
   */
  public com.google.protobuf.ByteString
      getFromParamsBytes(int index) {
    return fromParams_.getByteString(index);
  }

  public static final int FROM_COOKIES_FIELD_NUMBER = 13;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList fromCookies_;
  /**
   * <pre>
   * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_cookies:
   *   - auth-token
   * Then JWT will be extracted from ``auth-token`` cookie in the request.
   * </pre>
   *
   * <code>repeated string from_cookies = 13;</code>
   * @return A list containing the fromCookies.
   */
  public com.google.protobuf.ProtocolStringList
      getFromCookiesList() {
    return fromCookies_;
  }
  /**
   * <pre>
   * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_cookies:
   *   - auth-token
   * Then JWT will be extracted from ``auth-token`` cookie in the request.
   * </pre>
   *
   * <code>repeated string from_cookies = 13;</code>
   * @return The count of fromCookies.
   */
  public int getFromCookiesCount() {
    return fromCookies_.size();
  }
  /**
   * <pre>
   * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_cookies:
   *   - auth-token
   * Then JWT will be extracted from ``auth-token`` cookie in the request.
   * </pre>
   *
   * <code>repeated string from_cookies = 13;</code>
   * @param index The index of the element to return.
   * @return The fromCookies at the given index.
   */
  public java.lang.String getFromCookies(int index) {
    return fromCookies_.get(index);
  }
  /**
   * <pre>
   * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_cookies:
   *   - auth-token
   * Then JWT will be extracted from ``auth-token`` cookie in the request.
   * </pre>
   *
   * <code>repeated string from_cookies = 13;</code>
   * @param index The index of the value to return.
   * @return The bytes of the fromCookies at the given index.
   */
  public com.google.protobuf.ByteString
      getFromCookiesBytes(int index) {
    return fromCookies_.getByteString(index);
  }

  public static final int FORWARD_PAYLOAD_HEADER_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private volatile java.lang.Object forwardPayloadHeader_ = "";
  /**
   * <pre>
   * This field specifies the header name to forward a successfully verified JWT payload to the
   * backend. The forwarded data is::
   *    base64url_encoded(jwt_payload_in_JSON)
   * If it is not specified, the payload will not be forwarded.
   * </pre>
   *
   * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
   * @return The forwardPayloadHeader.
   */
  @java.lang.Override
  public java.lang.String getForwardPayloadHeader() {
    java.lang.Object ref = forwardPayloadHeader_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      forwardPayloadHeader_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * This field specifies the header name to forward a successfully verified JWT payload to the
   * backend. The forwarded data is::
   *    base64url_encoded(jwt_payload_in_JSON)
   * If it is not specified, the payload will not be forwarded.
   * </pre>
   *
   * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
   * @return The bytes for forwardPayloadHeader.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getForwardPayloadHeaderBytes() {
    java.lang.Object ref = forwardPayloadHeader_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      forwardPayloadHeader_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PAD_FORWARD_PAYLOAD_HEADER_FIELD_NUMBER = 11;
  private boolean padForwardPayloadHeader_ = false;
  /**
   * <pre>
   * When :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
   * is specified, the base64 encoded payload will be added to the headers.
   * Normally JWT based64 encode doesn't add padding. If this field is true,
   * the header will be padded.
   * This field is only relevant if :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
   * is specified.
   * </pre>
   *
   * <code>bool pad_forward_payload_header = 11;</code>
   * @return The padForwardPayloadHeader.
   */
  @java.lang.Override
  public boolean getPadForwardPayloadHeader() {
    return padForwardPayloadHeader_;
  }

  public static final int PAYLOAD_IN_METADATA_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private volatile java.lang.Object payloadInMetadata_ = "";
  /**
   * <pre>
   * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
   * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
   * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
   * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
   * For example, if payload_in_metadata is ``my_payload``:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_payload:
   *       iss: https://example.com
   *       sub: test&#64;example.com
   *       aud: https://example.com
   *       exp: 1501281058
   * </pre>
   *
   * <code>string payload_in_metadata = 9;</code>
   * @return The payloadInMetadata.
   */
  @java.lang.Override
  public java.lang.String getPayloadInMetadata() {
    java.lang.Object ref = payloadInMetadata_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      payloadInMetadata_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
   * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
   * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
   * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
   * For example, if payload_in_metadata is ``my_payload``:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_payload:
   *       iss: https://example.com
   *       sub: test&#64;example.com
   *       aud: https://example.com
   *       exp: 1501281058
   * </pre>
   *
   * <code>string payload_in_metadata = 9;</code>
   * @return The bytes for payloadInMetadata.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPayloadInMetadataBytes() {
    java.lang.Object ref = payloadInMetadata_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      payloadInMetadata_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HEADER_IN_METADATA_FIELD_NUMBER = 14;
  @SuppressWarnings("serial")
  private volatile java.lang.Object headerInMetadata_ = "";
  /**
   * <pre>
   * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
   * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
   * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
   * value of this field as the key.
   * For example, if ``header_in_metadata`` is ``my_header``:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_header:
   *       alg: JWT
   *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
   *       alg: PS256
   * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
   * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
   * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_payload:
   *       iss: https://example.com
   *       sub: test&#64;example.com
   *       aud: https://example.com
   *       exp: 1501281058
   *     my_header:
   *       alg: JWT
   *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
   *       alg: PS256
   * .. warning::
   *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
   *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
   *   is not suggested due to potential override of existing entry, while it is not enforced during
   *   config validation.
   * </pre>
   *
   * <code>string header_in_metadata = 14;</code>
   * @return The headerInMetadata.
   */
  @java.lang.Override
  public java.lang.String getHeaderInMetadata() {
    java.lang.Object ref = headerInMetadata_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      headerInMetadata_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
   * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
   * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
   * value of this field as the key.
   * For example, if ``header_in_metadata`` is ``my_header``:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_header:
   *       alg: JWT
   *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
   *       alg: PS256
   * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
   * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
   * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_payload:
   *       iss: https://example.com
   *       sub: test&#64;example.com
   *       aud: https://example.com
   *       exp: 1501281058
   *     my_header:
   *       alg: JWT
   *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
   *       alg: PS256
   * .. warning::
   *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
   *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
   *   is not suggested due to potential override of existing entry, while it is not enforced during
   *   config validation.
   * </pre>
   *
   * <code>string header_in_metadata = 14;</code>
   * @return The bytes for headerInMetadata.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHeaderInMetadataBytes() {
    java.lang.Object ref = headerInMetadata_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      headerInMetadata_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CLOCK_SKEW_SECONDS_FIELD_NUMBER = 10;
  private int clockSkewSeconds_ = 0;
  /**
   * <pre>
   * Specify the clock skew in seconds when verifying JWT time constraint,
   * such as ``exp``, and ``nbf``. If not specified, default is 60 seconds.
   * </pre>
   *
   * <code>uint32 clock_skew_seconds = 10;</code>
   * @return The clockSkewSeconds.
   */
  @java.lang.Override
  public int getClockSkewSeconds() {
    return clockSkewSeconds_;
  }

  public static final int JWT_CACHE_CONFIG_FIELD_NUMBER = 12;
  private io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwtCacheConfig_;
  /**
   * <pre>
   * Enables JWT cache, its size is specified by ``jwt_cache_size``.
   * Only valid JWT tokens are cached.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
   * @return Whether the jwtCacheConfig field is set.
   */
  @java.lang.Override
  public boolean hasJwtCacheConfig() {
    return jwtCacheConfig_ != null;
  }
  /**
   * <pre>
   * Enables JWT cache, its size is specified by ``jwt_cache_size``.
   * Only valid JWT tokens are cached.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
   * @return The jwtCacheConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig getJwtCacheConfig() {
    return jwtCacheConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.getDefaultInstance() : jwtCacheConfig_;
  }
  /**
   * <pre>
   * Enables JWT cache, its size is specified by ``jwt_cache_size``.
   * Only valid JWT tokens are cached.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfigOrBuilder getJwtCacheConfigOrBuilder() {
    return jwtCacheConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.getDefaultInstance() : jwtCacheConfig_;
  }

  public static final int CLAIM_TO_HEADERS_FIELD_NUMBER = 15;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader> claimToHeaders_;
  /**
   * <pre>
   * Add JWT claim to HTTP Header
   * Specify the claim name you want to copy in which HTTP header. For examples, following config:
   * The claim must be of type; string, int, double, bool. Array type claims are not supported
   * .. code-block:: yaml
   *   claim_to_headers:
   *     - name: x-jwt-claim-nested-claim
   *       claim: claim.nested.key
   * This header is only reserved for jwt claim; any other value will be overwrite.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader> getClaimToHeadersList() {
    return claimToHeaders_;
  }
  /**
   * <pre>
   * Add JWT claim to HTTP Header
   * Specify the claim name you want to copy in which HTTP header. For examples, following config:
   * The claim must be of type; string, int, double, bool. Array type claims are not supported
   * .. code-block:: yaml
   *   claim_to_headers:
   *     - name: x-jwt-claim-nested-claim
   *       claim: claim.nested.key
   * This header is only reserved for jwt claim; any other value will be overwrite.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder> 
      getClaimToHeadersOrBuilderList() {
    return claimToHeaders_;
  }
  /**
   * <pre>
   * Add JWT claim to HTTP Header
   * Specify the claim name you want to copy in which HTTP header. For examples, following config:
   * The claim must be of type; string, int, double, bool. Array type claims are not supported
   * .. code-block:: yaml
   *   claim_to_headers:
   *     - name: x-jwt-claim-nested-claim
   *       claim: claim.nested.key
   * This header is only reserved for jwt claim; any other value will be overwrite.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
   */
  @java.lang.Override
  public int getClaimToHeadersCount() {
    return claimToHeaders_.size();
  }
  /**
   * <pre>
   * Add JWT claim to HTTP Header
   * Specify the claim name you want to copy in which HTTP header. For examples, following config:
   * The claim must be of type; string, int, double, bool. Array type claims are not supported
   * .. code-block:: yaml
   *   claim_to_headers:
   *     - name: x-jwt-claim-nested-claim
   *       claim: claim.nested.key
   * This header is only reserved for jwt claim; any other value will be overwrite.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader getClaimToHeaders(int index) {
    return claimToHeaders_.get(index);
  }
  /**
   * <pre>
   * Add JWT claim to HTTP Header
   * Specify the claim name you want to copy in which HTTP header. For examples, following config:
   * The claim must be of type; string, int, double, bool. Array type claims are not supported
   * .. code-block:: yaml
   *   claim_to_headers:
   *     - name: x-jwt-claim-nested-claim
   *       claim: claim.nested.key
   * This header is only reserved for jwt claim; any other value will be overwrite.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder getClaimToHeadersOrBuilder(
      int index) {
    return claimToHeaders_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(issuer_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, issuer_);
    }
    for (int i = 0; i < audiences_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, audiences_.getRaw(i));
    }
    if (jwksSourceSpecifierCase_ == 3) {
      output.writeMessage(3, (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_);
    }
    if (jwksSourceSpecifierCase_ == 4) {
      output.writeMessage(4, (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_);
    }
    if (forward_ != false) {
      output.writeBool(5, forward_);
    }
    for (int i = 0; i < fromHeaders_.size(); i++) {
      output.writeMessage(6, fromHeaders_.get(i));
    }
    for (int i = 0; i < fromParams_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, fromParams_.getRaw(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(forwardPayloadHeader_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, forwardPayloadHeader_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(payloadInMetadata_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, payloadInMetadata_);
    }
    if (clockSkewSeconds_ != 0) {
      output.writeUInt32(10, clockSkewSeconds_);
    }
    if (padForwardPayloadHeader_ != false) {
      output.writeBool(11, padForwardPayloadHeader_);
    }
    if (jwtCacheConfig_ != null) {
      output.writeMessage(12, getJwtCacheConfig());
    }
    for (int i = 0; i < fromCookies_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 13, fromCookies_.getRaw(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(headerInMetadata_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 14, headerInMetadata_);
    }
    for (int i = 0; i < claimToHeaders_.size(); i++) {
      output.writeMessage(15, claimToHeaders_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(issuer_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, issuer_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < audiences_.size(); i++) {
        dataSize += computeStringSizeNoTag(audiences_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getAudiencesList().size();
    }
    if (jwksSourceSpecifierCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_);
    }
    if (jwksSourceSpecifierCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_);
    }
    if (forward_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, forward_);
    }
    for (int i = 0; i < fromHeaders_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, fromHeaders_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < fromParams_.size(); i++) {
        dataSize += computeStringSizeNoTag(fromParams_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getFromParamsList().size();
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(forwardPayloadHeader_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, forwardPayloadHeader_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(payloadInMetadata_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, payloadInMetadata_);
    }
    if (clockSkewSeconds_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, clockSkewSeconds_);
    }
    if (padForwardPayloadHeader_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, padForwardPayloadHeader_);
    }
    if (jwtCacheConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getJwtCacheConfig());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < fromCookies_.size(); i++) {
        dataSize += computeStringSizeNoTag(fromCookies_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getFromCookiesList().size();
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(headerInMetadata_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, headerInMetadata_);
    }
    for (int i = 0; i < claimToHeaders_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, claimToHeaders_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider other = (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider) obj;

    if (!getIssuer()
        .equals(other.getIssuer())) return false;
    if (!getAudiencesList()
        .equals(other.getAudiencesList())) return false;
    if (getForward()
        != other.getForward()) return false;
    if (!getFromHeadersList()
        .equals(other.getFromHeadersList())) return false;
    if (!getFromParamsList()
        .equals(other.getFromParamsList())) return false;
    if (!getFromCookiesList()
        .equals(other.getFromCookiesList())) return false;
    if (!getForwardPayloadHeader()
        .equals(other.getForwardPayloadHeader())) return false;
    if (getPadForwardPayloadHeader()
        != other.getPadForwardPayloadHeader()) return false;
    if (!getPayloadInMetadata()
        .equals(other.getPayloadInMetadata())) return false;
    if (!getHeaderInMetadata()
        .equals(other.getHeaderInMetadata())) return false;
    if (getClockSkewSeconds()
        != other.getClockSkewSeconds()) return false;
    if (hasJwtCacheConfig() != other.hasJwtCacheConfig()) return false;
    if (hasJwtCacheConfig()) {
      if (!getJwtCacheConfig()
          .equals(other.getJwtCacheConfig())) return false;
    }
    if (!getClaimToHeadersList()
        .equals(other.getClaimToHeadersList())) return false;
    if (!getJwksSourceSpecifierCase().equals(other.getJwksSourceSpecifierCase())) return false;
    switch (jwksSourceSpecifierCase_) {
      case 3:
        if (!getRemoteJwks()
            .equals(other.getRemoteJwks())) return false;
        break;
      case 4:
        if (!getLocalJwks()
            .equals(other.getLocalJwks())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ISSUER_FIELD_NUMBER;
    hash = (53 * hash) + getIssuer().hashCode();
    if (getAudiencesCount() > 0) {
      hash = (37 * hash) + AUDIENCES_FIELD_NUMBER;
      hash = (53 * hash) + getAudiencesList().hashCode();
    }
    hash = (37 * hash) + FORWARD_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getForward());
    if (getFromHeadersCount() > 0) {
      hash = (37 * hash) + FROM_HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getFromHeadersList().hashCode();
    }
    if (getFromParamsCount() > 0) {
      hash = (37 * hash) + FROM_PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + getFromParamsList().hashCode();
    }
    if (getFromCookiesCount() > 0) {
      hash = (37 * hash) + FROM_COOKIES_FIELD_NUMBER;
      hash = (53 * hash) + getFromCookiesList().hashCode();
    }
    hash = (37 * hash) + FORWARD_PAYLOAD_HEADER_FIELD_NUMBER;
    hash = (53 * hash) + getForwardPayloadHeader().hashCode();
    hash = (37 * hash) + PAD_FORWARD_PAYLOAD_HEADER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPadForwardPayloadHeader());
    hash = (37 * hash) + PAYLOAD_IN_METADATA_FIELD_NUMBER;
    hash = (53 * hash) + getPayloadInMetadata().hashCode();
    hash = (37 * hash) + HEADER_IN_METADATA_FIELD_NUMBER;
    hash = (53 * hash) + getHeaderInMetadata().hashCode();
    hash = (37 * hash) + CLOCK_SKEW_SECONDS_FIELD_NUMBER;
    hash = (53 * hash) + getClockSkewSeconds();
    if (hasJwtCacheConfig()) {
      hash = (37 * hash) + JWT_CACHE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getJwtCacheConfig().hashCode();
    }
    if (getClaimToHeadersCount() > 0) {
      hash = (37 * hash) + CLAIM_TO_HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getClaimToHeadersList().hashCode();
    }
    switch (jwksSourceSpecifierCase_) {
      case 3:
        hash = (37 * hash) + REMOTE_JWKS_FIELD_NUMBER;
        hash = (53 * hash) + getRemoteJwks().hashCode();
        break;
      case 4:
        hash = (37 * hash) + LOCAL_JWKS_FIELD_NUMBER;
        hash = (53 * hash) + getLocalJwks().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Please see following for JWT authentication flow:
   * * `JSON Web Token (JWT) &lt;https://tools.ietf.org/html/rfc7519&gt;`_
   * * `The OAuth 2.0 Authorization Framework &lt;https://tools.ietf.org/html/rfc6749&gt;`_
   * * `OpenID Connect &lt;http://openid.net/connect&gt;`_
   * A JwtProvider message specifies how a JSON Web Token (JWT) can be verified. It specifies:
   * * issuer: the principal that issues the JWT. If specified, it has to match the ``iss`` field in JWT.
   * * allowed audiences: the ones in the token have to be listed here.
   * * how to fetch public key JWKS to verify the token signature.
   * * how to extract JWT token in the request.
   * * how to pass successfully verified token payload.
   * Example:
   * .. code-block:: yaml
   *     issuer: https://example.com
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   *     remote_jwks:
   *       http_uri:
   *         uri: https://example.com/.well-known/jwks.json
   *         cluster: example_jwks_cluster
   *         timeout: 1s
   *       cache_duration:
   *         seconds: 300
   * [#next-free-field: 16]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.jwt_authn.v3.JwtProvider}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)
      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProviderOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_JwtProvider_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_JwtProvider_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.class, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      issuer_ = "";
      audiences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (remoteJwksBuilder_ != null) {
        remoteJwksBuilder_.clear();
      }
      if (localJwksBuilder_ != null) {
        localJwksBuilder_.clear();
      }
      forward_ = false;
      if (fromHeadersBuilder_ == null) {
        fromHeaders_ = java.util.Collections.emptyList();
      } else {
        fromHeaders_ = null;
        fromHeadersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      fromParams_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000040);
      fromCookies_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000080);
      forwardPayloadHeader_ = "";
      padForwardPayloadHeader_ = false;
      payloadInMetadata_ = "";
      headerInMetadata_ = "";
      clockSkewSeconds_ = 0;
      jwtCacheConfig_ = null;
      if (jwtCacheConfigBuilder_ != null) {
        jwtCacheConfigBuilder_.dispose();
        jwtCacheConfigBuilder_ = null;
      }
      if (claimToHeadersBuilder_ == null) {
        claimToHeaders_ = java.util.Collections.emptyList();
      } else {
        claimToHeaders_ = null;
        claimToHeadersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00004000);
      jwksSourceSpecifierCase_ = 0;
      jwksSourceSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_JwtProvider_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider build() {
      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider result = new io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider result) {
      if (((bitField0_ & 0x00000002) != 0)) {
        audiences_ = audiences_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.audiences_ = audiences_;
      if (fromHeadersBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          fromHeaders_ = java.util.Collections.unmodifiableList(fromHeaders_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.fromHeaders_ = fromHeaders_;
      } else {
        result.fromHeaders_ = fromHeadersBuilder_.build();
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        fromParams_ = fromParams_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.fromParams_ = fromParams_;
      if (((bitField0_ & 0x00000080) != 0)) {
        fromCookies_ = fromCookies_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.fromCookies_ = fromCookies_;
      if (claimToHeadersBuilder_ == null) {
        if (((bitField0_ & 0x00004000) != 0)) {
          claimToHeaders_ = java.util.Collections.unmodifiableList(claimToHeaders_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.claimToHeaders_ = claimToHeaders_;
      } else {
        result.claimToHeaders_ = claimToHeadersBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.issuer_ = issuer_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.forward_ = forward_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.forwardPayloadHeader_ = forwardPayloadHeader_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.padForwardPayloadHeader_ = padForwardPayloadHeader_;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.payloadInMetadata_ = payloadInMetadata_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.headerInMetadata_ = headerInMetadata_;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.clockSkewSeconds_ = clockSkewSeconds_;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.jwtCacheConfig_ = jwtCacheConfigBuilder_ == null
            ? jwtCacheConfig_
            : jwtCacheConfigBuilder_.build();
      }
    }

    private void buildPartialOneofs(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider result) {
      result.jwksSourceSpecifierCase_ = jwksSourceSpecifierCase_;
      result.jwksSourceSpecifier_ = this.jwksSourceSpecifier_;
      if (jwksSourceSpecifierCase_ == 3 &&
          remoteJwksBuilder_ != null) {
        result.jwksSourceSpecifier_ = remoteJwksBuilder_.build();
      }
      if (jwksSourceSpecifierCase_ == 4 &&
          localJwksBuilder_ != null) {
        result.jwksSourceSpecifier_ = localJwksBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.getDefaultInstance()) return this;
      if (!other.getIssuer().isEmpty()) {
        issuer_ = other.issuer_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.audiences_.isEmpty()) {
        if (audiences_.isEmpty()) {
          audiences_ = other.audiences_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureAudiencesIsMutable();
          audiences_.addAll(other.audiences_);
        }
        onChanged();
      }
      if (other.getForward() != false) {
        setForward(other.getForward());
      }
      if (fromHeadersBuilder_ == null) {
        if (!other.fromHeaders_.isEmpty()) {
          if (fromHeaders_.isEmpty()) {
            fromHeaders_ = other.fromHeaders_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFromHeadersIsMutable();
            fromHeaders_.addAll(other.fromHeaders_);
          }
          onChanged();
        }
      } else {
        if (!other.fromHeaders_.isEmpty()) {
          if (fromHeadersBuilder_.isEmpty()) {
            fromHeadersBuilder_.dispose();
            fromHeadersBuilder_ = null;
            fromHeaders_ = other.fromHeaders_;
            bitField0_ = (bitField0_ & ~0x00000020);
            fromHeadersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFromHeadersFieldBuilder() : null;
          } else {
            fromHeadersBuilder_.addAllMessages(other.fromHeaders_);
          }
        }
      }
      if (!other.fromParams_.isEmpty()) {
        if (fromParams_.isEmpty()) {
          fromParams_ = other.fromParams_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureFromParamsIsMutable();
          fromParams_.addAll(other.fromParams_);
        }
        onChanged();
      }
      if (!other.fromCookies_.isEmpty()) {
        if (fromCookies_.isEmpty()) {
          fromCookies_ = other.fromCookies_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureFromCookiesIsMutable();
          fromCookies_.addAll(other.fromCookies_);
        }
        onChanged();
      }
      if (!other.getForwardPayloadHeader().isEmpty()) {
        forwardPayloadHeader_ = other.forwardPayloadHeader_;
        bitField0_ |= 0x00000100;
        onChanged();
      }
      if (other.getPadForwardPayloadHeader() != false) {
        setPadForwardPayloadHeader(other.getPadForwardPayloadHeader());
      }
      if (!other.getPayloadInMetadata().isEmpty()) {
        payloadInMetadata_ = other.payloadInMetadata_;
        bitField0_ |= 0x00000400;
        onChanged();
      }
      if (!other.getHeaderInMetadata().isEmpty()) {
        headerInMetadata_ = other.headerInMetadata_;
        bitField0_ |= 0x00000800;
        onChanged();
      }
      if (other.getClockSkewSeconds() != 0) {
        setClockSkewSeconds(other.getClockSkewSeconds());
      }
      if (other.hasJwtCacheConfig()) {
        mergeJwtCacheConfig(other.getJwtCacheConfig());
      }
      if (claimToHeadersBuilder_ == null) {
        if (!other.claimToHeaders_.isEmpty()) {
          if (claimToHeaders_.isEmpty()) {
            claimToHeaders_ = other.claimToHeaders_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureClaimToHeadersIsMutable();
            claimToHeaders_.addAll(other.claimToHeaders_);
          }
          onChanged();
        }
      } else {
        if (!other.claimToHeaders_.isEmpty()) {
          if (claimToHeadersBuilder_.isEmpty()) {
            claimToHeadersBuilder_.dispose();
            claimToHeadersBuilder_ = null;
            claimToHeaders_ = other.claimToHeaders_;
            bitField0_ = (bitField0_ & ~0x00004000);
            claimToHeadersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getClaimToHeadersFieldBuilder() : null;
          } else {
            claimToHeadersBuilder_.addAllMessages(other.claimToHeaders_);
          }
        }
      }
      switch (other.getJwksSourceSpecifierCase()) {
        case REMOTE_JWKS: {
          mergeRemoteJwks(other.getRemoteJwks());
          break;
        }
        case LOCAL_JWKS: {
          mergeLocalJwks(other.getLocalJwks());
          break;
        }
        case JWKSSOURCESPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              issuer_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureAudiencesIsMutable();
              audiences_.add(s);
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getRemoteJwksFieldBuilder().getBuilder(),
                  extensionRegistry);
              jwksSourceSpecifierCase_ = 3;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getLocalJwksFieldBuilder().getBuilder(),
                  extensionRegistry);
              jwksSourceSpecifierCase_ = 4;
              break;
            } // case 34
            case 40: {
              forward_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader m =
                  input.readMessage(
                      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.parser(),
                      extensionRegistry);
              if (fromHeadersBuilder_ == null) {
                ensureFromHeadersIsMutable();
                fromHeaders_.add(m);
              } else {
                fromHeadersBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureFromParamsIsMutable();
              fromParams_.add(s);
              break;
            } // case 58
            case 66: {
              forwardPayloadHeader_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000100;
              break;
            } // case 66
            case 74: {
              payloadInMetadata_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000400;
              break;
            } // case 74
            case 80: {
              clockSkewSeconds_ = input.readUInt32();
              bitField0_ |= 0x00001000;
              break;
            } // case 80
            case 88: {
              padForwardPayloadHeader_ = input.readBool();
              bitField0_ |= 0x00000200;
              break;
            } // case 88
            case 98: {
              input.readMessage(
                  getJwtCacheConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00002000;
              break;
            } // case 98
            case 106: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureFromCookiesIsMutable();
              fromCookies_.add(s);
              break;
            } // case 106
            case 114: {
              headerInMetadata_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000800;
              break;
            } // case 114
            case 122: {
              io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader m =
                  input.readMessage(
                      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.parser(),
                      extensionRegistry);
              if (claimToHeadersBuilder_ == null) {
                ensureClaimToHeadersIsMutable();
                claimToHeaders_.add(m);
              } else {
                claimToHeadersBuilder_.addMessage(m);
              }
              break;
            } // case 122
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int jwksSourceSpecifierCase_ = 0;
    private java.lang.Object jwksSourceSpecifier_;
    public JwksSourceSpecifierCase
        getJwksSourceSpecifierCase() {
      return JwksSourceSpecifierCase.forNumber(
          jwksSourceSpecifierCase_);
    }

    public Builder clearJwksSourceSpecifier() {
      jwksSourceSpecifierCase_ = 0;
      jwksSourceSpecifier_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private java.lang.Object issuer_ = "";
    /**
     * <pre>
     * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
     * the JWT, usually a URL or an email address.
     * It is optional. If specified, it has to match the ``iss`` field in JWT,
     * otherwise the JWT ``iss`` field is not checked.
     * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
     * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
     * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
     * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
     * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
     * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
     * * Multiple ``JwtProviders`` should not have same value in this field.
     * Example: https://securetoken.google.com
     * Example: 1234567-compute&#64;developer.gserviceaccount.com
     * </pre>
     *
     * <code>string issuer = 1;</code>
     * @return The issuer.
     */
    public java.lang.String getIssuer() {
      java.lang.Object ref = issuer_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        issuer_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
     * the JWT, usually a URL or an email address.
     * It is optional. If specified, it has to match the ``iss`` field in JWT,
     * otherwise the JWT ``iss`` field is not checked.
     * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
     * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
     * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
     * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
     * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
     * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
     * * Multiple ``JwtProviders`` should not have same value in this field.
     * Example: https://securetoken.google.com
     * Example: 1234567-compute&#64;developer.gserviceaccount.com
     * </pre>
     *
     * <code>string issuer = 1;</code>
     * @return The bytes for issuer.
     */
    public com.google.protobuf.ByteString
        getIssuerBytes() {
      java.lang.Object ref = issuer_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        issuer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
     * the JWT, usually a URL or an email address.
     * It is optional. If specified, it has to match the ``iss`` field in JWT,
     * otherwise the JWT ``iss`` field is not checked.
     * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
     * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
     * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
     * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
     * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
     * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
     * * Multiple ``JwtProviders`` should not have same value in this field.
     * Example: https://securetoken.google.com
     * Example: 1234567-compute&#64;developer.gserviceaccount.com
     * </pre>
     *
     * <code>string issuer = 1;</code>
     * @param value The issuer to set.
     * @return This builder for chaining.
     */
    public Builder setIssuer(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      issuer_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
     * the JWT, usually a URL or an email address.
     * It is optional. If specified, it has to match the ``iss`` field in JWT,
     * otherwise the JWT ``iss`` field is not checked.
     * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
     * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
     * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
     * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
     * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
     * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
     * * Multiple ``JwtProviders`` should not have same value in this field.
     * Example: https://securetoken.google.com
     * Example: 1234567-compute&#64;developer.gserviceaccount.com
     * </pre>
     *
     * <code>string issuer = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearIssuer() {
      issuer_ = getDefaultInstance().getIssuer();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
     * the JWT, usually a URL or an email address.
     * It is optional. If specified, it has to match the ``iss`` field in JWT,
     * otherwise the JWT ``iss`` field is not checked.
     * Note: ``JwtRequirement`` :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
     * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
     * are implemented differently than other ``JwtRequirements``. Hence the usage of this field
     * is different as follows if ``allow_missing`` or ``allow_missing_or_failed`` is used:
     * * If a JWT has ``iss`` field, it needs to be specified by this field in one of ``JwtProviders``.
     * * If a JWT doesn't have ``iss`` field, one of ``JwtProviders`` should fill this field empty.
     * * Multiple ``JwtProviders`` should not have same value in this field.
     * Example: https://securetoken.google.com
     * Example: 1234567-compute&#64;developer.gserviceaccount.com
     * </pre>
     *
     * <code>string issuer = 1;</code>
     * @param value The bytes for issuer to set.
     * @return This builder for chaining.
     */
    public Builder setIssuerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      issuer_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList audiences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureAudiencesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        audiences_ = new com.google.protobuf.LazyStringArrayList(audiences_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @return A list containing the audiences.
     */
    public com.google.protobuf.ProtocolStringList
        getAudiencesList() {
      return audiences_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @return The count of audiences.
     */
    public int getAudiencesCount() {
      return audiences_.size();
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @param index The index of the element to return.
     * @return The audiences at the given index.
     */
    public java.lang.String getAudiences(int index) {
      return audiences_.get(index);
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the audiences at the given index.
     */
    public com.google.protobuf.ByteString
        getAudiencesBytes(int index) {
      return audiences_.getByteString(index);
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @param index The index to set the value at.
     * @param value The audiences to set.
     * @return This builder for chaining.
     */
    public Builder setAudiences(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureAudiencesIsMutable();
      audiences_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @param value The audiences to add.
     * @return This builder for chaining.
     */
    public Builder addAudiences(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureAudiencesIsMutable();
      audiences_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @param values The audiences to add.
     * @return This builder for chaining.
     */
    public Builder addAllAudiences(
        java.lang.Iterable<java.lang.String> values) {
      ensureAudiencesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, audiences_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAudiences() {
      audiences_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
     * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
     * will not check audiences in the token.
     * Example:
     * .. code-block:: yaml
     *     audiences:
     *     - bookstore_android.apps.googleusercontent.com
     *     - bookstore_web.apps.googleusercontent.com
     * </pre>
     *
     * <code>repeated string audiences = 2;</code>
     * @param value The bytes of the audiences to add.
     * @return This builder for chaining.
     */
    public Builder addAudiencesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureAudiencesIsMutable();
      audiences_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder> remoteJwksBuilder_;
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     * @return Whether the remoteJwks field is set.
     */
    @java.lang.Override
    public boolean hasRemoteJwks() {
      return jwksSourceSpecifierCase_ == 3;
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     * @return The remoteJwks.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks getRemoteJwks() {
      if (remoteJwksBuilder_ == null) {
        if (jwksSourceSpecifierCase_ == 3) {
          return (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_;
        }
        return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
      } else {
        if (jwksSourceSpecifierCase_ == 3) {
          return remoteJwksBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    public Builder setRemoteJwks(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks value) {
      if (remoteJwksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        jwksSourceSpecifier_ = value;
        onChanged();
      } else {
        remoteJwksBuilder_.setMessage(value);
      }
      jwksSourceSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    public Builder setRemoteJwks(
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder builderForValue) {
      if (remoteJwksBuilder_ == null) {
        jwksSourceSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        remoteJwksBuilder_.setMessage(builderForValue.build());
      }
      jwksSourceSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    public Builder mergeRemoteJwks(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks value) {
      if (remoteJwksBuilder_ == null) {
        if (jwksSourceSpecifierCase_ == 3 &&
            jwksSourceSpecifier_ != io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance()) {
          jwksSourceSpecifier_ = io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.newBuilder((io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          jwksSourceSpecifier_ = value;
        }
        onChanged();
      } else {
        if (jwksSourceSpecifierCase_ == 3) {
          remoteJwksBuilder_.mergeFrom(value);
        } else {
          remoteJwksBuilder_.setMessage(value);
        }
      }
      jwksSourceSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    public Builder clearRemoteJwks() {
      if (remoteJwksBuilder_ == null) {
        if (jwksSourceSpecifierCase_ == 3) {
          jwksSourceSpecifierCase_ = 0;
          jwksSourceSpecifier_ = null;
          onChanged();
        }
      } else {
        if (jwksSourceSpecifierCase_ == 3) {
          jwksSourceSpecifierCase_ = 0;
          jwksSourceSpecifier_ = null;
        }
        remoteJwksBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder getRemoteJwksBuilder() {
      return getRemoteJwksFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder getRemoteJwksOrBuilder() {
      if ((jwksSourceSpecifierCase_ == 3) && (remoteJwksBuilder_ != null)) {
        return remoteJwksBuilder_.getMessageOrBuilder();
      } else {
        if (jwksSourceSpecifierCase_ == 3) {
          return (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_;
        }
        return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
     * URI and how the fetched JWKS should be cached.
     * Example:
     * .. code-block:: yaml
     *    remote_jwks:
     *      http_uri:
     *        uri: https://www.googleapis.com/oauth2/v1/certs
     *        cluster: jwt.www.googleapis.com|443
     *        timeout: 1s
     *      cache_duration:
     *        seconds: 300
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder> 
        getRemoteJwksFieldBuilder() {
      if (remoteJwksBuilder_ == null) {
        if (!(jwksSourceSpecifierCase_ == 3)) {
          jwksSourceSpecifier_ = io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
        }
        remoteJwksBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder>(
                (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) jwksSourceSpecifier_,
                getParentForChildren(),
                isClean());
        jwksSourceSpecifier_ = null;
      }
      jwksSourceSpecifierCase_ = 3;
      onChanged();
      return remoteJwksBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> localJwksBuilder_;
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     * @return Whether the localJwks field is set.
     */
    @java.lang.Override
    public boolean hasLocalJwks() {
      return jwksSourceSpecifierCase_ == 4;
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     * @return The localJwks.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.DataSource getLocalJwks() {
      if (localJwksBuilder_ == null) {
        if (jwksSourceSpecifierCase_ == 4) {
          return (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
      } else {
        if (jwksSourceSpecifierCase_ == 4) {
          return localJwksBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    public Builder setLocalJwks(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (localJwksBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        jwksSourceSpecifier_ = value;
        onChanged();
      } else {
        localJwksBuilder_.setMessage(value);
      }
      jwksSourceSpecifierCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    public Builder setLocalJwks(
        io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (localJwksBuilder_ == null) {
        jwksSourceSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        localJwksBuilder_.setMessage(builderForValue.build());
      }
      jwksSourceSpecifierCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    public Builder mergeLocalJwks(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (localJwksBuilder_ == null) {
        if (jwksSourceSpecifierCase_ == 4 &&
            jwksSourceSpecifier_ != io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance()) {
          jwksSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.DataSource.newBuilder((io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          jwksSourceSpecifier_ = value;
        }
        onChanged();
      } else {
        if (jwksSourceSpecifierCase_ == 4) {
          localJwksBuilder_.mergeFrom(value);
        } else {
          localJwksBuilder_.setMessage(value);
        }
      }
      jwksSourceSpecifierCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    public Builder clearLocalJwks() {
      if (localJwksBuilder_ == null) {
        if (jwksSourceSpecifierCase_ == 4) {
          jwksSourceSpecifierCase_ = 0;
          jwksSourceSpecifier_ = null;
          onChanged();
        }
      } else {
        if (jwksSourceSpecifierCase_ == 4) {
          jwksSourceSpecifierCase_ = 0;
          jwksSourceSpecifier_ = null;
        }
        localJwksBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getLocalJwksBuilder() {
      return getLocalJwksFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getLocalJwksOrBuilder() {
      if ((jwksSourceSpecifierCase_ == 4) && (localJwksBuilder_ != null)) {
        return localJwksBuilder_.getMessageOrBuilder();
      } else {
        if (jwksSourceSpecifierCase_ == 4) {
          return (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * JWKS is in local data source. It could be either in a local file or embedded in the
     * inline_string.
     * Example: local file
     * .. code-block:: yaml
     *    local_jwks:
     *      filename: /etc/envoy/jwks/jwks1.txt
     * Example: inline_string
     * .. code-block:: yaml
     *    local_jwks:
     *      inline_string: ACADADADADA
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
        getLocalJwksFieldBuilder() {
      if (localJwksBuilder_ == null) {
        if (!(jwksSourceSpecifierCase_ == 4)) {
          jwksSourceSpecifier_ = io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
        }
        localJwksBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.DataSource) jwksSourceSpecifier_,
                getParentForChildren(),
                isClean());
        jwksSourceSpecifier_ = null;
      }
      jwksSourceSpecifierCase_ = 4;
      onChanged();
      return localJwksBuilder_;
    }

    private boolean forward_ ;
    /**
     * <pre>
     * If false, the JWT is removed in the request after a success verification. If true, the JWT is
     * not removed in the request. Default value is false.
     * caveat: only works for from_header &amp; has no effect for JWTs extracted through from_params &amp; from_cookies.
     * </pre>
     *
     * <code>bool forward = 5;</code>
     * @return The forward.
     */
    @java.lang.Override
    public boolean getForward() {
      return forward_;
    }
    /**
     * <pre>
     * If false, the JWT is removed in the request after a success verification. If true, the JWT is
     * not removed in the request. Default value is false.
     * caveat: only works for from_header &amp; has no effect for JWTs extracted through from_params &amp; from_cookies.
     * </pre>
     *
     * <code>bool forward = 5;</code>
     * @param value The forward to set.
     * @return This builder for chaining.
     */
    public Builder setForward(boolean value) {
      
      forward_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If false, the JWT is removed in the request after a success verification. If true, the JWT is
     * not removed in the request. Default value is false.
     * caveat: only works for from_header &amp; has no effect for JWTs extracted through from_params &amp; from_cookies.
     * </pre>
     *
     * <code>bool forward = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearForward() {
      bitField0_ = (bitField0_ & ~0x00000010);
      forward_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader> fromHeaders_ =
      java.util.Collections.emptyList();
    private void ensureFromHeadersIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        fromHeaders_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader>(fromHeaders_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder> fromHeadersBuilder_;

    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader> getFromHeadersList() {
      if (fromHeadersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(fromHeaders_);
      } else {
        return fromHeadersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public int getFromHeadersCount() {
      if (fromHeadersBuilder_ == null) {
        return fromHeaders_.size();
      } else {
        return fromHeadersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader getFromHeaders(int index) {
      if (fromHeadersBuilder_ == null) {
        return fromHeaders_.get(index);
      } else {
        return fromHeadersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder setFromHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader value) {
      if (fromHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFromHeadersIsMutable();
        fromHeaders_.set(index, value);
        onChanged();
      } else {
        fromHeadersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder setFromHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder builderForValue) {
      if (fromHeadersBuilder_ == null) {
        ensureFromHeadersIsMutable();
        fromHeaders_.set(index, builderForValue.build());
        onChanged();
      } else {
        fromHeadersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder addFromHeaders(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader value) {
      if (fromHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFromHeadersIsMutable();
        fromHeaders_.add(value);
        onChanged();
      } else {
        fromHeadersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder addFromHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader value) {
      if (fromHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFromHeadersIsMutable();
        fromHeaders_.add(index, value);
        onChanged();
      } else {
        fromHeadersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder addFromHeaders(
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder builderForValue) {
      if (fromHeadersBuilder_ == null) {
        ensureFromHeadersIsMutable();
        fromHeaders_.add(builderForValue.build());
        onChanged();
      } else {
        fromHeadersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder addFromHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder builderForValue) {
      if (fromHeadersBuilder_ == null) {
        ensureFromHeadersIsMutable();
        fromHeaders_.add(index, builderForValue.build());
        onChanged();
      } else {
        fromHeadersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder addAllFromHeaders(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader> values) {
      if (fromHeadersBuilder_ == null) {
        ensureFromHeadersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fromHeaders_);
        onChanged();
      } else {
        fromHeadersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder clearFromHeaders() {
      if (fromHeadersBuilder_ == null) {
        fromHeaders_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        fromHeadersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public Builder removeFromHeaders(int index) {
      if (fromHeadersBuilder_ == null) {
        ensureFromHeadersIsMutable();
        fromHeaders_.remove(index);
        onChanged();
      } else {
        fromHeadersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder getFromHeadersBuilder(
        int index) {
      return getFromHeadersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder getFromHeadersOrBuilder(
        int index) {
      if (fromHeadersBuilder_ == null) {
        return fromHeaders_.get(index);  } else {
        return fromHeadersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder> 
         getFromHeadersOrBuilderList() {
      if (fromHeadersBuilder_ != null) {
        return fromHeadersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(fromHeaders_);
      }
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder addFromHeadersBuilder() {
      return getFromHeadersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.getDefaultInstance());
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder addFromHeadersBuilder(
        int index) {
      return getFromHeadersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.getDefaultInstance());
    }
    /**
     * <pre>
     * Two fields below define where to extract the JWT from an HTTP request.
     * If no explicit location is specified, the following default locations are tried in order:
     * 1. The Authorization header using the `Bearer schema
     * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
     *    Authorization: Bearer &lt;token&gt;.
     * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
     * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
     * its provider specified or from the default locations.
     * Specify the HTTP headers to extract JWT token. For examples, following config:
     * .. code-block:: yaml
     *   from_headers:
     *   - name: x-goog-iap-jwt-assertion
     * can be used to extract token from header::
     *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder> 
         getFromHeadersBuilderList() {
      return getFromHeadersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder> 
        getFromHeadersFieldBuilder() {
      if (fromHeadersBuilder_ == null) {
        fromHeadersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder>(
                fromHeaders_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        fromHeaders_ = null;
      }
      return fromHeadersBuilder_;
    }

    private com.google.protobuf.LazyStringList fromParams_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureFromParamsIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        fromParams_ = new com.google.protobuf.LazyStringArrayList(fromParams_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @return A list containing the fromParams.
     */
    public com.google.protobuf.ProtocolStringList
        getFromParamsList() {
      return fromParams_.getUnmodifiableView();
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @return The count of fromParams.
     */
    public int getFromParamsCount() {
      return fromParams_.size();
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @param index The index of the element to return.
     * @return The fromParams at the given index.
     */
    public java.lang.String getFromParams(int index) {
      return fromParams_.get(index);
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the fromParams at the given index.
     */
    public com.google.protobuf.ByteString
        getFromParamsBytes(int index) {
      return fromParams_.getByteString(index);
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @param index The index to set the value at.
     * @param value The fromParams to set.
     * @return This builder for chaining.
     */
    public Builder setFromParams(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureFromParamsIsMutable();
      fromParams_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @param value The fromParams to add.
     * @return This builder for chaining.
     */
    public Builder addFromParams(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureFromParamsIsMutable();
      fromParams_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @param values The fromParams to add.
     * @return This builder for chaining.
     */
    public Builder addAllFromParams(
        java.lang.Iterable<java.lang.String> values) {
      ensureFromParamsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, fromParams_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearFromParams() {
      fromParams_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a query parameter. ``jwt_params`` represents the query parameter names.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_params:
     *   - jwt_token
     * The JWT format in query parameter is::
     *    /path?jwt_token=&lt;JWT&gt;
     * </pre>
     *
     * <code>repeated string from_params = 7;</code>
     * @param value The bytes of the fromParams to add.
     * @return This builder for chaining.
     */
    public Builder addFromParamsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureFromParamsIsMutable();
      fromParams_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList fromCookies_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureFromCookiesIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        fromCookies_ = new com.google.protobuf.LazyStringArrayList(fromCookies_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @return A list containing the fromCookies.
     */
    public com.google.protobuf.ProtocolStringList
        getFromCookiesList() {
      return fromCookies_.getUnmodifiableView();
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @return The count of fromCookies.
     */
    public int getFromCookiesCount() {
      return fromCookies_.size();
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @param index The index of the element to return.
     * @return The fromCookies at the given index.
     */
    public java.lang.String getFromCookies(int index) {
      return fromCookies_.get(index);
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @param index The index of the value to return.
     * @return The bytes of the fromCookies at the given index.
     */
    public com.google.protobuf.ByteString
        getFromCookiesBytes(int index) {
      return fromCookies_.getByteString(index);
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @param index The index to set the value at.
     * @param value The fromCookies to set.
     * @return This builder for chaining.
     */
    public Builder setFromCookies(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureFromCookiesIsMutable();
      fromCookies_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @param value The fromCookies to add.
     * @return This builder for chaining.
     */
    public Builder addFromCookies(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureFromCookiesIsMutable();
      fromCookies_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @param values The fromCookies to add.
     * @return This builder for chaining.
     */
    public Builder addAllFromCookies(
        java.lang.Iterable<java.lang.String> values) {
      ensureFromCookiesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, fromCookies_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearFromCookies() {
      fromCookies_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * JWT is sent in a cookie. ``from_cookies`` represents the cookie names to extract from.
     * For example, if config is:
     * .. code-block:: yaml
     *   from_cookies:
     *   - auth-token
     * Then JWT will be extracted from ``auth-token`` cookie in the request.
     * </pre>
     *
     * <code>repeated string from_cookies = 13;</code>
     * @param value The bytes of the fromCookies to add.
     * @return This builder for chaining.
     */
    public Builder addFromCookiesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureFromCookiesIsMutable();
      fromCookies_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object forwardPayloadHeader_ = "";
    /**
     * <pre>
     * This field specifies the header name to forward a successfully verified JWT payload to the
     * backend. The forwarded data is::
     *    base64url_encoded(jwt_payload_in_JSON)
     * If it is not specified, the payload will not be forwarded.
     * </pre>
     *
     * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
     * @return The forwardPayloadHeader.
     */
    public java.lang.String getForwardPayloadHeader() {
      java.lang.Object ref = forwardPayloadHeader_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        forwardPayloadHeader_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * This field specifies the header name to forward a successfully verified JWT payload to the
     * backend. The forwarded data is::
     *    base64url_encoded(jwt_payload_in_JSON)
     * If it is not specified, the payload will not be forwarded.
     * </pre>
     *
     * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
     * @return The bytes for forwardPayloadHeader.
     */
    public com.google.protobuf.ByteString
        getForwardPayloadHeaderBytes() {
      java.lang.Object ref = forwardPayloadHeader_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        forwardPayloadHeader_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * This field specifies the header name to forward a successfully verified JWT payload to the
     * backend. The forwarded data is::
     *    base64url_encoded(jwt_payload_in_JSON)
     * If it is not specified, the payload will not be forwarded.
     * </pre>
     *
     * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
     * @param value The forwardPayloadHeader to set.
     * @return This builder for chaining.
     */
    public Builder setForwardPayloadHeader(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      forwardPayloadHeader_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This field specifies the header name to forward a successfully verified JWT payload to the
     * backend. The forwarded data is::
     *    base64url_encoded(jwt_payload_in_JSON)
     * If it is not specified, the payload will not be forwarded.
     * </pre>
     *
     * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearForwardPayloadHeader() {
      forwardPayloadHeader_ = getDefaultInstance().getForwardPayloadHeader();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This field specifies the header name to forward a successfully verified JWT payload to the
     * backend. The forwarded data is::
     *    base64url_encoded(jwt_payload_in_JSON)
     * If it is not specified, the payload will not be forwarded.
     * </pre>
     *
     * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
     * @param value The bytes for forwardPayloadHeader to set.
     * @return This builder for chaining.
     */
    public Builder setForwardPayloadHeaderBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      forwardPayloadHeader_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    private boolean padForwardPayloadHeader_ ;
    /**
     * <pre>
     * When :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
     * is specified, the base64 encoded payload will be added to the headers.
     * Normally JWT based64 encode doesn't add padding. If this field is true,
     * the header will be padded.
     * This field is only relevant if :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
     * is specified.
     * </pre>
     *
     * <code>bool pad_forward_payload_header = 11;</code>
     * @return The padForwardPayloadHeader.
     */
    @java.lang.Override
    public boolean getPadForwardPayloadHeader() {
      return padForwardPayloadHeader_;
    }
    /**
     * <pre>
     * When :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
     * is specified, the base64 encoded payload will be added to the headers.
     * Normally JWT based64 encode doesn't add padding. If this field is true,
     * the header will be padded.
     * This field is only relevant if :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
     * is specified.
     * </pre>
     *
     * <code>bool pad_forward_payload_header = 11;</code>
     * @param value The padForwardPayloadHeader to set.
     * @return This builder for chaining.
     */
    public Builder setPadForwardPayloadHeader(boolean value) {
      
      padForwardPayloadHeader_ = value;
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
     * is specified, the base64 encoded payload will be added to the headers.
     * Normally JWT based64 encode doesn't add padding. If this field is true,
     * the header will be padded.
     * This field is only relevant if :ref:`forward_payload_header &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.forward_payload_header&gt;`
     * is specified.
     * </pre>
     *
     * <code>bool pad_forward_payload_header = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearPadForwardPayloadHeader() {
      bitField0_ = (bitField0_ & ~0x00000200);
      padForwardPayloadHeader_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object payloadInMetadata_ = "";
    /**
     * <pre>
     * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
     * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
     * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
     * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
     * For example, if payload_in_metadata is ``my_payload``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     * </pre>
     *
     * <code>string payload_in_metadata = 9;</code>
     * @return The payloadInMetadata.
     */
    public java.lang.String getPayloadInMetadata() {
      java.lang.Object ref = payloadInMetadata_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        payloadInMetadata_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
     * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
     * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
     * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
     * For example, if payload_in_metadata is ``my_payload``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     * </pre>
     *
     * <code>string payload_in_metadata = 9;</code>
     * @return The bytes for payloadInMetadata.
     */
    public com.google.protobuf.ByteString
        getPayloadInMetadataBytes() {
      java.lang.Object ref = payloadInMetadata_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        payloadInMetadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
     * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
     * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
     * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
     * For example, if payload_in_metadata is ``my_payload``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     * </pre>
     *
     * <code>string payload_in_metadata = 9;</code>
     * @param value The payloadInMetadata to set.
     * @return This builder for chaining.
     */
    public Builder setPayloadInMetadata(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      payloadInMetadata_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
     * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
     * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
     * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
     * For example, if payload_in_metadata is ``my_payload``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     * </pre>
     *
     * <code>string payload_in_metadata = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearPayloadInMetadata() {
      payloadInMetadata_ = getDefaultInstance().getPayloadInMetadata();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
     * in the format as: ``namespace`` is the jwt_authn filter name as ````envoy.filters.http.jwt_authn````
     * The value is the ``protobuf::Struct``. The value of this field will be the key for its ``fields``
     * and the value is the ``protobuf::Struct`` converted from JWT JSON payload.
     * For example, if payload_in_metadata is ``my_payload``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     * </pre>
     *
     * <code>string payload_in_metadata = 9;</code>
     * @param value The bytes for payloadInMetadata to set.
     * @return This builder for chaining.
     */
    public Builder setPayloadInMetadataBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      payloadInMetadata_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }

    private java.lang.Object headerInMetadata_ = "";
    /**
     * <pre>
     * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
     * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
     * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
     * value of this field as the key.
     * For example, if ``header_in_metadata`` is ``my_header``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
     * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * .. warning::
     *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   is not suggested due to potential override of existing entry, while it is not enforced during
     *   config validation.
     * </pre>
     *
     * <code>string header_in_metadata = 14;</code>
     * @return The headerInMetadata.
     */
    public java.lang.String getHeaderInMetadata() {
      java.lang.Object ref = headerInMetadata_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        headerInMetadata_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
     * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
     * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
     * value of this field as the key.
     * For example, if ``header_in_metadata`` is ``my_header``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
     * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * .. warning::
     *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   is not suggested due to potential override of existing entry, while it is not enforced during
     *   config validation.
     * </pre>
     *
     * <code>string header_in_metadata = 14;</code>
     * @return The bytes for headerInMetadata.
     */
    public com.google.protobuf.ByteString
        getHeaderInMetadataBytes() {
      java.lang.Object ref = headerInMetadata_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headerInMetadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
     * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
     * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
     * value of this field as the key.
     * For example, if ``header_in_metadata`` is ``my_header``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
     * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * .. warning::
     *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   is not suggested due to potential override of existing entry, while it is not enforced during
     *   config validation.
     * </pre>
     *
     * <code>string header_in_metadata = 14;</code>
     * @param value The headerInMetadata to set.
     * @return This builder for chaining.
     */
    public Builder setHeaderInMetadata(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      headerInMetadata_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
     * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
     * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
     * value of this field as the key.
     * For example, if ``header_in_metadata`` is ``my_header``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
     * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * .. warning::
     *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   is not suggested due to potential override of existing entry, while it is not enforced during
     *   config validation.
     * </pre>
     *
     * <code>string header_in_metadata = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearHeaderInMetadata() {
      headerInMetadata_ = getDefaultInstance().getHeaderInMetadata();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If not empty, similar to :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`,
     * a successfully verified JWT header will be written to :ref:`Dynamic State &lt;arch_overview_data_sharing_between_filters&gt;`
     * as an entry (``protobuf::Struct``) in ``envoy.filters.http.jwt_authn`` ``namespace`` with the
     * value of this field as the key.
     * For example, if ``header_in_metadata`` is ``my_header``:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * When the metadata has ``envoy.filters.http.jwt_authn`` entry already (for example if
     * :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     * is not empty), it will be inserted as a new entry in the same ``namespace`` as shown below:
     * .. code-block:: yaml
     *   envoy.filters.http.jwt_authn:
     *     my_payload:
     *       iss: https://example.com
     *       sub: test&#64;example.com
     *       aud: https://example.com
     *       exp: 1501281058
     *     my_header:
     *       alg: JWT
     *       kid: EF71iSaosbC5C4tC6Syq1Gm647M
     *       alg: PS256
     * .. warning::
     *   Using the same key name for :ref:`header_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   and :ref:`payload_in_metadata &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata&gt;`
     *   is not suggested due to potential override of existing entry, while it is not enforced during
     *   config validation.
     * </pre>
     *
     * <code>string header_in_metadata = 14;</code>
     * @param value The bytes for headerInMetadata to set.
     * @return This builder for chaining.
     */
    public Builder setHeaderInMetadataBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      headerInMetadata_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }

    private int clockSkewSeconds_ ;
    /**
     * <pre>
     * Specify the clock skew in seconds when verifying JWT time constraint,
     * such as ``exp``, and ``nbf``. If not specified, default is 60 seconds.
     * </pre>
     *
     * <code>uint32 clock_skew_seconds = 10;</code>
     * @return The clockSkewSeconds.
     */
    @java.lang.Override
    public int getClockSkewSeconds() {
      return clockSkewSeconds_;
    }
    /**
     * <pre>
     * Specify the clock skew in seconds when verifying JWT time constraint,
     * such as ``exp``, and ``nbf``. If not specified, default is 60 seconds.
     * </pre>
     *
     * <code>uint32 clock_skew_seconds = 10;</code>
     * @param value The clockSkewSeconds to set.
     * @return This builder for chaining.
     */
    public Builder setClockSkewSeconds(int value) {
      
      clockSkewSeconds_ = value;
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify the clock skew in seconds when verifying JWT time constraint,
     * such as ``exp``, and ``nbf``. If not specified, default is 60 seconds.
     * </pre>
     *
     * <code>uint32 clock_skew_seconds = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearClockSkewSeconds() {
      bitField0_ = (bitField0_ & ~0x00001000);
      clockSkewSeconds_ = 0;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwtCacheConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfigOrBuilder> jwtCacheConfigBuilder_;
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     * @return Whether the jwtCacheConfig field is set.
     */
    public boolean hasJwtCacheConfig() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     * @return The jwtCacheConfig.
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig getJwtCacheConfig() {
      if (jwtCacheConfigBuilder_ == null) {
        return jwtCacheConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.getDefaultInstance() : jwtCacheConfig_;
      } else {
        return jwtCacheConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    public Builder setJwtCacheConfig(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig value) {
      if (jwtCacheConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        jwtCacheConfig_ = value;
      } else {
        jwtCacheConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    public Builder setJwtCacheConfig(
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.Builder builderForValue) {
      if (jwtCacheConfigBuilder_ == null) {
        jwtCacheConfig_ = builderForValue.build();
      } else {
        jwtCacheConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    public Builder mergeJwtCacheConfig(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig value) {
      if (jwtCacheConfigBuilder_ == null) {
        if (((bitField0_ & 0x00002000) != 0) &&
          jwtCacheConfig_ != null &&
          jwtCacheConfig_ != io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.getDefaultInstance()) {
          getJwtCacheConfigBuilder().mergeFrom(value);
        } else {
          jwtCacheConfig_ = value;
        }
      } else {
        jwtCacheConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    public Builder clearJwtCacheConfig() {
      bitField0_ = (bitField0_ & ~0x00002000);
      jwtCacheConfig_ = null;
      if (jwtCacheConfigBuilder_ != null) {
        jwtCacheConfigBuilder_.dispose();
        jwtCacheConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.Builder getJwtCacheConfigBuilder() {
      bitField0_ |= 0x00002000;
      onChanged();
      return getJwtCacheConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfigOrBuilder getJwtCacheConfigOrBuilder() {
      if (jwtCacheConfigBuilder_ != null) {
        return jwtCacheConfigBuilder_.getMessageOrBuilder();
      } else {
        return jwtCacheConfig_ == null ?
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.getDefaultInstance() : jwtCacheConfig_;
      }
    }
    /**
     * <pre>
     * Enables JWT cache, its size is specified by ``jwt_cache_size``.
     * Only valid JWT tokens are cached.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig jwt_cache_config = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfigOrBuilder> 
        getJwtCacheConfigFieldBuilder() {
      if (jwtCacheConfigBuilder_ == null) {
        jwtCacheConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtCacheConfigOrBuilder>(
                getJwtCacheConfig(),
                getParentForChildren(),
                isClean());
        jwtCacheConfig_ = null;
      }
      return jwtCacheConfigBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader> claimToHeaders_ =
      java.util.Collections.emptyList();
    private void ensureClaimToHeadersIsMutable() {
      if (!((bitField0_ & 0x00004000) != 0)) {
        claimToHeaders_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader>(claimToHeaders_);
        bitField0_ |= 0x00004000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder> claimToHeadersBuilder_;

    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader> getClaimToHeadersList() {
      if (claimToHeadersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(claimToHeaders_);
      } else {
        return claimToHeadersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public int getClaimToHeadersCount() {
      if (claimToHeadersBuilder_ == null) {
        return claimToHeaders_.size();
      } else {
        return claimToHeadersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader getClaimToHeaders(int index) {
      if (claimToHeadersBuilder_ == null) {
        return claimToHeaders_.get(index);
      } else {
        return claimToHeadersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder setClaimToHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader value) {
      if (claimToHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.set(index, value);
        onChanged();
      } else {
        claimToHeadersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder setClaimToHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder builderForValue) {
      if (claimToHeadersBuilder_ == null) {
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.set(index, builderForValue.build());
        onChanged();
      } else {
        claimToHeadersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder addClaimToHeaders(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader value) {
      if (claimToHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.add(value);
        onChanged();
      } else {
        claimToHeadersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder addClaimToHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader value) {
      if (claimToHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.add(index, value);
        onChanged();
      } else {
        claimToHeadersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder addClaimToHeaders(
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder builderForValue) {
      if (claimToHeadersBuilder_ == null) {
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.add(builderForValue.build());
        onChanged();
      } else {
        claimToHeadersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder addClaimToHeaders(
        int index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder builderForValue) {
      if (claimToHeadersBuilder_ == null) {
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.add(index, builderForValue.build());
        onChanged();
      } else {
        claimToHeadersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder addAllClaimToHeaders(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader> values) {
      if (claimToHeadersBuilder_ == null) {
        ensureClaimToHeadersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, claimToHeaders_);
        onChanged();
      } else {
        claimToHeadersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder clearClaimToHeaders() {
      if (claimToHeadersBuilder_ == null) {
        claimToHeaders_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        onChanged();
      } else {
        claimToHeadersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public Builder removeClaimToHeaders(int index) {
      if (claimToHeadersBuilder_ == null) {
        ensureClaimToHeadersIsMutable();
        claimToHeaders_.remove(index);
        onChanged();
      } else {
        claimToHeadersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder getClaimToHeadersBuilder(
        int index) {
      return getClaimToHeadersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder getClaimToHeadersOrBuilder(
        int index) {
      if (claimToHeadersBuilder_ == null) {
        return claimToHeaders_.get(index);  } else {
        return claimToHeadersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder> 
         getClaimToHeadersOrBuilderList() {
      if (claimToHeadersBuilder_ != null) {
        return claimToHeadersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(claimToHeaders_);
      }
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder addClaimToHeadersBuilder() {
      return getClaimToHeadersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.getDefaultInstance());
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder addClaimToHeadersBuilder(
        int index) {
      return getClaimToHeadersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.getDefaultInstance());
    }
    /**
     * <pre>
     * Add JWT claim to HTTP Header
     * Specify the claim name you want to copy in which HTTP header. For examples, following config:
     * The claim must be of type; string, int, double, bool. Array type claims are not supported
     * .. code-block:: yaml
     *   claim_to_headers:
     *     - name: x-jwt-claim-nested-claim
     *       claim: claim.nested.key
     * This header is only reserved for jwt claim; any other value will be overwrite.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader claim_to_headers = 15;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder> 
         getClaimToHeadersBuilderList() {
      return getClaimToHeadersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder> 
        getClaimToHeadersFieldBuilder() {
      if (claimToHeadersBuilder_ == null) {
        claimToHeadersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeader.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtClaimToHeaderOrBuilder>(
                claimToHeaders_,
                ((bitField0_ & 0x00004000) != 0),
                getParentForChildren(),
                isClean());
        claimToHeaders_ = null;
      }
      return claimToHeadersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)
  private static final io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<JwtProvider>
      PARSER = new com.google.protobuf.AbstractParser<JwtProvider>() {
    @java.lang.Override
    public JwtProvider parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<JwtProvider> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<JwtProvider> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

