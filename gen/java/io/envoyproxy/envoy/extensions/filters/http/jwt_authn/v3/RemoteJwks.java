// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3;

/**
 * <pre>
 * This message specifies how to fetch JWKS from remote and how to cache it.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks}
 */
public final class RemoteJwks extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)
    RemoteJwksOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RemoteJwks.newBuilder() to construct.
  private RemoteJwks(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RemoteJwks() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RemoteJwks();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_RemoteJwks_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_RemoteJwks_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.class, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder.class);
  }

  public static final int HTTP_URI_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.core.v3.HttpUri httpUri_;
  /**
   * <pre>
   * The HTTP URI to fetch the JWKS. For example:
   * .. code-block:: yaml
   *    http_uri:
   *      uri: https://www.googleapis.com/oauth2/v1/certs
   *      cluster: jwt.www.googleapis.com|443
   *      timeout: 1s
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
   * @return Whether the httpUri field is set.
   */
  @java.lang.Override
  public boolean hasHttpUri() {
    return httpUri_ != null;
  }
  /**
   * <pre>
   * The HTTP URI to fetch the JWKS. For example:
   * .. code-block:: yaml
   *    http_uri:
   *      uri: https://www.googleapis.com/oauth2/v1/certs
   *      cluster: jwt.www.googleapis.com|443
   *      timeout: 1s
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
   * @return The httpUri.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.HttpUri getHttpUri() {
    return httpUri_ == null ? io.envoyproxy.envoy.config.core.v3.HttpUri.getDefaultInstance() : httpUri_;
  }
  /**
   * <pre>
   * The HTTP URI to fetch the JWKS. For example:
   * .. code-block:: yaml
   *    http_uri:
   *      uri: https://www.googleapis.com/oauth2/v1/certs
   *      cluster: jwt.www.googleapis.com|443
   *      timeout: 1s
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder getHttpUriOrBuilder() {
    return httpUri_ == null ? io.envoyproxy.envoy.config.core.v3.HttpUri.getDefaultInstance() : httpUri_;
  }

  public static final int CACHE_DURATION_FIELD_NUMBER = 2;
  private com.google.protobuf.Duration cacheDuration_;
  /**
   * <pre>
   * Duration after which the cached JWKS should be expired. If not specified, default cache
   * duration is 10 minutes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cache_duration = 2;</code>
   * @return Whether the cacheDuration field is set.
   */
  @java.lang.Override
  public boolean hasCacheDuration() {
    return cacheDuration_ != null;
  }
  /**
   * <pre>
   * Duration after which the cached JWKS should be expired. If not specified, default cache
   * duration is 10 minutes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cache_duration = 2;</code>
   * @return The cacheDuration.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getCacheDuration() {
    return cacheDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : cacheDuration_;
  }
  /**
   * <pre>
   * Duration after which the cached JWKS should be expired. If not specified, default cache
   * duration is 10 minutes.
   * </pre>
   *
   * <code>.google.protobuf.Duration cache_duration = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getCacheDurationOrBuilder() {
    return cacheDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : cacheDuration_;
  }

  public static final int ASYNC_FETCH_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch asyncFetch_;
  /**
   * <pre>
   * Fetch Jwks asynchronously in the main thread before the listener is activated.
   * Fetched Jwks can be used by all worker threads.
   * If this feature is not enabled:
   * * The Jwks is fetched on-demand when the requests come. During the fetching, first
   *   few requests are paused until the Jwks is fetched.
   * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
   * If this feature is enabled:
   * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
   *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
   * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
   * @return Whether the asyncFetch field is set.
   */
  @java.lang.Override
  public boolean hasAsyncFetch() {
    return asyncFetch_ != null;
  }
  /**
   * <pre>
   * Fetch Jwks asynchronously in the main thread before the listener is activated.
   * Fetched Jwks can be used by all worker threads.
   * If this feature is not enabled:
   * * The Jwks is fetched on-demand when the requests come. During the fetching, first
   *   few requests are paused until the Jwks is fetched.
   * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
   * If this feature is enabled:
   * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
   *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
   * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
   * @return The asyncFetch.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch getAsyncFetch() {
    return asyncFetch_ == null ? io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.getDefaultInstance() : asyncFetch_;
  }
  /**
   * <pre>
   * Fetch Jwks asynchronously in the main thread before the listener is activated.
   * Fetched Jwks can be used by all worker threads.
   * If this feature is not enabled:
   * * The Jwks is fetched on-demand when the requests come. During the fetching, first
   *   few requests are paused until the Jwks is fetched.
   * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
   * If this feature is enabled:
   * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
   *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
   * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchOrBuilder getAsyncFetchOrBuilder() {
    return asyncFetch_ == null ? io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.getDefaultInstance() : asyncFetch_;
  }

  public static final int RETRY_POLICY_FIELD_NUMBER = 4;
  private io.envoyproxy.envoy.config.core.v3.RetryPolicy retryPolicy_;
  /**
   * <pre>
   * Retry policy for fetching Jwks. optional. turned off by default.
   * For example:
   * .. code-block:: yaml
   *   retry_policy:
   *     retry_back_off:
   *       base_interval: 0.01s
   *       max_interval: 20s
   *     num_retries: 10
   * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
   * 10 maximum attempts spaced at most 20s seconds.
   * .. code-block:: yaml
   *   retry_policy:
   *     num_retries:1
   * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
   * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
   * if num_retries is omitted, the default is to allow only one retry.
   * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
   * @return Whether the retryPolicy field is set.
   */
  @java.lang.Override
  public boolean hasRetryPolicy() {
    return retryPolicy_ != null;
  }
  /**
   * <pre>
   * Retry policy for fetching Jwks. optional. turned off by default.
   * For example:
   * .. code-block:: yaml
   *   retry_policy:
   *     retry_back_off:
   *       base_interval: 0.01s
   *       max_interval: 20s
   *     num_retries: 10
   * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
   * 10 maximum attempts spaced at most 20s seconds.
   * .. code-block:: yaml
   *   retry_policy:
   *     num_retries:1
   * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
   * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
   * if num_retries is omitted, the default is to allow only one retry.
   * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
   * @return The retryPolicy.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RetryPolicy getRetryPolicy() {
    return retryPolicy_ == null ? io.envoyproxy.envoy.config.core.v3.RetryPolicy.getDefaultInstance() : retryPolicy_;
  }
  /**
   * <pre>
   * Retry policy for fetching Jwks. optional. turned off by default.
   * For example:
   * .. code-block:: yaml
   *   retry_policy:
   *     retry_back_off:
   *       base_interval: 0.01s
   *       max_interval: 20s
   *     num_retries: 10
   * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
   * 10 maximum attempts spaced at most 20s seconds.
   * .. code-block:: yaml
   *   retry_policy:
   *     num_retries:1
   * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
   * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
   * if num_retries is omitted, the default is to allow only one retry.
   * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder getRetryPolicyOrBuilder() {
    return retryPolicy_ == null ? io.envoyproxy.envoy.config.core.v3.RetryPolicy.getDefaultInstance() : retryPolicy_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (httpUri_ != null) {
      output.writeMessage(1, getHttpUri());
    }
    if (cacheDuration_ != null) {
      output.writeMessage(2, getCacheDuration());
    }
    if (asyncFetch_ != null) {
      output.writeMessage(3, getAsyncFetch());
    }
    if (retryPolicy_ != null) {
      output.writeMessage(4, getRetryPolicy());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (httpUri_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getHttpUri());
    }
    if (cacheDuration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getCacheDuration());
    }
    if (asyncFetch_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getAsyncFetch());
    }
    if (retryPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getRetryPolicy());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks other = (io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) obj;

    if (hasHttpUri() != other.hasHttpUri()) return false;
    if (hasHttpUri()) {
      if (!getHttpUri()
          .equals(other.getHttpUri())) return false;
    }
    if (hasCacheDuration() != other.hasCacheDuration()) return false;
    if (hasCacheDuration()) {
      if (!getCacheDuration()
          .equals(other.getCacheDuration())) return false;
    }
    if (hasAsyncFetch() != other.hasAsyncFetch()) return false;
    if (hasAsyncFetch()) {
      if (!getAsyncFetch()
          .equals(other.getAsyncFetch())) return false;
    }
    if (hasRetryPolicy() != other.hasRetryPolicy()) return false;
    if (hasRetryPolicy()) {
      if (!getRetryPolicy()
          .equals(other.getRetryPolicy())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasHttpUri()) {
      hash = (37 * hash) + HTTP_URI_FIELD_NUMBER;
      hash = (53 * hash) + getHttpUri().hashCode();
    }
    if (hasCacheDuration()) {
      hash = (37 * hash) + CACHE_DURATION_FIELD_NUMBER;
      hash = (53 * hash) + getCacheDuration().hashCode();
    }
    if (hasAsyncFetch()) {
      hash = (37 * hash) + ASYNC_FETCH_FIELD_NUMBER;
      hash = (53 * hash) + getAsyncFetch().hashCode();
    }
    if (hasRetryPolicy()) {
      hash = (37 * hash) + RETRY_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getRetryPolicy().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This message specifies how to fetch JWKS from remote and how to cache it.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)
      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_RemoteJwks_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_RemoteJwks_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.class, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      httpUri_ = null;
      if (httpUriBuilder_ != null) {
        httpUriBuilder_.dispose();
        httpUriBuilder_ = null;
      }
      cacheDuration_ = null;
      if (cacheDurationBuilder_ != null) {
        cacheDurationBuilder_.dispose();
        cacheDurationBuilder_ = null;
      }
      asyncFetch_ = null;
      if (asyncFetchBuilder_ != null) {
        asyncFetchBuilder_.dispose();
        asyncFetchBuilder_ = null;
      }
      retryPolicy_ = null;
      if (retryPolicyBuilder_ != null) {
        retryPolicyBuilder_.dispose();
        retryPolicyBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.ConfigProto.internal_static_envoy_extensions_filters_http_jwt_authn_v3_RemoteJwks_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks build() {
      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks result = new io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.httpUri_ = httpUriBuilder_ == null
            ? httpUri_
            : httpUriBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.cacheDuration_ = cacheDurationBuilder_ == null
            ? cacheDuration_
            : cacheDurationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.asyncFetch_ = asyncFetchBuilder_ == null
            ? asyncFetch_
            : asyncFetchBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.retryPolicy_ = retryPolicyBuilder_ == null
            ? retryPolicy_
            : retryPolicyBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks.getDefaultInstance()) return this;
      if (other.hasHttpUri()) {
        mergeHttpUri(other.getHttpUri());
      }
      if (other.hasCacheDuration()) {
        mergeCacheDuration(other.getCacheDuration());
      }
      if (other.hasAsyncFetch()) {
        mergeAsyncFetch(other.getAsyncFetch());
      }
      if (other.hasRetryPolicy()) {
        mergeRetryPolicy(other.getRetryPolicy());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getHttpUriFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getCacheDurationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getAsyncFetchFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getRetryPolicyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.config.core.v3.HttpUri httpUri_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.HttpUri, io.envoyproxy.envoy.config.core.v3.HttpUri.Builder, io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder> httpUriBuilder_;
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     * @return Whether the httpUri field is set.
     */
    public boolean hasHttpUri() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     * @return The httpUri.
     */
    public io.envoyproxy.envoy.config.core.v3.HttpUri getHttpUri() {
      if (httpUriBuilder_ == null) {
        return httpUri_ == null ? io.envoyproxy.envoy.config.core.v3.HttpUri.getDefaultInstance() : httpUri_;
      } else {
        return httpUriBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    public Builder setHttpUri(io.envoyproxy.envoy.config.core.v3.HttpUri value) {
      if (httpUriBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        httpUri_ = value;
      } else {
        httpUriBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    public Builder setHttpUri(
        io.envoyproxy.envoy.config.core.v3.HttpUri.Builder builderForValue) {
      if (httpUriBuilder_ == null) {
        httpUri_ = builderForValue.build();
      } else {
        httpUriBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    public Builder mergeHttpUri(io.envoyproxy.envoy.config.core.v3.HttpUri value) {
      if (httpUriBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          httpUri_ != null &&
          httpUri_ != io.envoyproxy.envoy.config.core.v3.HttpUri.getDefaultInstance()) {
          getHttpUriBuilder().mergeFrom(value);
        } else {
          httpUri_ = value;
        }
      } else {
        httpUriBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    public Builder clearHttpUri() {
      bitField0_ = (bitField0_ & ~0x00000001);
      httpUri_ = null;
      if (httpUriBuilder_ != null) {
        httpUriBuilder_.dispose();
        httpUriBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HttpUri.Builder getHttpUriBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getHttpUriFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder getHttpUriOrBuilder() {
      if (httpUriBuilder_ != null) {
        return httpUriBuilder_.getMessageOrBuilder();
      } else {
        return httpUri_ == null ?
            io.envoyproxy.envoy.config.core.v3.HttpUri.getDefaultInstance() : httpUri_;
      }
    }
    /**
     * <pre>
     * The HTTP URI to fetch the JWKS. For example:
     * .. code-block:: yaml
     *    http_uri:
     *      uri: https://www.googleapis.com/oauth2/v1/certs
     *      cluster: jwt.www.googleapis.com|443
     *      timeout: 1s
     * </pre>
     *
     * <code>.envoy.config.core.v3.HttpUri http_uri = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.HttpUri, io.envoyproxy.envoy.config.core.v3.HttpUri.Builder, io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder> 
        getHttpUriFieldBuilder() {
      if (httpUriBuilder_ == null) {
        httpUriBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.HttpUri, io.envoyproxy.envoy.config.core.v3.HttpUri.Builder, io.envoyproxy.envoy.config.core.v3.HttpUriOrBuilder>(
                getHttpUri(),
                getParentForChildren(),
                isClean());
        httpUri_ = null;
      }
      return httpUriBuilder_;
    }

    private com.google.protobuf.Duration cacheDuration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> cacheDurationBuilder_;
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     * @return Whether the cacheDuration field is set.
     */
    public boolean hasCacheDuration() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     * @return The cacheDuration.
     */
    public com.google.protobuf.Duration getCacheDuration() {
      if (cacheDurationBuilder_ == null) {
        return cacheDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : cacheDuration_;
      } else {
        return cacheDurationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    public Builder setCacheDuration(com.google.protobuf.Duration value) {
      if (cacheDurationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cacheDuration_ = value;
      } else {
        cacheDurationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    public Builder setCacheDuration(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (cacheDurationBuilder_ == null) {
        cacheDuration_ = builderForValue.build();
      } else {
        cacheDurationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    public Builder mergeCacheDuration(com.google.protobuf.Duration value) {
      if (cacheDurationBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          cacheDuration_ != null &&
          cacheDuration_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getCacheDurationBuilder().mergeFrom(value);
        } else {
          cacheDuration_ = value;
        }
      } else {
        cacheDurationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    public Builder clearCacheDuration() {
      bitField0_ = (bitField0_ & ~0x00000002);
      cacheDuration_ = null;
      if (cacheDurationBuilder_ != null) {
        cacheDurationBuilder_.dispose();
        cacheDurationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    public com.google.protobuf.Duration.Builder getCacheDurationBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getCacheDurationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    public com.google.protobuf.DurationOrBuilder getCacheDurationOrBuilder() {
      if (cacheDurationBuilder_ != null) {
        return cacheDurationBuilder_.getMessageOrBuilder();
      } else {
        return cacheDuration_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : cacheDuration_;
      }
    }
    /**
     * <pre>
     * Duration after which the cached JWKS should be expired. If not specified, default cache
     * duration is 10 minutes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cache_duration = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getCacheDurationFieldBuilder() {
      if (cacheDurationBuilder_ == null) {
        cacheDurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getCacheDuration(),
                getParentForChildren(),
                isClean());
        cacheDuration_ = null;
      }
      return cacheDurationBuilder_;
    }

    private io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch asyncFetch_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchOrBuilder> asyncFetchBuilder_;
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     * @return Whether the asyncFetch field is set.
     */
    public boolean hasAsyncFetch() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     * @return The asyncFetch.
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch getAsyncFetch() {
      if (asyncFetchBuilder_ == null) {
        return asyncFetch_ == null ? io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.getDefaultInstance() : asyncFetch_;
      } else {
        return asyncFetchBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    public Builder setAsyncFetch(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch value) {
      if (asyncFetchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        asyncFetch_ = value;
      } else {
        asyncFetchBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    public Builder setAsyncFetch(
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.Builder builderForValue) {
      if (asyncFetchBuilder_ == null) {
        asyncFetch_ = builderForValue.build();
      } else {
        asyncFetchBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    public Builder mergeAsyncFetch(io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch value) {
      if (asyncFetchBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          asyncFetch_ != null &&
          asyncFetch_ != io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.getDefaultInstance()) {
          getAsyncFetchBuilder().mergeFrom(value);
        } else {
          asyncFetch_ = value;
        }
      } else {
        asyncFetchBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    public Builder clearAsyncFetch() {
      bitField0_ = (bitField0_ & ~0x00000004);
      asyncFetch_ = null;
      if (asyncFetchBuilder_ != null) {
        asyncFetchBuilder_.dispose();
        asyncFetchBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.Builder getAsyncFetchBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getAsyncFetchFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchOrBuilder getAsyncFetchOrBuilder() {
      if (asyncFetchBuilder_ != null) {
        return asyncFetchBuilder_.getMessageOrBuilder();
      } else {
        return asyncFetch_ == null ?
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.getDefaultInstance() : asyncFetch_;
      }
    }
    /**
     * <pre>
     * Fetch Jwks asynchronously in the main thread before the listener is activated.
     * Fetched Jwks can be used by all worker threads.
     * If this feature is not enabled:
     * * The Jwks is fetched on-demand when the requests come. During the fetching, first
     *   few requests are paused until the Jwks is fetched.
     * * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
     * If this feature is enabled:
     * * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
     *   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
     * * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchOrBuilder> 
        getAsyncFetchFieldBuilder() {
      if (asyncFetchBuilder_ == null) {
        asyncFetchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch.Builder, io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchOrBuilder>(
                getAsyncFetch(),
                getParentForChildren(),
                isClean());
        asyncFetch_ = null;
      }
      return asyncFetchBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RetryPolicy retryPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RetryPolicy, io.envoyproxy.envoy.config.core.v3.RetryPolicy.Builder, io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder> retryPolicyBuilder_;
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     * @return Whether the retryPolicy field is set.
     */
    public boolean hasRetryPolicy() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     * @return The retryPolicy.
     */
    public io.envoyproxy.envoy.config.core.v3.RetryPolicy getRetryPolicy() {
      if (retryPolicyBuilder_ == null) {
        return retryPolicy_ == null ? io.envoyproxy.envoy.config.core.v3.RetryPolicy.getDefaultInstance() : retryPolicy_;
      } else {
        return retryPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    public Builder setRetryPolicy(io.envoyproxy.envoy.config.core.v3.RetryPolicy value) {
      if (retryPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        retryPolicy_ = value;
      } else {
        retryPolicyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    public Builder setRetryPolicy(
        io.envoyproxy.envoy.config.core.v3.RetryPolicy.Builder builderForValue) {
      if (retryPolicyBuilder_ == null) {
        retryPolicy_ = builderForValue.build();
      } else {
        retryPolicyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    public Builder mergeRetryPolicy(io.envoyproxy.envoy.config.core.v3.RetryPolicy value) {
      if (retryPolicyBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          retryPolicy_ != null &&
          retryPolicy_ != io.envoyproxy.envoy.config.core.v3.RetryPolicy.getDefaultInstance()) {
          getRetryPolicyBuilder().mergeFrom(value);
        } else {
          retryPolicy_ = value;
        }
      } else {
        retryPolicyBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    public Builder clearRetryPolicy() {
      bitField0_ = (bitField0_ & ~0x00000008);
      retryPolicy_ = null;
      if (retryPolicyBuilder_ != null) {
        retryPolicyBuilder_.dispose();
        retryPolicyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RetryPolicy.Builder getRetryPolicyBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getRetryPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder getRetryPolicyOrBuilder() {
      if (retryPolicyBuilder_ != null) {
        return retryPolicyBuilder_.getMessageOrBuilder();
      } else {
        return retryPolicy_ == null ?
            io.envoyproxy.envoy.config.core.v3.RetryPolicy.getDefaultInstance() : retryPolicy_;
      }
    }
    /**
     * <pre>
     * Retry policy for fetching Jwks. optional. turned off by default.
     * For example:
     * .. code-block:: yaml
     *   retry_policy:
     *     retry_back_off:
     *       base_interval: 0.01s
     *       max_interval: 20s
     *     num_retries: 10
     * will yield a randomized truncated exponential backoff policy with an initial delay of 10ms
     * 10 maximum attempts spaced at most 20s seconds.
     * .. code-block:: yaml
     *   retry_policy:
     *     num_retries:1
     * uses the default :ref:`retry backoff strategy &lt;envoy_v3_api_msg_config.core.v3.BackoffStrategy&gt;`.
     * with the default base interval is 1000 milliseconds. and the default maximum interval of 10 times the base interval.
     * if num_retries is omitted, the default is to allow only one retry.
     * If enabled, the retry policy will apply to all Jwks fetching approaches, e.g. on demand or asynchronously in background.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RetryPolicy retry_policy = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RetryPolicy, io.envoyproxy.envoy.config.core.v3.RetryPolicy.Builder, io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder> 
        getRetryPolicyFieldBuilder() {
      if (retryPolicyBuilder_ == null) {
        retryPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RetryPolicy, io.envoyproxy.envoy.config.core.v3.RetryPolicy.Builder, io.envoyproxy.envoy.config.core.v3.RetryPolicyOrBuilder>(
                getRetryPolicy(),
                getParentForChildren(),
                isClean());
        retryPolicy_ = null;
      }
      return retryPolicyBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks)
  private static final io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RemoteJwks>
      PARSER = new com.google.protobuf.AbstractParser<RemoteJwks>() {
    @java.lang.Override
    public RemoteJwks parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<RemoteJwks> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RemoteJwks> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

