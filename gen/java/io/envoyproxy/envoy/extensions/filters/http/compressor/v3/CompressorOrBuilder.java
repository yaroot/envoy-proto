// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/compressor/v3/compressor.proto

package io.envoyproxy.envoy.extensions.filters.http.compressor.v3;

public interface CompressorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.compressor.v3.Compressor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.content_length is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=71
   * @return Whether the contentLength field is set.
   */
  @java.lang.Deprecated boolean hasContentLength();
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.content_length is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=71
   * @return The contentLength.
   */
  @java.lang.Deprecated com.google.protobuf.UInt32Value getContentLength();
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated com.google.protobuf.UInt32ValueOrBuilder getContentLengthOrBuilder();

  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.content_type is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=79
   * @return A list containing the contentType.
   */
  @java.lang.Deprecated java.util.List<java.lang.String>
      getContentTypeList();
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.content_type is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=79
   * @return The count of contentType.
   */
  @java.lang.Deprecated int getContentTypeCount();
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.content_type is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=79
   * @param index The index of the element to return.
   * @return The contentType at the given index.
   */
  @java.lang.Deprecated java.lang.String getContentType(int index);
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.content_type is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=79
   * @param index The index of the value to return.
   * @return The bytes of the contentType at the given index.
   */
  @java.lang.Deprecated com.google.protobuf.ByteString
      getContentTypeBytes(int index);

  /**
   * <pre>
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   * </pre>
   *
   * <code>bool disable_on_etag_header = 3 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.disable_on_etag_header is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=84
   * @return The disableOnEtagHeader.
   */
  @java.lang.Deprecated boolean getDisableOnEtagHeader();

  /**
   * <pre>
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   * .. attention::
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   * </pre>
   *
   * <code>bool remove_accept_encoding_header = 4 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.remove_accept_encoding_header is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=94
   * @return The removeAcceptEncodingHeader.
   */
  @java.lang.Deprecated boolean getRemoveAcceptEncodingHeader();

  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.runtime_enabled is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=99
   * @return Whether the runtimeEnabled field is set.
   */
  @java.lang.Deprecated boolean hasRuntimeEnabled();
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.filters.http.compressor.v3.Compressor.runtime_enabled is deprecated.
   *     See envoy/extensions/filters/http/compressor/v3/compressor.proto;l=99
   * @return The runtimeEnabled.
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getRuntimeEnabled();
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getRuntimeEnabledOrBuilder();

  /**
   * <pre>
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor&lt;envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
   * is included in Envoy.
   * [#extension-category: envoy.compression.compressor]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6 [(.validate.rules) = { ... }</code>
   * @return Whether the compressorLibrary field is set.
   */
  boolean hasCompressorLibrary();
  /**
   * <pre>
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor&lt;envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
   * is included in Envoy.
   * [#extension-category: envoy.compression.compressor]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6 [(.validate.rules) = { ... }</code>
   * @return The compressorLibrary.
   */
  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCompressorLibrary();
  /**
   * <pre>
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor&lt;envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
   * is included in Envoy.
   * [#extension-category: envoy.compression.compressor]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCompressorLibraryOrBuilder();

  /**
   * <pre>
   * Configuration for request compression. Compression is disabled by default if left empty.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
   * @return Whether the requestDirectionConfig field is set.
   */
  boolean hasRequestDirectionConfig();
  /**
   * <pre>
   * Configuration for request compression. Compression is disabled by default if left empty.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
   * @return The requestDirectionConfig.
   */
  io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig getRequestDirectionConfig();
  /**
   * <pre>
   * Configuration for request compression. Compression is disabled by default if left empty.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder getRequestDirectionConfigOrBuilder();

  /**
   * <pre>
   * Configuration for response compression. Compression is enabled by default if left empty.
   * .. attention::
   *    If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
   *    such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
   *    ``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.
   *    Also all the statistics related to response compression will be rooted in
   *    ``&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*``
   *    instead of
   *    ``&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*``.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
   * @return Whether the responseDirectionConfig field is set.
   */
  boolean hasResponseDirectionConfig();
  /**
   * <pre>
   * Configuration for response compression. Compression is enabled by default if left empty.
   * .. attention::
   *    If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
   *    such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
   *    ``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.
   *    Also all the statistics related to response compression will be rooted in
   *    ``&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*``
   *    instead of
   *    ``&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*``.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
   * @return The responseDirectionConfig.
   */
  io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig getResponseDirectionConfig();
  /**
   * <pre>
   * Configuration for response compression. Compression is enabled by default if left empty.
   * .. attention::
   *    If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
   *    such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
   *    ``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.
   *    Also all the statistics related to response compression will be rooted in
   *    ``&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*``
   *    instead of
   *    ``&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*``.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder getResponseDirectionConfigOrBuilder();
}
