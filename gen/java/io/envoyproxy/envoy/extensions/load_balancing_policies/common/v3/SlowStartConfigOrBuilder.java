// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/load_balancing_policies/common/v3/common.proto

package io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3;

public interface SlowStartConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Represents the size of slow start window.
   * If set, the newly created host remains in slow start mode starting from its creation time
   * for the duration of slow start window.
   * </pre>
   *
   * <code>.google.protobuf.Duration slow_start_window = 1;</code>
   * @return Whether the slowStartWindow field is set.
   */
  boolean hasSlowStartWindow();
  /**
   * <pre>
   * Represents the size of slow start window.
   * If set, the newly created host remains in slow start mode starting from its creation time
   * for the duration of slow start window.
   * </pre>
   *
   * <code>.google.protobuf.Duration slow_start_window = 1;</code>
   * @return The slowStartWindow.
   */
  com.google.protobuf.Duration getSlowStartWindow();
  /**
   * <pre>
   * Represents the size of slow start window.
   * If set, the newly created host remains in slow start mode starting from its creation time
   * for the duration of slow start window.
   * </pre>
   *
   * <code>.google.protobuf.Duration slow_start_window = 1;</code>
   */
  com.google.protobuf.DurationOrBuilder getSlowStartWindowOrBuilder();

  /**
   * <pre>
   * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
   * so that endpoint would get linearly increasing amount of traffic.
   * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
   * The value of aggression parameter should be greater than 0.0.
   * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
   * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
   * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
   * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
   * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
   * Once host exits slow start, time_factor and aggression no longer affect its weight.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
   * @return Whether the aggression field is set.
   */
  boolean hasAggression();
  /**
   * <pre>
   * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
   * so that endpoint would get linearly increasing amount of traffic.
   * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
   * The value of aggression parameter should be greater than 0.0.
   * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
   * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
   * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
   * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
   * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
   * Once host exits slow start, time_factor and aggression no longer affect its weight.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
   * @return The aggression.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeDouble getAggression();
  /**
   * <pre>
   * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
   * so that endpoint would get linearly increasing amount of traffic.
   * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
   * The value of aggression parameter should be greater than 0.0.
   * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
   * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
   * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
   * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
   * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
   * Once host exits slow start, time_factor and aggression no longer affect its weight.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getAggressionOrBuilder();

  /**
   * <pre>
   * Configures the minimum percentage of origin weight that avoids too small new weight,
   * which may cause endpoints in slow start mode receive no traffic in slow start window.
   * If not specified, the default is 10%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
   * @return Whether the minWeightPercent field is set.
   */
  boolean hasMinWeightPercent();
  /**
   * <pre>
   * Configures the minimum percentage of origin weight that avoids too small new weight,
   * which may cause endpoints in slow start mode receive no traffic in slow start window.
   * If not specified, the default is 10%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
   * @return The minWeightPercent.
   */
  io.envoyproxy.envoy.type.v3.Percent getMinWeightPercent();
  /**
   * <pre>
   * Configures the minimum percentage of origin weight that avoids too small new weight,
   * which may cause endpoints in slow start mode receive no traffic in slow start window.
   * If not specified, the default is 10%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
   */
  io.envoyproxy.envoy.type.v3.PercentOrBuilder getMinWeightPercentOrBuilder();
}
