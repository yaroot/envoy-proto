// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/load_balancing_policies/common/v3/common.proto

package io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3;

/**
 * <pre>
 * Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig}
 */
public final class ConsistentHashingLbConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig)
    ConsistentHashingLbConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConsistentHashingLbConfig.newBuilder() to construct.
  private ConsistentHashingLbConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConsistentHashingLbConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConsistentHashingLbConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_ConsistentHashingLbConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_ConsistentHashingLbConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.class, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.Builder.class);
  }

  public static final int USE_HOSTNAME_FOR_HASHING_FIELD_NUMBER = 1;
  private boolean useHostnameForHashing_ = false;
  /**
   * <pre>
   * If set to ``true``, the cluster will use hostname instead of the resolved
   * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
   * </pre>
   *
   * <code>bool use_hostname_for_hashing = 1;</code>
   * @return The useHostnameForHashing.
   */
  @java.lang.Override
  public boolean getUseHostnameForHashing() {
    return useHostnameForHashing_;
  }

  public static final int HASH_BALANCE_FACTOR_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt32Value hashBalanceFactor_;
  /**
   * <pre>
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   * Applies to both Ring Hash and Maglev load balancers.
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   * If weights are specified on the hosts, they are respected.
   * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
   * being probed, so use a higher value if you require better performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the hashBalanceFactor field is set.
   */
  @java.lang.Override
  public boolean hasHashBalanceFactor() {
    return hashBalanceFactor_ != null;
  }
  /**
   * <pre>
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   * Applies to both Ring Hash and Maglev load balancers.
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   * If weights are specified on the hosts, they are respected.
   * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
   * being probed, so use a higher value if you require better performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
   * @return The hashBalanceFactor.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getHashBalanceFactor() {
    return hashBalanceFactor_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
  }
  /**
   * <pre>
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   * Applies to both Ring Hash and Maglev load balancers.
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   * If weights are specified on the hosts, they are respected.
   * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
   * being probed, so use a higher value if you require better performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getHashBalanceFactorOrBuilder() {
    return hashBalanceFactor_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (useHostnameForHashing_ != false) {
      output.writeBool(1, useHostnameForHashing_);
    }
    if (hashBalanceFactor_ != null) {
      output.writeMessage(2, getHashBalanceFactor());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (useHostnameForHashing_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, useHostnameForHashing_);
    }
    if (hashBalanceFactor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getHashBalanceFactor());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig other = (io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig) obj;

    if (getUseHostnameForHashing()
        != other.getUseHostnameForHashing()) return false;
    if (hasHashBalanceFactor() != other.hasHashBalanceFactor()) return false;
    if (hasHashBalanceFactor()) {
      if (!getHashBalanceFactor()
          .equals(other.getHashBalanceFactor())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + USE_HOSTNAME_FOR_HASHING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUseHostnameForHashing());
    if (hasHashBalanceFactor()) {
      hash = (37 * hash) + HASH_BALANCE_FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + getHashBalanceFactor().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig)
      io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_ConsistentHashingLbConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_ConsistentHashingLbConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.class, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      useHostnameForHashing_ = false;
      hashBalanceFactor_ = null;
      if (hashBalanceFactorBuilder_ != null) {
        hashBalanceFactorBuilder_.dispose();
        hashBalanceFactorBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_ConsistentHashingLbConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig build() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig buildPartial() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig result = new io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.useHostnameForHashing_ = useHostnameForHashing_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.hashBalanceFactor_ = hashBalanceFactorBuilder_ == null
            ? hashBalanceFactor_
            : hashBalanceFactorBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig other) {
      if (other == io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig.getDefaultInstance()) return this;
      if (other.getUseHostnameForHashing() != false) {
        setUseHostnameForHashing(other.getUseHostnameForHashing());
      }
      if (other.hasHashBalanceFactor()) {
        mergeHashBalanceFactor(other.getHashBalanceFactor());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              useHostnameForHashing_ = input.readBool();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getHashBalanceFactorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private boolean useHostnameForHashing_ ;
    /**
     * <pre>
     * If set to ``true``, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     * </pre>
     *
     * <code>bool use_hostname_for_hashing = 1;</code>
     * @return The useHostnameForHashing.
     */
    @java.lang.Override
    public boolean getUseHostnameForHashing() {
      return useHostnameForHashing_;
    }
    /**
     * <pre>
     * If set to ``true``, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     * </pre>
     *
     * <code>bool use_hostname_for_hashing = 1;</code>
     * @param value The useHostnameForHashing to set.
     * @return This builder for chaining.
     */
    public Builder setUseHostnameForHashing(boolean value) {
      
      useHostnameForHashing_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set to ``true``, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     * </pre>
     *
     * <code>bool use_hostname_for_hashing = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUseHostnameForHashing() {
      bitField0_ = (bitField0_ & ~0x00000001);
      useHostnameForHashing_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt32Value hashBalanceFactor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> hashBalanceFactorBuilder_;
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the hashBalanceFactor field is set.
     */
    public boolean hasHashBalanceFactor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     * @return The hashBalanceFactor.
     */
    public com.google.protobuf.UInt32Value getHashBalanceFactor() {
      if (hashBalanceFactorBuilder_ == null) {
        return hashBalanceFactor_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
      } else {
        return hashBalanceFactorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setHashBalanceFactor(com.google.protobuf.UInt32Value value) {
      if (hashBalanceFactorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hashBalanceFactor_ = value;
      } else {
        hashBalanceFactorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setHashBalanceFactor(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (hashBalanceFactorBuilder_ == null) {
        hashBalanceFactor_ = builderForValue.build();
      } else {
        hashBalanceFactorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeHashBalanceFactor(com.google.protobuf.UInt32Value value) {
      if (hashBalanceFactorBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          hashBalanceFactor_ != null &&
          hashBalanceFactor_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getHashBalanceFactorBuilder().mergeFrom(value);
        } else {
          hashBalanceFactor_ = value;
        }
      } else {
        hashBalanceFactorBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearHashBalanceFactor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      hashBalanceFactor_ = null;
      if (hashBalanceFactorBuilder_ != null) {
        hashBalanceFactorBuilder_.dispose();
        hashBalanceFactorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getHashBalanceFactorBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getHashBalanceFactorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getHashBalanceFactorOrBuilder() {
      if (hashBalanceFactorBuilder_ != null) {
        return hashBalanceFactorBuilder_.getMessageOrBuilder();
      } else {
        return hashBalanceFactor_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
      }
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * Applies to both Ring Hash and Maglev load balancers.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getHashBalanceFactorFieldBuilder() {
      if (hashBalanceFactorBuilder_ == null) {
        hashBalanceFactorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getHashBalanceFactor(),
                getParentForChildren(),
                isClean());
        hashBalanceFactor_ = null;
      }
      return hashBalanceFactorBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig)
  private static final io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig();
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConsistentHashingLbConfig>
      PARSER = new com.google.protobuf.AbstractParser<ConsistentHashingLbConfig>() {
    @java.lang.Override
    public ConsistentHashingLbConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ConsistentHashingLbConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConsistentHashingLbConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.ConsistentHashingLbConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

