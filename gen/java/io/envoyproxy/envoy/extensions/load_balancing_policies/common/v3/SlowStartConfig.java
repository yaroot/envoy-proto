// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/load_balancing_policies/common/v3/common.proto

package io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3;

/**
 * <pre>
 * Configuration for :ref:`slow start mode &lt;arch_overview_load_balancing_slow_start&gt;`.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig}
 */
public final class SlowStartConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)
    SlowStartConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SlowStartConfig.newBuilder() to construct.
  private SlowStartConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SlowStartConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SlowStartConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_SlowStartConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_SlowStartConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.class, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder.class);
  }

  public static final int SLOW_START_WINDOW_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration slowStartWindow_;
  /**
   * <pre>
   * Represents the size of slow start window.
   * If set, the newly created host remains in slow start mode starting from its creation time
   * for the duration of slow start window.
   * </pre>
   *
   * <code>.google.protobuf.Duration slow_start_window = 1;</code>
   * @return Whether the slowStartWindow field is set.
   */
  @java.lang.Override
  public boolean hasSlowStartWindow() {
    return slowStartWindow_ != null;
  }
  /**
   * <pre>
   * Represents the size of slow start window.
   * If set, the newly created host remains in slow start mode starting from its creation time
   * for the duration of slow start window.
   * </pre>
   *
   * <code>.google.protobuf.Duration slow_start_window = 1;</code>
   * @return The slowStartWindow.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getSlowStartWindow() {
    return slowStartWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : slowStartWindow_;
  }
  /**
   * <pre>
   * Represents the size of slow start window.
   * If set, the newly created host remains in slow start mode starting from its creation time
   * for the duration of slow start window.
   * </pre>
   *
   * <code>.google.protobuf.Duration slow_start_window = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getSlowStartWindowOrBuilder() {
    return slowStartWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : slowStartWindow_;
  }

  public static final int AGGRESSION_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.core.v3.RuntimeDouble aggression_;
  /**
   * <pre>
   * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
   * so that endpoint would get linearly increasing amount of traffic.
   * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
   * The value of aggression parameter should be greater than 0.0.
   * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
   * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
   * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
   * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
   * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
   * Once host exits slow start, time_factor and aggression no longer affect its weight.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
   * @return Whether the aggression field is set.
   */
  @java.lang.Override
  public boolean hasAggression() {
    return aggression_ != null;
  }
  /**
   * <pre>
   * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
   * so that endpoint would get linearly increasing amount of traffic.
   * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
   * The value of aggression parameter should be greater than 0.0.
   * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
   * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
   * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
   * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
   * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
   * Once host exits slow start, time_factor and aggression no longer affect its weight.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
   * @return The aggression.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeDouble getAggression() {
    return aggression_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : aggression_;
  }
  /**
   * <pre>
   * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
   * so that endpoint would get linearly increasing amount of traffic.
   * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
   * The value of aggression parameter should be greater than 0.0.
   * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
   * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
   * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
   * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
   * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
   * Once host exits slow start, time_factor and aggression no longer affect its weight.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getAggressionOrBuilder() {
    return aggression_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : aggression_;
  }

  public static final int MIN_WEIGHT_PERCENT_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.type.v3.Percent minWeightPercent_;
  /**
   * <pre>
   * Configures the minimum percentage of origin weight that avoids too small new weight,
   * which may cause endpoints in slow start mode receive no traffic in slow start window.
   * If not specified, the default is 10%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
   * @return Whether the minWeightPercent field is set.
   */
  @java.lang.Override
  public boolean hasMinWeightPercent() {
    return minWeightPercent_ != null;
  }
  /**
   * <pre>
   * Configures the minimum percentage of origin weight that avoids too small new weight,
   * which may cause endpoints in slow start mode receive no traffic in slow start window.
   * If not specified, the default is 10%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
   * @return The minWeightPercent.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.Percent getMinWeightPercent() {
    return minWeightPercent_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : minWeightPercent_;
  }
  /**
   * <pre>
   * Configures the minimum percentage of origin weight that avoids too small new weight,
   * which may cause endpoints in slow start mode receive no traffic in slow start window.
   * If not specified, the default is 10%.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.PercentOrBuilder getMinWeightPercentOrBuilder() {
    return minWeightPercent_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : minWeightPercent_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (slowStartWindow_ != null) {
      output.writeMessage(1, getSlowStartWindow());
    }
    if (aggression_ != null) {
      output.writeMessage(2, getAggression());
    }
    if (minWeightPercent_ != null) {
      output.writeMessage(3, getMinWeightPercent());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (slowStartWindow_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getSlowStartWindow());
    }
    if (aggression_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getAggression());
    }
    if (minWeightPercent_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMinWeightPercent());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig other = (io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig) obj;

    if (hasSlowStartWindow() != other.hasSlowStartWindow()) return false;
    if (hasSlowStartWindow()) {
      if (!getSlowStartWindow()
          .equals(other.getSlowStartWindow())) return false;
    }
    if (hasAggression() != other.hasAggression()) return false;
    if (hasAggression()) {
      if (!getAggression()
          .equals(other.getAggression())) return false;
    }
    if (hasMinWeightPercent() != other.hasMinWeightPercent()) return false;
    if (hasMinWeightPercent()) {
      if (!getMinWeightPercent()
          .equals(other.getMinWeightPercent())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSlowStartWindow()) {
      hash = (37 * hash) + SLOW_START_WINDOW_FIELD_NUMBER;
      hash = (53 * hash) + getSlowStartWindow().hashCode();
    }
    if (hasAggression()) {
      hash = (37 * hash) + AGGRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getAggression().hashCode();
    }
    if (hasMinWeightPercent()) {
      hash = (37 * hash) + MIN_WEIGHT_PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + getMinWeightPercent().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for :ref:`slow start mode &lt;arch_overview_load_balancing_slow_start&gt;`.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)
      io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_SlowStartConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_SlowStartConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.class, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      slowStartWindow_ = null;
      if (slowStartWindowBuilder_ != null) {
        slowStartWindowBuilder_.dispose();
        slowStartWindowBuilder_ = null;
      }
      aggression_ = null;
      if (aggressionBuilder_ != null) {
        aggressionBuilder_.dispose();
        aggressionBuilder_ = null;
      }
      minWeightPercent_ = null;
      if (minWeightPercentBuilder_ != null) {
        minWeightPercentBuilder_.dispose();
        minWeightPercentBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.CommonProto.internal_static_envoy_extensions_load_balancing_policies_common_v3_SlowStartConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig build() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig buildPartial() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig result = new io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.slowStartWindow_ = slowStartWindowBuilder_ == null
            ? slowStartWindow_
            : slowStartWindowBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.aggression_ = aggressionBuilder_ == null
            ? aggression_
            : aggressionBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.minWeightPercent_ = minWeightPercentBuilder_ == null
            ? minWeightPercent_
            : minWeightPercentBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig other) {
      if (other == io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance()) return this;
      if (other.hasSlowStartWindow()) {
        mergeSlowStartWindow(other.getSlowStartWindow());
      }
      if (other.hasAggression()) {
        mergeAggression(other.getAggression());
      }
      if (other.hasMinWeightPercent()) {
        mergeMinWeightPercent(other.getMinWeightPercent());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getSlowStartWindowFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getAggressionFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getMinWeightPercentFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Duration slowStartWindow_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> slowStartWindowBuilder_;
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     * @return Whether the slowStartWindow field is set.
     */
    public boolean hasSlowStartWindow() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     * @return The slowStartWindow.
     */
    public com.google.protobuf.Duration getSlowStartWindow() {
      if (slowStartWindowBuilder_ == null) {
        return slowStartWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : slowStartWindow_;
      } else {
        return slowStartWindowBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    public Builder setSlowStartWindow(com.google.protobuf.Duration value) {
      if (slowStartWindowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        slowStartWindow_ = value;
      } else {
        slowStartWindowBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    public Builder setSlowStartWindow(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (slowStartWindowBuilder_ == null) {
        slowStartWindow_ = builderForValue.build();
      } else {
        slowStartWindowBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    public Builder mergeSlowStartWindow(com.google.protobuf.Duration value) {
      if (slowStartWindowBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          slowStartWindow_ != null &&
          slowStartWindow_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getSlowStartWindowBuilder().mergeFrom(value);
        } else {
          slowStartWindow_ = value;
        }
      } else {
        slowStartWindowBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    public Builder clearSlowStartWindow() {
      bitField0_ = (bitField0_ & ~0x00000001);
      slowStartWindow_ = null;
      if (slowStartWindowBuilder_ != null) {
        slowStartWindowBuilder_.dispose();
        slowStartWindowBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    public com.google.protobuf.Duration.Builder getSlowStartWindowBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getSlowStartWindowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    public com.google.protobuf.DurationOrBuilder getSlowStartWindowOrBuilder() {
      if (slowStartWindowBuilder_ != null) {
        return slowStartWindowBuilder_.getMessageOrBuilder();
      } else {
        return slowStartWindow_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : slowStartWindow_;
      }
    }
    /**
     * <pre>
     * Represents the size of slow start window.
     * If set, the newly created host remains in slow start mode starting from its creation time
     * for the duration of slow start window.
     * </pre>
     *
     * <code>.google.protobuf.Duration slow_start_window = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getSlowStartWindowFieldBuilder() {
      if (slowStartWindowBuilder_ == null) {
        slowStartWindowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getSlowStartWindow(),
                getParentForChildren(),
                isClean());
        slowStartWindow_ = null;
      }
      return slowStartWindowBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeDouble aggression_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeDouble, io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder> aggressionBuilder_;
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     * @return Whether the aggression field is set.
     */
    public boolean hasAggression() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     * @return The aggression.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeDouble getAggression() {
      if (aggressionBuilder_ == null) {
        return aggression_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : aggression_;
      } else {
        return aggressionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    public Builder setAggression(io.envoyproxy.envoy.config.core.v3.RuntimeDouble value) {
      if (aggressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        aggression_ = value;
      } else {
        aggressionBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    public Builder setAggression(
        io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder builderForValue) {
      if (aggressionBuilder_ == null) {
        aggression_ = builderForValue.build();
      } else {
        aggressionBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    public Builder mergeAggression(io.envoyproxy.envoy.config.core.v3.RuntimeDouble value) {
      if (aggressionBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          aggression_ != null &&
          aggression_ != io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance()) {
          getAggressionBuilder().mergeFrom(value);
        } else {
          aggression_ = value;
        }
      } else {
        aggressionBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    public Builder clearAggression() {
      bitField0_ = (bitField0_ & ~0x00000002);
      aggression_ = null;
      if (aggressionBuilder_ != null) {
        aggressionBuilder_.dispose();
        aggressionBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder getAggressionBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getAggressionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getAggressionOrBuilder() {
      if (aggressionBuilder_ != null) {
        return aggressionBuilder_.getMessageOrBuilder();
      } else {
        return aggression_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : aggression_;
      }
    }
    /**
     * <pre>
     * This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
     * so that endpoint would get linearly increasing amount of traffic.
     * When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
     * The value of aggression parameter should be greater than 0.0.
     * By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
     * During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
     * ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
     * where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.
     * As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
     * Once host exits slow start, time_factor and aggression no longer affect its weight.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble aggression = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeDouble, io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder> 
        getAggressionFieldBuilder() {
      if (aggressionBuilder_ == null) {
        aggressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeDouble, io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder>(
                getAggression(),
                getParentForChildren(),
                isClean());
        aggression_ = null;
      }
      return aggressionBuilder_;
    }

    private io.envoyproxy.envoy.type.v3.Percent minWeightPercent_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> minWeightPercentBuilder_;
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     * @return Whether the minWeightPercent field is set.
     */
    public boolean hasMinWeightPercent() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     * @return The minWeightPercent.
     */
    public io.envoyproxy.envoy.type.v3.Percent getMinWeightPercent() {
      if (minWeightPercentBuilder_ == null) {
        return minWeightPercent_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : minWeightPercent_;
      } else {
        return minWeightPercentBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    public Builder setMinWeightPercent(io.envoyproxy.envoy.type.v3.Percent value) {
      if (minWeightPercentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        minWeightPercent_ = value;
      } else {
        minWeightPercentBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    public Builder setMinWeightPercent(
        io.envoyproxy.envoy.type.v3.Percent.Builder builderForValue) {
      if (minWeightPercentBuilder_ == null) {
        minWeightPercent_ = builderForValue.build();
      } else {
        minWeightPercentBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    public Builder mergeMinWeightPercent(io.envoyproxy.envoy.type.v3.Percent value) {
      if (minWeightPercentBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          minWeightPercent_ != null &&
          minWeightPercent_ != io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance()) {
          getMinWeightPercentBuilder().mergeFrom(value);
        } else {
          minWeightPercent_ = value;
        }
      } else {
        minWeightPercentBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    public Builder clearMinWeightPercent() {
      bitField0_ = (bitField0_ & ~0x00000004);
      minWeightPercent_ = null;
      if (minWeightPercentBuilder_ != null) {
        minWeightPercentBuilder_.dispose();
        minWeightPercentBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.Percent.Builder getMinWeightPercentBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getMinWeightPercentFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.PercentOrBuilder getMinWeightPercentOrBuilder() {
      if (minWeightPercentBuilder_ != null) {
        return minWeightPercentBuilder_.getMessageOrBuilder();
      } else {
        return minWeightPercent_ == null ?
            io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : minWeightPercent_;
      }
    }
    /**
     * <pre>
     * Configures the minimum percentage of origin weight that avoids too small new weight,
     * which may cause endpoints in slow start mode receive no traffic in slow start window.
     * If not specified, the default is 10%.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent min_weight_percent = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> 
        getMinWeightPercentFieldBuilder() {
      if (minWeightPercentBuilder_ == null) {
        minWeightPercentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder>(
                getMinWeightPercent(),
                getParentForChildren(),
                isClean());
        minWeightPercent_ = null;
      }
      return minWeightPercentBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig)
  private static final io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig();
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SlowStartConfig>
      PARSER = new com.google.protobuf.AbstractParser<SlowStartConfig>() {
    @java.lang.Override
    public SlowStartConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<SlowStartConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SlowStartConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

