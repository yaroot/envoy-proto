// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto

package io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3;

/**
 * <pre>
 * This configuration allows the built-in RING_HASH LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * &lt;arch_overview_load_balancing_types&gt;` for more information.
 * [#extension: envoy.clusters.lb_policy]
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash}
 */
public final class RingHash extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash)
    RingHashOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RingHash.newBuilder() to construct.
  private RingHash(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RingHash() {
    hashFunction_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RingHash();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RingHash(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            hashFunction_ = rawValue;
            break;
          }
          case 18: {
            com.google.protobuf.UInt64Value.Builder subBuilder = null;
            if (minimumRingSize_ != null) {
              subBuilder = minimumRingSize_.toBuilder();
            }
            minimumRingSize_ = input.readMessage(com.google.protobuf.UInt64Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(minimumRingSize_);
              minimumRingSize_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.protobuf.UInt64Value.Builder subBuilder = null;
            if (maximumRingSize_ != null) {
              subBuilder = maximumRingSize_.toBuilder();
            }
            maximumRingSize_ = input.readMessage(com.google.protobuf.UInt64Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(maximumRingSize_);
              maximumRingSize_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            useHostnameForHashing_ = input.readBool();
            break;
          }
          case 42: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (hashBalanceFactor_ != null) {
              subBuilder = hashBalanceFactor_.toBuilder();
            }
            hashBalanceFactor_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(hashBalanceFactor_);
              hashBalanceFactor_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHashProto.internal_static_envoy_extensions_load_balancing_policies_ring_hash_v3_RingHash_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHashProto.internal_static_envoy_extensions_load_balancing_policies_ring_hash_v3_RingHash_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.class, io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.Builder.class);
  }

  /**
   * <pre>
   * The hash function used to hash hosts onto the ketama ring.
   * </pre>
   *
   * Protobuf enum {@code envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction}
   */
  public enum HashFunction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Currently defaults to XX_HASH.
     * </pre>
     *
     * <code>DEFAULT_HASH = 0;</code>
     */
    DEFAULT_HASH(0),
    /**
     * <pre>
     * Use `xxHash &lt;https://github.com/Cyan4973/xxHash&gt;`_.
     * </pre>
     *
     * <code>XX_HASH = 1;</code>
     */
    XX_HASH(1),
    /**
     * <pre>
     * Use `MurmurHash2 &lt;https://sites.google.com/site/murmurhash/&gt;`_, this is compatible with
     * std:hash&lt;string&gt; in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
     * on Linux and not macOS.
     * </pre>
     *
     * <code>MURMUR_HASH_2 = 2;</code>
     */
    MURMUR_HASH_2(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Currently defaults to XX_HASH.
     * </pre>
     *
     * <code>DEFAULT_HASH = 0;</code>
     */
    public static final int DEFAULT_HASH_VALUE = 0;
    /**
     * <pre>
     * Use `xxHash &lt;https://github.com/Cyan4973/xxHash&gt;`_.
     * </pre>
     *
     * <code>XX_HASH = 1;</code>
     */
    public static final int XX_HASH_VALUE = 1;
    /**
     * <pre>
     * Use `MurmurHash2 &lt;https://sites.google.com/site/murmurhash/&gt;`_, this is compatible with
     * std:hash&lt;string&gt; in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
     * on Linux and not macOS.
     * </pre>
     *
     * <code>MURMUR_HASH_2 = 2;</code>
     */
    public static final int MURMUR_HASH_2_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HashFunction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HashFunction forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_HASH;
        case 1: return XX_HASH;
        case 2: return MURMUR_HASH_2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HashFunction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HashFunction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HashFunction>() {
            public HashFunction findValueByNumber(int number) {
              return HashFunction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.getDescriptor().getEnumTypes().get(0);
    }

    private static final HashFunction[] VALUES = values();

    public static HashFunction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HashFunction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction)
  }

  public static final int HASH_FUNCTION_FIELD_NUMBER = 1;
  private int hashFunction_;
  /**
   * <pre>
   * The hash function used to hash hosts onto the ketama ring. The value defaults to
   * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for hashFunction.
   */
  @java.lang.Override public int getHashFunctionValue() {
    return hashFunction_;
  }
  /**
   * <pre>
   * The hash function used to hash hosts onto the ketama ring. The value defaults to
   * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
   * @return The hashFunction.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction getHashFunction() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction result = io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.valueOf(hashFunction_);
    return result == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.UNRECOGNIZED : result;
  }

  public static final int MINIMUM_RING_SIZE_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt64Value minimumRingSize_;
  /**
   * <pre>
   * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
   * provided host) the better the request distribution will reflect the desired weights. Defaults
   * to 1024 entries, and limited to 8M entries. See also
   * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the minimumRingSize field is set.
   */
  @java.lang.Override
  public boolean hasMinimumRingSize() {
    return minimumRingSize_ != null;
  }
  /**
   * <pre>
   * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
   * provided host) the better the request distribution will reflect the desired weights. Defaults
   * to 1024 entries, and limited to 8M entries. See also
   * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
   * @return The minimumRingSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getMinimumRingSize() {
    return minimumRingSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : minimumRingSize_;
  }
  /**
   * <pre>
   * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
   * provided host) the better the request distribution will reflect the desired weights. Defaults
   * to 1024 entries, and limited to 8M entries. See also
   * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getMinimumRingSizeOrBuilder() {
    return getMinimumRingSize();
  }

  public static final int MAXIMUM_RING_SIZE_FIELD_NUMBER = 3;
  private com.google.protobuf.UInt64Value maximumRingSize_;
  /**
   * <pre>
   * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
   * to further constrain resource use. See also
   * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the maximumRingSize field is set.
   */
  @java.lang.Override
  public boolean hasMaximumRingSize() {
    return maximumRingSize_ != null;
  }
  /**
   * <pre>
   * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
   * to further constrain resource use. See also
   * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
   * @return The maximumRingSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt64Value getMaximumRingSize() {
    return maximumRingSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maximumRingSize_;
  }
  /**
   * <pre>
   * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
   * to further constrain resource use. See also
   * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt64ValueOrBuilder getMaximumRingSizeOrBuilder() {
    return getMaximumRingSize();
  }

  public static final int USE_HOSTNAME_FOR_HASHING_FIELD_NUMBER = 4;
  private boolean useHostnameForHashing_;
  /**
   * <pre>
   * If set to `true`, the cluster will use hostname instead of the resolved
   * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
   * </pre>
   *
   * <code>bool use_hostname_for_hashing = 4;</code>
   * @return The useHostnameForHashing.
   */
  @java.lang.Override
  public boolean getUseHostnameForHashing() {
    return useHostnameForHashing_;
  }

  public static final int HASH_BALANCE_FACTOR_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt32Value hashBalanceFactor_;
  /**
   * <pre>
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   * If weights are specified on the hosts, they are respected.
   * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
   * being probed, so use a higher value if you require better performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the hashBalanceFactor field is set.
   */
  @java.lang.Override
  public boolean hasHashBalanceFactor() {
    return hashBalanceFactor_ != null;
  }
  /**
   * <pre>
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   * If weights are specified on the hosts, they are respected.
   * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
   * being probed, so use a higher value if you require better performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
   * @return The hashBalanceFactor.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getHashBalanceFactor() {
    return hashBalanceFactor_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
  }
  /**
   * <pre>
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   * If weights are specified on the hosts, they are respected.
   * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
   * being probed, so use a higher value if you require better performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getHashBalanceFactorOrBuilder() {
    return getHashBalanceFactor();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hashFunction_ != io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.DEFAULT_HASH.getNumber()) {
      output.writeEnum(1, hashFunction_);
    }
    if (minimumRingSize_ != null) {
      output.writeMessage(2, getMinimumRingSize());
    }
    if (maximumRingSize_ != null) {
      output.writeMessage(3, getMaximumRingSize());
    }
    if (useHostnameForHashing_ != false) {
      output.writeBool(4, useHostnameForHashing_);
    }
    if (hashBalanceFactor_ != null) {
      output.writeMessage(5, getHashBalanceFactor());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (hashFunction_ != io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.DEFAULT_HASH.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, hashFunction_);
    }
    if (minimumRingSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMinimumRingSize());
    }
    if (maximumRingSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMaximumRingSize());
    }
    if (useHostnameForHashing_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, useHostnameForHashing_);
    }
    if (hashBalanceFactor_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getHashBalanceFactor());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash other = (io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash) obj;

    if (hashFunction_ != other.hashFunction_) return false;
    if (hasMinimumRingSize() != other.hasMinimumRingSize()) return false;
    if (hasMinimumRingSize()) {
      if (!getMinimumRingSize()
          .equals(other.getMinimumRingSize())) return false;
    }
    if (hasMaximumRingSize() != other.hasMaximumRingSize()) return false;
    if (hasMaximumRingSize()) {
      if (!getMaximumRingSize()
          .equals(other.getMaximumRingSize())) return false;
    }
    if (getUseHostnameForHashing()
        != other.getUseHostnameForHashing()) return false;
    if (hasHashBalanceFactor() != other.hasHashBalanceFactor()) return false;
    if (hasHashBalanceFactor()) {
      if (!getHashBalanceFactor()
          .equals(other.getHashBalanceFactor())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HASH_FUNCTION_FIELD_NUMBER;
    hash = (53 * hash) + hashFunction_;
    if (hasMinimumRingSize()) {
      hash = (37 * hash) + MINIMUM_RING_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMinimumRingSize().hashCode();
    }
    if (hasMaximumRingSize()) {
      hash = (37 * hash) + MAXIMUM_RING_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getMaximumRingSize().hashCode();
    }
    hash = (37 * hash) + USE_HOSTNAME_FOR_HASHING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUseHostnameForHashing());
    if (hasHashBalanceFactor()) {
      hash = (37 * hash) + HASH_BALANCE_FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + getHashBalanceFactor().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This configuration allows the built-in RING_HASH LB policy to be configured via the LB policy
   * extension point. See the :ref:`load balancing architecture overview
   * &lt;arch_overview_load_balancing_types&gt;` for more information.
   * [#extension: envoy.clusters.lb_policy]
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash)
      io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHashOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHashProto.internal_static_envoy_extensions_load_balancing_policies_ring_hash_v3_RingHash_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHashProto.internal_static_envoy_extensions_load_balancing_policies_ring_hash_v3_RingHash_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.class, io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      hashFunction_ = 0;

      if (minimumRingSizeBuilder_ == null) {
        minimumRingSize_ = null;
      } else {
        minimumRingSize_ = null;
        minimumRingSizeBuilder_ = null;
      }
      if (maximumRingSizeBuilder_ == null) {
        maximumRingSize_ = null;
      } else {
        maximumRingSize_ = null;
        maximumRingSizeBuilder_ = null;
      }
      useHostnameForHashing_ = false;

      if (hashBalanceFactorBuilder_ == null) {
        hashBalanceFactor_ = null;
      } else {
        hashBalanceFactor_ = null;
        hashBalanceFactorBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHashProto.internal_static_envoy_extensions_load_balancing_policies_ring_hash_v3_RingHash_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash build() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash buildPartial() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash result = new io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash(this);
      result.hashFunction_ = hashFunction_;
      if (minimumRingSizeBuilder_ == null) {
        result.minimumRingSize_ = minimumRingSize_;
      } else {
        result.minimumRingSize_ = minimumRingSizeBuilder_.build();
      }
      if (maximumRingSizeBuilder_ == null) {
        result.maximumRingSize_ = maximumRingSize_;
      } else {
        result.maximumRingSize_ = maximumRingSizeBuilder_.build();
      }
      result.useHostnameForHashing_ = useHostnameForHashing_;
      if (hashBalanceFactorBuilder_ == null) {
        result.hashBalanceFactor_ = hashBalanceFactor_;
      } else {
        result.hashBalanceFactor_ = hashBalanceFactorBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash) {
        return mergeFrom((io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash other) {
      if (other == io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.getDefaultInstance()) return this;
      if (other.hashFunction_ != 0) {
        setHashFunctionValue(other.getHashFunctionValue());
      }
      if (other.hasMinimumRingSize()) {
        mergeMinimumRingSize(other.getMinimumRingSize());
      }
      if (other.hasMaximumRingSize()) {
        mergeMaximumRingSize(other.getMaximumRingSize());
      }
      if (other.getUseHostnameForHashing() != false) {
        setUseHostnameForHashing(other.getUseHostnameForHashing());
      }
      if (other.hasHashBalanceFactor()) {
        mergeHashBalanceFactor(other.getHashBalanceFactor());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int hashFunction_ = 0;
    /**
     * <pre>
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for hashFunction.
     */
    @java.lang.Override public int getHashFunctionValue() {
      return hashFunction_;
    }
    /**
     * <pre>
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for hashFunction to set.
     * @return This builder for chaining.
     */
    public Builder setHashFunctionValue(int value) {
      
      hashFunction_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
     * @return The hashFunction.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction getHashFunction() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction result = io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.valueOf(hashFunction_);
      return result == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
     * @param value The hashFunction to set.
     * @return This builder for chaining.
     */
    public Builder setHashFunction(io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      hashFunction_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The hash function used to hash hosts onto the ketama ring. The value defaults to
     * :ref:`XX_HASH&lt;envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH&gt;`.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash.HashFunction hash_function = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearHashFunction() {
      
      hashFunction_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt64Value minimumRingSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> minimumRingSizeBuilder_;
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the minimumRingSize field is set.
     */
    public boolean hasMinimumRingSize() {
      return minimumRingSizeBuilder_ != null || minimumRingSize_ != null;
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     * @return The minimumRingSize.
     */
    public com.google.protobuf.UInt64Value getMinimumRingSize() {
      if (minimumRingSizeBuilder_ == null) {
        return minimumRingSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : minimumRingSize_;
      } else {
        return minimumRingSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMinimumRingSize(com.google.protobuf.UInt64Value value) {
      if (minimumRingSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        minimumRingSize_ = value;
        onChanged();
      } else {
        minimumRingSizeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMinimumRingSize(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (minimumRingSizeBuilder_ == null) {
        minimumRingSize_ = builderForValue.build();
        onChanged();
      } else {
        minimumRingSizeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMinimumRingSize(com.google.protobuf.UInt64Value value) {
      if (minimumRingSizeBuilder_ == null) {
        if (minimumRingSize_ != null) {
          minimumRingSize_ =
            com.google.protobuf.UInt64Value.newBuilder(minimumRingSize_).mergeFrom(value).buildPartial();
        } else {
          minimumRingSize_ = value;
        }
        onChanged();
      } else {
        minimumRingSizeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMinimumRingSize() {
      if (minimumRingSizeBuilder_ == null) {
        minimumRingSize_ = null;
        onChanged();
      } else {
        minimumRingSize_ = null;
        minimumRingSizeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt64Value.Builder getMinimumRingSizeBuilder() {
      
      onChanged();
      return getMinimumRingSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getMinimumRingSizeOrBuilder() {
      if (minimumRingSizeBuilder_ != null) {
        return minimumRingSizeBuilder_.getMessageOrBuilder();
      } else {
        return minimumRingSize_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : minimumRingSize_;
      }
    }
    /**
     * <pre>
     * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
     * provided host) the better the request distribution will reflect the desired weights. Defaults
     * to 1024 entries, and limited to 8M entries. See also
     * :ref:`maximum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value minimum_ring_size = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getMinimumRingSizeFieldBuilder() {
      if (minimumRingSizeBuilder_ == null) {
        minimumRingSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getMinimumRingSize(),
                getParentForChildren(),
                isClean());
        minimumRingSize_ = null;
      }
      return minimumRingSizeBuilder_;
    }

    private com.google.protobuf.UInt64Value maximumRingSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> maximumRingSizeBuilder_;
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the maximumRingSize field is set.
     */
    public boolean hasMaximumRingSize() {
      return maximumRingSizeBuilder_ != null || maximumRingSize_ != null;
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     * @return The maximumRingSize.
     */
    public com.google.protobuf.UInt64Value getMaximumRingSize() {
      if (maximumRingSizeBuilder_ == null) {
        return maximumRingSize_ == null ? com.google.protobuf.UInt64Value.getDefaultInstance() : maximumRingSize_;
      } else {
        return maximumRingSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaximumRingSize(com.google.protobuf.UInt64Value value) {
      if (maximumRingSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maximumRingSize_ = value;
        onChanged();
      } else {
        maximumRingSizeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaximumRingSize(
        com.google.protobuf.UInt64Value.Builder builderForValue) {
      if (maximumRingSizeBuilder_ == null) {
        maximumRingSize_ = builderForValue.build();
        onChanged();
      } else {
        maximumRingSizeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaximumRingSize(com.google.protobuf.UInt64Value value) {
      if (maximumRingSizeBuilder_ == null) {
        if (maximumRingSize_ != null) {
          maximumRingSize_ =
            com.google.protobuf.UInt64Value.newBuilder(maximumRingSize_).mergeFrom(value).buildPartial();
        } else {
          maximumRingSize_ = value;
        }
        onChanged();
      } else {
        maximumRingSizeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaximumRingSize() {
      if (maximumRingSizeBuilder_ == null) {
        maximumRingSize_ = null;
        onChanged();
      } else {
        maximumRingSize_ = null;
        maximumRingSizeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt64Value.Builder getMaximumRingSizeBuilder() {
      
      onChanged();
      return getMaximumRingSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt64ValueOrBuilder getMaximumRingSizeOrBuilder() {
      if (maximumRingSizeBuilder_ != null) {
        return maximumRingSizeBuilder_.getMessageOrBuilder();
      } else {
        return maximumRingSize_ == null ?
            com.google.protobuf.UInt64Value.getDefaultInstance() : maximumRingSize_;
      }
    }
    /**
     * <pre>
     * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
     * to further constrain resource use. See also
     * :ref:`minimum_ring_size&lt;envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value maximum_ring_size = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder> 
        getMaximumRingSizeFieldBuilder() {
      if (maximumRingSizeBuilder_ == null) {
        maximumRingSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt64Value, com.google.protobuf.UInt64Value.Builder, com.google.protobuf.UInt64ValueOrBuilder>(
                getMaximumRingSize(),
                getParentForChildren(),
                isClean());
        maximumRingSize_ = null;
      }
      return maximumRingSizeBuilder_;
    }

    private boolean useHostnameForHashing_ ;
    /**
     * <pre>
     * If set to `true`, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     * </pre>
     *
     * <code>bool use_hostname_for_hashing = 4;</code>
     * @return The useHostnameForHashing.
     */
    @java.lang.Override
    public boolean getUseHostnameForHashing() {
      return useHostnameForHashing_;
    }
    /**
     * <pre>
     * If set to `true`, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     * </pre>
     *
     * <code>bool use_hostname_for_hashing = 4;</code>
     * @param value The useHostnameForHashing to set.
     * @return This builder for chaining.
     */
    public Builder setUseHostnameForHashing(boolean value) {
      
      useHostnameForHashing_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set to `true`, the cluster will use hostname instead of the resolved
     * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
     * </pre>
     *
     * <code>bool use_hostname_for_hashing = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearUseHostnameForHashing() {
      
      useHostnameForHashing_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt32Value hashBalanceFactor_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> hashBalanceFactorBuilder_;
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the hashBalanceFactor field is set.
     */
    public boolean hasHashBalanceFactor() {
      return hashBalanceFactorBuilder_ != null || hashBalanceFactor_ != null;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     * @return The hashBalanceFactor.
     */
    public com.google.protobuf.UInt32Value getHashBalanceFactor() {
      if (hashBalanceFactorBuilder_ == null) {
        return hashBalanceFactor_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
      } else {
        return hashBalanceFactorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setHashBalanceFactor(com.google.protobuf.UInt32Value value) {
      if (hashBalanceFactorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hashBalanceFactor_ = value;
        onChanged();
      } else {
        hashBalanceFactorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setHashBalanceFactor(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (hashBalanceFactorBuilder_ == null) {
        hashBalanceFactor_ = builderForValue.build();
        onChanged();
      } else {
        hashBalanceFactorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeHashBalanceFactor(com.google.protobuf.UInt32Value value) {
      if (hashBalanceFactorBuilder_ == null) {
        if (hashBalanceFactor_ != null) {
          hashBalanceFactor_ =
            com.google.protobuf.UInt32Value.newBuilder(hashBalanceFactor_).mergeFrom(value).buildPartial();
        } else {
          hashBalanceFactor_ = value;
        }
        onChanged();
      } else {
        hashBalanceFactorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearHashBalanceFactor() {
      if (hashBalanceFactorBuilder_ == null) {
        hashBalanceFactor_ = null;
        onChanged();
      } else {
        hashBalanceFactor_ = null;
        hashBalanceFactorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getHashBalanceFactorBuilder() {
      
      onChanged();
      return getHashBalanceFactorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getHashBalanceFactorOrBuilder() {
      if (hashBalanceFactorBuilder_ != null) {
        return hashBalanceFactorBuilder_.getMessageOrBuilder();
      } else {
        return hashBalanceFactor_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : hashBalanceFactor_;
      }
    }
    /**
     * <pre>
     * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
     * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
     * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
     * Minimum is 100.
     * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
     * `hash_balance_factor`, requests to any upstream host are capped at `hash_balance_factor/100` times the average number of requests
     * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
     * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
     * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
     * cascading overflow effect when choosing the next host in the ring/table).
     * If weights are specified on the hosts, they are respected.
     * This is an O(N) algorithm, unlike other load balancers. Using a lower `hash_balance_factor` results in more hosts
     * being probed, so use a higher value if you require better performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hash_balance_factor = 5 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getHashBalanceFactorFieldBuilder() {
      if (hashBalanceFactorBuilder_ == null) {
        hashBalanceFactorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getHashBalanceFactor(),
                getParentForChildren(),
                isClean());
        hashBalanceFactor_ = null;
      }
      return hashBalanceFactorBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash)
  private static final io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash();
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RingHash>
      PARSER = new com.google.protobuf.AbstractParser<RingHash>() {
    @java.lang.Override
    public RingHash parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RingHash(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RingHash> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RingHash> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

