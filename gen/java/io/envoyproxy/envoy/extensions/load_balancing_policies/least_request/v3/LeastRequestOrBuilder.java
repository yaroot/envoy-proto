// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/load_balancing_policies/least_request/v3/least_request.proto

package io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3;

public interface LeastRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the choiceCount field is set.
   */
  boolean hasChoiceCount();
  /**
   * <pre>
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
   * @return The choiceCount.
   */
  com.google.protobuf.UInt32Value getChoiceCount();
  /**
   * <pre>
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getChoiceCountOrBuilder();

  /**
   * <pre>
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   * `active_request_bias` must be greater than or equal to 0.0.
   * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
   * @return Whether the activeRequestBias field is set.
   */
  boolean hasActiveRequestBias();
  /**
   * <pre>
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   * `active_request_bias` must be greater than or equal to 0.0.
   * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
   * @return The activeRequestBias.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeDouble getActiveRequestBias();
  /**
   * <pre>
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   * `active_request_bias` must be greater than or equal to 0.0.
   * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getActiveRequestBiasOrBuilder();

  /**
   * <pre>
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
   * @return Whether the slowStartConfig field is set.
   */
  boolean hasSlowStartConfig();
  /**
   * <pre>
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
   * @return The slowStartConfig.
   */
  io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig getSlowStartConfig();
  /**
   * <pre>
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
   */
  io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder getSlowStartConfigOrBuilder();

  /**
   * <pre>
   * Configuration for local zone aware load balancing or locality weighted load balancing.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
   * @return Whether the localityLbConfig field is set.
   */
  boolean hasLocalityLbConfig();
  /**
   * <pre>
   * Configuration for local zone aware load balancing or locality weighted load balancing.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
   * @return The localityLbConfig.
   */
  io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig getLocalityLbConfig();
  /**
   * <pre>
   * Configuration for local zone aware load balancing or locality weighted load balancing.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
   */
  io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfigOrBuilder getLocalityLbConfigOrBuilder();
}
