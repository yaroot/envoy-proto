// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/load_balancing_policies/least_request/v3/least_request.proto

package io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3;

/**
 * <pre>
 * This configuration allows the built-in LEAST_REQUEST LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * &lt;arch_overview_load_balancing_types&gt;` for more information.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest}
 */
public final class LeastRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)
    LeastRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LeastRequest.newBuilder() to construct.
  private LeastRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LeastRequest() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LeastRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequestProto.internal_static_envoy_extensions_load_balancing_policies_least_request_v3_LeastRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequestProto.internal_static_envoy_extensions_load_balancing_policies_least_request_v3_LeastRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.class, io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.Builder.class);
  }

  public static final int CHOICE_COUNT_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value choiceCount_;
  /**
   * <pre>
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the choiceCount field is set.
   */
  @java.lang.Override
  public boolean hasChoiceCount() {
    return choiceCount_ != null;
  }
  /**
   * <pre>
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
   * @return The choiceCount.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getChoiceCount() {
    return choiceCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : choiceCount_;
  }
  /**
   * <pre>
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getChoiceCountOrBuilder() {
    return choiceCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : choiceCount_;
  }

  public static final int ACTIVE_REQUEST_BIAS_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.core.v3.RuntimeDouble activeRequestBias_;
  /**
   * <pre>
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   * `active_request_bias` must be greater than or equal to 0.0.
   * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
   * @return Whether the activeRequestBias field is set.
   */
  @java.lang.Override
  public boolean hasActiveRequestBias() {
    return activeRequestBias_ != null;
  }
  /**
   * <pre>
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   * `active_request_bias` must be greater than or equal to 0.0.
   * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
   * @return The activeRequestBias.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeDouble getActiveRequestBias() {
    return activeRequestBias_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : activeRequestBias_;
  }
  /**
   * <pre>
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   * `active_request_bias` must be greater than or equal to 0.0.
   * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getActiveRequestBiasOrBuilder() {
    return activeRequestBias_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : activeRequestBias_;
  }

  public static final int SLOW_START_CONFIG_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slowStartConfig_;
  /**
   * <pre>
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
   * @return Whether the slowStartConfig field is set.
   */
  @java.lang.Override
  public boolean hasSlowStartConfig() {
    return slowStartConfig_ != null;
  }
  /**
   * <pre>
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
   * @return The slowStartConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig getSlowStartConfig() {
    return slowStartConfig_ == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance() : slowStartConfig_;
  }
  /**
   * <pre>
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder getSlowStartConfigOrBuilder() {
    return slowStartConfig_ == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance() : slowStartConfig_;
  }

  public static final int LOCALITY_LB_CONFIG_FIELD_NUMBER = 4;
  private io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig localityLbConfig_;
  /**
   * <pre>
   * Configuration for local zone aware load balancing or locality weighted load balancing.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
   * @return Whether the localityLbConfig field is set.
   */
  @java.lang.Override
  public boolean hasLocalityLbConfig() {
    return localityLbConfig_ != null;
  }
  /**
   * <pre>
   * Configuration for local zone aware load balancing or locality weighted load balancing.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
   * @return The localityLbConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig getLocalityLbConfig() {
    return localityLbConfig_ == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.getDefaultInstance() : localityLbConfig_;
  }
  /**
   * <pre>
   * Configuration for local zone aware load balancing or locality weighted load balancing.
   * </pre>
   *
   * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfigOrBuilder getLocalityLbConfigOrBuilder() {
    return localityLbConfig_ == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.getDefaultInstance() : localityLbConfig_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (choiceCount_ != null) {
      output.writeMessage(1, getChoiceCount());
    }
    if (activeRequestBias_ != null) {
      output.writeMessage(2, getActiveRequestBias());
    }
    if (slowStartConfig_ != null) {
      output.writeMessage(3, getSlowStartConfig());
    }
    if (localityLbConfig_ != null) {
      output.writeMessage(4, getLocalityLbConfig());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (choiceCount_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getChoiceCount());
    }
    if (activeRequestBias_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getActiveRequestBias());
    }
    if (slowStartConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getSlowStartConfig());
    }
    if (localityLbConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getLocalityLbConfig());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest other = (io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest) obj;

    if (hasChoiceCount() != other.hasChoiceCount()) return false;
    if (hasChoiceCount()) {
      if (!getChoiceCount()
          .equals(other.getChoiceCount())) return false;
    }
    if (hasActiveRequestBias() != other.hasActiveRequestBias()) return false;
    if (hasActiveRequestBias()) {
      if (!getActiveRequestBias()
          .equals(other.getActiveRequestBias())) return false;
    }
    if (hasSlowStartConfig() != other.hasSlowStartConfig()) return false;
    if (hasSlowStartConfig()) {
      if (!getSlowStartConfig()
          .equals(other.getSlowStartConfig())) return false;
    }
    if (hasLocalityLbConfig() != other.hasLocalityLbConfig()) return false;
    if (hasLocalityLbConfig()) {
      if (!getLocalityLbConfig()
          .equals(other.getLocalityLbConfig())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasChoiceCount()) {
      hash = (37 * hash) + CHOICE_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getChoiceCount().hashCode();
    }
    if (hasActiveRequestBias()) {
      hash = (37 * hash) + ACTIVE_REQUEST_BIAS_FIELD_NUMBER;
      hash = (53 * hash) + getActiveRequestBias().hashCode();
    }
    if (hasSlowStartConfig()) {
      hash = (37 * hash) + SLOW_START_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getSlowStartConfig().hashCode();
    }
    if (hasLocalityLbConfig()) {
      hash = (37 * hash) + LOCALITY_LB_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getLocalityLbConfig().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This configuration allows the built-in LEAST_REQUEST LB policy to be configured via the LB policy
   * extension point. See the :ref:`load balancing architecture overview
   * &lt;arch_overview_load_balancing_types&gt;` for more information.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)
      io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequestProto.internal_static_envoy_extensions_load_balancing_policies_least_request_v3_LeastRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequestProto.internal_static_envoy_extensions_load_balancing_policies_least_request_v3_LeastRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.class, io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      choiceCount_ = null;
      if (choiceCountBuilder_ != null) {
        choiceCountBuilder_.dispose();
        choiceCountBuilder_ = null;
      }
      activeRequestBias_ = null;
      if (activeRequestBiasBuilder_ != null) {
        activeRequestBiasBuilder_.dispose();
        activeRequestBiasBuilder_ = null;
      }
      slowStartConfig_ = null;
      if (slowStartConfigBuilder_ != null) {
        slowStartConfigBuilder_.dispose();
        slowStartConfigBuilder_ = null;
      }
      localityLbConfig_ = null;
      if (localityLbConfigBuilder_ != null) {
        localityLbConfigBuilder_.dispose();
        localityLbConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequestProto.internal_static_envoy_extensions_load_balancing_policies_least_request_v3_LeastRequest_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest build() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest buildPartial() {
      io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest result = new io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.choiceCount_ = choiceCountBuilder_ == null
            ? choiceCount_
            : choiceCountBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.activeRequestBias_ = activeRequestBiasBuilder_ == null
            ? activeRequestBias_
            : activeRequestBiasBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.slowStartConfig_ = slowStartConfigBuilder_ == null
            ? slowStartConfig_
            : slowStartConfigBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.localityLbConfig_ = localityLbConfigBuilder_ == null
            ? localityLbConfig_
            : localityLbConfigBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest) {
        return mergeFrom((io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest other) {
      if (other == io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest.getDefaultInstance()) return this;
      if (other.hasChoiceCount()) {
        mergeChoiceCount(other.getChoiceCount());
      }
      if (other.hasActiveRequestBias()) {
        mergeActiveRequestBias(other.getActiveRequestBias());
      }
      if (other.hasSlowStartConfig()) {
        mergeSlowStartConfig(other.getSlowStartConfig());
      }
      if (other.hasLocalityLbConfig()) {
        mergeLocalityLbConfig(other.getLocalityLbConfig());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getChoiceCountFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getActiveRequestBiasFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getSlowStartConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getLocalityLbConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.UInt32Value choiceCount_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> choiceCountBuilder_;
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the choiceCount field is set.
     */
    public boolean hasChoiceCount() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     * @return The choiceCount.
     */
    public com.google.protobuf.UInt32Value getChoiceCount() {
      if (choiceCountBuilder_ == null) {
        return choiceCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : choiceCount_;
      } else {
        return choiceCountBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setChoiceCount(com.google.protobuf.UInt32Value value) {
      if (choiceCountBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        choiceCount_ = value;
      } else {
        choiceCountBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setChoiceCount(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (choiceCountBuilder_ == null) {
        choiceCount_ = builderForValue.build();
      } else {
        choiceCountBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeChoiceCount(com.google.protobuf.UInt32Value value) {
      if (choiceCountBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          choiceCount_ != null &&
          choiceCount_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getChoiceCountBuilder().mergeFrom(value);
        } else {
          choiceCount_ = value;
        }
      } else {
        choiceCountBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearChoiceCount() {
      bitField0_ = (bitField0_ & ~0x00000001);
      choiceCount_ = null;
      if (choiceCountBuilder_ != null) {
        choiceCountBuilder_.dispose();
        choiceCountBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getChoiceCountBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getChoiceCountFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getChoiceCountOrBuilder() {
      if (choiceCountBuilder_ != null) {
        return choiceCountBuilder_.getMessageOrBuilder();
      } else {
        return choiceCount_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : choiceCount_;
      }
    }
    /**
     * <pre>
     * The number of random healthy hosts from which the host with the fewest active requests will
     * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value choice_count = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getChoiceCountFieldBuilder() {
      if (choiceCountBuilder_ == null) {
        choiceCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getChoiceCount(),
                getParentForChildren(),
                isClean());
        choiceCount_ = null;
      }
      return choiceCountBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeDouble activeRequestBias_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeDouble, io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder> activeRequestBiasBuilder_;
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     * @return Whether the activeRequestBias field is set.
     */
    public boolean hasActiveRequestBias() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     * @return The activeRequestBias.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeDouble getActiveRequestBias() {
      if (activeRequestBiasBuilder_ == null) {
        return activeRequestBias_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : activeRequestBias_;
      } else {
        return activeRequestBiasBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    public Builder setActiveRequestBias(io.envoyproxy.envoy.config.core.v3.RuntimeDouble value) {
      if (activeRequestBiasBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        activeRequestBias_ = value;
      } else {
        activeRequestBiasBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    public Builder setActiveRequestBias(
        io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder builderForValue) {
      if (activeRequestBiasBuilder_ == null) {
        activeRequestBias_ = builderForValue.build();
      } else {
        activeRequestBiasBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    public Builder mergeActiveRequestBias(io.envoyproxy.envoy.config.core.v3.RuntimeDouble value) {
      if (activeRequestBiasBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          activeRequestBias_ != null &&
          activeRequestBias_ != io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance()) {
          getActiveRequestBiasBuilder().mergeFrom(value);
        } else {
          activeRequestBias_ = value;
        }
      } else {
        activeRequestBiasBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    public Builder clearActiveRequestBias() {
      bitField0_ = (bitField0_ & ~0x00000002);
      activeRequestBias_ = null;
      if (activeRequestBiasBuilder_ != null) {
        activeRequestBiasBuilder_.dispose();
        activeRequestBiasBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder getActiveRequestBiasBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getActiveRequestBiasFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder getActiveRequestBiasOrBuilder() {
      if (activeRequestBiasBuilder_ != null) {
        return activeRequestBiasBuilder_.getMessageOrBuilder();
      } else {
        return activeRequestBias_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeDouble.getDefaultInstance() : activeRequestBias_;
      }
    }
    /**
     * <pre>
     * The following formula is used to calculate the dynamic weights when hosts have different load
     * balancing weights:
     * `weight = load_balancing_weight / (active_requests + 1)^active_request_bias`
     * The larger the active request bias is, the more aggressively active requests will lower the
     * effective weight when all host weights are not equal.
     * `active_request_bias` must be greater than or equal to 0.0.
     * When `active_request_bias == 0.0` the Least Request Load Balancer doesn't consider the number
     * of active requests at the time it picks a host and behaves like the Round Robin Load
     * Balancer.
     * When `active_request_bias &gt; 0.0` the Least Request Load Balancer scales the load balancing
     * weight by the number of active requests at the time it does a pick.
     * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
     * host sets changes, e.g., whenever there is a host membership update or a host load balancing
     * weight change.
     * .. note::
     *   This setting only takes effect if all host weights are not equal.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeDouble active_request_bias = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeDouble, io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder> 
        getActiveRequestBiasFieldBuilder() {
      if (activeRequestBiasBuilder_ == null) {
        activeRequestBiasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeDouble, io.envoyproxy.envoy.config.core.v3.RuntimeDouble.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeDoubleOrBuilder>(
                getActiveRequestBias(),
                getParentForChildren(),
                isClean());
        activeRequestBias_ = null;
      }
      return activeRequestBiasBuilder_;
    }

    private io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slowStartConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder> slowStartConfigBuilder_;
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     * @return Whether the slowStartConfig field is set.
     */
    public boolean hasSlowStartConfig() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     * @return The slowStartConfig.
     */
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig getSlowStartConfig() {
      if (slowStartConfigBuilder_ == null) {
        return slowStartConfig_ == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance() : slowStartConfig_;
      } else {
        return slowStartConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    public Builder setSlowStartConfig(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig value) {
      if (slowStartConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        slowStartConfig_ = value;
      } else {
        slowStartConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    public Builder setSlowStartConfig(
        io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder builderForValue) {
      if (slowStartConfigBuilder_ == null) {
        slowStartConfig_ = builderForValue.build();
      } else {
        slowStartConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    public Builder mergeSlowStartConfig(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig value) {
      if (slowStartConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          slowStartConfig_ != null &&
          slowStartConfig_ != io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance()) {
          getSlowStartConfigBuilder().mergeFrom(value);
        } else {
          slowStartConfig_ = value;
        }
      } else {
        slowStartConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    public Builder clearSlowStartConfig() {
      bitField0_ = (bitField0_ & ~0x00000004);
      slowStartConfig_ = null;
      if (slowStartConfigBuilder_ != null) {
        slowStartConfigBuilder_.dispose();
        slowStartConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder getSlowStartConfigBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getSlowStartConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder getSlowStartConfigOrBuilder() {
      if (slowStartConfigBuilder_ != null) {
        return slowStartConfigBuilder_.getMessageOrBuilder();
      } else {
        return slowStartConfig_ == null ?
            io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.getDefaultInstance() : slowStartConfig_;
      }
    }
    /**
     * <pre>
     * Configuration for slow start mode.
     * If this configuration is not set, slow start will not be not enabled.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig slow_start_config = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder> 
        getSlowStartConfigFieldBuilder() {
      if (slowStartConfigBuilder_ == null) {
        slowStartConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfig.Builder, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.SlowStartConfigOrBuilder>(
                getSlowStartConfig(),
                getParentForChildren(),
                isClean());
        slowStartConfig_ = null;
      }
      return slowStartConfigBuilder_;
    }

    private io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig localityLbConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.Builder, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfigOrBuilder> localityLbConfigBuilder_;
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     * @return Whether the localityLbConfig field is set.
     */
    public boolean hasLocalityLbConfig() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     * @return The localityLbConfig.
     */
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig getLocalityLbConfig() {
      if (localityLbConfigBuilder_ == null) {
        return localityLbConfig_ == null ? io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.getDefaultInstance() : localityLbConfig_;
      } else {
        return localityLbConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    public Builder setLocalityLbConfig(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig value) {
      if (localityLbConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        localityLbConfig_ = value;
      } else {
        localityLbConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    public Builder setLocalityLbConfig(
        io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.Builder builderForValue) {
      if (localityLbConfigBuilder_ == null) {
        localityLbConfig_ = builderForValue.build();
      } else {
        localityLbConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    public Builder mergeLocalityLbConfig(io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig value) {
      if (localityLbConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          localityLbConfig_ != null &&
          localityLbConfig_ != io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.getDefaultInstance()) {
          getLocalityLbConfigBuilder().mergeFrom(value);
        } else {
          localityLbConfig_ = value;
        }
      } else {
        localityLbConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    public Builder clearLocalityLbConfig() {
      bitField0_ = (bitField0_ & ~0x00000008);
      localityLbConfig_ = null;
      if (localityLbConfigBuilder_ != null) {
        localityLbConfigBuilder_.dispose();
        localityLbConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.Builder getLocalityLbConfigBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getLocalityLbConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    public io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfigOrBuilder getLocalityLbConfigOrBuilder() {
      if (localityLbConfigBuilder_ != null) {
        return localityLbConfigBuilder_.getMessageOrBuilder();
      } else {
        return localityLbConfig_ == null ?
            io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.getDefaultInstance() : localityLbConfig_;
      }
    }
    /**
     * <pre>
     * Configuration for local zone aware load balancing or locality weighted load balancing.
     * </pre>
     *
     * <code>.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig locality_lb_config = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.Builder, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfigOrBuilder> 
        getLocalityLbConfigFieldBuilder() {
      if (localityLbConfigBuilder_ == null) {
        localityLbConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfig.Builder, io.envoyproxy.envoy.extensions.load_balancing_policies.common.v3.LocalityLbConfigOrBuilder>(
                getLocalityLbConfig(),
                getParentForChildren(),
                isClean());
        localityLbConfig_ = null;
      }
      return localityLbConfigBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest)
  private static final io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest();
  }

  public static io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LeastRequest>
      PARSER = new com.google.protobuf.AbstractParser<LeastRequest>() {
    @java.lang.Override
    public LeastRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<LeastRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LeastRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

