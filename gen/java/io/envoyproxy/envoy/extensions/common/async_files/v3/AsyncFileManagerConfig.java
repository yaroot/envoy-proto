// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/common/async_files/v3/async_file_manager.proto

package io.envoyproxy.envoy.extensions.common.async_files.v3;

/**
 * <pre>
 * Configuration to instantiate or select a singleton ``AsyncFileManager``.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.common.async_files.v3.AsyncFileManagerConfig}
 */
public final class AsyncFileManagerConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)
    AsyncFileManagerConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AsyncFileManagerConfig.newBuilder() to construct.
  private AsyncFileManagerConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AsyncFileManagerConfig() {
    id_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AsyncFileManagerConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AsyncFileManagerConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            id_ = s;
            break;
          }
          case 18: {
            io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder subBuilder = null;
            if (managerTypeCase_ == 2) {
              subBuilder = ((io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_).toBuilder();
            }
            managerType_ =
                input.readMessage(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_);
              managerType_ = subBuilder.buildPartial();
            }
            managerTypeCase_ = 2;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.class, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder.class);
  }

  public interface ThreadPoolOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The number of threads to use. If unset or zero, will default to the number
     * of concurrent threads the hardware supports. This default is subject to
     * change if performance analysis suggests it.
     * </pre>
     *
     * <code>uint32 thread_count = 1;</code>
     * @return The threadCount.
     */
    int getThreadCount();
  }
  /**
   * Protobuf type {@code envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool}
   */
  public static final class ThreadPool extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)
      ThreadPoolOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ThreadPool.newBuilder() to construct.
    private ThreadPool(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ThreadPool() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ThreadPool();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ThreadPool(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              threadCount_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_ThreadPool_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_ThreadPool_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.class, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder.class);
    }

    public static final int THREAD_COUNT_FIELD_NUMBER = 1;
    private int threadCount_;
    /**
     * <pre>
     * The number of threads to use. If unset or zero, will default to the number
     * of concurrent threads the hardware supports. This default is subject to
     * change if performance analysis suggests it.
     * </pre>
     *
     * <code>uint32 thread_count = 1;</code>
     * @return The threadCount.
     */
    @java.lang.Override
    public int getThreadCount() {
      return threadCount_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (threadCount_ != 0) {
        output.writeUInt32(1, threadCount_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (threadCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, threadCount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool other = (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) obj;

      if (getThreadCount()
          != other.getThreadCount()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + THREAD_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getThreadCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_ThreadPool_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_ThreadPool_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.class, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        threadCount_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_ThreadPool_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool build() {
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool buildPartial() {
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool result = new io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool(this);
        result.threadCount_ = threadCount_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) {
          return mergeFrom((io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool other) {
        if (other == io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance()) return this;
        if (other.getThreadCount() != 0) {
          setThreadCount(other.getThreadCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int threadCount_ ;
      /**
       * <pre>
       * The number of threads to use. If unset or zero, will default to the number
       * of concurrent threads the hardware supports. This default is subject to
       * change if performance analysis suggests it.
       * </pre>
       *
       * <code>uint32 thread_count = 1;</code>
       * @return The threadCount.
       */
      @java.lang.Override
      public int getThreadCount() {
        return threadCount_;
      }
      /**
       * <pre>
       * The number of threads to use. If unset or zero, will default to the number
       * of concurrent threads the hardware supports. This default is subject to
       * change if performance analysis suggests it.
       * </pre>
       *
       * <code>uint32 thread_count = 1;</code>
       * @param value The threadCount to set.
       * @return This builder for chaining.
       */
      public Builder setThreadCount(int value) {
        
        threadCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of threads to use. If unset or zero, will default to the number
       * of concurrent threads the hardware supports. This default is subject to
       * change if performance analysis suggests it.
       * </pre>
       *
       * <code>uint32 thread_count = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearThreadCount() {
        
        threadCount_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool)
    private static final io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool();
    }

    public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ThreadPool>
        PARSER = new com.google.protobuf.AbstractParser<ThreadPool>() {
      @java.lang.Override
      public ThreadPool parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThreadPool(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ThreadPool> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ThreadPool> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int managerTypeCase_ = 0;
  private java.lang.Object managerType_;
  public enum ManagerTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    THREAD_POOL(2),
    MANAGERTYPE_NOT_SET(0);
    private final int value;
    private ManagerTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ManagerTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ManagerTypeCase forNumber(int value) {
      switch (value) {
        case 2: return THREAD_POOL;
        case 0: return MANAGERTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ManagerTypeCase
  getManagerTypeCase() {
    return ManagerTypeCase.forNumber(
        managerTypeCase_);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object id_;
  /**
   * <pre>
   * An optional identifier for the manager. An empty string is a valid identifier
   * for a common, default ``AsyncFileManager``.
   * Reusing the same id with different configurations in the same envoy instance
   * is an error.
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The id.
   */
  @java.lang.Override
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * An optional identifier for the manager. An empty string is a valid identifier
   * for a common, default ``AsyncFileManager``.
   * Reusing the same id with different configurations in the same envoy instance
   * is an error.
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The bytes for id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int THREAD_POOL_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Configuration for a thread-pool based async file manager.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
   * @return Whether the threadPool field is set.
   */
  @java.lang.Override
  public boolean hasThreadPool() {
    return managerTypeCase_ == 2;
  }
  /**
   * <pre>
   * Configuration for a thread-pool based async file manager.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
   * @return The threadPool.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool getThreadPool() {
    if (managerTypeCase_ == 2) {
       return (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_;
    }
    return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
  }
  /**
   * <pre>
   * Configuration for a thread-pool based async file manager.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder getThreadPoolOrBuilder() {
    if (managerTypeCase_ == 2) {
       return (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_;
    }
    return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
    }
    if (managerTypeCase_ == 2) {
      output.writeMessage(2, (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
    }
    if (managerTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig other = (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig) obj;

    if (!getId()
        .equals(other.getId())) return false;
    if (!getManagerTypeCase().equals(other.getManagerTypeCase())) return false;
    switch (managerTypeCase_) {
      case 2:
        if (!getThreadPool()
            .equals(other.getThreadPool())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    switch (managerTypeCase_) {
      case 2:
        hash = (37 * hash) + THREAD_POOL_FIELD_NUMBER;
        hash = (53 * hash) + getThreadPool().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration to instantiate or select a singleton ``AsyncFileManager``.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.common.async_files.v3.AsyncFileManagerConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)
      io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.class, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      id_ = "";

      managerTypeCase_ = 0;
      managerType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerProto.internal_static_envoy_extensions_common_async_files_v3_AsyncFileManagerConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig build() {
      io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig buildPartial() {
      io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig result = new io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig(this);
      result.id_ = id_;
      if (managerTypeCase_ == 2) {
        if (threadPoolBuilder_ == null) {
          result.managerType_ = managerType_;
        } else {
          result.managerType_ = threadPoolBuilder_.build();
        }
      }
      result.managerTypeCase_ = managerTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig other) {
      if (other == io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.getDefaultInstance()) return this;
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        onChanged();
      }
      switch (other.getManagerTypeCase()) {
        case THREAD_POOL: {
          mergeThreadPool(other.getThreadPool());
          break;
        }
        case MANAGERTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int managerTypeCase_ = 0;
    private java.lang.Object managerType_;
    public ManagerTypeCase
        getManagerTypeCase() {
      return ManagerTypeCase.forNumber(
          managerTypeCase_);
    }

    public Builder clearManagerType() {
      managerTypeCase_ = 0;
      managerType_ = null;
      onChanged();
      return this;
    }


    private java.lang.Object id_ = "";
    /**
     * <pre>
     * An optional identifier for the manager. An empty string is a valid identifier
     * for a common, default ``AsyncFileManager``.
     * Reusing the same id with different configurations in the same envoy instance
     * is an error.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * An optional identifier for the manager. An empty string is a valid identifier
     * for a common, default ``AsyncFileManager``.
     * Reusing the same id with different configurations in the same envoy instance
     * is an error.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * An optional identifier for the manager. An empty string is a valid identifier
     * for a common, default ``AsyncFileManager``.
     * Reusing the same id with different configurations in the same envoy instance
     * is an error.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional identifier for the manager. An empty string is a valid identifier
     * for a common, default ``AsyncFileManager``.
     * Reusing the same id with different configurations in the same envoy instance
     * is an error.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      
      id_ = getDefaultInstance().getId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional identifier for the manager. An empty string is a valid identifier
     * for a common, default ``AsyncFileManager``.
     * Reusing the same id with different configurations in the same envoy instance
     * is an error.
     * </pre>
     *
     * <code>string id = 1;</code>
     * @param value The bytes for id to set.
     * @return This builder for chaining.
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      id_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder> threadPoolBuilder_;
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     * @return Whether the threadPool field is set.
     */
    @java.lang.Override
    public boolean hasThreadPool() {
      return managerTypeCase_ == 2;
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     * @return The threadPool.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool getThreadPool() {
      if (threadPoolBuilder_ == null) {
        if (managerTypeCase_ == 2) {
          return (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_;
        }
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
      } else {
        if (managerTypeCase_ == 2) {
          return threadPoolBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    public Builder setThreadPool(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool value) {
      if (threadPoolBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        managerType_ = value;
        onChanged();
      } else {
        threadPoolBuilder_.setMessage(value);
      }
      managerTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    public Builder setThreadPool(
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder builderForValue) {
      if (threadPoolBuilder_ == null) {
        managerType_ = builderForValue.build();
        onChanged();
      } else {
        threadPoolBuilder_.setMessage(builderForValue.build());
      }
      managerTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    public Builder mergeThreadPool(io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool value) {
      if (threadPoolBuilder_ == null) {
        if (managerTypeCase_ == 2 &&
            managerType_ != io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance()) {
          managerType_ = io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.newBuilder((io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_)
              .mergeFrom(value).buildPartial();
        } else {
          managerType_ = value;
        }
        onChanged();
      } else {
        if (managerTypeCase_ == 2) {
          threadPoolBuilder_.mergeFrom(value);
        } else {
          threadPoolBuilder_.setMessage(value);
        }
      }
      managerTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    public Builder clearThreadPool() {
      if (threadPoolBuilder_ == null) {
        if (managerTypeCase_ == 2) {
          managerTypeCase_ = 0;
          managerType_ = null;
          onChanged();
        }
      } else {
        if (managerTypeCase_ == 2) {
          managerTypeCase_ = 0;
          managerType_ = null;
        }
        threadPoolBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder getThreadPoolBuilder() {
      return getThreadPoolFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder getThreadPoolOrBuilder() {
      if ((managerTypeCase_ == 2) && (threadPoolBuilder_ != null)) {
        return threadPoolBuilder_.getMessageOrBuilder();
      } else {
        if (managerTypeCase_ == 2) {
          return (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_;
        }
        return io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Configuration for a thread-pool based async file manager.
     * </pre>
     *
     * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder> 
        getThreadPoolFieldBuilder() {
      if (threadPoolBuilder_ == null) {
        if (!(managerTypeCase_ == 2)) {
          managerType_ = io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.getDefaultInstance();
        }
        threadPoolBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool.Builder, io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder>(
                (io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool) managerType_,
                getParentForChildren(),
                isClean());
        managerType_ = null;
      }
      managerTypeCase_ = 2;
      onChanged();;
      return threadPoolBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)
  private static final io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig();
  }

  public static io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AsyncFileManagerConfig>
      PARSER = new com.google.protobuf.AbstractParser<AsyncFileManagerConfig>() {
    @java.lang.Override
    public AsyncFileManagerConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AsyncFileManagerConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AsyncFileManagerConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AsyncFileManagerConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

