// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/common/async_files/v3/async_file_manager.proto

package io.envoyproxy.envoy.extensions.common.async_files.v3;

public interface AsyncFileManagerConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.common.async_files.v3.AsyncFileManagerConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * An optional identifier for the manager. An empty string is a valid identifier
   * for a common, default ``AsyncFileManager``.
   * Reusing the same id with different configurations in the same envoy instance
   * is an error.
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * An optional identifier for the manager. An empty string is a valid identifier
   * for a common, default ``AsyncFileManager``.
   * Reusing the same id with different configurations in the same envoy instance
   * is an error.
   * </pre>
   *
   * <code>string id = 1;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * Configuration for a thread-pool based async file manager.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
   * @return Whether the threadPool field is set.
   */
  boolean hasThreadPool();
  /**
   * <pre>
   * Configuration for a thread-pool based async file manager.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
   * @return The threadPool.
   */
  io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool getThreadPool();
  /**
   * <pre>
   * Configuration for a thread-pool based async file manager.
   * </pre>
   *
   * <code>.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool thread_pool = 2;</code>
   */
  io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolOrBuilder getThreadPoolOrBuilder();

  public io.envoyproxy.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ManagerTypeCase getManagerTypeCase();
}
