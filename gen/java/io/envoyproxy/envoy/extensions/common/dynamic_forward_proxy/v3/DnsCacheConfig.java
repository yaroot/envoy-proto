// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto

package io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3;

/**
 * <pre>
 * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
 * &lt;arch_overview_http_dynamic_forward_proxy&gt;` for more information.
 * [#next-free-field: 15]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig}
 */
public final class DnsCacheConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
    DnsCacheConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DnsCacheConfig.newBuilder() to construct.
  private DnsCacheConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DnsCacheConfig() {
    name_ = "";
    dnsLookupFamily_ = 0;
    preresolveHostnames_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DnsCacheConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.class, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object name_ = "";
  /**
   * <pre>
   * The name of the cache. Multiple named caches allow independent dynamic forward proxy
   * configurations to operate within a single Envoy process using different configurations. All
   * configurations with the same name *must* otherwise have the same settings when referenced
   * from different configuration components. Configuration will fail to load if this is not
   * the case.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the cache. Multiple named caches allow independent dynamic forward proxy
   * configurations to operate within a single Envoy process using different configurations. All
   * configurations with the same name *must* otherwise have the same settings when referenced
   * from different configuration components. Configuration will fail to load if this is not
   * the case.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DNS_LOOKUP_FAMILY_FIELD_NUMBER = 2;
  private int dnsLookupFamily_ = 0;
  /**
   * <pre>
   * The DNS lookup family to use during resolution.
   * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
   * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
   * then configures a host to have a primary and fall back address. With this, we could very
   * likely build a "happy eyeballs" connection pool which would race the primary / fall back
   * address and return the one that wins. This same method could potentially also be used for
   * QUIC to TCP fall back.]
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for dnsLookupFamily.
   */
  @java.lang.Override public int getDnsLookupFamilyValue() {
    return dnsLookupFamily_;
  }
  /**
   * <pre>
   * The DNS lookup family to use during resolution.
   * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
   * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
   * then configures a host to have a primary and fall back address. With this, we could very
   * likely build a "happy eyeballs" connection pool which would race the primary / fall back
   * address and return the one that wins. This same method could potentially also be used for
   * QUIC to TCP fall back.]
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
   * @return The dnsLookupFamily.
   */
  @java.lang.Override public io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily getDnsLookupFamily() {
    io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily result = io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.forNumber(dnsLookupFamily_);
    return result == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.UNRECOGNIZED : result;
  }

  public static final int DNS_REFRESH_RATE_FIELD_NUMBER = 3;
  private com.google.protobuf.Duration dnsRefreshRate_;
  /**
   * <pre>
   * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
   * at a minimum of ``dns_min_refresh_rate``.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the dnsRefreshRate field is set.
   */
  @java.lang.Override
  public boolean hasDnsRefreshRate() {
    return dnsRefreshRate_ != null;
  }
  /**
   * <pre>
   * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
   * at a minimum of ``dns_min_refresh_rate``.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
   * @return The dnsRefreshRate.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getDnsRefreshRate() {
    return dnsRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
  }
  /**
   * <pre>
   * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
   * at a minimum of ``dns_min_refresh_rate``.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getDnsRefreshRateOrBuilder() {
    return dnsRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
  }

  public static final int DNS_MIN_REFRESH_RATE_FIELD_NUMBER = 14;
  private com.google.protobuf.Duration dnsMinRefreshRate_;
  /**
   * <pre>
   * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
   * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
   * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
   * @return Whether the dnsMinRefreshRate field is set.
   */
  @java.lang.Override
  public boolean hasDnsMinRefreshRate() {
    return dnsMinRefreshRate_ != null;
  }
  /**
   * <pre>
   * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
   * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
   * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
   * @return The dnsMinRefreshRate.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getDnsMinRefreshRate() {
    return dnsMinRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsMinRefreshRate_;
  }
  /**
   * <pre>
   * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
   * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
   * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getDnsMinRefreshRateOrBuilder() {
    return dnsMinRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsMinRefreshRate_;
  }

  public static final int HOST_TTL_FIELD_NUMBER = 4;
  private com.google.protobuf.Duration hostTtl_;
  /**
   * <pre>
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   * .. note:
   *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *  .. note:
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   * </pre>
   *
   * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the hostTtl field is set.
   */
  @java.lang.Override
  public boolean hasHostTtl() {
    return hostTtl_ != null;
  }
  /**
   * <pre>
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   * .. note:
   *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *  .. note:
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   * </pre>
   *
   * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
   * @return The hostTtl.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getHostTtl() {
    return hostTtl_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
  }
  /**
   * <pre>
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   * .. note:
   *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *  .. note:
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   * </pre>
   *
   * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getHostTtlOrBuilder() {
    return hostTtl_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
  }

  public static final int MAX_HOSTS_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt32Value maxHosts_;
  /**
   * <pre>
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the maxHosts field is set.
   */
  @java.lang.Override
  public boolean hasMaxHosts() {
    return maxHosts_ != null;
  }
  /**
   * <pre>
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
   * @return The maxHosts.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxHosts() {
    return maxHosts_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
  }
  /**
   * <pre>
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxHostsOrBuilder() {
    return maxHosts_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
  }

  public static final int DNS_FAILURE_REFRESH_RATE_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate dnsFailureRefreshRate_;
  /**
   * <pre>
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
   * @return Whether the dnsFailureRefreshRate field is set.
   */
  @java.lang.Override
  public boolean hasDnsFailureRefreshRate() {
    return dnsFailureRefreshRate_ != null;
  }
  /**
   * <pre>
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
   * @return The dnsFailureRefreshRate.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate getDnsFailureRefreshRate() {
    return dnsFailureRefreshRate_ == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
  }
  /**
   * <pre>
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder getDnsFailureRefreshRateOrBuilder() {
    return dnsFailureRefreshRate_ == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
  }

  public static final int DNS_CACHE_CIRCUIT_BREAKER_FIELD_NUMBER = 7;
  private io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dnsCacheCircuitBreaker_;
  /**
   * <pre>
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
   * @return Whether the dnsCacheCircuitBreaker field is set.
   */
  @java.lang.Override
  public boolean hasDnsCacheCircuitBreaker() {
    return dnsCacheCircuitBreaker_ != null;
  }
  /**
   * <pre>
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
   * @return The dnsCacheCircuitBreaker.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers getDnsCacheCircuitBreaker() {
    return dnsCacheCircuitBreaker_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
  }
  /**
   * <pre>
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder getDnsCacheCircuitBreakerOrBuilder() {
    return dnsCacheCircuitBreaker_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
  }

  public static final int USE_TCP_FOR_DNS_LOOKUPS_FIELD_NUMBER = 8;
  private boolean useTcpForDnsLookups_ = false;
  /**
   * <pre>
   * Always use TCP queries instead of UDP queries for DNS lookups.
   * This field is deprecated in favor of ``dns_resolution_config``
   * which aggregates all of the DNS resolver configuration in a single message.
   * </pre>
   *
   * <code>bool use_tcp_for_dns_lookups = 8 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.use_tcp_for_dns_lookups is deprecated.
   *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=108
   * @return The useTcpForDnsLookups.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean getUseTcpForDnsLookups() {
    return useTcpForDnsLookups_;
  }

  public static final int DNS_RESOLUTION_CONFIG_FIELD_NUMBER = 9;
  private io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig dnsResolutionConfig_;
  /**
   * <pre>
   * DNS resolution configuration which includes the underlying dns resolver addresses and options.
   * This field is deprecated in favor of
   * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config is deprecated.
   *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=114
   * @return Whether the dnsResolutionConfig field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasDnsResolutionConfig() {
    return dnsResolutionConfig_ != null;
  }
  /**
   * <pre>
   * DNS resolution configuration which includes the underlying dns resolver addresses and options.
   * This field is deprecated in favor of
   * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config is deprecated.
   *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=114
   * @return The dnsResolutionConfig.
   */
  @java.lang.Override
  @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig getDnsResolutionConfig() {
    return dnsResolutionConfig_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
  }
  /**
   * <pre>
   * DNS resolution configuration which includes the underlying dns resolver addresses and options.
   * This field is deprecated in favor of
   * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder getDnsResolutionConfigOrBuilder() {
    return dnsResolutionConfig_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
  }

  public static final int TYPED_DNS_RESOLVER_CONFIG_FIELD_NUMBER = 12;
  private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig typedDnsResolverConfig_;
  /**
   * <pre>
   * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
   * or any other DNS resolver types and the related parameters.
   * For example, an object of
   * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
   * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
   * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
   * configuration.
   * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
   * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
   * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
   * [#extension-category: envoy.network.dns_resolver]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
   * @return Whether the typedDnsResolverConfig field is set.
   */
  @java.lang.Override
  public boolean hasTypedDnsResolverConfig() {
    return typedDnsResolverConfig_ != null;
  }
  /**
   * <pre>
   * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
   * or any other DNS resolver types and the related parameters.
   * For example, an object of
   * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
   * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
   * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
   * configuration.
   * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
   * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
   * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
   * [#extension-category: envoy.network.dns_resolver]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
   * @return The typedDnsResolverConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedDnsResolverConfig() {
    return typedDnsResolverConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
  }
  /**
   * <pre>
   * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
   * or any other DNS resolver types and the related parameters.
   * For example, an object of
   * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
   * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
   * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
   * configuration.
   * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
   * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
   * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
   * [#extension-category: envoy.network.dns_resolver]
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedDnsResolverConfigOrBuilder() {
    return typedDnsResolverConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
  }

  public static final int PRERESOLVE_HOSTNAMES_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.config.core.v3.SocketAddress> preresolveHostnames_;
  /**
   * <pre>
   * Hostnames that should be preresolved into the cache upon creation. This might provide a
   * performance improvement, in the form of cache hits, for hostnames that are going to be
   * resolved during steady state and are known at config load time.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.core.v3.SocketAddress> getPreresolveHostnamesList() {
    return preresolveHostnames_;
  }
  /**
   * <pre>
   * Hostnames that should be preresolved into the cache upon creation. This might provide a
   * performance improvement, in the form of cache hits, for hostnames that are going to be
   * resolved during steady state and are known at config load time.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder> 
      getPreresolveHostnamesOrBuilderList() {
    return preresolveHostnames_;
  }
  /**
   * <pre>
   * Hostnames that should be preresolved into the cache upon creation. This might provide a
   * performance improvement, in the form of cache hits, for hostnames that are going to be
   * resolved during steady state and are known at config load time.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
   */
  @java.lang.Override
  public int getPreresolveHostnamesCount() {
    return preresolveHostnames_.size();
  }
  /**
   * <pre>
   * Hostnames that should be preresolved into the cache upon creation. This might provide a
   * performance improvement, in the form of cache hits, for hostnames that are going to be
   * resolved during steady state and are known at config load time.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SocketAddress getPreresolveHostnames(int index) {
    return preresolveHostnames_.get(index);
  }
  /**
   * <pre>
   * Hostnames that should be preresolved into the cache upon creation. This might provide a
   * performance improvement, in the form of cache hits, for hostnames that are going to be
   * resolved during steady state and are known at config load time.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder getPreresolveHostnamesOrBuilder(
      int index) {
    return preresolveHostnames_.get(index);
  }

  public static final int DNS_QUERY_TIMEOUT_FIELD_NUMBER = 11;
  private com.google.protobuf.Duration dnsQueryTimeout_;
  /**
   * <pre>
   * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
   * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
   * Setting this timeout will ensure that queries succeed or fail within the specified time frame
   * and are then retried using the standard refresh rates. Defaults to 5s if not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
   * @return Whether the dnsQueryTimeout field is set.
   */
  @java.lang.Override
  public boolean hasDnsQueryTimeout() {
    return dnsQueryTimeout_ != null;
  }
  /**
   * <pre>
   * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
   * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
   * Setting this timeout will ensure that queries succeed or fail within the specified time frame
   * and are then retried using the standard refresh rates. Defaults to 5s if not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
   * @return The dnsQueryTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getDnsQueryTimeout() {
    return dnsQueryTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsQueryTimeout_;
  }
  /**
   * <pre>
   * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
   * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
   * Setting this timeout will ensure that queries succeed or fail within the specified time frame
   * and are then retried using the standard refresh rates. Defaults to 5s if not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getDnsQueryTimeoutOrBuilder() {
    return dnsQueryTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsQueryTimeout_;
  }

  public static final int KEY_VALUE_CONFIG_FIELD_NUMBER = 13;
  private io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig keyValueConfig_;
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Configuration to flush the DNS cache to long term storage.
   * </pre>
   *
   * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
   * @return Whether the keyValueConfig field is set.
   */
  @java.lang.Override
  public boolean hasKeyValueConfig() {
    return keyValueConfig_ != null;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Configuration to flush the DNS cache to long term storage.
   * </pre>
   *
   * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
   * @return The keyValueConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig getKeyValueConfig() {
    return keyValueConfig_ == null ? io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.getDefaultInstance() : keyValueConfig_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Configuration to flush the DNS cache to long term storage.
   * </pre>
   *
   * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfigOrBuilder getKeyValueConfigOrBuilder() {
    return keyValueConfig_ == null ? io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.getDefaultInstance() : keyValueConfig_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (dnsLookupFamily_ != io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.AUTO.getNumber()) {
      output.writeEnum(2, dnsLookupFamily_);
    }
    if (dnsRefreshRate_ != null) {
      output.writeMessage(3, getDnsRefreshRate());
    }
    if (hostTtl_ != null) {
      output.writeMessage(4, getHostTtl());
    }
    if (maxHosts_ != null) {
      output.writeMessage(5, getMaxHosts());
    }
    if (dnsFailureRefreshRate_ != null) {
      output.writeMessage(6, getDnsFailureRefreshRate());
    }
    if (dnsCacheCircuitBreaker_ != null) {
      output.writeMessage(7, getDnsCacheCircuitBreaker());
    }
    if (useTcpForDnsLookups_ != false) {
      output.writeBool(8, useTcpForDnsLookups_);
    }
    if (dnsResolutionConfig_ != null) {
      output.writeMessage(9, getDnsResolutionConfig());
    }
    for (int i = 0; i < preresolveHostnames_.size(); i++) {
      output.writeMessage(10, preresolveHostnames_.get(i));
    }
    if (dnsQueryTimeout_ != null) {
      output.writeMessage(11, getDnsQueryTimeout());
    }
    if (typedDnsResolverConfig_ != null) {
      output.writeMessage(12, getTypedDnsResolverConfig());
    }
    if (keyValueConfig_ != null) {
      output.writeMessage(13, getKeyValueConfig());
    }
    if (dnsMinRefreshRate_ != null) {
      output.writeMessage(14, getDnsMinRefreshRate());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (dnsLookupFamily_ != io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, dnsLookupFamily_);
    }
    if (dnsRefreshRate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDnsRefreshRate());
    }
    if (hostTtl_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getHostTtl());
    }
    if (maxHosts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getMaxHosts());
    }
    if (dnsFailureRefreshRate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getDnsFailureRefreshRate());
    }
    if (dnsCacheCircuitBreaker_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getDnsCacheCircuitBreaker());
    }
    if (useTcpForDnsLookups_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, useTcpForDnsLookups_);
    }
    if (dnsResolutionConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getDnsResolutionConfig());
    }
    for (int i = 0; i < preresolveHostnames_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, preresolveHostnames_.get(i));
    }
    if (dnsQueryTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getDnsQueryTimeout());
    }
    if (typedDnsResolverConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getTypedDnsResolverConfig());
    }
    if (keyValueConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getKeyValueConfig());
    }
    if (dnsMinRefreshRate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getDnsMinRefreshRate());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig other = (io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (dnsLookupFamily_ != other.dnsLookupFamily_) return false;
    if (hasDnsRefreshRate() != other.hasDnsRefreshRate()) return false;
    if (hasDnsRefreshRate()) {
      if (!getDnsRefreshRate()
          .equals(other.getDnsRefreshRate())) return false;
    }
    if (hasDnsMinRefreshRate() != other.hasDnsMinRefreshRate()) return false;
    if (hasDnsMinRefreshRate()) {
      if (!getDnsMinRefreshRate()
          .equals(other.getDnsMinRefreshRate())) return false;
    }
    if (hasHostTtl() != other.hasHostTtl()) return false;
    if (hasHostTtl()) {
      if (!getHostTtl()
          .equals(other.getHostTtl())) return false;
    }
    if (hasMaxHosts() != other.hasMaxHosts()) return false;
    if (hasMaxHosts()) {
      if (!getMaxHosts()
          .equals(other.getMaxHosts())) return false;
    }
    if (hasDnsFailureRefreshRate() != other.hasDnsFailureRefreshRate()) return false;
    if (hasDnsFailureRefreshRate()) {
      if (!getDnsFailureRefreshRate()
          .equals(other.getDnsFailureRefreshRate())) return false;
    }
    if (hasDnsCacheCircuitBreaker() != other.hasDnsCacheCircuitBreaker()) return false;
    if (hasDnsCacheCircuitBreaker()) {
      if (!getDnsCacheCircuitBreaker()
          .equals(other.getDnsCacheCircuitBreaker())) return false;
    }
    if (getUseTcpForDnsLookups()
        != other.getUseTcpForDnsLookups()) return false;
    if (hasDnsResolutionConfig() != other.hasDnsResolutionConfig()) return false;
    if (hasDnsResolutionConfig()) {
      if (!getDnsResolutionConfig()
          .equals(other.getDnsResolutionConfig())) return false;
    }
    if (hasTypedDnsResolverConfig() != other.hasTypedDnsResolverConfig()) return false;
    if (hasTypedDnsResolverConfig()) {
      if (!getTypedDnsResolverConfig()
          .equals(other.getTypedDnsResolverConfig())) return false;
    }
    if (!getPreresolveHostnamesList()
        .equals(other.getPreresolveHostnamesList())) return false;
    if (hasDnsQueryTimeout() != other.hasDnsQueryTimeout()) return false;
    if (hasDnsQueryTimeout()) {
      if (!getDnsQueryTimeout()
          .equals(other.getDnsQueryTimeout())) return false;
    }
    if (hasKeyValueConfig() != other.hasKeyValueConfig()) return false;
    if (hasKeyValueConfig()) {
      if (!getKeyValueConfig()
          .equals(other.getKeyValueConfig())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + DNS_LOOKUP_FAMILY_FIELD_NUMBER;
    hash = (53 * hash) + dnsLookupFamily_;
    if (hasDnsRefreshRate()) {
      hash = (37 * hash) + DNS_REFRESH_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getDnsRefreshRate().hashCode();
    }
    if (hasDnsMinRefreshRate()) {
      hash = (37 * hash) + DNS_MIN_REFRESH_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getDnsMinRefreshRate().hashCode();
    }
    if (hasHostTtl()) {
      hash = (37 * hash) + HOST_TTL_FIELD_NUMBER;
      hash = (53 * hash) + getHostTtl().hashCode();
    }
    if (hasMaxHosts()) {
      hash = (37 * hash) + MAX_HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxHosts().hashCode();
    }
    if (hasDnsFailureRefreshRate()) {
      hash = (37 * hash) + DNS_FAILURE_REFRESH_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getDnsFailureRefreshRate().hashCode();
    }
    if (hasDnsCacheCircuitBreaker()) {
      hash = (37 * hash) + DNS_CACHE_CIRCUIT_BREAKER_FIELD_NUMBER;
      hash = (53 * hash) + getDnsCacheCircuitBreaker().hashCode();
    }
    hash = (37 * hash) + USE_TCP_FOR_DNS_LOOKUPS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUseTcpForDnsLookups());
    if (hasDnsResolutionConfig()) {
      hash = (37 * hash) + DNS_RESOLUTION_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getDnsResolutionConfig().hashCode();
    }
    if (hasTypedDnsResolverConfig()) {
      hash = (37 * hash) + TYPED_DNS_RESOLVER_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getTypedDnsResolverConfig().hashCode();
    }
    if (getPreresolveHostnamesCount() > 0) {
      hash = (37 * hash) + PRERESOLVE_HOSTNAMES_FIELD_NUMBER;
      hash = (53 * hash) + getPreresolveHostnamesList().hashCode();
    }
    if (hasDnsQueryTimeout()) {
      hash = (37 * hash) + DNS_QUERY_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getDnsQueryTimeout().hashCode();
    }
    if (hasKeyValueConfig()) {
      hash = (37 * hash) + KEY_VALUE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getKeyValueConfig().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
   * &lt;arch_overview_http_dynamic_forward_proxy&gt;` for more information.
   * [#next-free-field: 15]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.class, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      name_ = "";
      dnsLookupFamily_ = 0;
      dnsRefreshRate_ = null;
      if (dnsRefreshRateBuilder_ != null) {
        dnsRefreshRateBuilder_.dispose();
        dnsRefreshRateBuilder_ = null;
      }
      dnsMinRefreshRate_ = null;
      if (dnsMinRefreshRateBuilder_ != null) {
        dnsMinRefreshRateBuilder_.dispose();
        dnsMinRefreshRateBuilder_ = null;
      }
      hostTtl_ = null;
      if (hostTtlBuilder_ != null) {
        hostTtlBuilder_.dispose();
        hostTtlBuilder_ = null;
      }
      maxHosts_ = null;
      if (maxHostsBuilder_ != null) {
        maxHostsBuilder_.dispose();
        maxHostsBuilder_ = null;
      }
      dnsFailureRefreshRate_ = null;
      if (dnsFailureRefreshRateBuilder_ != null) {
        dnsFailureRefreshRateBuilder_.dispose();
        dnsFailureRefreshRateBuilder_ = null;
      }
      dnsCacheCircuitBreaker_ = null;
      if (dnsCacheCircuitBreakerBuilder_ != null) {
        dnsCacheCircuitBreakerBuilder_.dispose();
        dnsCacheCircuitBreakerBuilder_ = null;
      }
      useTcpForDnsLookups_ = false;
      dnsResolutionConfig_ = null;
      if (dnsResolutionConfigBuilder_ != null) {
        dnsResolutionConfigBuilder_.dispose();
        dnsResolutionConfigBuilder_ = null;
      }
      typedDnsResolverConfig_ = null;
      if (typedDnsResolverConfigBuilder_ != null) {
        typedDnsResolverConfigBuilder_.dispose();
        typedDnsResolverConfigBuilder_ = null;
      }
      if (preresolveHostnamesBuilder_ == null) {
        preresolveHostnames_ = java.util.Collections.emptyList();
      } else {
        preresolveHostnames_ = null;
        preresolveHostnamesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000800);
      dnsQueryTimeout_ = null;
      if (dnsQueryTimeoutBuilder_ != null) {
        dnsQueryTimeoutBuilder_.dispose();
        dnsQueryTimeoutBuilder_ = null;
      }
      keyValueConfig_ = null;
      if (keyValueConfigBuilder_ != null) {
        keyValueConfigBuilder_.dispose();
        keyValueConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig build() {
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig buildPartial() {
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig result = new io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig result) {
      if (preresolveHostnamesBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0)) {
          preresolveHostnames_ = java.util.Collections.unmodifiableList(preresolveHostnames_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.preresolveHostnames_ = preresolveHostnames_;
      } else {
        result.preresolveHostnames_ = preresolveHostnamesBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.name_ = name_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.dnsLookupFamily_ = dnsLookupFamily_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.dnsRefreshRate_ = dnsRefreshRateBuilder_ == null
            ? dnsRefreshRate_
            : dnsRefreshRateBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.dnsMinRefreshRate_ = dnsMinRefreshRateBuilder_ == null
            ? dnsMinRefreshRate_
            : dnsMinRefreshRateBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.hostTtl_ = hostTtlBuilder_ == null
            ? hostTtl_
            : hostTtlBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.maxHosts_ = maxHostsBuilder_ == null
            ? maxHosts_
            : maxHostsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.dnsFailureRefreshRate_ = dnsFailureRefreshRateBuilder_ == null
            ? dnsFailureRefreshRate_
            : dnsFailureRefreshRateBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.dnsCacheCircuitBreaker_ = dnsCacheCircuitBreakerBuilder_ == null
            ? dnsCacheCircuitBreaker_
            : dnsCacheCircuitBreakerBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.useTcpForDnsLookups_ = useTcpForDnsLookups_;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.dnsResolutionConfig_ = dnsResolutionConfigBuilder_ == null
            ? dnsResolutionConfig_
            : dnsResolutionConfigBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.typedDnsResolverConfig_ = typedDnsResolverConfigBuilder_ == null
            ? typedDnsResolverConfig_
            : typedDnsResolverConfigBuilder_.build();
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.dnsQueryTimeout_ = dnsQueryTimeoutBuilder_ == null
            ? dnsQueryTimeout_
            : dnsQueryTimeoutBuilder_.build();
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.keyValueConfig_ = keyValueConfigBuilder_ == null
            ? keyValueConfig_
            : keyValueConfigBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig other) {
      if (other == io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.dnsLookupFamily_ != 0) {
        setDnsLookupFamilyValue(other.getDnsLookupFamilyValue());
      }
      if (other.hasDnsRefreshRate()) {
        mergeDnsRefreshRate(other.getDnsRefreshRate());
      }
      if (other.hasDnsMinRefreshRate()) {
        mergeDnsMinRefreshRate(other.getDnsMinRefreshRate());
      }
      if (other.hasHostTtl()) {
        mergeHostTtl(other.getHostTtl());
      }
      if (other.hasMaxHosts()) {
        mergeMaxHosts(other.getMaxHosts());
      }
      if (other.hasDnsFailureRefreshRate()) {
        mergeDnsFailureRefreshRate(other.getDnsFailureRefreshRate());
      }
      if (other.hasDnsCacheCircuitBreaker()) {
        mergeDnsCacheCircuitBreaker(other.getDnsCacheCircuitBreaker());
      }
      if (other.getUseTcpForDnsLookups() != false) {
        setUseTcpForDnsLookups(other.getUseTcpForDnsLookups());
      }
      if (other.hasDnsResolutionConfig()) {
        mergeDnsResolutionConfig(other.getDnsResolutionConfig());
      }
      if (other.hasTypedDnsResolverConfig()) {
        mergeTypedDnsResolverConfig(other.getTypedDnsResolverConfig());
      }
      if (preresolveHostnamesBuilder_ == null) {
        if (!other.preresolveHostnames_.isEmpty()) {
          if (preresolveHostnames_.isEmpty()) {
            preresolveHostnames_ = other.preresolveHostnames_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensurePreresolveHostnamesIsMutable();
            preresolveHostnames_.addAll(other.preresolveHostnames_);
          }
          onChanged();
        }
      } else {
        if (!other.preresolveHostnames_.isEmpty()) {
          if (preresolveHostnamesBuilder_.isEmpty()) {
            preresolveHostnamesBuilder_.dispose();
            preresolveHostnamesBuilder_ = null;
            preresolveHostnames_ = other.preresolveHostnames_;
            bitField0_ = (bitField0_ & ~0x00000800);
            preresolveHostnamesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPreresolveHostnamesFieldBuilder() : null;
          } else {
            preresolveHostnamesBuilder_.addAllMessages(other.preresolveHostnames_);
          }
        }
      }
      if (other.hasDnsQueryTimeout()) {
        mergeDnsQueryTimeout(other.getDnsQueryTimeout());
      }
      if (other.hasKeyValueConfig()) {
        mergeKeyValueConfig(other.getKeyValueConfig());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              name_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              dnsLookupFamily_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              input.readMessage(
                  getDnsRefreshRateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getHostTtlFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getMaxHostsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getDnsFailureRefreshRateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getDnsCacheCircuitBreakerFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 58
            case 64: {
              useTcpForDnsLookups_ = input.readBool();
              bitField0_ |= 0x00000100;
              break;
            } // case 64
            case 74: {
              input.readMessage(
                  getDnsResolutionConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000200;
              break;
            } // case 74
            case 82: {
              io.envoyproxy.envoy.config.core.v3.SocketAddress m =
                  input.readMessage(
                      io.envoyproxy.envoy.config.core.v3.SocketAddress.parser(),
                      extensionRegistry);
              if (preresolveHostnamesBuilder_ == null) {
                ensurePreresolveHostnamesIsMutable();
                preresolveHostnames_.add(m);
              } else {
                preresolveHostnamesBuilder_.addMessage(m);
              }
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getDnsQueryTimeoutFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00001000;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getTypedDnsResolverConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000400;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getKeyValueConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00002000;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getDnsMinRefreshRateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 114
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      name_ = getDefaultInstance().getName();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      name_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int dnsLookupFamily_ = 0;
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for dnsLookupFamily.
     */
    @java.lang.Override public int getDnsLookupFamilyValue() {
      return dnsLookupFamily_;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for dnsLookupFamily to set.
     * @return This builder for chaining.
     */
    public Builder setDnsLookupFamilyValue(int value) {
      dnsLookupFamily_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @return The dnsLookupFamily.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily getDnsLookupFamily() {
      io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily result = io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.forNumber(dnsLookupFamily_);
      return result == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @param value The dnsLookupFamily to set.
     * @return This builder for chaining.
     */
    public Builder setDnsLookupFamily(io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      dnsLookupFamily_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearDnsLookupFamily() {
      bitField0_ = (bitField0_ & ~0x00000002);
      dnsLookupFamily_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Duration dnsRefreshRate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> dnsRefreshRateBuilder_;
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the dnsRefreshRate field is set.
     */
    public boolean hasDnsRefreshRate() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     * @return The dnsRefreshRate.
     */
    public com.google.protobuf.Duration getDnsRefreshRate() {
      if (dnsRefreshRateBuilder_ == null) {
        return dnsRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
      } else {
        return dnsRefreshRateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsRefreshRate(com.google.protobuf.Duration value) {
      if (dnsRefreshRateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsRefreshRate_ = value;
      } else {
        dnsRefreshRateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsRefreshRate(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (dnsRefreshRateBuilder_ == null) {
        dnsRefreshRate_ = builderForValue.build();
      } else {
        dnsRefreshRateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeDnsRefreshRate(com.google.protobuf.Duration value) {
      if (dnsRefreshRateBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          dnsRefreshRate_ != null &&
          dnsRefreshRate_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getDnsRefreshRateBuilder().mergeFrom(value);
        } else {
          dnsRefreshRate_ = value;
        }
      } else {
        dnsRefreshRateBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearDnsRefreshRate() {
      bitField0_ = (bitField0_ & ~0x00000004);
      dnsRefreshRate_ = null;
      if (dnsRefreshRateBuilder_ != null) {
        dnsRefreshRateBuilder_.dispose();
        dnsRefreshRateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getDnsRefreshRateBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getDnsRefreshRateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getDnsRefreshRateOrBuilder() {
      if (dnsRefreshRateBuilder_ != null) {
        return dnsRefreshRateBuilder_.getMessageOrBuilder();
      } else {
        return dnsRefreshRate_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
      }
    }
    /**
     * <pre>
     * The DNS refresh rate for unresolved DNS hosts. If not specified defaults to 60s.
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * Once a host has been resolved, the refresh rate will be the DNS TTL, capped
     * at a minimum of ``dns_min_refresh_rate``.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getDnsRefreshRateFieldBuilder() {
      if (dnsRefreshRateBuilder_ == null) {
        dnsRefreshRateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getDnsRefreshRate(),
                getParentForChildren(),
                isClean());
        dnsRefreshRate_ = null;
      }
      return dnsRefreshRateBuilder_;
    }

    private com.google.protobuf.Duration dnsMinRefreshRate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> dnsMinRefreshRateBuilder_;
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     * @return Whether the dnsMinRefreshRate field is set.
     */
    public boolean hasDnsMinRefreshRate() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     * @return The dnsMinRefreshRate.
     */
    public com.google.protobuf.Duration getDnsMinRefreshRate() {
      if (dnsMinRefreshRateBuilder_ == null) {
        return dnsMinRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsMinRefreshRate_;
      } else {
        return dnsMinRefreshRateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsMinRefreshRate(com.google.protobuf.Duration value) {
      if (dnsMinRefreshRateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsMinRefreshRate_ = value;
      } else {
        dnsMinRefreshRateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsMinRefreshRate(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (dnsMinRefreshRateBuilder_ == null) {
        dnsMinRefreshRate_ = builderForValue.build();
      } else {
        dnsMinRefreshRateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeDnsMinRefreshRate(com.google.protobuf.Duration value) {
      if (dnsMinRefreshRateBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          dnsMinRefreshRate_ != null &&
          dnsMinRefreshRate_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getDnsMinRefreshRateBuilder().mergeFrom(value);
        } else {
          dnsMinRefreshRate_ = value;
        }
      } else {
        dnsMinRefreshRateBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    public Builder clearDnsMinRefreshRate() {
      bitField0_ = (bitField0_ & ~0x00000008);
      dnsMinRefreshRate_ = null;
      if (dnsMinRefreshRateBuilder_ != null) {
        dnsMinRefreshRateBuilder_.dispose();
        dnsMinRefreshRateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getDnsMinRefreshRateBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getDnsMinRefreshRateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getDnsMinRefreshRateOrBuilder() {
      if (dnsMinRefreshRateBuilder_ != null) {
        return dnsMinRefreshRateBuilder_.getMessageOrBuilder();
      } else {
        return dnsMinRefreshRate_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : dnsMinRefreshRate_;
      }
    }
    /**
     * <pre>
     * The minimum rate that DNS resolution will occur. Per ``dns_refresh_rate``, once a host is
     * resolved, the DNS TTL will be used, with a minimum set by ``dns_min_refresh_rate``.
     * ``dns_min_refresh_rate`` defaults to 5s and must also be &gt;= 5s.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_min_refresh_rate = 14 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getDnsMinRefreshRateFieldBuilder() {
      if (dnsMinRefreshRateBuilder_ == null) {
        dnsMinRefreshRateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getDnsMinRefreshRate(),
                getParentForChildren(),
                isClean());
        dnsMinRefreshRate_ = null;
      }
      return dnsMinRefreshRateBuilder_;
    }

    private com.google.protobuf.Duration hostTtl_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> hostTtlBuilder_;
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     * @return Whether the hostTtl field is set.
     */
    public boolean hasHostTtl() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     * @return The hostTtl.
     */
    public com.google.protobuf.Duration getHostTtl() {
      if (hostTtlBuilder_ == null) {
        return hostTtl_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
      } else {
        return hostTtlBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setHostTtl(com.google.protobuf.Duration value) {
      if (hostTtlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hostTtl_ = value;
      } else {
        hostTtlBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setHostTtl(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (hostTtlBuilder_ == null) {
        hostTtl_ = builderForValue.build();
      } else {
        hostTtlBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeHostTtl(com.google.protobuf.Duration value) {
      if (hostTtlBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          hostTtl_ != null &&
          hostTtl_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getHostTtlBuilder().mergeFrom(value);
        } else {
          hostTtl_ = value;
        }
      } else {
        hostTtlBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearHostTtl() {
      bitField0_ = (bitField0_ & ~0x00000010);
      hostTtl_ = null;
      if (hostTtlBuilder_ != null) {
        hostTtlBuilder_.dispose();
        hostTtlBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getHostTtlBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getHostTtlFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getHostTtlOrBuilder() {
      if (hostTtlBuilder_ != null) {
        return hostTtlBuilder_.getMessageOrBuilder();
      } else {
        return hostTtl_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
      }
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by ``dns_refresh_rate``. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getHostTtlFieldBuilder() {
      if (hostTtlBuilder_ == null) {
        hostTtlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getHostTtl(),
                getParentForChildren(),
                isClean());
        hostTtl_ = null;
      }
      return hostTtlBuilder_;
    }

    private com.google.protobuf.UInt32Value maxHosts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxHostsBuilder_;
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the maxHosts field is set.
     */
    public boolean hasMaxHosts() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     * @return The maxHosts.
     */
    public com.google.protobuf.UInt32Value getMaxHosts() {
      if (maxHostsBuilder_ == null) {
        return maxHosts_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
      } else {
        return maxHostsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxHosts(com.google.protobuf.UInt32Value value) {
      if (maxHostsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxHosts_ = value;
      } else {
        maxHostsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxHosts(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxHostsBuilder_ == null) {
        maxHosts_ = builderForValue.build();
      } else {
        maxHostsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxHosts(com.google.protobuf.UInt32Value value) {
      if (maxHostsBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          maxHosts_ != null &&
          maxHosts_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxHostsBuilder().mergeFrom(value);
        } else {
          maxHosts_ = value;
        }
      } else {
        maxHostsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxHosts() {
      bitField0_ = (bitField0_ & ~0x00000020);
      maxHosts_ = null;
      if (maxHostsBuilder_ != null) {
        maxHostsBuilder_.dispose();
        maxHostsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxHostsBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getMaxHostsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxHostsOrBuilder() {
      if (maxHostsBuilder_ != null) {
        return maxHostsBuilder_.getMessageOrBuilder();
      } else {
        return maxHosts_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
      }
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxHostsFieldBuilder() {
      if (maxHostsBuilder_ == null) {
        maxHostsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxHosts(),
                getParentForChildren(),
                isClean());
        maxHosts_ = null;
      }
      return maxHostsBuilder_;
    }

    private io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate dnsFailureRefreshRate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder> dnsFailureRefreshRateBuilder_;
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     * @return Whether the dnsFailureRefreshRate field is set.
     */
    public boolean hasDnsFailureRefreshRate() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     * @return The dnsFailureRefreshRate.
     */
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate getDnsFailureRefreshRate() {
      if (dnsFailureRefreshRateBuilder_ == null) {
        return dnsFailureRefreshRate_ == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
      } else {
        return dnsFailureRefreshRateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder setDnsFailureRefreshRate(io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate value) {
      if (dnsFailureRefreshRateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsFailureRefreshRate_ = value;
      } else {
        dnsFailureRefreshRateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder setDnsFailureRefreshRate(
        io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder builderForValue) {
      if (dnsFailureRefreshRateBuilder_ == null) {
        dnsFailureRefreshRate_ = builderForValue.build();
      } else {
        dnsFailureRefreshRateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder mergeDnsFailureRefreshRate(io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate value) {
      if (dnsFailureRefreshRateBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          dnsFailureRefreshRate_ != null &&
          dnsFailureRefreshRate_ != io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance()) {
          getDnsFailureRefreshRateBuilder().mergeFrom(value);
        } else {
          dnsFailureRefreshRate_ = value;
        }
      } else {
        dnsFailureRefreshRateBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder clearDnsFailureRefreshRate() {
      bitField0_ = (bitField0_ & ~0x00000040);
      dnsFailureRefreshRate_ = null;
      if (dnsFailureRefreshRateBuilder_ != null) {
        dnsFailureRefreshRateBuilder_.dispose();
        dnsFailureRefreshRateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder getDnsFailureRefreshRateBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getDnsFailureRefreshRateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder getDnsFailureRefreshRateOrBuilder() {
      if (dnsFailureRefreshRateBuilder_ != null) {
        return dnsFailureRefreshRateBuilder_.getMessageOrBuilder();
      } else {
        return dnsFailureRefreshRate_ == null ?
            io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
      }
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder> 
        getDnsFailureRefreshRateFieldBuilder() {
      if (dnsFailureRefreshRateBuilder_ == null) {
        dnsFailureRefreshRateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder>(
                getDnsFailureRefreshRate(),
                getParentForChildren(),
                isClean());
        dnsFailureRefreshRate_ = null;
      }
      return dnsFailureRefreshRateBuilder_;
    }

    private io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dnsCacheCircuitBreaker_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder> dnsCacheCircuitBreakerBuilder_;
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     * @return Whether the dnsCacheCircuitBreaker field is set.
     */
    public boolean hasDnsCacheCircuitBreaker() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     * @return The dnsCacheCircuitBreaker.
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers getDnsCacheCircuitBreaker() {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        return dnsCacheCircuitBreaker_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
      } else {
        return dnsCacheCircuitBreakerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder setDnsCacheCircuitBreaker(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers value) {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsCacheCircuitBreaker_ = value;
      } else {
        dnsCacheCircuitBreakerBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder setDnsCacheCircuitBreaker(
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder builderForValue) {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        dnsCacheCircuitBreaker_ = builderForValue.build();
      } else {
        dnsCacheCircuitBreakerBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder mergeDnsCacheCircuitBreaker(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers value) {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          dnsCacheCircuitBreaker_ != null &&
          dnsCacheCircuitBreaker_ != io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance()) {
          getDnsCacheCircuitBreakerBuilder().mergeFrom(value);
        } else {
          dnsCacheCircuitBreaker_ = value;
        }
      } else {
        dnsCacheCircuitBreakerBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder clearDnsCacheCircuitBreaker() {
      bitField0_ = (bitField0_ & ~0x00000080);
      dnsCacheCircuitBreaker_ = null;
      if (dnsCacheCircuitBreakerBuilder_ != null) {
        dnsCacheCircuitBreakerBuilder_.dispose();
        dnsCacheCircuitBreakerBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder getDnsCacheCircuitBreakerBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getDnsCacheCircuitBreakerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder getDnsCacheCircuitBreakerOrBuilder() {
      if (dnsCacheCircuitBreakerBuilder_ != null) {
        return dnsCacheCircuitBreakerBuilder_.getMessageOrBuilder();
      } else {
        return dnsCacheCircuitBreaker_ == null ?
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
      }
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * Envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder> 
        getDnsCacheCircuitBreakerFieldBuilder() {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        dnsCacheCircuitBreakerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder>(
                getDnsCacheCircuitBreaker(),
                getParentForChildren(),
                isClean());
        dnsCacheCircuitBreaker_ = null;
      }
      return dnsCacheCircuitBreakerBuilder_;
    }

    private boolean useTcpForDnsLookups_ ;
    /**
     * <pre>
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * This field is deprecated in favor of ``dns_resolution_config``
     * which aggregates all of the DNS resolver configuration in a single message.
     * </pre>
     *
     * <code>bool use_tcp_for_dns_lookups = 8 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.use_tcp_for_dns_lookups is deprecated.
     *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=108
     * @return The useTcpForDnsLookups.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getUseTcpForDnsLookups() {
      return useTcpForDnsLookups_;
    }
    /**
     * <pre>
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * This field is deprecated in favor of ``dns_resolution_config``
     * which aggregates all of the DNS resolver configuration in a single message.
     * </pre>
     *
     * <code>bool use_tcp_for_dns_lookups = 8 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.use_tcp_for_dns_lookups is deprecated.
     *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=108
     * @param value The useTcpForDnsLookups to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setUseTcpForDnsLookups(boolean value) {
      
      useTcpForDnsLookups_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * This field is deprecated in favor of ``dns_resolution_config``
     * which aggregates all of the DNS resolver configuration in a single message.
     * </pre>
     *
     * <code>bool use_tcp_for_dns_lookups = 8 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.use_tcp_for_dns_lookups is deprecated.
     *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=108
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearUseTcpForDnsLookups() {
      bitField0_ = (bitField0_ & ~0x00000100);
      useTcpForDnsLookups_ = false;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig dnsResolutionConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder> dnsResolutionConfigBuilder_;
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config is deprecated.
     *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=114
     * @return Whether the dnsResolutionConfig field is set.
     */
    @java.lang.Deprecated public boolean hasDnsResolutionConfig() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     * @deprecated envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config is deprecated.
     *     See envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto;l=114
     * @return The dnsResolutionConfig.
     */
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig getDnsResolutionConfig() {
      if (dnsResolutionConfigBuilder_ == null) {
        return dnsResolutionConfig_ == null ? io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
      } else {
        return dnsResolutionConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated public Builder setDnsResolutionConfig(io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig value) {
      if (dnsResolutionConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsResolutionConfig_ = value;
      } else {
        dnsResolutionConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated public Builder setDnsResolutionConfig(
        io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder builderForValue) {
      if (dnsResolutionConfigBuilder_ == null) {
        dnsResolutionConfig_ = builderForValue.build();
      } else {
        dnsResolutionConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated public Builder mergeDnsResolutionConfig(io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig value) {
      if (dnsResolutionConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0) &&
          dnsResolutionConfig_ != null &&
          dnsResolutionConfig_ != io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance()) {
          getDnsResolutionConfigBuilder().mergeFrom(value);
        } else {
          dnsResolutionConfig_ = value;
        }
      } else {
        dnsResolutionConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated public Builder clearDnsResolutionConfig() {
      bitField0_ = (bitField0_ & ~0x00000200);
      dnsResolutionConfig_ = null;
      if (dnsResolutionConfigBuilder_ != null) {
        dnsResolutionConfigBuilder_.dispose();
        dnsResolutionConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder getDnsResolutionConfigBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getDnsResolutionConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder getDnsResolutionConfigOrBuilder() {
      if (dnsResolutionConfigBuilder_ != null) {
        return dnsResolutionConfigBuilder_.getMessageOrBuilder();
      } else {
        return dnsResolutionConfig_ == null ?
            io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.getDefaultInstance() : dnsResolutionConfig_;
      }
    }
    /**
     * <pre>
     * DNS resolution configuration which includes the underlying dns resolver addresses and options.
     * This field is deprecated in favor of
     * :ref:`typed_dns_resolver_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DnsResolutionConfig dns_resolution_config = 9 [deprecated = true, (.envoy.annotations.deprecated_at_minor_version) = "3.0"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder> 
        getDnsResolutionConfigFieldBuilder() {
      if (dnsResolutionConfigBuilder_ == null) {
        dnsResolutionConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfig.Builder, io.envoyproxy.envoy.config.core.v3.DnsResolutionConfigOrBuilder>(
                getDnsResolutionConfig(),
                getParentForChildren(),
                isClean());
        dnsResolutionConfig_ = null;
      }
      return dnsResolutionConfigBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig typedDnsResolverConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> typedDnsResolverConfigBuilder_;
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     * @return Whether the typedDnsResolverConfig field is set.
     */
    public boolean hasTypedDnsResolverConfig() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     * @return The typedDnsResolverConfig.
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedDnsResolverConfig() {
      if (typedDnsResolverConfigBuilder_ == null) {
        return typedDnsResolverConfig_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
      } else {
        return typedDnsResolverConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    public Builder setTypedDnsResolverConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (typedDnsResolverConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        typedDnsResolverConfig_ = value;
      } else {
        typedDnsResolverConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    public Builder setTypedDnsResolverConfig(
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
      if (typedDnsResolverConfigBuilder_ == null) {
        typedDnsResolverConfig_ = builderForValue.build();
      } else {
        typedDnsResolverConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    public Builder mergeTypedDnsResolverConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (typedDnsResolverConfigBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0) &&
          typedDnsResolverConfig_ != null &&
          typedDnsResolverConfig_ != io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance()) {
          getTypedDnsResolverConfigBuilder().mergeFrom(value);
        } else {
          typedDnsResolverConfig_ = value;
        }
      } else {
        typedDnsResolverConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    public Builder clearTypedDnsResolverConfig() {
      bitField0_ = (bitField0_ & ~0x00000400);
      typedDnsResolverConfig_ = null;
      if (typedDnsResolverConfigBuilder_ != null) {
        typedDnsResolverConfigBuilder_.dispose();
        typedDnsResolverConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getTypedDnsResolverConfigBuilder() {
      bitField0_ |= 0x00000400;
      onChanged();
      return getTypedDnsResolverConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedDnsResolverConfigOrBuilder() {
      if (typedDnsResolverConfigBuilder_ != null) {
        return typedDnsResolverConfigBuilder_.getMessageOrBuilder();
      } else {
        return typedDnsResolverConfig_ == null ?
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : typedDnsResolverConfig_;
      }
    }
    /**
     * <pre>
     * DNS resolver type configuration extension. This extension can be used to configure c-ares, apple,
     * or any other DNS resolver types and the related parameters.
     * For example, an object of
     * :ref:`CaresDnsResolverConfig &lt;envoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig&gt;`
     * can be packed into this ``typed_dns_resolver_config``. This configuration replaces the
     * :ref:`dns_resolution_config &lt;envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config&gt;`
     * configuration.
     * During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists,
     * when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``.
     * When ``typed_dns_resolver_config`` is missing, the default behavior is in place.
     * [#extension-category: envoy.network.dns_resolver]
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_dns_resolver_config = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
        getTypedDnsResolverConfigFieldBuilder() {
      if (typedDnsResolverConfigBuilder_ == null) {
        typedDnsResolverConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                getTypedDnsResolverConfig(),
                getParentForChildren(),
                isClean());
        typedDnsResolverConfig_ = null;
      }
      return typedDnsResolverConfigBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.config.core.v3.SocketAddress> preresolveHostnames_ =
      java.util.Collections.emptyList();
    private void ensurePreresolveHostnamesIsMutable() {
      if (!((bitField0_ & 0x00000800) != 0)) {
        preresolveHostnames_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.SocketAddress>(preresolveHostnames_);
        bitField0_ |= 0x00000800;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.SocketAddress, io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder, io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder> preresolveHostnamesBuilder_;

    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.SocketAddress> getPreresolveHostnamesList() {
      if (preresolveHostnamesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(preresolveHostnames_);
      } else {
        return preresolveHostnamesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public int getPreresolveHostnamesCount() {
      if (preresolveHostnamesBuilder_ == null) {
        return preresolveHostnames_.size();
      } else {
        return preresolveHostnamesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SocketAddress getPreresolveHostnames(int index) {
      if (preresolveHostnamesBuilder_ == null) {
        return preresolveHostnames_.get(index);
      } else {
        return preresolveHostnamesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder setPreresolveHostnames(
        int index, io.envoyproxy.envoy.config.core.v3.SocketAddress value) {
      if (preresolveHostnamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.set(index, value);
        onChanged();
      } else {
        preresolveHostnamesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder setPreresolveHostnames(
        int index, io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder builderForValue) {
      if (preresolveHostnamesBuilder_ == null) {
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.set(index, builderForValue.build());
        onChanged();
      } else {
        preresolveHostnamesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder addPreresolveHostnames(io.envoyproxy.envoy.config.core.v3.SocketAddress value) {
      if (preresolveHostnamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.add(value);
        onChanged();
      } else {
        preresolveHostnamesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder addPreresolveHostnames(
        int index, io.envoyproxy.envoy.config.core.v3.SocketAddress value) {
      if (preresolveHostnamesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.add(index, value);
        onChanged();
      } else {
        preresolveHostnamesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder addPreresolveHostnames(
        io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder builderForValue) {
      if (preresolveHostnamesBuilder_ == null) {
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.add(builderForValue.build());
        onChanged();
      } else {
        preresolveHostnamesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder addPreresolveHostnames(
        int index, io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder builderForValue) {
      if (preresolveHostnamesBuilder_ == null) {
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.add(index, builderForValue.build());
        onChanged();
      } else {
        preresolveHostnamesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder addAllPreresolveHostnames(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.SocketAddress> values) {
      if (preresolveHostnamesBuilder_ == null) {
        ensurePreresolveHostnamesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, preresolveHostnames_);
        onChanged();
      } else {
        preresolveHostnamesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder clearPreresolveHostnames() {
      if (preresolveHostnamesBuilder_ == null) {
        preresolveHostnames_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
      } else {
        preresolveHostnamesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public Builder removePreresolveHostnames(int index) {
      if (preresolveHostnamesBuilder_ == null) {
        ensurePreresolveHostnamesIsMutable();
        preresolveHostnames_.remove(index);
        onChanged();
      } else {
        preresolveHostnamesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder getPreresolveHostnamesBuilder(
        int index) {
      return getPreresolveHostnamesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder getPreresolveHostnamesOrBuilder(
        int index) {
      if (preresolveHostnamesBuilder_ == null) {
        return preresolveHostnames_.get(index);  } else {
        return preresolveHostnamesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder> 
         getPreresolveHostnamesOrBuilderList() {
      if (preresolveHostnamesBuilder_ != null) {
        return preresolveHostnamesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(preresolveHostnames_);
      }
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder addPreresolveHostnamesBuilder() {
      return getPreresolveHostnamesFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.core.v3.SocketAddress.getDefaultInstance());
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder addPreresolveHostnamesBuilder(
        int index) {
      return getPreresolveHostnamesFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.core.v3.SocketAddress.getDefaultInstance());
    }
    /**
     * <pre>
     * Hostnames that should be preresolved into the cache upon creation. This might provide a
     * performance improvement, in the form of cache hits, for hostnames that are going to be
     * resolved during steady state and are known at config load time.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.SocketAddress preresolve_hostnames = 10;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder> 
         getPreresolveHostnamesBuilderList() {
      return getPreresolveHostnamesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.SocketAddress, io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder, io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder> 
        getPreresolveHostnamesFieldBuilder() {
      if (preresolveHostnamesBuilder_ == null) {
        preresolveHostnamesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.SocketAddress, io.envoyproxy.envoy.config.core.v3.SocketAddress.Builder, io.envoyproxy.envoy.config.core.v3.SocketAddressOrBuilder>(
                preresolveHostnames_,
                ((bitField0_ & 0x00000800) != 0),
                getParentForChildren(),
                isClean());
        preresolveHostnames_ = null;
      }
      return preresolveHostnamesBuilder_;
    }

    private com.google.protobuf.Duration dnsQueryTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> dnsQueryTimeoutBuilder_;
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     * @return Whether the dnsQueryTimeout field is set.
     */
    public boolean hasDnsQueryTimeout() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     * @return The dnsQueryTimeout.
     */
    public com.google.protobuf.Duration getDnsQueryTimeout() {
      if (dnsQueryTimeoutBuilder_ == null) {
        return dnsQueryTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsQueryTimeout_;
      } else {
        return dnsQueryTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsQueryTimeout(com.google.protobuf.Duration value) {
      if (dnsQueryTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsQueryTimeout_ = value;
      } else {
        dnsQueryTimeoutBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsQueryTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (dnsQueryTimeoutBuilder_ == null) {
        dnsQueryTimeout_ = builderForValue.build();
      } else {
        dnsQueryTimeoutBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeDnsQueryTimeout(com.google.protobuf.Duration value) {
      if (dnsQueryTimeoutBuilder_ == null) {
        if (((bitField0_ & 0x00001000) != 0) &&
          dnsQueryTimeout_ != null &&
          dnsQueryTimeout_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getDnsQueryTimeoutBuilder().mergeFrom(value);
        } else {
          dnsQueryTimeout_ = value;
        }
      } else {
        dnsQueryTimeoutBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder clearDnsQueryTimeout() {
      bitField0_ = (bitField0_ & ~0x00001000);
      dnsQueryTimeout_ = null;
      if (dnsQueryTimeoutBuilder_ != null) {
        dnsQueryTimeoutBuilder_.dispose();
        dnsQueryTimeoutBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getDnsQueryTimeoutBuilder() {
      bitField0_ |= 0x00001000;
      onChanged();
      return getDnsQueryTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getDnsQueryTimeoutOrBuilder() {
      if (dnsQueryTimeoutBuilder_ != null) {
        return dnsQueryTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return dnsQueryTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : dnsQueryTimeout_;
      }
    }
    /**
     * <pre>
     * The timeout used for DNS queries. This timeout is independent of any timeout and retry policy
     * used by the underlying DNS implementation (e.g., c-areas and Apple DNS) which are opaque.
     * Setting this timeout will ensure that queries succeed or fail within the specified time frame
     * and are then retried using the standard refresh rates. Defaults to 5s if not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_query_timeout = 11 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getDnsQueryTimeoutFieldBuilder() {
      if (dnsQueryTimeoutBuilder_ == null) {
        dnsQueryTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getDnsQueryTimeout(),
                getParentForChildren(),
                isClean());
        dnsQueryTimeout_ = null;
      }
      return dnsQueryTimeoutBuilder_;
    }

    private io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig keyValueConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig, io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.Builder, io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfigOrBuilder> keyValueConfigBuilder_;
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     * @return Whether the keyValueConfig field is set.
     */
    public boolean hasKeyValueConfig() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     * @return The keyValueConfig.
     */
    public io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig getKeyValueConfig() {
      if (keyValueConfigBuilder_ == null) {
        return keyValueConfig_ == null ? io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.getDefaultInstance() : keyValueConfig_;
      } else {
        return keyValueConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    public Builder setKeyValueConfig(io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig value) {
      if (keyValueConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        keyValueConfig_ = value;
      } else {
        keyValueConfigBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    public Builder setKeyValueConfig(
        io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.Builder builderForValue) {
      if (keyValueConfigBuilder_ == null) {
        keyValueConfig_ = builderForValue.build();
      } else {
        keyValueConfigBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    public Builder mergeKeyValueConfig(io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig value) {
      if (keyValueConfigBuilder_ == null) {
        if (((bitField0_ & 0x00002000) != 0) &&
          keyValueConfig_ != null &&
          keyValueConfig_ != io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.getDefaultInstance()) {
          getKeyValueConfigBuilder().mergeFrom(value);
        } else {
          keyValueConfig_ = value;
        }
      } else {
        keyValueConfigBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    public Builder clearKeyValueConfig() {
      bitField0_ = (bitField0_ & ~0x00002000);
      keyValueConfig_ = null;
      if (keyValueConfigBuilder_ != null) {
        keyValueConfigBuilder_.dispose();
        keyValueConfigBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    public io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.Builder getKeyValueConfigBuilder() {
      bitField0_ |= 0x00002000;
      onChanged();
      return getKeyValueConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    public io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfigOrBuilder getKeyValueConfigOrBuilder() {
      if (keyValueConfigBuilder_ != null) {
        return keyValueConfigBuilder_.getMessageOrBuilder();
      } else {
        return keyValueConfig_ == null ?
            io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.getDefaultInstance() : keyValueConfig_;
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Configuration to flush the DNS cache to long term storage.
     * </pre>
     *
     * <code>.envoy.config.common.key_value.v3.KeyValueStoreConfig key_value_config = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig, io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.Builder, io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfigOrBuilder> 
        getKeyValueConfigFieldBuilder() {
      if (keyValueConfigBuilder_ == null) {
        keyValueConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig, io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfig.Builder, io.envoyproxy.envoy.config.common.key_value.v3.KeyValueStoreConfigOrBuilder>(
                getKeyValueConfig(),
                getParentForChildren(),
                isClean());
        keyValueConfig_ = null;
      }
      return keyValueConfigBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
  private static final io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig();
  }

  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DnsCacheConfig>
      PARSER = new com.google.protobuf.AbstractParser<DnsCacheConfig>() {
    @java.lang.Override
    public DnsCacheConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DnsCacheConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DnsCacheConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

