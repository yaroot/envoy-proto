// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/matching/input_matchers/consistent_hashing/v3/consistent_hashing.proto

package io.envoyproxy.envoy.extensions.matching.input_matchers.consistent_hashing.v3;

public interface ConsistentHashingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.matching.input_matchers.consistent_hashing.v3.ConsistentHashing)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The threshold the resulting hash must be over in order for this matcher to evaluate to true.
   * This value must be below the configured modulo value.
   * Setting this to 0 is equivalent to this matcher always matching.
   * </pre>
   *
   * <code>uint32 threshold = 1;</code>
   * @return The threshold.
   */
  int getThreshold();

  /**
   * <pre>
   * The value to use for the modulus in the calculation. This effectively  bounds the hash output,
   * specifying the range of possible values.
   * This value must be above the configured threshold.
   * </pre>
   *
   * <code>uint32 modulo = 2 [(.validate.rules) = { ... }</code>
   * @return The modulo.
   */
  int getModulo();

  /**
   * <pre>
   * Optional seed passed through the hash function. This allows using additional information when computing
   * the hash value: by changing the seed value, a different partition of matching and non-matching inputs will
   * be created that remains consistent for that seed value.
   * </pre>
   *
   * <code>uint64 seed = 3;</code>
   * @return The seed.
   */
  long getSeed();
}
