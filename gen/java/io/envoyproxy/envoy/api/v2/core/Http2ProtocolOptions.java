// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/core/protocol.proto

package io.envoyproxy.envoy.api.v2.core;

/**
 * <pre>
 * [#next-free-field: 14]
 * </pre>
 *
 * Protobuf type {@code envoy.api.v2.core.Http2ProtocolOptions}
 */
public final class Http2ProtocolOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.api.v2.core.Http2ProtocolOptions)
    Http2ProtocolOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Http2ProtocolOptions.newBuilder() to construct.
  private Http2ProtocolOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Http2ProtocolOptions() {
    customSettingsParameters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Http2ProtocolOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.class, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.Builder.class);
  }

  public interface SettingsParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The 16 bit parameter identifier.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the identifier field is set.
     */
    boolean hasIdentifier();
    /**
     * <pre>
     * The 16 bit parameter identifier.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
     * @return The identifier.
     */
    com.google.protobuf.UInt32Value getIdentifier();
    /**
     * <pre>
     * The 16 bit parameter identifier.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
     */
    com.google.protobuf.UInt32ValueOrBuilder getIdentifierOrBuilder();

    /**
     * <pre>
     * The 32 bit parameter value.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <pre>
     * The 32 bit parameter value.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
     * @return The value.
     */
    com.google.protobuf.UInt32Value getValue();
    /**
     * <pre>
     * The 32 bit parameter value.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
     */
    com.google.protobuf.UInt32ValueOrBuilder getValueOrBuilder();
  }
  /**
   * <pre>
   * Defines a parameter to be sent in the SETTINGS frame.
   * See `RFC7540, sec. 6.5.1 &lt;https://tools.ietf.org/html/rfc7540#section-6.5.1&gt;`_ for details.
   * </pre>
   *
   * Protobuf type {@code envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter}
   */
  public static final class SettingsParameter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)
      SettingsParameterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SettingsParameter.newBuilder() to construct.
    private SettingsParameter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SettingsParameter() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SettingsParameter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_SettingsParameter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_SettingsParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.class, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder.class);
    }

    public static final int IDENTIFIER_FIELD_NUMBER = 1;
    private com.google.protobuf.UInt32Value identifier_;
    /**
     * <pre>
     * The 16 bit parameter identifier.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the identifier field is set.
     */
    @java.lang.Override
    public boolean hasIdentifier() {
      return identifier_ != null;
    }
    /**
     * <pre>
     * The 16 bit parameter identifier.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
     * @return The identifier.
     */
    @java.lang.Override
    public com.google.protobuf.UInt32Value getIdentifier() {
      return identifier_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : identifier_;
    }
    /**
     * <pre>
     * The 16 bit parameter identifier.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.UInt32ValueOrBuilder getIdentifierOrBuilder() {
      return identifier_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : identifier_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private com.google.protobuf.UInt32Value value_;
    /**
     * <pre>
     * The 32 bit parameter value.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return value_ != null;
    }
    /**
     * <pre>
     * The 32 bit parameter value.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.UInt32Value getValue() {
      return value_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : value_;
    }
    /**
     * <pre>
     * The 32 bit parameter value.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.UInt32ValueOrBuilder getValueOrBuilder() {
      return value_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : value_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (identifier_ != null) {
        output.writeMessage(1, getIdentifier());
      }
      if (value_ != null) {
        output.writeMessage(2, getValue());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (identifier_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getIdentifier());
      }
      if (value_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getValue());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter other = (io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter) obj;

      if (hasIdentifier() != other.hasIdentifier()) return false;
      if (hasIdentifier()) {
        if (!getIdentifier()
            .equals(other.getIdentifier())) return false;
      }
      if (hasValue() != other.hasValue()) return false;
      if (hasValue()) {
        if (!getValue()
            .equals(other.getValue())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIdentifier()) {
        hash = (37 * hash) + IDENTIFIER_FIELD_NUMBER;
        hash = (53 * hash) + getIdentifier().hashCode();
      }
      if (hasValue()) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValue().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a parameter to be sent in the SETTINGS frame.
     * See `RFC7540, sec. 6.5.1 &lt;https://tools.ietf.org/html/rfc7540#section-6.5.1&gt;`_ for details.
     * </pre>
     *
     * Protobuf type {@code envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)
        io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_SettingsParameter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_SettingsParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.class, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        identifier_ = null;
        if (identifierBuilder_ != null) {
          identifierBuilder_.dispose();
          identifierBuilder_ = null;
        }
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_SettingsParameter_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter getDefaultInstanceForType() {
        return io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter build() {
        io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter buildPartial() {
        io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter result = new io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.identifier_ = identifierBuilder_ == null
              ? identifier_
              : identifierBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = valueBuilder_ == null
              ? value_
              : valueBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter) {
          return mergeFrom((io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter other) {
        if (other == io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.getDefaultInstance()) return this;
        if (other.hasIdentifier()) {
          mergeIdentifier(other.getIdentifier());
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getIdentifierFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getValueFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.UInt32Value identifier_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> identifierBuilder_;
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       * @return Whether the identifier field is set.
       */
      public boolean hasIdentifier() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       * @return The identifier.
       */
      public com.google.protobuf.UInt32Value getIdentifier() {
        if (identifierBuilder_ == null) {
          return identifier_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : identifier_;
        } else {
          return identifierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setIdentifier(com.google.protobuf.UInt32Value value) {
        if (identifierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          identifier_ = value;
        } else {
          identifierBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setIdentifier(
          com.google.protobuf.UInt32Value.Builder builderForValue) {
        if (identifierBuilder_ == null) {
          identifier_ = builderForValue.build();
        } else {
          identifierBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeIdentifier(com.google.protobuf.UInt32Value value) {
        if (identifierBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            identifier_ != null &&
            identifier_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
            getIdentifierBuilder().mergeFrom(value);
          } else {
            identifier_ = value;
          }
        } else {
          identifierBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder clearIdentifier() {
        bitField0_ = (bitField0_ & ~0x00000001);
        identifier_ = null;
        if (identifierBuilder_ != null) {
          identifierBuilder_.dispose();
          identifierBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.UInt32Value.Builder getIdentifierBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getIdentifierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.UInt32ValueOrBuilder getIdentifierOrBuilder() {
        if (identifierBuilder_ != null) {
          return identifierBuilder_.getMessageOrBuilder();
        } else {
          return identifier_ == null ?
              com.google.protobuf.UInt32Value.getDefaultInstance() : identifier_;
        }
      }
      /**
       * <pre>
       * The 16 bit parameter identifier.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value identifier = 1 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
          getIdentifierFieldBuilder() {
        if (identifierBuilder_ == null) {
          identifierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                  getIdentifier(),
                  getParentForChildren(),
                  isClean());
          identifier_ = null;
        }
        return identifierBuilder_;
      }

      private com.google.protobuf.UInt32Value value_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> valueBuilder_;
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       * @return Whether the value field is set.
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       * @return The value.
       */
      public com.google.protobuf.UInt32Value getValue() {
        if (valueBuilder_ == null) {
          return value_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setValue(com.google.protobuf.UInt32Value value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setValue(
          com.google.protobuf.UInt32Value.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeValue(com.google.protobuf.UInt32Value value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            value_ != null &&
            value_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
            getValueBuilder().mergeFrom(value);
          } else {
            value_ = value;
          }
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = null;
        if (valueBuilder_ != null) {
          valueBuilder_.dispose();
          valueBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.UInt32Value.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.UInt32ValueOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_ == null ?
              com.google.protobuf.UInt32Value.getDefaultInstance() : value_;
        }
      }
      /**
       * <pre>
       * The 32 bit parameter value.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value value = 2 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                  getValue(),
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)
    }

    // @@protoc_insertion_point(class_scope:envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter)
    private static final io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter();
    }

    public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SettingsParameter>
        PARSER = new com.google.protobuf.AbstractParser<SettingsParameter>() {
      @java.lang.Override
      public SettingsParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SettingsParameter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SettingsParameter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int HPACK_TABLE_SIZE_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value hpackTableSize_;
  /**
   * <pre>
   * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
   * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
   * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
   * compression.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
   * @return Whether the hpackTableSize field is set.
   */
  @java.lang.Override
  public boolean hasHpackTableSize() {
    return hpackTableSize_ != null;
  }
  /**
   * <pre>
   * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
   * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
   * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
   * compression.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
   * @return The hpackTableSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getHpackTableSize() {
    return hpackTableSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hpackTableSize_;
  }
  /**
   * <pre>
   * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
   * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
   * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
   * compression.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getHpackTableSizeOrBuilder() {
    return hpackTableSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hpackTableSize_;
  }

  public static final int MAX_CONCURRENT_STREAMS_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt32Value maxConcurrentStreams_;
  /**
   * <pre>
   * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
   * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
   * and defaults to 2147483647.
   * For upstream connections, this also limits how many streams Envoy will initiate concurrently
   * on a single connection. If the limit is reached, Envoy may queue requests or establish
   * additional connections (as allowed per circuit breaker limits).
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the maxConcurrentStreams field is set.
   */
  @java.lang.Override
  public boolean hasMaxConcurrentStreams() {
    return maxConcurrentStreams_ != null;
  }
  /**
   * <pre>
   * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
   * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
   * and defaults to 2147483647.
   * For upstream connections, this also limits how many streams Envoy will initiate concurrently
   * on a single connection. If the limit is reached, Envoy may queue requests or establish
   * additional connections (as allowed per circuit breaker limits).
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
   * @return The maxConcurrentStreams.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxConcurrentStreams() {
    return maxConcurrentStreams_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
  }
  /**
   * <pre>
   * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
   * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
   * and defaults to 2147483647.
   * For upstream connections, this also limits how many streams Envoy will initiate concurrently
   * on a single connection. If the limit is reached, Envoy may queue requests or establish
   * additional connections (as allowed per circuit breaker limits).
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxConcurrentStreamsOrBuilder() {
    return maxConcurrentStreams_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
  }

  public static final int INITIAL_STREAM_WINDOW_SIZE_FIELD_NUMBER = 3;
  private com.google.protobuf.UInt32Value initialStreamWindowSize_;
  /**
   * <pre>
   * `Initial stream-level flow-control window
   * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
   * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
   * (256 * 1024 * 1024).
   * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
   * window size now, so it's also the minimum.
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the codec buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the initialStreamWindowSize field is set.
   */
  @java.lang.Override
  public boolean hasInitialStreamWindowSize() {
    return initialStreamWindowSize_ != null;
  }
  /**
   * <pre>
   * `Initial stream-level flow-control window
   * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
   * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
   * (256 * 1024 * 1024).
   * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
   * window size now, so it's also the minimum.
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the codec buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
   * @return The initialStreamWindowSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getInitialStreamWindowSize() {
    return initialStreamWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
  }
  /**
   * <pre>
   * `Initial stream-level flow-control window
   * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
   * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
   * (256 * 1024 * 1024).
   * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
   * window size now, so it's also the minimum.
   * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
   * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
   * stop the flow of data to the codec buffers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getInitialStreamWindowSizeOrBuilder() {
    return initialStreamWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
  }

  public static final int INITIAL_CONNECTION_WINDOW_SIZE_FIELD_NUMBER = 4;
  private com.google.protobuf.UInt32Value initialConnectionWindowSize_;
  /**
   * <pre>
   * Similar to *initial_stream_window_size*, but for connection-level flow-control
   * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the initialConnectionWindowSize field is set.
   */
  @java.lang.Override
  public boolean hasInitialConnectionWindowSize() {
    return initialConnectionWindowSize_ != null;
  }
  /**
   * <pre>
   * Similar to *initial_stream_window_size*, but for connection-level flow-control
   * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
   * @return The initialConnectionWindowSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getInitialConnectionWindowSize() {
    return initialConnectionWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
  }
  /**
   * <pre>
   * Similar to *initial_stream_window_size*, but for connection-level flow-control
   * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getInitialConnectionWindowSizeOrBuilder() {
    return initialConnectionWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
  }

  public static final int ALLOW_CONNECT_FIELD_NUMBER = 5;
  private boolean allowConnect_ = false;
  /**
   * <pre>
   * Allows proxying Websocket and other upgrades over H2 connect.
   * </pre>
   *
   * <code>bool allow_connect = 5;</code>
   * @return The allowConnect.
   */
  @java.lang.Override
  public boolean getAllowConnect() {
    return allowConnect_;
  }

  public static final int ALLOW_METADATA_FIELD_NUMBER = 6;
  private boolean allowMetadata_ = false;
  /**
   * <pre>
   * [#not-implemented-hide:] Hiding until envoy has full metadata support.
   * Still under implementation. DO NOT USE.
   * Allows metadata. See [metadata
   * docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
   * information.
   * </pre>
   *
   * <code>bool allow_metadata = 6;</code>
   * @return The allowMetadata.
   */
  @java.lang.Override
  public boolean getAllowMetadata() {
    return allowMetadata_;
  }

  public static final int MAX_OUTBOUND_FRAMES_FIELD_NUMBER = 7;
  private com.google.protobuf.UInt32Value maxOutboundFrames_;
  /**
   * <pre>
   * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
   * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
   * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
   * to flood mitigation. The default limit is 10000.
   * [#comment:TODO: implement same limits for upstream outbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
   * @return Whether the maxOutboundFrames field is set.
   */
  @java.lang.Override
  public boolean hasMaxOutboundFrames() {
    return maxOutboundFrames_ != null;
  }
  /**
   * <pre>
   * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
   * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
   * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
   * to flood mitigation. The default limit is 10000.
   * [#comment:TODO: implement same limits for upstream outbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
   * @return The maxOutboundFrames.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxOutboundFrames() {
    return maxOutboundFrames_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundFrames_;
  }
  /**
   * <pre>
   * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
   * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
   * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
   * to flood mitigation. The default limit is 10000.
   * [#comment:TODO: implement same limits for upstream outbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxOutboundFramesOrBuilder() {
    return maxOutboundFrames_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundFrames_;
  }

  public static final int MAX_OUTBOUND_CONTROL_FRAMES_FIELD_NUMBER = 8;
  private com.google.protobuf.UInt32Value maxOutboundControlFrames_;
  /**
   * <pre>
   * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
   * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
   * this limit triggers flood mitigation and connection is terminated. The
   * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
   * mitigation. The default limit is 1000.
   * [#comment:TODO: implement same limits for upstream outbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
   * @return Whether the maxOutboundControlFrames field is set.
   */
  @java.lang.Override
  public boolean hasMaxOutboundControlFrames() {
    return maxOutboundControlFrames_ != null;
  }
  /**
   * <pre>
   * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
   * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
   * this limit triggers flood mitigation and connection is terminated. The
   * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
   * mitigation. The default limit is 1000.
   * [#comment:TODO: implement same limits for upstream outbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
   * @return The maxOutboundControlFrames.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxOutboundControlFrames() {
    return maxOutboundControlFrames_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundControlFrames_;
  }
  /**
   * <pre>
   * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
   * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
   * this limit triggers flood mitigation and connection is terminated. The
   * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
   * mitigation. The default limit is 1000.
   * [#comment:TODO: implement same limits for upstream outbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxOutboundControlFramesOrBuilder() {
    return maxOutboundControlFrames_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundControlFrames_;
  }

  public static final int MAX_CONSECUTIVE_INBOUND_FRAMES_WITH_EMPTY_PAYLOAD_FIELD_NUMBER = 9;
  private com.google.protobuf.UInt32Value maxConsecutiveInboundFramesWithEmptyPayload_;
  /**
   * <pre>
   * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
   * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
   * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
   * stat tracks the number of connections terminated due to flood mitigation.
   * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
   * and no end stream flag. The default limit is 1.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
   * @return Whether the maxConsecutiveInboundFramesWithEmptyPayload field is set.
   */
  @java.lang.Override
  public boolean hasMaxConsecutiveInboundFramesWithEmptyPayload() {
    return maxConsecutiveInboundFramesWithEmptyPayload_ != null;
  }
  /**
   * <pre>
   * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
   * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
   * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
   * stat tracks the number of connections terminated due to flood mitigation.
   * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
   * and no end stream flag. The default limit is 1.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
   * @return The maxConsecutiveInboundFramesWithEmptyPayload.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxConsecutiveInboundFramesWithEmptyPayload() {
    return maxConsecutiveInboundFramesWithEmptyPayload_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConsecutiveInboundFramesWithEmptyPayload_;
  }
  /**
   * <pre>
   * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
   * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
   * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
   * stat tracks the number of connections terminated due to flood mitigation.
   * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
   * and no end stream flag. The default limit is 1.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxConsecutiveInboundFramesWithEmptyPayloadOrBuilder() {
    return maxConsecutiveInboundFramesWithEmptyPayload_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConsecutiveInboundFramesWithEmptyPayload_;
  }

  public static final int MAX_INBOUND_PRIORITY_FRAMES_PER_STREAM_FIELD_NUMBER = 10;
  private com.google.protobuf.UInt32Value maxInboundPriorityFramesPerStream_;
  /**
   * <pre>
   * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
   * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
   * using this formula::
   *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
   * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
   * the number of connections terminated due to flood mitigation. The default limit is 100.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
   * @return Whether the maxInboundPriorityFramesPerStream field is set.
   */
  @java.lang.Override
  public boolean hasMaxInboundPriorityFramesPerStream() {
    return maxInboundPriorityFramesPerStream_ != null;
  }
  /**
   * <pre>
   * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
   * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
   * using this formula::
   *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
   * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
   * the number of connections terminated due to flood mitigation. The default limit is 100.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
   * @return The maxInboundPriorityFramesPerStream.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxInboundPriorityFramesPerStream() {
    return maxInboundPriorityFramesPerStream_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundPriorityFramesPerStream_;
  }
  /**
   * <pre>
   * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
   * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
   * using this formula::
   *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
   * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
   * the number of connections terminated due to flood mitigation. The default limit is 100.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxInboundPriorityFramesPerStreamOrBuilder() {
    return maxInboundPriorityFramesPerStream_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundPriorityFramesPerStream_;
  }

  public static final int MAX_INBOUND_WINDOW_UPDATE_FRAMES_PER_DATA_FRAME_SENT_FIELD_NUMBER = 11;
  private com.google.protobuf.UInt32Value maxInboundWindowUpdateFramesPerDataFrameSent_;
  /**
   * <pre>
   * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
   * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
   * using this formula::
   *     1 + 2 * (inbound_streams +
   *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
   * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
   * the number of connections terminated due to flood mitigation. The default limit is 10.
   * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
   * but more complex implementations that try to estimate available bandwidth require at least 2.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
   * @return Whether the maxInboundWindowUpdateFramesPerDataFrameSent field is set.
   */
  @java.lang.Override
  public boolean hasMaxInboundWindowUpdateFramesPerDataFrameSent() {
    return maxInboundWindowUpdateFramesPerDataFrameSent_ != null;
  }
  /**
   * <pre>
   * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
   * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
   * using this formula::
   *     1 + 2 * (inbound_streams +
   *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
   * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
   * the number of connections terminated due to flood mitigation. The default limit is 10.
   * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
   * but more complex implementations that try to estimate available bandwidth require at least 2.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
   * @return The maxInboundWindowUpdateFramesPerDataFrameSent.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxInboundWindowUpdateFramesPerDataFrameSent() {
    return maxInboundWindowUpdateFramesPerDataFrameSent_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundWindowUpdateFramesPerDataFrameSent_;
  }
  /**
   * <pre>
   * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
   * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
   * using this formula::
   *     1 + 2 * (inbound_streams +
   *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
   * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
   * the number of connections terminated due to flood mitigation. The default limit is 10.
   * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
   * but more complex implementations that try to estimate available bandwidth require at least 2.
   * [#comment:TODO: implement same limits for upstream inbound frames as well.]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxInboundWindowUpdateFramesPerDataFrameSentOrBuilder() {
    return maxInboundWindowUpdateFramesPerDataFrameSent_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundWindowUpdateFramesPerDataFrameSent_;
  }

  public static final int STREAM_ERROR_ON_INVALID_HTTP_MESSAGING_FIELD_NUMBER = 12;
  private boolean streamErrorOnInvalidHttpMessaging_ = false;
  /**
   * <pre>
   * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
   * the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
   * when this option is enabled, only the offending stream is terminated.
   * See `RFC7540, sec. 8.1 &lt;https://tools.ietf.org/html/rfc7540#section-8.1&gt;`_ for details.
   * </pre>
   *
   * <code>bool stream_error_on_invalid_http_messaging = 12;</code>
   * @return The streamErrorOnInvalidHttpMessaging.
   */
  @java.lang.Override
  public boolean getStreamErrorOnInvalidHttpMessaging() {
    return streamErrorOnInvalidHttpMessaging_;
  }

  public static final int CUSTOM_SETTINGS_PARAMETERS_FIELD_NUMBER = 13;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter> customSettingsParameters_;
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
   * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
   * Envoy.
   * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
   * 'allow_connect'.
   * Note that custom parameters specified through this field can not also be set in the
   * corresponding named parameters:
   * .. code-block:: text
   *   ID    Field Name
   *   ----------------
   *   0x1   hpack_table_size
   *   0x3   max_concurrent_streams
   *   0x4   initial_stream_window_size
   * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
   * between custom parameters with the same identifier will trigger a failure.
   * See `IANA HTTP/2 Settings
   * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
   * standardized identifiers.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter> getCustomSettingsParametersList() {
    return customSettingsParameters_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
   * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
   * Envoy.
   * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
   * 'allow_connect'.
   * Note that custom parameters specified through this field can not also be set in the
   * corresponding named parameters:
   * .. code-block:: text
   *   ID    Field Name
   *   ----------------
   *   0x1   hpack_table_size
   *   0x3   max_concurrent_streams
   *   0x4   initial_stream_window_size
   * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
   * between custom parameters with the same identifier will trigger a failure.
   * See `IANA HTTP/2 Settings
   * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
   * standardized identifiers.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder> 
      getCustomSettingsParametersOrBuilderList() {
    return customSettingsParameters_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
   * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
   * Envoy.
   * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
   * 'allow_connect'.
   * Note that custom parameters specified through this field can not also be set in the
   * corresponding named parameters:
   * .. code-block:: text
   *   ID    Field Name
   *   ----------------
   *   0x1   hpack_table_size
   *   0x3   max_concurrent_streams
   *   0x4   initial_stream_window_size
   * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
   * between custom parameters with the same identifier will trigger a failure.
   * See `IANA HTTP/2 Settings
   * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
   * standardized identifiers.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
   */
  @java.lang.Override
  public int getCustomSettingsParametersCount() {
    return customSettingsParameters_.size();
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
   * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
   * Envoy.
   * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
   * 'allow_connect'.
   * Note that custom parameters specified through this field can not also be set in the
   * corresponding named parameters:
   * .. code-block:: text
   *   ID    Field Name
   *   ----------------
   *   0x1   hpack_table_size
   *   0x3   max_concurrent_streams
   *   0x4   initial_stream_window_size
   * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
   * between custom parameters with the same identifier will trigger a failure.
   * See `IANA HTTP/2 Settings
   * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
   * standardized identifiers.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter getCustomSettingsParameters(int index) {
    return customSettingsParameters_.get(index);
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
   * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
   * Envoy.
   * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
   * 'allow_connect'.
   * Note that custom parameters specified through this field can not also be set in the
   * corresponding named parameters:
   * .. code-block:: text
   *   ID    Field Name
   *   ----------------
   *   0x1   hpack_table_size
   *   0x3   max_concurrent_streams
   *   0x4   initial_stream_window_size
   * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
   * between custom parameters with the same identifier will trigger a failure.
   * See `IANA HTTP/2 Settings
   * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
   * standardized identifiers.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder getCustomSettingsParametersOrBuilder(
      int index) {
    return customSettingsParameters_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hpackTableSize_ != null) {
      output.writeMessage(1, getHpackTableSize());
    }
    if (maxConcurrentStreams_ != null) {
      output.writeMessage(2, getMaxConcurrentStreams());
    }
    if (initialStreamWindowSize_ != null) {
      output.writeMessage(3, getInitialStreamWindowSize());
    }
    if (initialConnectionWindowSize_ != null) {
      output.writeMessage(4, getInitialConnectionWindowSize());
    }
    if (allowConnect_ != false) {
      output.writeBool(5, allowConnect_);
    }
    if (allowMetadata_ != false) {
      output.writeBool(6, allowMetadata_);
    }
    if (maxOutboundFrames_ != null) {
      output.writeMessage(7, getMaxOutboundFrames());
    }
    if (maxOutboundControlFrames_ != null) {
      output.writeMessage(8, getMaxOutboundControlFrames());
    }
    if (maxConsecutiveInboundFramesWithEmptyPayload_ != null) {
      output.writeMessage(9, getMaxConsecutiveInboundFramesWithEmptyPayload());
    }
    if (maxInboundPriorityFramesPerStream_ != null) {
      output.writeMessage(10, getMaxInboundPriorityFramesPerStream());
    }
    if (maxInboundWindowUpdateFramesPerDataFrameSent_ != null) {
      output.writeMessage(11, getMaxInboundWindowUpdateFramesPerDataFrameSent());
    }
    if (streamErrorOnInvalidHttpMessaging_ != false) {
      output.writeBool(12, streamErrorOnInvalidHttpMessaging_);
    }
    for (int i = 0; i < customSettingsParameters_.size(); i++) {
      output.writeMessage(13, customSettingsParameters_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (hpackTableSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getHpackTableSize());
    }
    if (maxConcurrentStreams_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMaxConcurrentStreams());
    }
    if (initialStreamWindowSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getInitialStreamWindowSize());
    }
    if (initialConnectionWindowSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getInitialConnectionWindowSize());
    }
    if (allowConnect_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, allowConnect_);
    }
    if (allowMetadata_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, allowMetadata_);
    }
    if (maxOutboundFrames_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getMaxOutboundFrames());
    }
    if (maxOutboundControlFrames_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getMaxOutboundControlFrames());
    }
    if (maxConsecutiveInboundFramesWithEmptyPayload_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getMaxConsecutiveInboundFramesWithEmptyPayload());
    }
    if (maxInboundPriorityFramesPerStream_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getMaxInboundPriorityFramesPerStream());
    }
    if (maxInboundWindowUpdateFramesPerDataFrameSent_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getMaxInboundWindowUpdateFramesPerDataFrameSent());
    }
    if (streamErrorOnInvalidHttpMessaging_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, streamErrorOnInvalidHttpMessaging_);
    }
    for (int i = 0; i < customSettingsParameters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, customSettingsParameters_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions other = (io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions) obj;

    if (hasHpackTableSize() != other.hasHpackTableSize()) return false;
    if (hasHpackTableSize()) {
      if (!getHpackTableSize()
          .equals(other.getHpackTableSize())) return false;
    }
    if (hasMaxConcurrentStreams() != other.hasMaxConcurrentStreams()) return false;
    if (hasMaxConcurrentStreams()) {
      if (!getMaxConcurrentStreams()
          .equals(other.getMaxConcurrentStreams())) return false;
    }
    if (hasInitialStreamWindowSize() != other.hasInitialStreamWindowSize()) return false;
    if (hasInitialStreamWindowSize()) {
      if (!getInitialStreamWindowSize()
          .equals(other.getInitialStreamWindowSize())) return false;
    }
    if (hasInitialConnectionWindowSize() != other.hasInitialConnectionWindowSize()) return false;
    if (hasInitialConnectionWindowSize()) {
      if (!getInitialConnectionWindowSize()
          .equals(other.getInitialConnectionWindowSize())) return false;
    }
    if (getAllowConnect()
        != other.getAllowConnect()) return false;
    if (getAllowMetadata()
        != other.getAllowMetadata()) return false;
    if (hasMaxOutboundFrames() != other.hasMaxOutboundFrames()) return false;
    if (hasMaxOutboundFrames()) {
      if (!getMaxOutboundFrames()
          .equals(other.getMaxOutboundFrames())) return false;
    }
    if (hasMaxOutboundControlFrames() != other.hasMaxOutboundControlFrames()) return false;
    if (hasMaxOutboundControlFrames()) {
      if (!getMaxOutboundControlFrames()
          .equals(other.getMaxOutboundControlFrames())) return false;
    }
    if (hasMaxConsecutiveInboundFramesWithEmptyPayload() != other.hasMaxConsecutiveInboundFramesWithEmptyPayload()) return false;
    if (hasMaxConsecutiveInboundFramesWithEmptyPayload()) {
      if (!getMaxConsecutiveInboundFramesWithEmptyPayload()
          .equals(other.getMaxConsecutiveInboundFramesWithEmptyPayload())) return false;
    }
    if (hasMaxInboundPriorityFramesPerStream() != other.hasMaxInboundPriorityFramesPerStream()) return false;
    if (hasMaxInboundPriorityFramesPerStream()) {
      if (!getMaxInboundPriorityFramesPerStream()
          .equals(other.getMaxInboundPriorityFramesPerStream())) return false;
    }
    if (hasMaxInboundWindowUpdateFramesPerDataFrameSent() != other.hasMaxInboundWindowUpdateFramesPerDataFrameSent()) return false;
    if (hasMaxInboundWindowUpdateFramesPerDataFrameSent()) {
      if (!getMaxInboundWindowUpdateFramesPerDataFrameSent()
          .equals(other.getMaxInboundWindowUpdateFramesPerDataFrameSent())) return false;
    }
    if (getStreamErrorOnInvalidHttpMessaging()
        != other.getStreamErrorOnInvalidHttpMessaging()) return false;
    if (!getCustomSettingsParametersList()
        .equals(other.getCustomSettingsParametersList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasHpackTableSize()) {
      hash = (37 * hash) + HPACK_TABLE_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getHpackTableSize().hashCode();
    }
    if (hasMaxConcurrentStreams()) {
      hash = (37 * hash) + MAX_CONCURRENT_STREAMS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxConcurrentStreams().hashCode();
    }
    if (hasInitialStreamWindowSize()) {
      hash = (37 * hash) + INITIAL_STREAM_WINDOW_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getInitialStreamWindowSize().hashCode();
    }
    if (hasInitialConnectionWindowSize()) {
      hash = (37 * hash) + INITIAL_CONNECTION_WINDOW_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getInitialConnectionWindowSize().hashCode();
    }
    hash = (37 * hash) + ALLOW_CONNECT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowConnect());
    hash = (37 * hash) + ALLOW_METADATA_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAllowMetadata());
    if (hasMaxOutboundFrames()) {
      hash = (37 * hash) + MAX_OUTBOUND_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + getMaxOutboundFrames().hashCode();
    }
    if (hasMaxOutboundControlFrames()) {
      hash = (37 * hash) + MAX_OUTBOUND_CONTROL_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + getMaxOutboundControlFrames().hashCode();
    }
    if (hasMaxConsecutiveInboundFramesWithEmptyPayload()) {
      hash = (37 * hash) + MAX_CONSECUTIVE_INBOUND_FRAMES_WITH_EMPTY_PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getMaxConsecutiveInboundFramesWithEmptyPayload().hashCode();
    }
    if (hasMaxInboundPriorityFramesPerStream()) {
      hash = (37 * hash) + MAX_INBOUND_PRIORITY_FRAMES_PER_STREAM_FIELD_NUMBER;
      hash = (53 * hash) + getMaxInboundPriorityFramesPerStream().hashCode();
    }
    if (hasMaxInboundWindowUpdateFramesPerDataFrameSent()) {
      hash = (37 * hash) + MAX_INBOUND_WINDOW_UPDATE_FRAMES_PER_DATA_FRAME_SENT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxInboundWindowUpdateFramesPerDataFrameSent().hashCode();
    }
    hash = (37 * hash) + STREAM_ERROR_ON_INVALID_HTTP_MESSAGING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getStreamErrorOnInvalidHttpMessaging());
    if (getCustomSettingsParametersCount() > 0) {
      hash = (37 * hash) + CUSTOM_SETTINGS_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getCustomSettingsParametersList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 14]
   * </pre>
   *
   * Protobuf type {@code envoy.api.v2.core.Http2ProtocolOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.api.v2.core.Http2ProtocolOptions)
      io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.class, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      hpackTableSize_ = null;
      if (hpackTableSizeBuilder_ != null) {
        hpackTableSizeBuilder_.dispose();
        hpackTableSizeBuilder_ = null;
      }
      maxConcurrentStreams_ = null;
      if (maxConcurrentStreamsBuilder_ != null) {
        maxConcurrentStreamsBuilder_.dispose();
        maxConcurrentStreamsBuilder_ = null;
      }
      initialStreamWindowSize_ = null;
      if (initialStreamWindowSizeBuilder_ != null) {
        initialStreamWindowSizeBuilder_.dispose();
        initialStreamWindowSizeBuilder_ = null;
      }
      initialConnectionWindowSize_ = null;
      if (initialConnectionWindowSizeBuilder_ != null) {
        initialConnectionWindowSizeBuilder_.dispose();
        initialConnectionWindowSizeBuilder_ = null;
      }
      allowConnect_ = false;
      allowMetadata_ = false;
      maxOutboundFrames_ = null;
      if (maxOutboundFramesBuilder_ != null) {
        maxOutboundFramesBuilder_.dispose();
        maxOutboundFramesBuilder_ = null;
      }
      maxOutboundControlFrames_ = null;
      if (maxOutboundControlFramesBuilder_ != null) {
        maxOutboundControlFramesBuilder_.dispose();
        maxOutboundControlFramesBuilder_ = null;
      }
      maxConsecutiveInboundFramesWithEmptyPayload_ = null;
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ != null) {
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.dispose();
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ = null;
      }
      maxInboundPriorityFramesPerStream_ = null;
      if (maxInboundPriorityFramesPerStreamBuilder_ != null) {
        maxInboundPriorityFramesPerStreamBuilder_.dispose();
        maxInboundPriorityFramesPerStreamBuilder_ = null;
      }
      maxInboundWindowUpdateFramesPerDataFrameSent_ = null;
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ != null) {
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.dispose();
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ = null;
      }
      streamErrorOnInvalidHttpMessaging_ = false;
      if (customSettingsParametersBuilder_ == null) {
        customSettingsParameters_ = java.util.Collections.emptyList();
      } else {
        customSettingsParameters_ = null;
        customSettingsParametersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00001000);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_Http2ProtocolOptions_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions getDefaultInstanceForType() {
      return io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions build() {
      io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions buildPartial() {
      io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions result = new io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions result) {
      if (customSettingsParametersBuilder_ == null) {
        if (((bitField0_ & 0x00001000) != 0)) {
          customSettingsParameters_ = java.util.Collections.unmodifiableList(customSettingsParameters_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.customSettingsParameters_ = customSettingsParameters_;
      } else {
        result.customSettingsParameters_ = customSettingsParametersBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.hpackTableSize_ = hpackTableSizeBuilder_ == null
            ? hpackTableSize_
            : hpackTableSizeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.maxConcurrentStreams_ = maxConcurrentStreamsBuilder_ == null
            ? maxConcurrentStreams_
            : maxConcurrentStreamsBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.initialStreamWindowSize_ = initialStreamWindowSizeBuilder_ == null
            ? initialStreamWindowSize_
            : initialStreamWindowSizeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.initialConnectionWindowSize_ = initialConnectionWindowSizeBuilder_ == null
            ? initialConnectionWindowSize_
            : initialConnectionWindowSizeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.allowConnect_ = allowConnect_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.allowMetadata_ = allowMetadata_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.maxOutboundFrames_ = maxOutboundFramesBuilder_ == null
            ? maxOutboundFrames_
            : maxOutboundFramesBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.maxOutboundControlFrames_ = maxOutboundControlFramesBuilder_ == null
            ? maxOutboundControlFrames_
            : maxOutboundControlFramesBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.maxConsecutiveInboundFramesWithEmptyPayload_ = maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ == null
            ? maxConsecutiveInboundFramesWithEmptyPayload_
            : maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.maxInboundPriorityFramesPerStream_ = maxInboundPriorityFramesPerStreamBuilder_ == null
            ? maxInboundPriorityFramesPerStream_
            : maxInboundPriorityFramesPerStreamBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.maxInboundWindowUpdateFramesPerDataFrameSent_ = maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ == null
            ? maxInboundWindowUpdateFramesPerDataFrameSent_
            : maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.streamErrorOnInvalidHttpMessaging_ = streamErrorOnInvalidHttpMessaging_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions) {
        return mergeFrom((io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions other) {
      if (other == io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.getDefaultInstance()) return this;
      if (other.hasHpackTableSize()) {
        mergeHpackTableSize(other.getHpackTableSize());
      }
      if (other.hasMaxConcurrentStreams()) {
        mergeMaxConcurrentStreams(other.getMaxConcurrentStreams());
      }
      if (other.hasInitialStreamWindowSize()) {
        mergeInitialStreamWindowSize(other.getInitialStreamWindowSize());
      }
      if (other.hasInitialConnectionWindowSize()) {
        mergeInitialConnectionWindowSize(other.getInitialConnectionWindowSize());
      }
      if (other.getAllowConnect() != false) {
        setAllowConnect(other.getAllowConnect());
      }
      if (other.getAllowMetadata() != false) {
        setAllowMetadata(other.getAllowMetadata());
      }
      if (other.hasMaxOutboundFrames()) {
        mergeMaxOutboundFrames(other.getMaxOutboundFrames());
      }
      if (other.hasMaxOutboundControlFrames()) {
        mergeMaxOutboundControlFrames(other.getMaxOutboundControlFrames());
      }
      if (other.hasMaxConsecutiveInboundFramesWithEmptyPayload()) {
        mergeMaxConsecutiveInboundFramesWithEmptyPayload(other.getMaxConsecutiveInboundFramesWithEmptyPayload());
      }
      if (other.hasMaxInboundPriorityFramesPerStream()) {
        mergeMaxInboundPriorityFramesPerStream(other.getMaxInboundPriorityFramesPerStream());
      }
      if (other.hasMaxInboundWindowUpdateFramesPerDataFrameSent()) {
        mergeMaxInboundWindowUpdateFramesPerDataFrameSent(other.getMaxInboundWindowUpdateFramesPerDataFrameSent());
      }
      if (other.getStreamErrorOnInvalidHttpMessaging() != false) {
        setStreamErrorOnInvalidHttpMessaging(other.getStreamErrorOnInvalidHttpMessaging());
      }
      if (customSettingsParametersBuilder_ == null) {
        if (!other.customSettingsParameters_.isEmpty()) {
          if (customSettingsParameters_.isEmpty()) {
            customSettingsParameters_ = other.customSettingsParameters_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureCustomSettingsParametersIsMutable();
            customSettingsParameters_.addAll(other.customSettingsParameters_);
          }
          onChanged();
        }
      } else {
        if (!other.customSettingsParameters_.isEmpty()) {
          if (customSettingsParametersBuilder_.isEmpty()) {
            customSettingsParametersBuilder_.dispose();
            customSettingsParametersBuilder_ = null;
            customSettingsParameters_ = other.customSettingsParameters_;
            bitField0_ = (bitField0_ & ~0x00001000);
            customSettingsParametersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCustomSettingsParametersFieldBuilder() : null;
          } else {
            customSettingsParametersBuilder_.addAllMessages(other.customSettingsParameters_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getHpackTableSizeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getMaxConcurrentStreamsFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getInitialStreamWindowSizeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getInitialConnectionWindowSizeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 40: {
              allowConnect_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              allowMetadata_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            case 58: {
              input.readMessage(
                  getMaxOutboundFramesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getMaxOutboundControlFramesFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getMaxConsecutiveInboundFramesWithEmptyPayloadFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000100;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getMaxInboundPriorityFramesPerStreamFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000200;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getMaxInboundWindowUpdateFramesPerDataFrameSentFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000400;
              break;
            } // case 90
            case 96: {
              streamErrorOnInvalidHttpMessaging_ = input.readBool();
              bitField0_ |= 0x00000800;
              break;
            } // case 96
            case 106: {
              io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter m =
                  input.readMessage(
                      io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.parser(),
                      extensionRegistry);
              if (customSettingsParametersBuilder_ == null) {
                ensureCustomSettingsParametersIsMutable();
                customSettingsParameters_.add(m);
              } else {
                customSettingsParametersBuilder_.addMessage(m);
              }
              break;
            } // case 106
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.UInt32Value hpackTableSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> hpackTableSizeBuilder_;
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     * @return Whether the hpackTableSize field is set.
     */
    public boolean hasHpackTableSize() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     * @return The hpackTableSize.
     */
    public com.google.protobuf.UInt32Value getHpackTableSize() {
      if (hpackTableSizeBuilder_ == null) {
        return hpackTableSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : hpackTableSize_;
      } else {
        return hpackTableSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    public Builder setHpackTableSize(com.google.protobuf.UInt32Value value) {
      if (hpackTableSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hpackTableSize_ = value;
      } else {
        hpackTableSizeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    public Builder setHpackTableSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (hpackTableSizeBuilder_ == null) {
        hpackTableSize_ = builderForValue.build();
      } else {
        hpackTableSizeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    public Builder mergeHpackTableSize(com.google.protobuf.UInt32Value value) {
      if (hpackTableSizeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          hpackTableSize_ != null &&
          hpackTableSize_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getHpackTableSizeBuilder().mergeFrom(value);
        } else {
          hpackTableSize_ = value;
        }
      } else {
        hpackTableSizeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    public Builder clearHpackTableSize() {
      bitField0_ = (bitField0_ & ~0x00000001);
      hpackTableSize_ = null;
      if (hpackTableSizeBuilder_ != null) {
        hpackTableSizeBuilder_.dispose();
        hpackTableSizeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    public com.google.protobuf.UInt32Value.Builder getHpackTableSizeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getHpackTableSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getHpackTableSizeOrBuilder() {
      if (hpackTableSizeBuilder_ != null) {
        return hpackTableSizeBuilder_.getMessageOrBuilder();
      } else {
        return hpackTableSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : hpackTableSize_;
      }
    }
    /**
     * <pre>
     * `Maximum table size &lt;https://httpwg.org/specs/rfc7541.html#rfc.section.4.2&gt;`_
     * (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
     * range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
     * compression.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value hpack_table_size = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getHpackTableSizeFieldBuilder() {
      if (hpackTableSizeBuilder_ == null) {
        hpackTableSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getHpackTableSize(),
                getParentForChildren(),
                isClean());
        hpackTableSize_ = null;
      }
      return hpackTableSizeBuilder_;
    }

    private com.google.protobuf.UInt32Value maxConcurrentStreams_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxConcurrentStreamsBuilder_;
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the maxConcurrentStreams field is set.
     */
    public boolean hasMaxConcurrentStreams() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     * @return The maxConcurrentStreams.
     */
    public com.google.protobuf.UInt32Value getMaxConcurrentStreams() {
      if (maxConcurrentStreamsBuilder_ == null) {
        return maxConcurrentStreams_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
      } else {
        return maxConcurrentStreamsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxConcurrentStreams(com.google.protobuf.UInt32Value value) {
      if (maxConcurrentStreamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxConcurrentStreams_ = value;
      } else {
        maxConcurrentStreamsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxConcurrentStreams(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxConcurrentStreamsBuilder_ == null) {
        maxConcurrentStreams_ = builderForValue.build();
      } else {
        maxConcurrentStreamsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxConcurrentStreams(com.google.protobuf.UInt32Value value) {
      if (maxConcurrentStreamsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          maxConcurrentStreams_ != null &&
          maxConcurrentStreams_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxConcurrentStreamsBuilder().mergeFrom(value);
        } else {
          maxConcurrentStreams_ = value;
        }
      } else {
        maxConcurrentStreamsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxConcurrentStreams() {
      bitField0_ = (bitField0_ & ~0x00000002);
      maxConcurrentStreams_ = null;
      if (maxConcurrentStreamsBuilder_ != null) {
        maxConcurrentStreamsBuilder_.dispose();
        maxConcurrentStreamsBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxConcurrentStreamsBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMaxConcurrentStreamsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxConcurrentStreamsOrBuilder() {
      if (maxConcurrentStreamsBuilder_ != null) {
        return maxConcurrentStreamsBuilder_.getMessageOrBuilder();
      } else {
        return maxConcurrentStreams_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxConcurrentStreams_;
      }
    }
    /**
     * <pre>
     * `Maximum concurrent streams &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2&gt;`_
     * allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
     * and defaults to 2147483647.
     * For upstream connections, this also limits how many streams Envoy will initiate concurrently
     * on a single connection. If the limit is reached, Envoy may queue requests or establish
     * additional connections (as allowed per circuit breaker limits).
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_concurrent_streams = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxConcurrentStreamsFieldBuilder() {
      if (maxConcurrentStreamsBuilder_ == null) {
        maxConcurrentStreamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxConcurrentStreams(),
                getParentForChildren(),
                isClean());
        maxConcurrentStreams_ = null;
      }
      return maxConcurrentStreamsBuilder_;
    }

    private com.google.protobuf.UInt32Value initialStreamWindowSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> initialStreamWindowSizeBuilder_;
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the initialStreamWindowSize field is set.
     */
    public boolean hasInitialStreamWindowSize() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     * @return The initialStreamWindowSize.
     */
    public com.google.protobuf.UInt32Value getInitialStreamWindowSize() {
      if (initialStreamWindowSizeBuilder_ == null) {
        return initialStreamWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
      } else {
        return initialStreamWindowSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialStreamWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialStreamWindowSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initialStreamWindowSize_ = value;
      } else {
        initialStreamWindowSizeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialStreamWindowSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (initialStreamWindowSizeBuilder_ == null) {
        initialStreamWindowSize_ = builderForValue.build();
      } else {
        initialStreamWindowSizeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeInitialStreamWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialStreamWindowSizeBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          initialStreamWindowSize_ != null &&
          initialStreamWindowSize_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getInitialStreamWindowSizeBuilder().mergeFrom(value);
        } else {
          initialStreamWindowSize_ = value;
        }
      } else {
        initialStreamWindowSizeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearInitialStreamWindowSize() {
      bitField0_ = (bitField0_ & ~0x00000004);
      initialStreamWindowSize_ = null;
      if (initialStreamWindowSizeBuilder_ != null) {
        initialStreamWindowSizeBuilder_.dispose();
        initialStreamWindowSizeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getInitialStreamWindowSizeBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getInitialStreamWindowSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getInitialStreamWindowSizeOrBuilder() {
      if (initialStreamWindowSizeBuilder_ != null) {
        return initialStreamWindowSizeBuilder_.getMessageOrBuilder();
      } else {
        return initialStreamWindowSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : initialStreamWindowSize_;
      }
    }
    /**
     * <pre>
     * `Initial stream-level flow-control window
     * &lt;https://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2&gt;`_ size. Valid values range from 65535
     * (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456
     * (256 * 1024 * 1024).
     * NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default
     * window size now, so it's also the minimum.
     * This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
     * HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
     * stop the flow of data to the codec buffers.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_stream_window_size = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getInitialStreamWindowSizeFieldBuilder() {
      if (initialStreamWindowSizeBuilder_ == null) {
        initialStreamWindowSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getInitialStreamWindowSize(),
                getParentForChildren(),
                isClean());
        initialStreamWindowSize_ = null;
      }
      return initialStreamWindowSizeBuilder_;
    }

    private com.google.protobuf.UInt32Value initialConnectionWindowSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> initialConnectionWindowSizeBuilder_;
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     * @return Whether the initialConnectionWindowSize field is set.
     */
    public boolean hasInitialConnectionWindowSize() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     * @return The initialConnectionWindowSize.
     */
    public com.google.protobuf.UInt32Value getInitialConnectionWindowSize() {
      if (initialConnectionWindowSizeBuilder_ == null) {
        return initialConnectionWindowSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
      } else {
        return initialConnectionWindowSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialConnectionWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialConnectionWindowSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        initialConnectionWindowSize_ = value;
      } else {
        initialConnectionWindowSizeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setInitialConnectionWindowSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (initialConnectionWindowSizeBuilder_ == null) {
        initialConnectionWindowSize_ = builderForValue.build();
      } else {
        initialConnectionWindowSizeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeInitialConnectionWindowSize(com.google.protobuf.UInt32Value value) {
      if (initialConnectionWindowSizeBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          initialConnectionWindowSize_ != null &&
          initialConnectionWindowSize_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getInitialConnectionWindowSizeBuilder().mergeFrom(value);
        } else {
          initialConnectionWindowSize_ = value;
        }
      } else {
        initialConnectionWindowSizeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearInitialConnectionWindowSize() {
      bitField0_ = (bitField0_ & ~0x00000008);
      initialConnectionWindowSize_ = null;
      if (initialConnectionWindowSizeBuilder_ != null) {
        initialConnectionWindowSizeBuilder_.dispose();
        initialConnectionWindowSizeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getInitialConnectionWindowSizeBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getInitialConnectionWindowSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getInitialConnectionWindowSizeOrBuilder() {
      if (initialConnectionWindowSizeBuilder_ != null) {
        return initialConnectionWindowSizeBuilder_.getMessageOrBuilder();
      } else {
        return initialConnectionWindowSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : initialConnectionWindowSize_;
      }
    }
    /**
     * <pre>
     * Similar to *initial_stream_window_size*, but for connection-level flow-control
     * window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value initial_connection_window_size = 4 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getInitialConnectionWindowSizeFieldBuilder() {
      if (initialConnectionWindowSizeBuilder_ == null) {
        initialConnectionWindowSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getInitialConnectionWindowSize(),
                getParentForChildren(),
                isClean());
        initialConnectionWindowSize_ = null;
      }
      return initialConnectionWindowSizeBuilder_;
    }

    private boolean allowConnect_ ;
    /**
     * <pre>
     * Allows proxying Websocket and other upgrades over H2 connect.
     * </pre>
     *
     * <code>bool allow_connect = 5;</code>
     * @return The allowConnect.
     */
    @java.lang.Override
    public boolean getAllowConnect() {
      return allowConnect_;
    }
    /**
     * <pre>
     * Allows proxying Websocket and other upgrades over H2 connect.
     * </pre>
     *
     * <code>bool allow_connect = 5;</code>
     * @param value The allowConnect to set.
     * @return This builder for chaining.
     */
    public Builder setAllowConnect(boolean value) {
      
      allowConnect_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows proxying Websocket and other upgrades over H2 connect.
     * </pre>
     *
     * <code>bool allow_connect = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowConnect() {
      bitField0_ = (bitField0_ & ~0x00000010);
      allowConnect_ = false;
      onChanged();
      return this;
    }

    private boolean allowMetadata_ ;
    /**
     * <pre>
     * [#not-implemented-hide:] Hiding until envoy has full metadata support.
     * Still under implementation. DO NOT USE.
     * Allows metadata. See [metadata
     * docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
     * information.
     * </pre>
     *
     * <code>bool allow_metadata = 6;</code>
     * @return The allowMetadata.
     */
    @java.lang.Override
    public boolean getAllowMetadata() {
      return allowMetadata_;
    }
    /**
     * <pre>
     * [#not-implemented-hide:] Hiding until envoy has full metadata support.
     * Still under implementation. DO NOT USE.
     * Allows metadata. See [metadata
     * docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
     * information.
     * </pre>
     *
     * <code>bool allow_metadata = 6;</code>
     * @param value The allowMetadata to set.
     * @return This builder for chaining.
     */
    public Builder setAllowMetadata(boolean value) {
      
      allowMetadata_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:] Hiding until envoy has full metadata support.
     * Still under implementation. DO NOT USE.
     * Allows metadata. See [metadata
     * docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more
     * information.
     * </pre>
     *
     * <code>bool allow_metadata = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAllowMetadata() {
      bitField0_ = (bitField0_ & ~0x00000020);
      allowMetadata_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt32Value maxOutboundFrames_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxOutboundFramesBuilder_;
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     * @return Whether the maxOutboundFrames field is set.
     */
    public boolean hasMaxOutboundFrames() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     * @return The maxOutboundFrames.
     */
    public com.google.protobuf.UInt32Value getMaxOutboundFrames() {
      if (maxOutboundFramesBuilder_ == null) {
        return maxOutboundFrames_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundFrames_;
      } else {
        return maxOutboundFramesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxOutboundFrames(com.google.protobuf.UInt32Value value) {
      if (maxOutboundFramesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxOutboundFrames_ = value;
      } else {
        maxOutboundFramesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxOutboundFrames(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxOutboundFramesBuilder_ == null) {
        maxOutboundFrames_ = builderForValue.build();
      } else {
        maxOutboundFramesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxOutboundFrames(com.google.protobuf.UInt32Value value) {
      if (maxOutboundFramesBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          maxOutboundFrames_ != null &&
          maxOutboundFrames_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxOutboundFramesBuilder().mergeFrom(value);
        } else {
          maxOutboundFrames_ = value;
        }
      } else {
        maxOutboundFramesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxOutboundFrames() {
      bitField0_ = (bitField0_ & ~0x00000040);
      maxOutboundFrames_ = null;
      if (maxOutboundFramesBuilder_ != null) {
        maxOutboundFramesBuilder_.dispose();
        maxOutboundFramesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxOutboundFramesBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getMaxOutboundFramesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxOutboundFramesOrBuilder() {
      if (maxOutboundFramesBuilder_ != null) {
        return maxOutboundFramesBuilder_.getMessageOrBuilder();
      } else {
        return maxOutboundFrames_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundFrames_;
      }
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of all types (frames that are waiting to
     * be written into the socket). Exceeding this limit triggers flood mitigation and connection is
     * terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due
     * to flood mitigation. The default limit is 10000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_frames = 7 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxOutboundFramesFieldBuilder() {
      if (maxOutboundFramesBuilder_ == null) {
        maxOutboundFramesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxOutboundFrames(),
                getParentForChildren(),
                isClean());
        maxOutboundFrames_ = null;
      }
      return maxOutboundFramesBuilder_;
    }

    private com.google.protobuf.UInt32Value maxOutboundControlFrames_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxOutboundControlFramesBuilder_;
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     * @return Whether the maxOutboundControlFrames field is set.
     */
    public boolean hasMaxOutboundControlFrames() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     * @return The maxOutboundControlFrames.
     */
    public com.google.protobuf.UInt32Value getMaxOutboundControlFrames() {
      if (maxOutboundControlFramesBuilder_ == null) {
        return maxOutboundControlFrames_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundControlFrames_;
      } else {
        return maxOutboundControlFramesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxOutboundControlFrames(com.google.protobuf.UInt32Value value) {
      if (maxOutboundControlFramesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxOutboundControlFrames_ = value;
      } else {
        maxOutboundControlFramesBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxOutboundControlFrames(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxOutboundControlFramesBuilder_ == null) {
        maxOutboundControlFrames_ = builderForValue.build();
      } else {
        maxOutboundControlFramesBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxOutboundControlFrames(com.google.protobuf.UInt32Value value) {
      if (maxOutboundControlFramesBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          maxOutboundControlFrames_ != null &&
          maxOutboundControlFrames_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxOutboundControlFramesBuilder().mergeFrom(value);
        } else {
          maxOutboundControlFrames_ = value;
        }
      } else {
        maxOutboundControlFramesBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxOutboundControlFrames() {
      bitField0_ = (bitField0_ & ~0x00000080);
      maxOutboundControlFrames_ = null;
      if (maxOutboundControlFramesBuilder_ != null) {
        maxOutboundControlFramesBuilder_.dispose();
        maxOutboundControlFramesBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxOutboundControlFramesBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getMaxOutboundControlFramesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxOutboundControlFramesOrBuilder() {
      if (maxOutboundControlFramesBuilder_ != null) {
        return maxOutboundControlFramesBuilder_.getMessageOrBuilder();
      } else {
        return maxOutboundControlFrames_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxOutboundControlFrames_;
      }
    }
    /**
     * <pre>
     * Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM,
     * preventing high memory utilization when receiving continuous stream of these frames. Exceeding
     * this limit triggers flood mitigation and connection is terminated. The
     * ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood
     * mitigation. The default limit is 1000.
     * [#comment:TODO: implement same limits for upstream outbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_outbound_control_frames = 8 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxOutboundControlFramesFieldBuilder() {
      if (maxOutboundControlFramesBuilder_ == null) {
        maxOutboundControlFramesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxOutboundControlFrames(),
                getParentForChildren(),
                isClean());
        maxOutboundControlFrames_ = null;
      }
      return maxOutboundControlFramesBuilder_;
    }

    private com.google.protobuf.UInt32Value maxConsecutiveInboundFramesWithEmptyPayload_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxConsecutiveInboundFramesWithEmptyPayloadBuilder_;
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     * @return Whether the maxConsecutiveInboundFramesWithEmptyPayload field is set.
     */
    public boolean hasMaxConsecutiveInboundFramesWithEmptyPayload() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     * @return The maxConsecutiveInboundFramesWithEmptyPayload.
     */
    public com.google.protobuf.UInt32Value getMaxConsecutiveInboundFramesWithEmptyPayload() {
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ == null) {
        return maxConsecutiveInboundFramesWithEmptyPayload_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxConsecutiveInboundFramesWithEmptyPayload_;
      } else {
        return maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    public Builder setMaxConsecutiveInboundFramesWithEmptyPayload(com.google.protobuf.UInt32Value value) {
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxConsecutiveInboundFramesWithEmptyPayload_ = value;
      } else {
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    public Builder setMaxConsecutiveInboundFramesWithEmptyPayload(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ == null) {
        maxConsecutiveInboundFramesWithEmptyPayload_ = builderForValue.build();
      } else {
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    public Builder mergeMaxConsecutiveInboundFramesWithEmptyPayload(com.google.protobuf.UInt32Value value) {
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0) &&
          maxConsecutiveInboundFramesWithEmptyPayload_ != null &&
          maxConsecutiveInboundFramesWithEmptyPayload_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxConsecutiveInboundFramesWithEmptyPayloadBuilder().mergeFrom(value);
        } else {
          maxConsecutiveInboundFramesWithEmptyPayload_ = value;
        }
      } else {
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    public Builder clearMaxConsecutiveInboundFramesWithEmptyPayload() {
      bitField0_ = (bitField0_ & ~0x00000100);
      maxConsecutiveInboundFramesWithEmptyPayload_ = null;
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ != null) {
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.dispose();
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxConsecutiveInboundFramesWithEmptyPayloadBuilder() {
      bitField0_ |= 0x00000100;
      onChanged();
      return getMaxConsecutiveInboundFramesWithEmptyPayloadFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxConsecutiveInboundFramesWithEmptyPayloadOrBuilder() {
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ != null) {
        return maxConsecutiveInboundFramesWithEmptyPayloadBuilder_.getMessageOrBuilder();
      } else {
        return maxConsecutiveInboundFramesWithEmptyPayload_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxConsecutiveInboundFramesWithEmptyPayload_;
      }
    }
    /**
     * <pre>
     * Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an
     * empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but
     * might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood``
     * stat tracks the number of connections terminated due to flood mitigation.
     * Setting this to 0 will terminate connection upon receiving first frame with an empty payload
     * and no end stream flag. The default limit is 1.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxConsecutiveInboundFramesWithEmptyPayloadFieldBuilder() {
      if (maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ == null) {
        maxConsecutiveInboundFramesWithEmptyPayloadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxConsecutiveInboundFramesWithEmptyPayload(),
                getParentForChildren(),
                isClean());
        maxConsecutiveInboundFramesWithEmptyPayload_ = null;
      }
      return maxConsecutiveInboundFramesWithEmptyPayloadBuilder_;
    }

    private com.google.protobuf.UInt32Value maxInboundPriorityFramesPerStream_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxInboundPriorityFramesPerStreamBuilder_;
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     * @return Whether the maxInboundPriorityFramesPerStream field is set.
     */
    public boolean hasMaxInboundPriorityFramesPerStream() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     * @return The maxInboundPriorityFramesPerStream.
     */
    public com.google.protobuf.UInt32Value getMaxInboundPriorityFramesPerStream() {
      if (maxInboundPriorityFramesPerStreamBuilder_ == null) {
        return maxInboundPriorityFramesPerStream_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundPriorityFramesPerStream_;
      } else {
        return maxInboundPriorityFramesPerStreamBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    public Builder setMaxInboundPriorityFramesPerStream(com.google.protobuf.UInt32Value value) {
      if (maxInboundPriorityFramesPerStreamBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxInboundPriorityFramesPerStream_ = value;
      } else {
        maxInboundPriorityFramesPerStreamBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    public Builder setMaxInboundPriorityFramesPerStream(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxInboundPriorityFramesPerStreamBuilder_ == null) {
        maxInboundPriorityFramesPerStream_ = builderForValue.build();
      } else {
        maxInboundPriorityFramesPerStreamBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    public Builder mergeMaxInboundPriorityFramesPerStream(com.google.protobuf.UInt32Value value) {
      if (maxInboundPriorityFramesPerStreamBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0) &&
          maxInboundPriorityFramesPerStream_ != null &&
          maxInboundPriorityFramesPerStream_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxInboundPriorityFramesPerStreamBuilder().mergeFrom(value);
        } else {
          maxInboundPriorityFramesPerStream_ = value;
        }
      } else {
        maxInboundPriorityFramesPerStreamBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    public Builder clearMaxInboundPriorityFramesPerStream() {
      bitField0_ = (bitField0_ & ~0x00000200);
      maxInboundPriorityFramesPerStream_ = null;
      if (maxInboundPriorityFramesPerStreamBuilder_ != null) {
        maxInboundPriorityFramesPerStreamBuilder_.dispose();
        maxInboundPriorityFramesPerStreamBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxInboundPriorityFramesPerStreamBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getMaxInboundPriorityFramesPerStreamFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxInboundPriorityFramesPerStreamOrBuilder() {
      if (maxInboundPriorityFramesPerStreamBuilder_ != null) {
        return maxInboundPriorityFramesPerStreamBuilder_.getMessageOrBuilder();
      } else {
        return maxInboundPriorityFramesPerStream_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundPriorityFramesPerStream_;
      }
    }
    /**
     * <pre>
     * Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number
     * of PRIORITY frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     max_inbound_priority_frames_per_stream * (1 + inbound_streams)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 100.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxInboundPriorityFramesPerStreamFieldBuilder() {
      if (maxInboundPriorityFramesPerStreamBuilder_ == null) {
        maxInboundPriorityFramesPerStreamBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxInboundPriorityFramesPerStream(),
                getParentForChildren(),
                isClean());
        maxInboundPriorityFramesPerStream_ = null;
      }
      return maxInboundPriorityFramesPerStreamBuilder_;
    }

    private com.google.protobuf.UInt32Value maxInboundWindowUpdateFramesPerDataFrameSent_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxInboundWindowUpdateFramesPerDataFrameSentBuilder_;
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     * @return Whether the maxInboundWindowUpdateFramesPerDataFrameSent field is set.
     */
    public boolean hasMaxInboundWindowUpdateFramesPerDataFrameSent() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     * @return The maxInboundWindowUpdateFramesPerDataFrameSent.
     */
    public com.google.protobuf.UInt32Value getMaxInboundWindowUpdateFramesPerDataFrameSent() {
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ == null) {
        return maxInboundWindowUpdateFramesPerDataFrameSent_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundWindowUpdateFramesPerDataFrameSent_;
      } else {
        return maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxInboundWindowUpdateFramesPerDataFrameSent(com.google.protobuf.UInt32Value value) {
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxInboundWindowUpdateFramesPerDataFrameSent_ = value;
      } else {
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxInboundWindowUpdateFramesPerDataFrameSent(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ == null) {
        maxInboundWindowUpdateFramesPerDataFrameSent_ = builderForValue.build();
      } else {
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxInboundWindowUpdateFramesPerDataFrameSent(com.google.protobuf.UInt32Value value) {
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0) &&
          maxInboundWindowUpdateFramesPerDataFrameSent_ != null &&
          maxInboundWindowUpdateFramesPerDataFrameSent_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxInboundWindowUpdateFramesPerDataFrameSentBuilder().mergeFrom(value);
        } else {
          maxInboundWindowUpdateFramesPerDataFrameSent_ = value;
        }
      } else {
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxInboundWindowUpdateFramesPerDataFrameSent() {
      bitField0_ = (bitField0_ & ~0x00000400);
      maxInboundWindowUpdateFramesPerDataFrameSent_ = null;
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ != null) {
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.dispose();
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxInboundWindowUpdateFramesPerDataFrameSentBuilder() {
      bitField0_ |= 0x00000400;
      onChanged();
      return getMaxInboundWindowUpdateFramesPerDataFrameSentFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxInboundWindowUpdateFramesPerDataFrameSentOrBuilder() {
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ != null) {
        return maxInboundWindowUpdateFramesPerDataFrameSentBuilder_.getMessageOrBuilder();
      } else {
        return maxInboundWindowUpdateFramesPerDataFrameSent_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxInboundWindowUpdateFramesPerDataFrameSent_;
      }
    }
    /**
     * <pre>
     * Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number
     * of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated
     * using this formula::
     *     1 + 2 * (inbound_streams +
     *              max_inbound_window_update_frames_per_data_frame_sent * outbound_data_frames)
     * the connection is terminated. The ``http2.inbound_priority_frames_flood`` stat tracks
     * the number of connections terminated due to flood mitigation. The default limit is 10.
     * Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control,
     * but more complex implementations that try to estimate available bandwidth require at least 2.
     * [#comment:TODO: implement same limits for upstream inbound frames as well.]
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxInboundWindowUpdateFramesPerDataFrameSentFieldBuilder() {
      if (maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ == null) {
        maxInboundWindowUpdateFramesPerDataFrameSentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxInboundWindowUpdateFramesPerDataFrameSent(),
                getParentForChildren(),
                isClean());
        maxInboundWindowUpdateFramesPerDataFrameSent_ = null;
      }
      return maxInboundWindowUpdateFramesPerDataFrameSentBuilder_;
    }

    private boolean streamErrorOnInvalidHttpMessaging_ ;
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * See `RFC7540, sec. 8.1 &lt;https://tools.ietf.org/html/rfc7540#section-8.1&gt;`_ for details.
     * </pre>
     *
     * <code>bool stream_error_on_invalid_http_messaging = 12;</code>
     * @return The streamErrorOnInvalidHttpMessaging.
     */
    @java.lang.Override
    public boolean getStreamErrorOnInvalidHttpMessaging() {
      return streamErrorOnInvalidHttpMessaging_;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * See `RFC7540, sec. 8.1 &lt;https://tools.ietf.org/html/rfc7540#section-8.1&gt;`_ for details.
     * </pre>
     *
     * <code>bool stream_error_on_invalid_http_messaging = 12;</code>
     * @param value The streamErrorOnInvalidHttpMessaging to set.
     * @return This builder for chaining.
     */
    public Builder setStreamErrorOnInvalidHttpMessaging(boolean value) {
      
      streamErrorOnInvalidHttpMessaging_ = value;
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Allows invalid HTTP messaging and headers. When this option is disabled (default), then
     * the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
     * when this option is enabled, only the offending stream is terminated.
     * See `RFC7540, sec. 8.1 &lt;https://tools.ietf.org/html/rfc7540#section-8.1&gt;`_ for details.
     * </pre>
     *
     * <code>bool stream_error_on_invalid_http_messaging = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearStreamErrorOnInvalidHttpMessaging() {
      bitField0_ = (bitField0_ & ~0x00000800);
      streamErrorOnInvalidHttpMessaging_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter> customSettingsParameters_ =
      java.util.Collections.emptyList();
    private void ensureCustomSettingsParametersIsMutable() {
      if (!((bitField0_ & 0x00001000) != 0)) {
        customSettingsParameters_ = new java.util.ArrayList<io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter>(customSettingsParameters_);
        bitField0_ |= 0x00001000;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder> customSettingsParametersBuilder_;

    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public java.util.List<io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter> getCustomSettingsParametersList() {
      if (customSettingsParametersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(customSettingsParameters_);
      } else {
        return customSettingsParametersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public int getCustomSettingsParametersCount() {
      if (customSettingsParametersBuilder_ == null) {
        return customSettingsParameters_.size();
      } else {
        return customSettingsParametersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter getCustomSettingsParameters(int index) {
      if (customSettingsParametersBuilder_ == null) {
        return customSettingsParameters_.get(index);
      } else {
        return customSettingsParametersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder setCustomSettingsParameters(
        int index, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter value) {
      if (customSettingsParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.set(index, value);
        onChanged();
      } else {
        customSettingsParametersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder setCustomSettingsParameters(
        int index, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder builderForValue) {
      if (customSettingsParametersBuilder_ == null) {
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.set(index, builderForValue.build());
        onChanged();
      } else {
        customSettingsParametersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder addCustomSettingsParameters(io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter value) {
      if (customSettingsParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.add(value);
        onChanged();
      } else {
        customSettingsParametersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder addCustomSettingsParameters(
        int index, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter value) {
      if (customSettingsParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.add(index, value);
        onChanged();
      } else {
        customSettingsParametersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder addCustomSettingsParameters(
        io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder builderForValue) {
      if (customSettingsParametersBuilder_ == null) {
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.add(builderForValue.build());
        onChanged();
      } else {
        customSettingsParametersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder addCustomSettingsParameters(
        int index, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder builderForValue) {
      if (customSettingsParametersBuilder_ == null) {
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.add(index, builderForValue.build());
        onChanged();
      } else {
        customSettingsParametersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder addAllCustomSettingsParameters(
        java.lang.Iterable<? extends io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter> values) {
      if (customSettingsParametersBuilder_ == null) {
        ensureCustomSettingsParametersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, customSettingsParameters_);
        onChanged();
      } else {
        customSettingsParametersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder clearCustomSettingsParameters() {
      if (customSettingsParametersBuilder_ == null) {
        customSettingsParameters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
      } else {
        customSettingsParametersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public Builder removeCustomSettingsParameters(int index) {
      if (customSettingsParametersBuilder_ == null) {
        ensureCustomSettingsParametersIsMutable();
        customSettingsParameters_.remove(index);
        onChanged();
      } else {
        customSettingsParametersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder getCustomSettingsParametersBuilder(
        int index) {
      return getCustomSettingsParametersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder getCustomSettingsParametersOrBuilder(
        int index) {
      if (customSettingsParametersBuilder_ == null) {
        return customSettingsParameters_.get(index);  } else {
        return customSettingsParametersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder> 
         getCustomSettingsParametersOrBuilderList() {
      if (customSettingsParametersBuilder_ != null) {
        return customSettingsParametersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(customSettingsParameters_);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder addCustomSettingsParametersBuilder() {
      return getCustomSettingsParametersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.getDefaultInstance());
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder addCustomSettingsParametersBuilder(
        int index) {
      return getCustomSettingsParametersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.getDefaultInstance());
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions:
     * 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by
     * Envoy.
     * 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field
     * 'allow_connect'.
     * Note that custom parameters specified through this field can not also be set in the
     * corresponding named parameters:
     * .. code-block:: text
     *   ID    Field Name
     *   ----------------
     *   0x1   hpack_table_size
     *   0x3   max_concurrent_streams
     *   0x4   initial_stream_window_size
     * Collisions will trigger config validation failure on load/update. Likewise, inconsistencies
     * between custom parameters with the same identifier will trigger a failure.
     * See `IANA HTTP/2 Settings
     * &lt;https://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings&gt;`_ for
     * standardized identifiers.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;</code>
     */
    public java.util.List<io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder> 
         getCustomSettingsParametersBuilderList() {
      return getCustomSettingsParametersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder> 
        getCustomSettingsParametersFieldBuilder() {
      if (customSettingsParametersBuilder_ == null) {
        customSettingsParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameter.Builder, io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions.SettingsParameterOrBuilder>(
                customSettingsParameters_,
                ((bitField0_ & 0x00001000) != 0),
                getParentForChildren(),
                isClean());
        customSettingsParameters_ = null;
      }
      return customSettingsParametersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.api.v2.core.Http2ProtocolOptions)
  }

  // @@protoc_insertion_point(class_scope:envoy.api.v2.core.Http2ProtocolOptions)
  private static final io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions();
  }

  public static io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Http2ProtocolOptions>
      PARSER = new com.google.protobuf.AbstractParser<Http2ProtocolOptions>() {
    @java.lang.Override
    public Http2ProtocolOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Http2ProtocolOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Http2ProtocolOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.core.Http2ProtocolOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

