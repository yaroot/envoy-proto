// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/core/protocol.proto

package io.envoyproxy.envoy.api.v2.core;

/**
 * <pre>
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.api.v2.core.HttpProtocolOptions}
 */
public final class HttpProtocolOptions extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.api.v2.core.HttpProtocolOptions)
    HttpProtocolOptionsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HttpProtocolOptions.newBuilder() to construct.
  private HttpProtocolOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HttpProtocolOptions() {
    headersWithUnderscoresAction_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new HttpProtocolOptions();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_HttpProtocolOptions_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_HttpProtocolOptions_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.class, io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.Builder.class);
  }

  /**
   * <pre>
   * Action to take when Envoy receives client request with header names containing underscore
   * characters.
   * Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented
   * as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore
   * characters.
   * </pre>
   *
   * Protobuf enum {@code envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction}
   */
  public enum HeadersWithUnderscoresAction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Allow headers with underscores. This is the default behavior.
     * </pre>
     *
     * <code>ALLOW = 0;</code>
     */
    ALLOW(0),
    /**
     * <pre>
     * Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
     * end with the stream reset. The "httpN.requests_rejected_with_underscores_in_headers" counter
     * is incremented for each rejected request.
     * </pre>
     *
     * <code>REJECT_REQUEST = 1;</code>
     */
    REJECT_REQUEST(1),
    /**
     * <pre>
     * Drop the header with name containing underscores. The header is dropped before the filter chain is
     * invoked and as such filters will not see dropped headers. The
     * "httpN.dropped_headers_with_underscores" is incremented for each dropped header.
     * </pre>
     *
     * <code>DROP_HEADER = 2;</code>
     */
    DROP_HEADER(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Allow headers with underscores. This is the default behavior.
     * </pre>
     *
     * <code>ALLOW = 0;</code>
     */
    public static final int ALLOW_VALUE = 0;
    /**
     * <pre>
     * Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
     * end with the stream reset. The "httpN.requests_rejected_with_underscores_in_headers" counter
     * is incremented for each rejected request.
     * </pre>
     *
     * <code>REJECT_REQUEST = 1;</code>
     */
    public static final int REJECT_REQUEST_VALUE = 1;
    /**
     * <pre>
     * Drop the header with name containing underscores. The header is dropped before the filter chain is
     * invoked and as such filters will not see dropped headers. The
     * "httpN.dropped_headers_with_underscores" is incremented for each dropped header.
     * </pre>
     *
     * <code>DROP_HEADER = 2;</code>
     */
    public static final int DROP_HEADER_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HeadersWithUnderscoresAction valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HeadersWithUnderscoresAction forNumber(int value) {
      switch (value) {
        case 0: return ALLOW;
        case 1: return REJECT_REQUEST;
        case 2: return DROP_HEADER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HeadersWithUnderscoresAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HeadersWithUnderscoresAction> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HeadersWithUnderscoresAction>() {
            public HeadersWithUnderscoresAction findValueByNumber(int number) {
              return HeadersWithUnderscoresAction.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.getDescriptor().getEnumTypes().get(0);
    }

    private static final HeadersWithUnderscoresAction[] VALUES = values();

    public static HeadersWithUnderscoresAction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HeadersWithUnderscoresAction(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction)
  }

  public static final int IDLE_TIMEOUT_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration idleTimeout_;
  /**
   * <pre>
   * The idle timeout for connections. The idle timeout is defined as the
   * period in which there are no active requests. When the
   * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
   * downstream connection a drain sequence will occur prior to closing the connection, see
   * :ref:`drain_timeout
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
   * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
   * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 1;</code>
   * @return Whether the idleTimeout field is set.
   */
  @java.lang.Override
  public boolean hasIdleTimeout() {
    return idleTimeout_ != null;
  }
  /**
   * <pre>
   * The idle timeout for connections. The idle timeout is defined as the
   * period in which there are no active requests. When the
   * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
   * downstream connection a drain sequence will occur prior to closing the connection, see
   * :ref:`drain_timeout
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
   * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
   * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 1;</code>
   * @return The idleTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getIdleTimeout() {
    return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
  }
  /**
   * <pre>
   * The idle timeout for connections. The idle timeout is defined as the
   * period in which there are no active requests. When the
   * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
   * downstream connection a drain sequence will occur prior to closing the connection, see
   * :ref:`drain_timeout
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
   * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
   * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 1;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder() {
    return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
  }

  public static final int MAX_CONNECTION_DURATION_FIELD_NUMBER = 3;
  private com.google.protobuf.Duration maxConnectionDuration_;
  /**
   * <pre>
   * The maximum duration of a connection. The duration is defined as a period since a connection
   * was established. If not set, there is no max duration. When max_connection_duration is reached
   * the connection will be closed. Drain sequence will occur prior to closing the connection if
   * if's applicable. See :ref:`drain_timeout
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
   * Note: not implemented for upstream connections.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
   * @return Whether the maxConnectionDuration field is set.
   */
  @java.lang.Override
  public boolean hasMaxConnectionDuration() {
    return maxConnectionDuration_ != null;
  }
  /**
   * <pre>
   * The maximum duration of a connection. The duration is defined as a period since a connection
   * was established. If not set, there is no max duration. When max_connection_duration is reached
   * the connection will be closed. Drain sequence will occur prior to closing the connection if
   * if's applicable. See :ref:`drain_timeout
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
   * Note: not implemented for upstream connections.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
   * @return The maxConnectionDuration.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getMaxConnectionDuration() {
    return maxConnectionDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxConnectionDuration_;
  }
  /**
   * <pre>
   * The maximum duration of a connection. The duration is defined as a period since a connection
   * was established. If not set, there is no max duration. When max_connection_duration is reached
   * the connection will be closed. Drain sequence will occur prior to closing the connection if
   * if's applicable. See :ref:`drain_timeout
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
   * Note: not implemented for upstream connections.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getMaxConnectionDurationOrBuilder() {
    return maxConnectionDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxConnectionDuration_;
  }

  public static final int MAX_HEADERS_COUNT_FIELD_NUMBER = 2;
  private com.google.protobuf.UInt32Value maxHeadersCount_;
  /**
   * <pre>
   * The maximum number of headers. If unconfigured, the default
   * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
   * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the maxHeadersCount field is set.
   */
  @java.lang.Override
  public boolean hasMaxHeadersCount() {
    return maxHeadersCount_ != null;
  }
  /**
   * <pre>
   * The maximum number of headers. If unconfigured, the default
   * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
   * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
   * @return The maxHeadersCount.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxHeadersCount() {
    return maxHeadersCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHeadersCount_;
  }
  /**
   * <pre>
   * The maximum number of headers. If unconfigured, the default
   * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
   * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxHeadersCountOrBuilder() {
    return maxHeadersCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHeadersCount_;
  }

  public static final int MAX_STREAM_DURATION_FIELD_NUMBER = 4;
  private com.google.protobuf.Duration maxStreamDuration_;
  /**
   * <pre>
   * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
   * reset independent of any other timeouts. If not specified, this value is not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
   * @return Whether the maxStreamDuration field is set.
   */
  @java.lang.Override
  public boolean hasMaxStreamDuration() {
    return maxStreamDuration_ != null;
  }
  /**
   * <pre>
   * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
   * reset independent of any other timeouts. If not specified, this value is not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
   * @return The maxStreamDuration.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getMaxStreamDuration() {
    return maxStreamDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxStreamDuration_;
  }
  /**
   * <pre>
   * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
   * reset independent of any other timeouts. If not specified, this value is not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getMaxStreamDurationOrBuilder() {
    return maxStreamDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxStreamDuration_;
  }

  public static final int HEADERS_WITH_UNDERSCORES_ACTION_FIELD_NUMBER = 5;
  private int headersWithUnderscoresAction_ = 0;
  /**
   * <pre>
   * Action to take when a client request with a header name containing underscore characters is received.
   * If this setting is not specified, the value defaults to ALLOW.
   * Note: upstream responses are not affected by this setting.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
   * @return The enum numeric value on the wire for headersWithUnderscoresAction.
   */
  @java.lang.Override public int getHeadersWithUnderscoresActionValue() {
    return headersWithUnderscoresAction_;
  }
  /**
   * <pre>
   * Action to take when a client request with a header name containing underscore characters is received.
   * If this setting is not specified, the value defaults to ALLOW.
   * Note: upstream responses are not affected by this setting.
   * </pre>
   *
   * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
   * @return The headersWithUnderscoresAction.
   */
  @java.lang.Override public io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction getHeadersWithUnderscoresAction() {
    io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction result = io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction.forNumber(headersWithUnderscoresAction_);
    return result == null ? io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (idleTimeout_ != null) {
      output.writeMessage(1, getIdleTimeout());
    }
    if (maxHeadersCount_ != null) {
      output.writeMessage(2, getMaxHeadersCount());
    }
    if (maxConnectionDuration_ != null) {
      output.writeMessage(3, getMaxConnectionDuration());
    }
    if (maxStreamDuration_ != null) {
      output.writeMessage(4, getMaxStreamDuration());
    }
    if (headersWithUnderscoresAction_ != io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction.ALLOW.getNumber()) {
      output.writeEnum(5, headersWithUnderscoresAction_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (idleTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getIdleTimeout());
    }
    if (maxHeadersCount_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMaxHeadersCount());
    }
    if (maxConnectionDuration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMaxConnectionDuration());
    }
    if (maxStreamDuration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getMaxStreamDuration());
    }
    if (headersWithUnderscoresAction_ != io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction.ALLOW.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, headersWithUnderscoresAction_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions other = (io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions) obj;

    if (hasIdleTimeout() != other.hasIdleTimeout()) return false;
    if (hasIdleTimeout()) {
      if (!getIdleTimeout()
          .equals(other.getIdleTimeout())) return false;
    }
    if (hasMaxConnectionDuration() != other.hasMaxConnectionDuration()) return false;
    if (hasMaxConnectionDuration()) {
      if (!getMaxConnectionDuration()
          .equals(other.getMaxConnectionDuration())) return false;
    }
    if (hasMaxHeadersCount() != other.hasMaxHeadersCount()) return false;
    if (hasMaxHeadersCount()) {
      if (!getMaxHeadersCount()
          .equals(other.getMaxHeadersCount())) return false;
    }
    if (hasMaxStreamDuration() != other.hasMaxStreamDuration()) return false;
    if (hasMaxStreamDuration()) {
      if (!getMaxStreamDuration()
          .equals(other.getMaxStreamDuration())) return false;
    }
    if (headersWithUnderscoresAction_ != other.headersWithUnderscoresAction_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasIdleTimeout()) {
      hash = (37 * hash) + IDLE_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getIdleTimeout().hashCode();
    }
    if (hasMaxConnectionDuration()) {
      hash = (37 * hash) + MAX_CONNECTION_DURATION_FIELD_NUMBER;
      hash = (53 * hash) + getMaxConnectionDuration().hashCode();
    }
    if (hasMaxHeadersCount()) {
      hash = (37 * hash) + MAX_HEADERS_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxHeadersCount().hashCode();
    }
    if (hasMaxStreamDuration()) {
      hash = (37 * hash) + MAX_STREAM_DURATION_FIELD_NUMBER;
      hash = (53 * hash) + getMaxStreamDuration().hashCode();
    }
    hash = (37 * hash) + HEADERS_WITH_UNDERSCORES_ACTION_FIELD_NUMBER;
    hash = (53 * hash) + headersWithUnderscoresAction_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.api.v2.core.HttpProtocolOptions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.api.v2.core.HttpProtocolOptions)
      io.envoyproxy.envoy.api.v2.core.HttpProtocolOptionsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_HttpProtocolOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_HttpProtocolOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.class, io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      idleTimeout_ = null;
      if (idleTimeoutBuilder_ != null) {
        idleTimeoutBuilder_.dispose();
        idleTimeoutBuilder_ = null;
      }
      maxConnectionDuration_ = null;
      if (maxConnectionDurationBuilder_ != null) {
        maxConnectionDurationBuilder_.dispose();
        maxConnectionDurationBuilder_ = null;
      }
      maxHeadersCount_ = null;
      if (maxHeadersCountBuilder_ != null) {
        maxHeadersCountBuilder_.dispose();
        maxHeadersCountBuilder_ = null;
      }
      maxStreamDuration_ = null;
      if (maxStreamDurationBuilder_ != null) {
        maxStreamDurationBuilder_.dispose();
        maxStreamDurationBuilder_ = null;
      }
      headersWithUnderscoresAction_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.api.v2.core.ProtocolProto.internal_static_envoy_api_v2_core_HttpProtocolOptions_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions getDefaultInstanceForType() {
      return io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions build() {
      io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions buildPartial() {
      io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions result = new io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.idleTimeout_ = idleTimeoutBuilder_ == null
            ? idleTimeout_
            : idleTimeoutBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.maxConnectionDuration_ = maxConnectionDurationBuilder_ == null
            ? maxConnectionDuration_
            : maxConnectionDurationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.maxHeadersCount_ = maxHeadersCountBuilder_ == null
            ? maxHeadersCount_
            : maxHeadersCountBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.maxStreamDuration_ = maxStreamDurationBuilder_ == null
            ? maxStreamDuration_
            : maxStreamDurationBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.headersWithUnderscoresAction_ = headersWithUnderscoresAction_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions) {
        return mergeFrom((io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions other) {
      if (other == io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.getDefaultInstance()) return this;
      if (other.hasIdleTimeout()) {
        mergeIdleTimeout(other.getIdleTimeout());
      }
      if (other.hasMaxConnectionDuration()) {
        mergeMaxConnectionDuration(other.getMaxConnectionDuration());
      }
      if (other.hasMaxHeadersCount()) {
        mergeMaxHeadersCount(other.getMaxHeadersCount());
      }
      if (other.hasMaxStreamDuration()) {
        mergeMaxStreamDuration(other.getMaxStreamDuration());
      }
      if (other.headersWithUnderscoresAction_ != 0) {
        setHeadersWithUnderscoresActionValue(other.getHeadersWithUnderscoresActionValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getIdleTimeoutFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getMaxHeadersCountFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getMaxConnectionDurationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getMaxStreamDurationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 40: {
              headersWithUnderscoresAction_ = input.readEnum();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Duration idleTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> idleTimeoutBuilder_;
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     * @return Whether the idleTimeout field is set.
     */
    public boolean hasIdleTimeout() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     * @return The idleTimeout.
     */
    public com.google.protobuf.Duration getIdleTimeout() {
      if (idleTimeoutBuilder_ == null) {
        return idleTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
      } else {
        return idleTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public Builder setIdleTimeout(com.google.protobuf.Duration value) {
      if (idleTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        idleTimeout_ = value;
      } else {
        idleTimeoutBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public Builder setIdleTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (idleTimeoutBuilder_ == null) {
        idleTimeout_ = builderForValue.build();
      } else {
        idleTimeoutBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public Builder mergeIdleTimeout(com.google.protobuf.Duration value) {
      if (idleTimeoutBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          idleTimeout_ != null &&
          idleTimeout_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getIdleTimeoutBuilder().mergeFrom(value);
        } else {
          idleTimeout_ = value;
        }
      } else {
        idleTimeoutBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public Builder clearIdleTimeout() {
      bitField0_ = (bitField0_ & ~0x00000001);
      idleTimeout_ = null;
      if (idleTimeoutBuilder_ != null) {
        idleTimeoutBuilder_.dispose();
        idleTimeoutBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public com.google.protobuf.Duration.Builder getIdleTimeoutBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getIdleTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder() {
      if (idleTimeoutBuilder_ != null) {
        return idleTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return idleTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : idleTimeout_;
      }
    }
    /**
     * <pre>
     * The idle timeout for connections. The idle timeout is defined as the
     * period in which there are no active requests. When the
     * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
     * downstream connection a drain sequence will occur prior to closing the connection, see
     * :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
     * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
     * .. warning::
     *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
     *   FIN packets, etc.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getIdleTimeoutFieldBuilder() {
      if (idleTimeoutBuilder_ == null) {
        idleTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getIdleTimeout(),
                getParentForChildren(),
                isClean());
        idleTimeout_ = null;
      }
      return idleTimeoutBuilder_;
    }

    private com.google.protobuf.Duration maxConnectionDuration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> maxConnectionDurationBuilder_;
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     * @return Whether the maxConnectionDuration field is set.
     */
    public boolean hasMaxConnectionDuration() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     * @return The maxConnectionDuration.
     */
    public com.google.protobuf.Duration getMaxConnectionDuration() {
      if (maxConnectionDurationBuilder_ == null) {
        return maxConnectionDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxConnectionDuration_;
      } else {
        return maxConnectionDurationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    public Builder setMaxConnectionDuration(com.google.protobuf.Duration value) {
      if (maxConnectionDurationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxConnectionDuration_ = value;
      } else {
        maxConnectionDurationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    public Builder setMaxConnectionDuration(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (maxConnectionDurationBuilder_ == null) {
        maxConnectionDuration_ = builderForValue.build();
      } else {
        maxConnectionDurationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    public Builder mergeMaxConnectionDuration(com.google.protobuf.Duration value) {
      if (maxConnectionDurationBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          maxConnectionDuration_ != null &&
          maxConnectionDuration_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getMaxConnectionDurationBuilder().mergeFrom(value);
        } else {
          maxConnectionDuration_ = value;
        }
      } else {
        maxConnectionDurationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    public Builder clearMaxConnectionDuration() {
      bitField0_ = (bitField0_ & ~0x00000002);
      maxConnectionDuration_ = null;
      if (maxConnectionDurationBuilder_ != null) {
        maxConnectionDurationBuilder_.dispose();
        maxConnectionDurationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    public com.google.protobuf.Duration.Builder getMaxConnectionDurationBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getMaxConnectionDurationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    public com.google.protobuf.DurationOrBuilder getMaxConnectionDurationOrBuilder() {
      if (maxConnectionDurationBuilder_ != null) {
        return maxConnectionDurationBuilder_.getMessageOrBuilder();
      } else {
        return maxConnectionDuration_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : maxConnectionDuration_;
      }
    }
    /**
     * <pre>
     * The maximum duration of a connection. The duration is defined as a period since a connection
     * was established. If not set, there is no max duration. When max_connection_duration is reached
     * the connection will be closed. Drain sequence will occur prior to closing the connection if
     * if's applicable. See :ref:`drain_timeout
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout&gt;`.
     * Note: not implemented for upstream connections.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getMaxConnectionDurationFieldBuilder() {
      if (maxConnectionDurationBuilder_ == null) {
        maxConnectionDurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getMaxConnectionDuration(),
                getParentForChildren(),
                isClean());
        maxConnectionDuration_ = null;
      }
      return maxConnectionDurationBuilder_;
    }

    private com.google.protobuf.UInt32Value maxHeadersCount_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxHeadersCountBuilder_;
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the maxHeadersCount field is set.
     */
    public boolean hasMaxHeadersCount() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     * @return The maxHeadersCount.
     */
    public com.google.protobuf.UInt32Value getMaxHeadersCount() {
      if (maxHeadersCountBuilder_ == null) {
        return maxHeadersCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHeadersCount_;
      } else {
        return maxHeadersCountBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxHeadersCount(com.google.protobuf.UInt32Value value) {
      if (maxHeadersCountBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxHeadersCount_ = value;
      } else {
        maxHeadersCountBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxHeadersCount(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxHeadersCountBuilder_ == null) {
        maxHeadersCount_ = builderForValue.build();
      } else {
        maxHeadersCountBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxHeadersCount(com.google.protobuf.UInt32Value value) {
      if (maxHeadersCountBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          maxHeadersCount_ != null &&
          maxHeadersCount_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
          getMaxHeadersCountBuilder().mergeFrom(value);
        } else {
          maxHeadersCount_ = value;
        }
      } else {
        maxHeadersCountBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxHeadersCount() {
      bitField0_ = (bitField0_ & ~0x00000004);
      maxHeadersCount_ = null;
      if (maxHeadersCountBuilder_ != null) {
        maxHeadersCountBuilder_.dispose();
        maxHeadersCountBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxHeadersCountBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getMaxHeadersCountFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxHeadersCountOrBuilder() {
      if (maxHeadersCountBuilder_ != null) {
        return maxHeadersCountBuilder_.getMessageOrBuilder();
      } else {
        return maxHeadersCount_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxHeadersCount_;
      }
    }
    /**
     * <pre>
     * The maximum number of headers. If unconfigured, the default
     * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
     * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxHeadersCountFieldBuilder() {
      if (maxHeadersCountBuilder_ == null) {
        maxHeadersCountBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxHeadersCount(),
                getParentForChildren(),
                isClean());
        maxHeadersCount_ = null;
      }
      return maxHeadersCountBuilder_;
    }

    private com.google.protobuf.Duration maxStreamDuration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> maxStreamDurationBuilder_;
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     * @return Whether the maxStreamDuration field is set.
     */
    public boolean hasMaxStreamDuration() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     * @return The maxStreamDuration.
     */
    public com.google.protobuf.Duration getMaxStreamDuration() {
      if (maxStreamDurationBuilder_ == null) {
        return maxStreamDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxStreamDuration_;
      } else {
        return maxStreamDurationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    public Builder setMaxStreamDuration(com.google.protobuf.Duration value) {
      if (maxStreamDurationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxStreamDuration_ = value;
      } else {
        maxStreamDurationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    public Builder setMaxStreamDuration(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (maxStreamDurationBuilder_ == null) {
        maxStreamDuration_ = builderForValue.build();
      } else {
        maxStreamDurationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    public Builder mergeMaxStreamDuration(com.google.protobuf.Duration value) {
      if (maxStreamDurationBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          maxStreamDuration_ != null &&
          maxStreamDuration_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getMaxStreamDurationBuilder().mergeFrom(value);
        } else {
          maxStreamDuration_ = value;
        }
      } else {
        maxStreamDurationBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    public Builder clearMaxStreamDuration() {
      bitField0_ = (bitField0_ & ~0x00000008);
      maxStreamDuration_ = null;
      if (maxStreamDurationBuilder_ != null) {
        maxStreamDurationBuilder_.dispose();
        maxStreamDurationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    public com.google.protobuf.Duration.Builder getMaxStreamDurationBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getMaxStreamDurationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    public com.google.protobuf.DurationOrBuilder getMaxStreamDurationOrBuilder() {
      if (maxStreamDurationBuilder_ != null) {
        return maxStreamDurationBuilder_.getMessageOrBuilder();
      } else {
        return maxStreamDuration_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : maxStreamDuration_;
      }
    }
    /**
     * <pre>
     * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
     * reset independent of any other timeouts. If not specified, this value is not set.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getMaxStreamDurationFieldBuilder() {
      if (maxStreamDurationBuilder_ == null) {
        maxStreamDurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getMaxStreamDuration(),
                getParentForChildren(),
                isClean());
        maxStreamDuration_ = null;
      }
      return maxStreamDurationBuilder_;
    }

    private int headersWithUnderscoresAction_ = 0;
    /**
     * <pre>
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     * Note: upstream responses are not affected by this setting.
     * </pre>
     *
     * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
     * @return The enum numeric value on the wire for headersWithUnderscoresAction.
     */
    @java.lang.Override public int getHeadersWithUnderscoresActionValue() {
      return headersWithUnderscoresAction_;
    }
    /**
     * <pre>
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     * Note: upstream responses are not affected by this setting.
     * </pre>
     *
     * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
     * @param value The enum numeric value on the wire for headersWithUnderscoresAction to set.
     * @return This builder for chaining.
     */
    public Builder setHeadersWithUnderscoresActionValue(int value) {
      headersWithUnderscoresAction_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     * Note: upstream responses are not affected by this setting.
     * </pre>
     *
     * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
     * @return The headersWithUnderscoresAction.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction getHeadersWithUnderscoresAction() {
      io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction result = io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction.forNumber(headersWithUnderscoresAction_);
      return result == null ? io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     * Note: upstream responses are not affected by this setting.
     * </pre>
     *
     * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
     * @param value The headersWithUnderscoresAction to set.
     * @return This builder for chaining.
     */
    public Builder setHeadersWithUnderscoresAction(io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      headersWithUnderscoresAction_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Action to take when a client request with a header name containing underscore characters is received.
     * If this setting is not specified, the value defaults to ALLOW.
     * Note: upstream responses are not affected by this setting.
     * </pre>
     *
     * <code>.envoy.api.v2.core.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearHeadersWithUnderscoresAction() {
      bitField0_ = (bitField0_ & ~0x00000010);
      headersWithUnderscoresAction_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.api.v2.core.HttpProtocolOptions)
  }

  // @@protoc_insertion_point(class_scope:envoy.api.v2.core.HttpProtocolOptions)
  private static final io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions();
  }

  public static io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HttpProtocolOptions>
      PARSER = new com.google.protobuf.AbstractParser<HttpProtocolOptions>() {
    @java.lang.Override
    public HttpProtocolOptions parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<HttpProtocolOptions> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HttpProtocolOptions> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.core.HttpProtocolOptions getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

