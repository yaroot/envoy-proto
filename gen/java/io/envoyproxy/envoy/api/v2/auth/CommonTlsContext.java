// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/auth/tls.proto

package io.envoyproxy.envoy.api.v2.auth;

/**
 * <pre>
 * TLS context shared by both client and server TLS contexts.
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.api.v2.auth.CommonTlsContext}
 */
public final class CommonTlsContext extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.api.v2.auth.CommonTlsContext)
    CommonTlsContextOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CommonTlsContext.newBuilder() to construct.
  private CommonTlsContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CommonTlsContext() {
    tlsCertificates_ = java.util.Collections.emptyList();
    tlsCertificateSdsSecretConfigs_ = java.util.Collections.emptyList();
    alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CommonTlsContext();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CommonTlsContext(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.api.v2.auth.TlsParameters.Builder subBuilder = null;
            if (tlsParams_ != null) {
              subBuilder = tlsParams_.toBuilder();
            }
            tlsParams_ = input.readMessage(io.envoyproxy.envoy.api.v2.auth.TlsParameters.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tlsParams_);
              tlsParams_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              tlsCertificates_ = new java.util.ArrayList<io.envoyproxy.envoy.api.v2.auth.TlsCertificate>();
              mutable_bitField0_ |= 0x00000001;
            }
            tlsCertificates_.add(
                input.readMessage(io.envoyproxy.envoy.api.v2.auth.TlsCertificate.parser(), extensionRegistry));
            break;
          }
          case 26: {
            io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder subBuilder = null;
            if (validationContextTypeCase_ == 3) {
              subBuilder = ((io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 3;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              alpnProtocols_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            alpnProtocols_.add(s);
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              tlsCertificateSdsSecretConfigs_ = new java.util.ArrayList<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig>();
              mutable_bitField0_ |= 0x00000002;
            }
            tlsCertificateSdsSecretConfigs_.add(
                input.readMessage(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.parser(), extensionRegistry));
            break;
          }
          case 58: {
            io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder subBuilder = null;
            if (validationContextTypeCase_ == 7) {
              subBuilder = ((io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 7;
            break;
          }
          case 66: {
            io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder subBuilder = null;
            if (validationContextTypeCase_ == 8) {
              subBuilder = ((io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 8;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        tlsCertificates_ = java.util.Collections.unmodifiableList(tlsCertificates_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        alpnProtocols_ = alpnProtocols_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        tlsCertificateSdsSecretConfigs_ = java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.class, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder.class);
  }

  public interface CombinedCertificateValidationContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the defaultValidationContext field is set.
     */
    boolean hasDefaultValidationContext();
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return The defaultValidationContext.
     */
    io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext getDefaultValidationContext();
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     */
    io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder getDefaultValidationContextOrBuilder();

    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the validationContextSdsSecretConfig field is set.
     */
    boolean hasValidationContextSdsSecretConfig();
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return The validationContextSdsSecretConfig.
     */
    io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getValidationContextSdsSecretConfig();
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     */
    io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder();
  }
  /**
   * Protobuf type {@code envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext}
   */
  public static final class CombinedCertificateValidationContext extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)
      CombinedCertificateValidationContextOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CombinedCertificateValidationContext.newBuilder() to construct.
    private CombinedCertificateValidationContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CombinedCertificateValidationContext() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CombinedCertificateValidationContext();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CombinedCertificateValidationContext(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder subBuilder = null;
              if (defaultValidationContext_ != null) {
                subBuilder = defaultValidationContext_.toBuilder();
              }
              defaultValidationContext_ = input.readMessage(io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultValidationContext_);
                defaultValidationContext_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder subBuilder = null;
              if (validationContextSdsSecretConfig_ != null) {
                subBuilder = validationContextSdsSecretConfig_.toBuilder();
              }
              validationContextSdsSecretConfig_ = input.readMessage(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(validationContextSdsSecretConfig_);
                validationContextSdsSecretConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_CombinedCertificateValidationContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_CombinedCertificateValidationContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.class, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder.class);
    }

    public static final int DEFAULT_VALIDATION_CONTEXT_FIELD_NUMBER = 1;
    private io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext defaultValidationContext_;
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the defaultValidationContext field is set.
     */
    @java.lang.Override
    public boolean hasDefaultValidationContext() {
      return defaultValidationContext_ != null;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return The defaultValidationContext.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext getDefaultValidationContext() {
      return defaultValidationContext_ == null ? io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance() : defaultValidationContext_;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder getDefaultValidationContextOrBuilder() {
      return getDefaultValidationContext();
    }

    public static final int VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER = 2;
    private io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig validationContextSdsSecretConfig_;
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the validationContextSdsSecretConfig field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextSdsSecretConfig() {
      return validationContextSdsSecretConfig_ != null;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return The validationContextSdsSecretConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getValidationContextSdsSecretConfig() {
      return validationContextSdsSecretConfig_ == null ? io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance() : validationContextSdsSecretConfig_;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
      return getValidationContextSdsSecretConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (defaultValidationContext_ != null) {
        output.writeMessage(1, getDefaultValidationContext());
      }
      if (validationContextSdsSecretConfig_ != null) {
        output.writeMessage(2, getValidationContextSdsSecretConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (defaultValidationContext_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDefaultValidationContext());
      }
      if (validationContextSdsSecretConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getValidationContextSdsSecretConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext other = (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) obj;

      if (hasDefaultValidationContext() != other.hasDefaultValidationContext()) return false;
      if (hasDefaultValidationContext()) {
        if (!getDefaultValidationContext()
            .equals(other.getDefaultValidationContext())) return false;
      }
      if (hasValidationContextSdsSecretConfig() != other.hasValidationContextSdsSecretConfig()) return false;
      if (hasValidationContextSdsSecretConfig()) {
        if (!getValidationContextSdsSecretConfig()
            .equals(other.getValidationContextSdsSecretConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDefaultValidationContext()) {
        hash = (37 * hash) + DEFAULT_VALIDATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultValidationContext().hashCode();
      }
      if (hasValidationContextSdsSecretConfig()) {
        hash = (37 * hash) + VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextSdsSecretConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_CombinedCertificateValidationContext_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_CombinedCertificateValidationContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.class, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContext_ = null;
        } else {
          defaultValidationContext_ = null;
          defaultValidationContextBuilder_ = null;
        }
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfig_ = null;
        } else {
          validationContextSdsSecretConfig_ = null;
          validationContextSdsSecretConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_CombinedCertificateValidationContext_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext getDefaultInstanceForType() {
        return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext build() {
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext buildPartial() {
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext result = new io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext(this);
        if (defaultValidationContextBuilder_ == null) {
          result.defaultValidationContext_ = defaultValidationContext_;
        } else {
          result.defaultValidationContext_ = defaultValidationContextBuilder_.build();
        }
        if (validationContextSdsSecretConfigBuilder_ == null) {
          result.validationContextSdsSecretConfig_ = validationContextSdsSecretConfig_;
        } else {
          result.validationContextSdsSecretConfig_ = validationContextSdsSecretConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) {
          return mergeFrom((io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext other) {
        if (other == io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance()) return this;
        if (other.hasDefaultValidationContext()) {
          mergeDefaultValidationContext(other.getDefaultValidationContext());
        }
        if (other.hasValidationContextSdsSecretConfig()) {
          mergeValidationContextSdsSecretConfig(other.getValidationContextSdsSecretConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext defaultValidationContext_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder> defaultValidationContextBuilder_;
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       * @return Whether the defaultValidationContext field is set.
       */
      public boolean hasDefaultValidationContext() {
        return defaultValidationContextBuilder_ != null || defaultValidationContext_ != null;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       * @return The defaultValidationContext.
       */
      public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext getDefaultValidationContext() {
        if (defaultValidationContextBuilder_ == null) {
          return defaultValidationContext_ == null ? io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance() : defaultValidationContext_;
        } else {
          return defaultValidationContextBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setDefaultValidationContext(io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext value) {
        if (defaultValidationContextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultValidationContext_ = value;
          onChanged();
        } else {
          defaultValidationContextBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setDefaultValidationContext(
          io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder builderForValue) {
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContext_ = builderForValue.build();
          onChanged();
        } else {
          defaultValidationContextBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeDefaultValidationContext(io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext value) {
        if (defaultValidationContextBuilder_ == null) {
          if (defaultValidationContext_ != null) {
            defaultValidationContext_ =
              io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.newBuilder(defaultValidationContext_).mergeFrom(value).buildPartial();
          } else {
            defaultValidationContext_ = value;
          }
          onChanged();
        } else {
          defaultValidationContextBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder clearDefaultValidationContext() {
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContext_ = null;
          onChanged();
        } else {
          defaultValidationContext_ = null;
          defaultValidationContextBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder getDefaultValidationContextBuilder() {
        
        onChanged();
        return getDefaultValidationContextFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder getDefaultValidationContextOrBuilder() {
        if (defaultValidationContextBuilder_ != null) {
          return defaultValidationContextBuilder_.getMessageOrBuilder();
        } else {
          return defaultValidationContext_ == null ?
              io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance() : defaultValidationContext_;
        }
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder> 
          getDefaultValidationContextFieldBuilder() {
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder>(
                  getDefaultValidationContext(),
                  getParentForChildren(),
                  isClean());
          defaultValidationContext_ = null;
        }
        return defaultValidationContextBuilder_;
      }

      private io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig validationContextSdsSecretConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> validationContextSdsSecretConfigBuilder_;
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       * @return Whether the validationContextSdsSecretConfig field is set.
       */
      public boolean hasValidationContextSdsSecretConfig() {
        return validationContextSdsSecretConfigBuilder_ != null || validationContextSdsSecretConfig_ != null;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       * @return The validationContextSdsSecretConfig.
       */
      public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getValidationContextSdsSecretConfig() {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          return validationContextSdsSecretConfig_ == null ? io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance() : validationContextSdsSecretConfig_;
        } else {
          return validationContextSdsSecretConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setValidationContextSdsSecretConfig(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validationContextSdsSecretConfig_ = value;
          onChanged();
        } else {
          validationContextSdsSecretConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setValidationContextSdsSecretConfig(
          io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder builderForValue) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfig_ = builderForValue.build();
          onChanged();
        } else {
          validationContextSdsSecretConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeValidationContextSdsSecretConfig(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          if (validationContextSdsSecretConfig_ != null) {
            validationContextSdsSecretConfig_ =
              io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.newBuilder(validationContextSdsSecretConfig_).mergeFrom(value).buildPartial();
          } else {
            validationContextSdsSecretConfig_ = value;
          }
          onChanged();
        } else {
          validationContextSdsSecretConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder clearValidationContextSdsSecretConfig() {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfig_ = null;
          onChanged();
        } else {
          validationContextSdsSecretConfig_ = null;
          validationContextSdsSecretConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder getValidationContextSdsSecretConfigBuilder() {
        
        onChanged();
        return getValidationContextSdsSecretConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
        if (validationContextSdsSecretConfigBuilder_ != null) {
          return validationContextSdsSecretConfigBuilder_.getMessageOrBuilder();
        } else {
          return validationContextSdsSecretConfig_ == null ?
              io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance() : validationContextSdsSecretConfig_;
        }
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API.
       * </pre>
       *
       * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> 
          getValidationContextSdsSecretConfigFieldBuilder() {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder>(
                  getValidationContextSdsSecretConfig(),
                  getParentForChildren(),
                  isClean());
          validationContextSdsSecretConfig_ = null;
        }
        return validationContextSdsSecretConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)
    }

    // @@protoc_insertion_point(class_scope:envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext)
    private static final io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext();
    }

    public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CombinedCertificateValidationContext>
        PARSER = new com.google.protobuf.AbstractParser<CombinedCertificateValidationContext>() {
      @java.lang.Override
      public CombinedCertificateValidationContext parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CombinedCertificateValidationContext(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CombinedCertificateValidationContext> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CombinedCertificateValidationContext> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int validationContextTypeCase_ = 0;
  private java.lang.Object validationContextType_;
  public enum ValidationContextTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    VALIDATION_CONTEXT(3),
    VALIDATION_CONTEXT_SDS_SECRET_CONFIG(7),
    COMBINED_VALIDATION_CONTEXT(8),
    VALIDATIONCONTEXTTYPE_NOT_SET(0);
    private final int value;
    private ValidationContextTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValidationContextTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValidationContextTypeCase forNumber(int value) {
      switch (value) {
        case 3: return VALIDATION_CONTEXT;
        case 7: return VALIDATION_CONTEXT_SDS_SECRET_CONFIG;
        case 8: return COMBINED_VALIDATION_CONTEXT;
        case 0: return VALIDATIONCONTEXTTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValidationContextTypeCase
  getValidationContextTypeCase() {
    return ValidationContextTypeCase.forNumber(
        validationContextTypeCase_);
  }

  public static final int TLS_PARAMS_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.api.v2.auth.TlsParameters tlsParams_;
  /**
   * <pre>
   * TLS protocol versions, cipher suites etc.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
   * @return Whether the tlsParams field is set.
   */
  @java.lang.Override
  public boolean hasTlsParams() {
    return tlsParams_ != null;
  }
  /**
   * <pre>
   * TLS protocol versions, cipher suites etc.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
   * @return The tlsParams.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.TlsParameters getTlsParams() {
    return tlsParams_ == null ? io.envoyproxy.envoy.api.v2.auth.TlsParameters.getDefaultInstance() : tlsParams_;
  }
  /**
   * <pre>
   * TLS protocol versions, cipher suites etc.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.TlsParametersOrBuilder getTlsParamsOrBuilder() {
    return getTlsParams();
  }

  public static final int TLS_CERTIFICATES_FIELD_NUMBER = 2;
  private java.util.List<io.envoyproxy.envoy.api.v2.auth.TlsCertificate> tlsCertificates_;
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.api.v2.auth.TlsCertificate> getTlsCertificatesList() {
    return tlsCertificates_;
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder> 
      getTlsCertificatesOrBuilderList() {
    return tlsCertificates_;
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public int getTlsCertificatesCount() {
    return tlsCertificates_.size();
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.TlsCertificate getTlsCertificates(int index) {
    return tlsCertificates_.get(index);
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder getTlsCertificatesOrBuilder(
      int index) {
    return tlsCertificates_.get(index);
  }

  public static final int TLS_CERTIFICATE_SDS_SECRET_CONFIGS_FIELD_NUMBER = 6;
  private java.util.List<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig> tlsCertificateSdsSecretConfigs_;
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig> getTlsCertificateSdsSecretConfigsList() {
    return tlsCertificateSdsSecretConfigs_;
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> 
      getTlsCertificateSdsSecretConfigsOrBuilderList() {
    return tlsCertificateSdsSecretConfigs_;
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public int getTlsCertificateSdsSecretConfigsCount() {
    return tlsCertificateSdsSecretConfigs_.size();
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getTlsCertificateSdsSecretConfigs(int index) {
    return tlsCertificateSdsSecretConfigs_.get(index);
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getTlsCertificateSdsSecretConfigsOrBuilder(
      int index) {
    return tlsCertificateSdsSecretConfigs_.get(index);
  }

  public static final int VALIDATION_CONTEXT_FIELD_NUMBER = 3;
  /**
   * <pre>
   * How to validate peer certificates.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
   * @return Whether the validationContext field is set.
   */
  @java.lang.Override
  public boolean hasValidationContext() {
    return validationContextTypeCase_ == 3;
  }
  /**
   * <pre>
   * How to validate peer certificates.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
   * @return The validationContext.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext getValidationContext() {
    if (validationContextTypeCase_ == 3) {
       return (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance();
  }
  /**
   * <pre>
   * How to validate peer certificates.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder getValidationContextOrBuilder() {
    if (validationContextTypeCase_ == 3) {
       return (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance();
  }

  public static final int VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Config for fetching validation context via SDS API.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
   * @return Whether the validationContextSdsSecretConfig field is set.
   */
  @java.lang.Override
  public boolean hasValidationContextSdsSecretConfig() {
    return validationContextTypeCase_ == 7;
  }
  /**
   * <pre>
   * Config for fetching validation context via SDS API.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
   * @return The validationContextSdsSecretConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getValidationContextSdsSecretConfig() {
    if (validationContextTypeCase_ == 7) {
       return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
  }
  /**
   * <pre>
   * Config for fetching validation context via SDS API.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
    if (validationContextTypeCase_ == 7) {
       return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
  }

  public static final int COMBINED_VALIDATION_CONTEXT_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Combined certificate validation context holds a default CertificateValidationContext
   * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
   * and default CertificateValidationContext are merged into a new CertificateValidationContext
   * for validation. This merge is done by Message::MergeFrom(), so dynamic
   * CertificateValidationContext overwrites singular fields in default
   * CertificateValidationContext, and concatenates repeated fields to default
   * CertificateValidationContext, and logical OR is applied to boolean fields.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
   * @return Whether the combinedValidationContext field is set.
   */
  @java.lang.Override
  public boolean hasCombinedValidationContext() {
    return validationContextTypeCase_ == 8;
  }
  /**
   * <pre>
   * Combined certificate validation context holds a default CertificateValidationContext
   * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
   * and default CertificateValidationContext are merged into a new CertificateValidationContext
   * for validation. This merge is done by Message::MergeFrom(), so dynamic
   * CertificateValidationContext overwrites singular fields in default
   * CertificateValidationContext, and concatenates repeated fields to default
   * CertificateValidationContext, and logical OR is applied to boolean fields.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
   * @return The combinedValidationContext.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext getCombinedValidationContext() {
    if (validationContextTypeCase_ == 8) {
       return (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
  }
  /**
   * <pre>
   * Combined certificate validation context holds a default CertificateValidationContext
   * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
   * and default CertificateValidationContext are merged into a new CertificateValidationContext
   * for validation. This merge is done by Message::MergeFrom(), so dynamic
   * CertificateValidationContext overwrites singular fields in default
   * CertificateValidationContext, and concatenates repeated fields to default
   * CertificateValidationContext, and logical OR is applied to boolean fields.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContextOrBuilder getCombinedValidationContextOrBuilder() {
    if (validationContextTypeCase_ == 8) {
       return (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
  }

  public static final int ALPN_PROTOCOLS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList alpnProtocols_;
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @return A list containing the alpnProtocols.
   */
  public com.google.protobuf.ProtocolStringList
      getAlpnProtocolsList() {
    return alpnProtocols_;
  }
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @return The count of alpnProtocols.
   */
  public int getAlpnProtocolsCount() {
    return alpnProtocols_.size();
  }
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @param index The index of the element to return.
   * @return The alpnProtocols at the given index.
   */
  public java.lang.String getAlpnProtocols(int index) {
    return alpnProtocols_.get(index);
  }
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the alpnProtocols at the given index.
   */
  public com.google.protobuf.ByteString
      getAlpnProtocolsBytes(int index) {
    return alpnProtocols_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (tlsParams_ != null) {
      output.writeMessage(1, getTlsParams());
    }
    for (int i = 0; i < tlsCertificates_.size(); i++) {
      output.writeMessage(2, tlsCertificates_.get(i));
    }
    if (validationContextTypeCase_ == 3) {
      output.writeMessage(3, (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_);
    }
    for (int i = 0; i < alpnProtocols_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, alpnProtocols_.getRaw(i));
    }
    for (int i = 0; i < tlsCertificateSdsSecretConfigs_.size(); i++) {
      output.writeMessage(6, tlsCertificateSdsSecretConfigs_.get(i));
    }
    if (validationContextTypeCase_ == 7) {
      output.writeMessage(7, (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_);
    }
    if (validationContextTypeCase_ == 8) {
      output.writeMessage(8, (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (tlsParams_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTlsParams());
    }
    for (int i = 0; i < tlsCertificates_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, tlsCertificates_.get(i));
    }
    if (validationContextTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < alpnProtocols_.size(); i++) {
        dataSize += computeStringSizeNoTag(alpnProtocols_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getAlpnProtocolsList().size();
    }
    for (int i = 0; i < tlsCertificateSdsSecretConfigs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, tlsCertificateSdsSecretConfigs_.get(i));
    }
    if (validationContextTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_);
    }
    if (validationContextTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.api.v2.auth.CommonTlsContext)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.api.v2.auth.CommonTlsContext other = (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext) obj;

    if (hasTlsParams() != other.hasTlsParams()) return false;
    if (hasTlsParams()) {
      if (!getTlsParams()
          .equals(other.getTlsParams())) return false;
    }
    if (!getTlsCertificatesList()
        .equals(other.getTlsCertificatesList())) return false;
    if (!getTlsCertificateSdsSecretConfigsList()
        .equals(other.getTlsCertificateSdsSecretConfigsList())) return false;
    if (!getAlpnProtocolsList()
        .equals(other.getAlpnProtocolsList())) return false;
    if (!getValidationContextTypeCase().equals(other.getValidationContextTypeCase())) return false;
    switch (validationContextTypeCase_) {
      case 3:
        if (!getValidationContext()
            .equals(other.getValidationContext())) return false;
        break;
      case 7:
        if (!getValidationContextSdsSecretConfig()
            .equals(other.getValidationContextSdsSecretConfig())) return false;
        break;
      case 8:
        if (!getCombinedValidationContext()
            .equals(other.getCombinedValidationContext())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTlsParams()) {
      hash = (37 * hash) + TLS_PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + getTlsParams().hashCode();
    }
    if (getTlsCertificatesCount() > 0) {
      hash = (37 * hash) + TLS_CERTIFICATES_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCertificatesList().hashCode();
    }
    if (getTlsCertificateSdsSecretConfigsCount() > 0) {
      hash = (37 * hash) + TLS_CERTIFICATE_SDS_SECRET_CONFIGS_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCertificateSdsSecretConfigsList().hashCode();
    }
    if (getAlpnProtocolsCount() > 0) {
      hash = (37 * hash) + ALPN_PROTOCOLS_FIELD_NUMBER;
      hash = (53 * hash) + getAlpnProtocolsList().hashCode();
    }
    switch (validationContextTypeCase_) {
      case 3:
        hash = (37 * hash) + VALIDATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContext().hashCode();
        break;
      case 7:
        hash = (37 * hash) + VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextSdsSecretConfig().hashCode();
        break;
      case 8:
        hash = (37 * hash) + COMBINED_VALIDATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getCombinedValidationContext().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * TLS context shared by both client and server TLS contexts.
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.api.v2.auth.CommonTlsContext}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.api.v2.auth.CommonTlsContext)
      io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.class, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTlsCertificatesFieldBuilder();
        getTlsCertificateSdsSecretConfigsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (tlsParamsBuilder_ == null) {
        tlsParams_ = null;
      } else {
        tlsParams_ = null;
        tlsParamsBuilder_ = null;
      }
      if (tlsCertificatesBuilder_ == null) {
        tlsCertificates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        tlsCertificatesBuilder_.clear();
      }
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        tlsCertificateSdsSecretConfigs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.clear();
      }
      alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      validationContextTypeCase_ = 0;
      validationContextType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_CommonTlsContext_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext getDefaultInstanceForType() {
      return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext build() {
      io.envoyproxy.envoy.api.v2.auth.CommonTlsContext result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext buildPartial() {
      io.envoyproxy.envoy.api.v2.auth.CommonTlsContext result = new io.envoyproxy.envoy.api.v2.auth.CommonTlsContext(this);
      int from_bitField0_ = bitField0_;
      if (tlsParamsBuilder_ == null) {
        result.tlsParams_ = tlsParams_;
      } else {
        result.tlsParams_ = tlsParamsBuilder_.build();
      }
      if (tlsCertificatesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          tlsCertificates_ = java.util.Collections.unmodifiableList(tlsCertificates_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.tlsCertificates_ = tlsCertificates_;
      } else {
        result.tlsCertificates_ = tlsCertificatesBuilder_.build();
      }
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          tlsCertificateSdsSecretConfigs_ = java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.tlsCertificateSdsSecretConfigs_ = tlsCertificateSdsSecretConfigs_;
      } else {
        result.tlsCertificateSdsSecretConfigs_ = tlsCertificateSdsSecretConfigsBuilder_.build();
      }
      if (validationContextTypeCase_ == 3) {
        if (validationContextBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = validationContextBuilder_.build();
        }
      }
      if (validationContextTypeCase_ == 7) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = validationContextSdsSecretConfigBuilder_.build();
        }
      }
      if (validationContextTypeCase_ == 8) {
        if (combinedValidationContextBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = combinedValidationContextBuilder_.build();
        }
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        alpnProtocols_ = alpnProtocols_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.alpnProtocols_ = alpnProtocols_;
      result.validationContextTypeCase_ = validationContextTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.api.v2.auth.CommonTlsContext) {
        return mergeFrom((io.envoyproxy.envoy.api.v2.auth.CommonTlsContext)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext other) {
      if (other == io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance()) return this;
      if (other.hasTlsParams()) {
        mergeTlsParams(other.getTlsParams());
      }
      if (tlsCertificatesBuilder_ == null) {
        if (!other.tlsCertificates_.isEmpty()) {
          if (tlsCertificates_.isEmpty()) {
            tlsCertificates_ = other.tlsCertificates_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTlsCertificatesIsMutable();
            tlsCertificates_.addAll(other.tlsCertificates_);
          }
          onChanged();
        }
      } else {
        if (!other.tlsCertificates_.isEmpty()) {
          if (tlsCertificatesBuilder_.isEmpty()) {
            tlsCertificatesBuilder_.dispose();
            tlsCertificatesBuilder_ = null;
            tlsCertificates_ = other.tlsCertificates_;
            bitField0_ = (bitField0_ & ~0x00000001);
            tlsCertificatesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTlsCertificatesFieldBuilder() : null;
          } else {
            tlsCertificatesBuilder_.addAllMessages(other.tlsCertificates_);
          }
        }
      }
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (!other.tlsCertificateSdsSecretConfigs_.isEmpty()) {
          if (tlsCertificateSdsSecretConfigs_.isEmpty()) {
            tlsCertificateSdsSecretConfigs_ = other.tlsCertificateSdsSecretConfigs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTlsCertificateSdsSecretConfigsIsMutable();
            tlsCertificateSdsSecretConfigs_.addAll(other.tlsCertificateSdsSecretConfigs_);
          }
          onChanged();
        }
      } else {
        if (!other.tlsCertificateSdsSecretConfigs_.isEmpty()) {
          if (tlsCertificateSdsSecretConfigsBuilder_.isEmpty()) {
            tlsCertificateSdsSecretConfigsBuilder_.dispose();
            tlsCertificateSdsSecretConfigsBuilder_ = null;
            tlsCertificateSdsSecretConfigs_ = other.tlsCertificateSdsSecretConfigs_;
            bitField0_ = (bitField0_ & ~0x00000002);
            tlsCertificateSdsSecretConfigsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTlsCertificateSdsSecretConfigsFieldBuilder() : null;
          } else {
            tlsCertificateSdsSecretConfigsBuilder_.addAllMessages(other.tlsCertificateSdsSecretConfigs_);
          }
        }
      }
      if (!other.alpnProtocols_.isEmpty()) {
        if (alpnProtocols_.isEmpty()) {
          alpnProtocols_ = other.alpnProtocols_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureAlpnProtocolsIsMutable();
          alpnProtocols_.addAll(other.alpnProtocols_);
        }
        onChanged();
      }
      switch (other.getValidationContextTypeCase()) {
        case VALIDATION_CONTEXT: {
          mergeValidationContext(other.getValidationContext());
          break;
        }
        case VALIDATION_CONTEXT_SDS_SECRET_CONFIG: {
          mergeValidationContextSdsSecretConfig(other.getValidationContextSdsSecretConfig());
          break;
        }
        case COMBINED_VALIDATION_CONTEXT: {
          mergeCombinedValidationContext(other.getCombinedValidationContext());
          break;
        }
        case VALIDATIONCONTEXTTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.api.v2.auth.CommonTlsContext parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int validationContextTypeCase_ = 0;
    private java.lang.Object validationContextType_;
    public ValidationContextTypeCase
        getValidationContextTypeCase() {
      return ValidationContextTypeCase.forNumber(
          validationContextTypeCase_);
    }

    public Builder clearValidationContextType() {
      validationContextTypeCase_ = 0;
      validationContextType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private io.envoyproxy.envoy.api.v2.auth.TlsParameters tlsParams_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.TlsParameters, io.envoyproxy.envoy.api.v2.auth.TlsParameters.Builder, io.envoyproxy.envoy.api.v2.auth.TlsParametersOrBuilder> tlsParamsBuilder_;
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     * @return Whether the tlsParams field is set.
     */
    public boolean hasTlsParams() {
      return tlsParamsBuilder_ != null || tlsParams_ != null;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     * @return The tlsParams.
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsParameters getTlsParams() {
      if (tlsParamsBuilder_ == null) {
        return tlsParams_ == null ? io.envoyproxy.envoy.api.v2.auth.TlsParameters.getDefaultInstance() : tlsParams_;
      } else {
        return tlsParamsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    public Builder setTlsParams(io.envoyproxy.envoy.api.v2.auth.TlsParameters value) {
      if (tlsParamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tlsParams_ = value;
        onChanged();
      } else {
        tlsParamsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    public Builder setTlsParams(
        io.envoyproxy.envoy.api.v2.auth.TlsParameters.Builder builderForValue) {
      if (tlsParamsBuilder_ == null) {
        tlsParams_ = builderForValue.build();
        onChanged();
      } else {
        tlsParamsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    public Builder mergeTlsParams(io.envoyproxy.envoy.api.v2.auth.TlsParameters value) {
      if (tlsParamsBuilder_ == null) {
        if (tlsParams_ != null) {
          tlsParams_ =
            io.envoyproxy.envoy.api.v2.auth.TlsParameters.newBuilder(tlsParams_).mergeFrom(value).buildPartial();
        } else {
          tlsParams_ = value;
        }
        onChanged();
      } else {
        tlsParamsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    public Builder clearTlsParams() {
      if (tlsParamsBuilder_ == null) {
        tlsParams_ = null;
        onChanged();
      } else {
        tlsParams_ = null;
        tlsParamsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsParameters.Builder getTlsParamsBuilder() {
      
      onChanged();
      return getTlsParamsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsParametersOrBuilder getTlsParamsOrBuilder() {
      if (tlsParamsBuilder_ != null) {
        return tlsParamsBuilder_.getMessageOrBuilder();
      } else {
        return tlsParams_ == null ?
            io.envoyproxy.envoy.api.v2.auth.TlsParameters.getDefaultInstance() : tlsParams_;
      }
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsParameters tls_params = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.TlsParameters, io.envoyproxy.envoy.api.v2.auth.TlsParameters.Builder, io.envoyproxy.envoy.api.v2.auth.TlsParametersOrBuilder> 
        getTlsParamsFieldBuilder() {
      if (tlsParamsBuilder_ == null) {
        tlsParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.TlsParameters, io.envoyproxy.envoy.api.v2.auth.TlsParameters.Builder, io.envoyproxy.envoy.api.v2.auth.TlsParametersOrBuilder>(
                getTlsParams(),
                getParentForChildren(),
                isClean());
        tlsParams_ = null;
      }
      return tlsParamsBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.api.v2.auth.TlsCertificate> tlsCertificates_ =
      java.util.Collections.emptyList();
    private void ensureTlsCertificatesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        tlsCertificates_ = new java.util.ArrayList<io.envoyproxy.envoy.api.v2.auth.TlsCertificate>(tlsCertificates_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.TlsCertificate, io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder, io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder> tlsCertificatesBuilder_;

    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public java.util.List<io.envoyproxy.envoy.api.v2.auth.TlsCertificate> getTlsCertificatesList() {
      if (tlsCertificatesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tlsCertificates_);
      } else {
        return tlsCertificatesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public int getTlsCertificatesCount() {
      if (tlsCertificatesBuilder_ == null) {
        return tlsCertificates_.size();
      } else {
        return tlsCertificatesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsCertificate getTlsCertificates(int index) {
      if (tlsCertificatesBuilder_ == null) {
        return tlsCertificates_.get(index);
      } else {
        return tlsCertificatesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder setTlsCertificates(
        int index, io.envoyproxy.envoy.api.v2.auth.TlsCertificate value) {
      if (tlsCertificatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.set(index, value);
        onChanged();
      } else {
        tlsCertificatesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder setTlsCertificates(
        int index, io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder builderForValue) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.set(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificatesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(io.envoyproxy.envoy.api.v2.auth.TlsCertificate value) {
      if (tlsCertificatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(value);
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(
        int index, io.envoyproxy.envoy.api.v2.auth.TlsCertificate value) {
      if (tlsCertificatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(index, value);
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(
        io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder builderForValue) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(builderForValue.build());
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(
        int index, io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder builderForValue) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addAllTlsCertificates(
        java.lang.Iterable<? extends io.envoyproxy.envoy.api.v2.auth.TlsCertificate> values) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tlsCertificates_);
        onChanged();
      } else {
        tlsCertificatesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder clearTlsCertificates() {
      if (tlsCertificatesBuilder_ == null) {
        tlsCertificates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        tlsCertificatesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder removeTlsCertificates(int index) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.remove(index);
        onChanged();
      } else {
        tlsCertificatesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder getTlsCertificatesBuilder(
        int index) {
      return getTlsCertificatesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder getTlsCertificatesOrBuilder(
        int index) {
      if (tlsCertificatesBuilder_ == null) {
        return tlsCertificates_.get(index);  } else {
        return tlsCertificatesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder> 
         getTlsCertificatesOrBuilderList() {
      if (tlsCertificatesBuilder_ != null) {
        return tlsCertificatesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tlsCertificates_);
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder addTlsCertificatesBuilder() {
      return getTlsCertificatesFieldBuilder().addBuilder(
          io.envoyproxy.envoy.api.v2.auth.TlsCertificate.getDefaultInstance());
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder addTlsCertificatesBuilder(
        int index) {
      return getTlsCertificatesFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.api.v2.auth.TlsCertificate.getDefaultInstance());
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;</code>
     */
    public java.util.List<io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder> 
         getTlsCertificatesBuilderList() {
      return getTlsCertificatesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.TlsCertificate, io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder, io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder> 
        getTlsCertificatesFieldBuilder() {
      if (tlsCertificatesBuilder_ == null) {
        tlsCertificatesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.TlsCertificate, io.envoyproxy.envoy.api.v2.auth.TlsCertificate.Builder, io.envoyproxy.envoy.api.v2.auth.TlsCertificateOrBuilder>(
                tlsCertificates_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        tlsCertificates_ = null;
      }
      return tlsCertificatesBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig> tlsCertificateSdsSecretConfigs_ =
      java.util.Collections.emptyList();
    private void ensureTlsCertificateSdsSecretConfigsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        tlsCertificateSdsSecretConfigs_ = new java.util.ArrayList<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig>(tlsCertificateSdsSecretConfigs_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> tlsCertificateSdsSecretConfigsBuilder_;

    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig> getTlsCertificateSdsSecretConfigsList() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
      } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public int getTlsCertificateSdsSecretConfigsCount() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return tlsCertificateSdsSecretConfigs_.size();
      } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getTlsCertificateSdsSecretConfigs(int index) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return tlsCertificateSdsSecretConfigs_.get(index);
      } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.set(index, value);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder builderForValue) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.set(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(value);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(index, value);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder builderForValue) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(builderForValue.build());
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder builderForValue) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllTlsCertificateSdsSecretConfigs(
        java.lang.Iterable<? extends io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig> values) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tlsCertificateSdsSecretConfigs_);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder clearTlsCertificateSdsSecretConfigs() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        tlsCertificateSdsSecretConfigs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder removeTlsCertificateSdsSecretConfigs(int index) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.remove(index);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder getTlsCertificateSdsSecretConfigsBuilder(
        int index) {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getTlsCertificateSdsSecretConfigsOrBuilder(
        int index) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return tlsCertificateSdsSecretConfigs_.get(index);  } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> 
         getTlsCertificateSdsSecretConfigsOrBuilderList() {
      if (tlsCertificateSdsSecretConfigsBuilder_ != null) {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder addTlsCertificateSdsSecretConfigsBuilder() {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().addBuilder(
          io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance());
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder addTlsCertificateSdsSecretConfigsBuilder(
        int index) {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance());
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API.
     * </pre>
     *
     * <code>repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder> 
         getTlsCertificateSdsSecretConfigsBuilderList() {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> 
        getTlsCertificateSdsSecretConfigsFieldBuilder() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        tlsCertificateSdsSecretConfigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder>(
                tlsCertificateSdsSecretConfigs_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        tlsCertificateSdsSecretConfigs_ = null;
      }
      return tlsCertificateSdsSecretConfigsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder> validationContextBuilder_;
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     * @return Whether the validationContext field is set.
     */
    @java.lang.Override
    public boolean hasValidationContext() {
      return validationContextTypeCase_ == 3;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     * @return The validationContext.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext getValidationContext() {
      if (validationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 3) {
          return (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 3) {
          return validationContextBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder setValidationContext(io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext value) {
      if (validationContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        validationContextBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder setValidationContext(
        io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder builderForValue) {
      if (validationContextBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        validationContextBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder mergeValidationContext(io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext value) {
      if (validationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 3 &&
            validationContextType_ != io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.newBuilder((io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 3) {
          validationContextBuilder_.mergeFrom(value);
        } else {
          validationContextBuilder_.setMessage(value);
        }
      }
      validationContextTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder clearValidationContext() {
      if (validationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 3) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 3) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        validationContextBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder getValidationContextBuilder() {
      return getValidationContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder getValidationContextOrBuilder() {
      if ((validationContextTypeCase_ == 3) && (validationContextBuilder_ != null)) {
        return validationContextBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 3) {
          return (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CertificateValidationContext validation_context = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder> 
        getValidationContextFieldBuilder() {
      if (validationContextBuilder_ == null) {
        if (!(validationContextTypeCase_ == 3)) {
          validationContextType_ = io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.getDefaultInstance();
        }
        validationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CertificateValidationContextOrBuilder>(
                (io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 3;
      onChanged();;
      return validationContextBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> validationContextSdsSecretConfigBuilder_;
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     * @return Whether the validationContextSdsSecretConfig field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextSdsSecretConfig() {
      return validationContextTypeCase_ == 7;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     * @return The validationContextSdsSecretConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getValidationContextSdsSecretConfig() {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (validationContextTypeCase_ == 7) {
          return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 7) {
          return validationContextSdsSecretConfigBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder setValidationContextSdsSecretConfig(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        validationContextSdsSecretConfigBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder setValidationContextSdsSecretConfig(
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder builderForValue) {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        validationContextSdsSecretConfigBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder mergeValidationContextSdsSecretConfig(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (validationContextTypeCase_ == 7 &&
            validationContextType_ != io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.newBuilder((io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 7) {
          validationContextSdsSecretConfigBuilder_.mergeFrom(value);
        } else {
          validationContextSdsSecretConfigBuilder_.setMessage(value);
        }
      }
      validationContextTypeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder clearValidationContextSdsSecretConfig() {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (validationContextTypeCase_ == 7) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 7) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        validationContextSdsSecretConfigBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder getValidationContextSdsSecretConfigBuilder() {
      return getValidationContextSdsSecretConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
      if ((validationContextTypeCase_ == 7) && (validationContextSdsSecretConfigBuilder_ != null)) {
        return validationContextSdsSecretConfigBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 7) {
          return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> 
        getValidationContextSdsSecretConfigFieldBuilder() {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (!(validationContextTypeCase_ == 7)) {
          validationContextType_ = io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
        }
        validationContextSdsSecretConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder>(
                (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 7;
      onChanged();;
      return validationContextSdsSecretConfigBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContextOrBuilder> combinedValidationContextBuilder_;
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     * @return Whether the combinedValidationContext field is set.
     */
    @java.lang.Override
    public boolean hasCombinedValidationContext() {
      return validationContextTypeCase_ == 8;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     * @return The combinedValidationContext.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext getCombinedValidationContext() {
      if (combinedValidationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 8) {
          return (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 8) {
          return combinedValidationContextBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder setCombinedValidationContext(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext value) {
      if (combinedValidationContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        combinedValidationContextBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder setCombinedValidationContext(
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder builderForValue) {
      if (combinedValidationContextBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        combinedValidationContextBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder mergeCombinedValidationContext(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext value) {
      if (combinedValidationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 8 &&
            validationContextType_ != io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.newBuilder((io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 8) {
          combinedValidationContextBuilder_.mergeFrom(value);
        } else {
          combinedValidationContextBuilder_.setMessage(value);
        }
      }
      validationContextTypeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder clearCombinedValidationContext() {
      if (combinedValidationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 8) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 8) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        combinedValidationContextBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder getCombinedValidationContextBuilder() {
      return getCombinedValidationContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContextOrBuilder getCombinedValidationContextOrBuilder() {
      if ((validationContextTypeCase_ == 8) && (combinedValidationContextBuilder_ != null)) {
        return combinedValidationContextBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 8) {
          return (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContextOrBuilder> 
        getCombinedValidationContextFieldBuilder() {
      if (combinedValidationContextBuilder_ == null) {
        if (!(validationContextTypeCase_ == 8)) {
          validationContextType_ = io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
        }
        combinedValidationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext.Builder, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContextOrBuilder>(
                (io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 8;
      onChanged();;
      return combinedValidationContextBuilder_;
    }

    private com.google.protobuf.LazyStringList alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureAlpnProtocolsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        alpnProtocols_ = new com.google.protobuf.LazyStringArrayList(alpnProtocols_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @return A list containing the alpnProtocols.
     */
    public com.google.protobuf.ProtocolStringList
        getAlpnProtocolsList() {
      return alpnProtocols_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @return The count of alpnProtocols.
     */
    public int getAlpnProtocolsCount() {
      return alpnProtocols_.size();
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param index The index of the element to return.
     * @return The alpnProtocols at the given index.
     */
    public java.lang.String getAlpnProtocols(int index) {
      return alpnProtocols_.get(index);
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the alpnProtocols at the given index.
     */
    public com.google.protobuf.ByteString
        getAlpnProtocolsBytes(int index) {
      return alpnProtocols_.getByteString(index);
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param index The index to set the value at.
     * @param value The alpnProtocols to set.
     * @return This builder for chaining.
     */
    public Builder setAlpnProtocols(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAlpnProtocolsIsMutable();
      alpnProtocols_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param value The alpnProtocols to add.
     * @return This builder for chaining.
     */
    public Builder addAlpnProtocols(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAlpnProtocolsIsMutable();
      alpnProtocols_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param values The alpnProtocols to add.
     * @return This builder for chaining.
     */
    public Builder addAllAlpnProtocols(
        java.lang.Iterable<java.lang.String> values) {
      ensureAlpnProtocolsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, alpnProtocols_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAlpnProtocols() {
      alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param value The bytes of the alpnProtocols to add.
     * @return This builder for chaining.
     */
    public Builder addAlpnProtocolsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureAlpnProtocolsIsMutable();
      alpnProtocols_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.api.v2.auth.CommonTlsContext)
  }

  // @@protoc_insertion_point(class_scope:envoy.api.v2.auth.CommonTlsContext)
  private static final io.envoyproxy.envoy.api.v2.auth.CommonTlsContext DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.api.v2.auth.CommonTlsContext();
  }

  public static io.envoyproxy.envoy.api.v2.auth.CommonTlsContext getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CommonTlsContext>
      PARSER = new com.google.protobuf.AbstractParser<CommonTlsContext>() {
    @java.lang.Override
    public CommonTlsContext parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CommonTlsContext(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CommonTlsContext> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CommonTlsContext> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

