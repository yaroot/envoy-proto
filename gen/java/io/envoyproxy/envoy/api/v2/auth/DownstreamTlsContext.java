// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/auth/tls.proto

package io.envoyproxy.envoy.api.v2.auth;

/**
 * <pre>
 * [#next-free-field: 8]
 * </pre>
 *
 * Protobuf type {@code envoy.api.v2.auth.DownstreamTlsContext}
 */
public final class DownstreamTlsContext extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.api.v2.auth.DownstreamTlsContext)
    DownstreamTlsContextOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DownstreamTlsContext.newBuilder() to construct.
  private DownstreamTlsContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DownstreamTlsContext() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DownstreamTlsContext();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_DownstreamTlsContext_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_DownstreamTlsContext_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.class, io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.Builder.class);
  }

  private int sessionTicketKeysTypeCase_ = 0;
  private java.lang.Object sessionTicketKeysType_;
  public enum SessionTicketKeysTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SESSION_TICKET_KEYS(4),
    SESSION_TICKET_KEYS_SDS_SECRET_CONFIG(5),
    DISABLE_STATELESS_SESSION_RESUMPTION(7),
    SESSIONTICKETKEYSTYPE_NOT_SET(0);
    private final int value;
    private SessionTicketKeysTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SessionTicketKeysTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static SessionTicketKeysTypeCase forNumber(int value) {
      switch (value) {
        case 4: return SESSION_TICKET_KEYS;
        case 5: return SESSION_TICKET_KEYS_SDS_SECRET_CONFIG;
        case 7: return DISABLE_STATELESS_SESSION_RESUMPTION;
        case 0: return SESSIONTICKETKEYSTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SessionTicketKeysTypeCase
  getSessionTicketKeysTypeCase() {
    return SessionTicketKeysTypeCase.forNumber(
        sessionTicketKeysTypeCase_);
  }

  public static final int COMMON_TLS_CONTEXT_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.api.v2.auth.CommonTlsContext commonTlsContext_;
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   * @return Whether the commonTlsContext field is set.
   */
  @java.lang.Override
  public boolean hasCommonTlsContext() {
    return commonTlsContext_ != null;
  }
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   * @return The commonTlsContext.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext getCommonTlsContext() {
    return commonTlsContext_ == null ? io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance() : commonTlsContext_;
  }
  /**
   * <pre>
   * Common TLS context settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder getCommonTlsContextOrBuilder() {
    return commonTlsContext_ == null ? io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance() : commonTlsContext_;
  }

  public static final int REQUIRE_CLIENT_CERTIFICATE_FIELD_NUMBER = 2;
  private com.google.protobuf.BoolValue requireClientCertificate_;
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
   * @return Whether the requireClientCertificate field is set.
   */
  @java.lang.Override
  public boolean hasRequireClientCertificate() {
    return requireClientCertificate_ != null;
  }
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
   * @return The requireClientCertificate.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getRequireClientCertificate() {
    return requireClientCertificate_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : requireClientCertificate_;
  }
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getRequireClientCertificateOrBuilder() {
    return requireClientCertificate_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : requireClientCertificate_;
  }

  public static final int REQUIRE_SNI_FIELD_NUMBER = 3;
  private com.google.protobuf.BoolValue requireSni_;
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_sni = 3;</code>
   * @return Whether the requireSni field is set.
   */
  @java.lang.Override
  public boolean hasRequireSni() {
    return requireSni_ != null;
  }
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_sni = 3;</code>
   * @return The requireSni.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getRequireSni() {
    return requireSni_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : requireSni_;
  }
  /**
   * <pre>
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.BoolValue require_sni = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getRequireSniOrBuilder() {
    return requireSni_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : requireSni_;
  }

  public static final int SESSION_TICKET_KEYS_FIELD_NUMBER = 4;
  /**
   * <pre>
   * TLS session ticket key settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
   * @return Whether the sessionTicketKeys field is set.
   */
  @java.lang.Override
  public boolean hasSessionTicketKeys() {
    return sessionTicketKeysTypeCase_ == 4;
  }
  /**
   * <pre>
   * TLS session ticket key settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
   * @return The sessionTicketKeys.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys getSessionTicketKeys() {
    if (sessionTicketKeysTypeCase_ == 4) {
       return (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance();
  }
  /**
   * <pre>
   * TLS session ticket key settings.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeysOrBuilder getSessionTicketKeysOrBuilder() {
    if (sessionTicketKeysTypeCase_ == 4) {
       return (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance();
  }

  public static final int SESSION_TICKET_KEYS_SDS_SECRET_CONFIG_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Config for fetching TLS session ticket keys via SDS API.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
   * @return Whether the sessionTicketKeysSdsSecretConfig field is set.
   */
  @java.lang.Override
  public boolean hasSessionTicketKeysSdsSecretConfig() {
    return sessionTicketKeysTypeCase_ == 5;
  }
  /**
   * <pre>
   * Config for fetching TLS session ticket keys via SDS API.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
   * @return The sessionTicketKeysSdsSecretConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getSessionTicketKeysSdsSecretConfig() {
    if (sessionTicketKeysTypeCase_ == 5) {
       return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
  }
  /**
   * <pre>
   * Config for fetching TLS session ticket keys via SDS API.
   * </pre>
   *
   * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getSessionTicketKeysSdsSecretConfigOrBuilder() {
    if (sessionTicketKeysTypeCase_ == 5) {
       return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_;
    }
    return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
  }

  public static final int DISABLE_STATELESS_SESSION_RESUMPTION_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
   * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
   * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
   * the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys&gt;`
   * or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config&gt;`.
   * If this config is set to false and no keys are explicitly configured, the TLS server will issue
   * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
   * implication that sessions cannot be resumed across hot restarts or on different hosts.
   * </pre>
   *
   * <code>bool disable_stateless_session_resumption = 7;</code>
   * @return Whether the disableStatelessSessionResumption field is set.
   */
  @java.lang.Override
  public boolean hasDisableStatelessSessionResumption() {
    return sessionTicketKeysTypeCase_ == 7;
  }
  /**
   * <pre>
   * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
   * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
   * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
   * the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys&gt;`
   * or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config&gt;`.
   * If this config is set to false and no keys are explicitly configured, the TLS server will issue
   * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
   * implication that sessions cannot be resumed across hot restarts or on different hosts.
   * </pre>
   *
   * <code>bool disable_stateless_session_resumption = 7;</code>
   * @return The disableStatelessSessionResumption.
   */
  @java.lang.Override
  public boolean getDisableStatelessSessionResumption() {
    if (sessionTicketKeysTypeCase_ == 7) {
      return (java.lang.Boolean) sessionTicketKeysType_;
    }
    return false;
  }

  public static final int SESSION_TIMEOUT_FIELD_NUMBER = 6;
  private com.google.protobuf.Duration sessionTimeout_;
  /**
   * <pre>
   * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
   * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
   * Only seconds can be specified (fractional seconds are ignored).
   * </pre>
   *
   * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
   * @return Whether the sessionTimeout field is set.
   */
  @java.lang.Override
  public boolean hasSessionTimeout() {
    return sessionTimeout_ != null;
  }
  /**
   * <pre>
   * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
   * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
   * Only seconds can be specified (fractional seconds are ignored).
   * </pre>
   *
   * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
   * @return The sessionTimeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getSessionTimeout() {
    return sessionTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : sessionTimeout_;
  }
  /**
   * <pre>
   * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
   * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
   * Only seconds can be specified (fractional seconds are ignored).
   * </pre>
   *
   * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getSessionTimeoutOrBuilder() {
    return sessionTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : sessionTimeout_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commonTlsContext_ != null) {
      output.writeMessage(1, getCommonTlsContext());
    }
    if (requireClientCertificate_ != null) {
      output.writeMessage(2, getRequireClientCertificate());
    }
    if (requireSni_ != null) {
      output.writeMessage(3, getRequireSni());
    }
    if (sessionTicketKeysTypeCase_ == 4) {
      output.writeMessage(4, (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_);
    }
    if (sessionTicketKeysTypeCase_ == 5) {
      output.writeMessage(5, (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_);
    }
    if (sessionTimeout_ != null) {
      output.writeMessage(6, getSessionTimeout());
    }
    if (sessionTicketKeysTypeCase_ == 7) {
      output.writeBool(
          7, (boolean)((java.lang.Boolean) sessionTicketKeysType_));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commonTlsContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommonTlsContext());
    }
    if (requireClientCertificate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRequireClientCertificate());
    }
    if (requireSni_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRequireSni());
    }
    if (sessionTicketKeysTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_);
    }
    if (sessionTicketKeysTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_);
    }
    if (sessionTimeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getSessionTimeout());
    }
    if (sessionTicketKeysTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            7, (boolean)((java.lang.Boolean) sessionTicketKeysType_));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext other = (io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext) obj;

    if (hasCommonTlsContext() != other.hasCommonTlsContext()) return false;
    if (hasCommonTlsContext()) {
      if (!getCommonTlsContext()
          .equals(other.getCommonTlsContext())) return false;
    }
    if (hasRequireClientCertificate() != other.hasRequireClientCertificate()) return false;
    if (hasRequireClientCertificate()) {
      if (!getRequireClientCertificate()
          .equals(other.getRequireClientCertificate())) return false;
    }
    if (hasRequireSni() != other.hasRequireSni()) return false;
    if (hasRequireSni()) {
      if (!getRequireSni()
          .equals(other.getRequireSni())) return false;
    }
    if (hasSessionTimeout() != other.hasSessionTimeout()) return false;
    if (hasSessionTimeout()) {
      if (!getSessionTimeout()
          .equals(other.getSessionTimeout())) return false;
    }
    if (!getSessionTicketKeysTypeCase().equals(other.getSessionTicketKeysTypeCase())) return false;
    switch (sessionTicketKeysTypeCase_) {
      case 4:
        if (!getSessionTicketKeys()
            .equals(other.getSessionTicketKeys())) return false;
        break;
      case 5:
        if (!getSessionTicketKeysSdsSecretConfig()
            .equals(other.getSessionTicketKeysSdsSecretConfig())) return false;
        break;
      case 7:
        if (getDisableStatelessSessionResumption()
            != other.getDisableStatelessSessionResumption()) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommonTlsContext()) {
      hash = (37 * hash) + COMMON_TLS_CONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getCommonTlsContext().hashCode();
    }
    if (hasRequireClientCertificate()) {
      hash = (37 * hash) + REQUIRE_CLIENT_CERTIFICATE_FIELD_NUMBER;
      hash = (53 * hash) + getRequireClientCertificate().hashCode();
    }
    if (hasRequireSni()) {
      hash = (37 * hash) + REQUIRE_SNI_FIELD_NUMBER;
      hash = (53 * hash) + getRequireSni().hashCode();
    }
    if (hasSessionTimeout()) {
      hash = (37 * hash) + SESSION_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getSessionTimeout().hashCode();
    }
    switch (sessionTicketKeysTypeCase_) {
      case 4:
        hash = (37 * hash) + SESSION_TICKET_KEYS_FIELD_NUMBER;
        hash = (53 * hash) + getSessionTicketKeys().hashCode();
        break;
      case 5:
        hash = (37 * hash) + SESSION_TICKET_KEYS_SDS_SECRET_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getSessionTicketKeysSdsSecretConfig().hashCode();
        break;
      case 7:
        hash = (37 * hash) + DISABLE_STATELESS_SESSION_RESUMPTION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDisableStatelessSessionResumption());
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 8]
   * </pre>
   *
   * Protobuf type {@code envoy.api.v2.auth.DownstreamTlsContext}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.api.v2.auth.DownstreamTlsContext)
      io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContextOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_DownstreamTlsContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_DownstreamTlsContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.class, io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      commonTlsContext_ = null;
      if (commonTlsContextBuilder_ != null) {
        commonTlsContextBuilder_.dispose();
        commonTlsContextBuilder_ = null;
      }
      requireClientCertificate_ = null;
      if (requireClientCertificateBuilder_ != null) {
        requireClientCertificateBuilder_.dispose();
        requireClientCertificateBuilder_ = null;
      }
      requireSni_ = null;
      if (requireSniBuilder_ != null) {
        requireSniBuilder_.dispose();
        requireSniBuilder_ = null;
      }
      if (sessionTicketKeysBuilder_ != null) {
        sessionTicketKeysBuilder_.clear();
      }
      if (sessionTicketKeysSdsSecretConfigBuilder_ != null) {
        sessionTicketKeysSdsSecretConfigBuilder_.clear();
      }
      sessionTimeout_ = null;
      if (sessionTimeoutBuilder_ != null) {
        sessionTimeoutBuilder_.dispose();
        sessionTimeoutBuilder_ = null;
      }
      sessionTicketKeysTypeCase_ = 0;
      sessionTicketKeysType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.api.v2.auth.TlsProto.internal_static_envoy_api_v2_auth_DownstreamTlsContext_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDefaultInstanceForType() {
      return io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext build() {
      io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext buildPartial() {
      io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext result = new io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.commonTlsContext_ = commonTlsContextBuilder_ == null
            ? commonTlsContext_
            : commonTlsContextBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.requireClientCertificate_ = requireClientCertificateBuilder_ == null
            ? requireClientCertificate_
            : requireClientCertificateBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.requireSni_ = requireSniBuilder_ == null
            ? requireSni_
            : requireSniBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.sessionTimeout_ = sessionTimeoutBuilder_ == null
            ? sessionTimeout_
            : sessionTimeoutBuilder_.build();
      }
    }

    private void buildPartialOneofs(io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext result) {
      result.sessionTicketKeysTypeCase_ = sessionTicketKeysTypeCase_;
      result.sessionTicketKeysType_ = this.sessionTicketKeysType_;
      if (sessionTicketKeysTypeCase_ == 4 &&
          sessionTicketKeysBuilder_ != null) {
        result.sessionTicketKeysType_ = sessionTicketKeysBuilder_.build();
      }
      if (sessionTicketKeysTypeCase_ == 5 &&
          sessionTicketKeysSdsSecretConfigBuilder_ != null) {
        result.sessionTicketKeysType_ = sessionTicketKeysSdsSecretConfigBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext) {
        return mergeFrom((io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext other) {
      if (other == io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.getDefaultInstance()) return this;
      if (other.hasCommonTlsContext()) {
        mergeCommonTlsContext(other.getCommonTlsContext());
      }
      if (other.hasRequireClientCertificate()) {
        mergeRequireClientCertificate(other.getRequireClientCertificate());
      }
      if (other.hasRequireSni()) {
        mergeRequireSni(other.getRequireSni());
      }
      if (other.hasSessionTimeout()) {
        mergeSessionTimeout(other.getSessionTimeout());
      }
      switch (other.getSessionTicketKeysTypeCase()) {
        case SESSION_TICKET_KEYS: {
          mergeSessionTicketKeys(other.getSessionTicketKeys());
          break;
        }
        case SESSION_TICKET_KEYS_SDS_SECRET_CONFIG: {
          mergeSessionTicketKeysSdsSecretConfig(other.getSessionTicketKeysSdsSecretConfig());
          break;
        }
        case DISABLE_STATELESS_SESSION_RESUMPTION: {
          setDisableStatelessSessionResumption(other.getDisableStatelessSessionResumption());
          break;
        }
        case SESSIONTICKETKEYSTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getCommonTlsContextFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getRequireClientCertificateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getRequireSniFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getSessionTicketKeysFieldBuilder().getBuilder(),
                  extensionRegistry);
              sessionTicketKeysTypeCase_ = 4;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getSessionTicketKeysSdsSecretConfigFieldBuilder().getBuilder(),
                  extensionRegistry);
              sessionTicketKeysTypeCase_ = 5;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getSessionTimeoutFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 50
            case 56: {
              sessionTicketKeysType_ = input.readBool();
              sessionTicketKeysTypeCase_ = 7;
              break;
            } // case 56
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int sessionTicketKeysTypeCase_ = 0;
    private java.lang.Object sessionTicketKeysType_;
    public SessionTicketKeysTypeCase
        getSessionTicketKeysTypeCase() {
      return SessionTicketKeysTypeCase.forNumber(
          sessionTicketKeysTypeCase_);
    }

    public Builder clearSessionTicketKeysType() {
      sessionTicketKeysTypeCase_ = 0;
      sessionTicketKeysType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private io.envoyproxy.envoy.api.v2.auth.CommonTlsContext commonTlsContext_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder, io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder> commonTlsContextBuilder_;
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     * @return Whether the commonTlsContext field is set.
     */
    public boolean hasCommonTlsContext() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     * @return The commonTlsContext.
     */
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext getCommonTlsContext() {
      if (commonTlsContextBuilder_ == null) {
        return commonTlsContext_ == null ? io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance() : commonTlsContext_;
      } else {
        return commonTlsContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    public Builder setCommonTlsContext(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext value) {
      if (commonTlsContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commonTlsContext_ = value;
      } else {
        commonTlsContextBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    public Builder setCommonTlsContext(
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder builderForValue) {
      if (commonTlsContextBuilder_ == null) {
        commonTlsContext_ = builderForValue.build();
      } else {
        commonTlsContextBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    public Builder mergeCommonTlsContext(io.envoyproxy.envoy.api.v2.auth.CommonTlsContext value) {
      if (commonTlsContextBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          commonTlsContext_ != null &&
          commonTlsContext_ != io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance()) {
          getCommonTlsContextBuilder().mergeFrom(value);
        } else {
          commonTlsContext_ = value;
        }
      } else {
        commonTlsContextBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    public Builder clearCommonTlsContext() {
      bitField0_ = (bitField0_ & ~0x00000001);
      commonTlsContext_ = null;
      if (commonTlsContextBuilder_ != null) {
        commonTlsContextBuilder_.dispose();
        commonTlsContextBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder getCommonTlsContextBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getCommonTlsContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder getCommonTlsContextOrBuilder() {
      if (commonTlsContextBuilder_ != null) {
        return commonTlsContextBuilder_.getMessageOrBuilder();
      } else {
        return commonTlsContext_ == null ?
            io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.getDefaultInstance() : commonTlsContext_;
      }
    }
    /**
     * <pre>
     * Common TLS context settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.CommonTlsContext, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder, io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder> 
        getCommonTlsContextFieldBuilder() {
      if (commonTlsContextBuilder_ == null) {
        commonTlsContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.CommonTlsContext, io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.Builder, io.envoyproxy.envoy.api.v2.auth.CommonTlsContextOrBuilder>(
                getCommonTlsContext(),
                getParentForChildren(),
                isClean());
        commonTlsContext_ = null;
      }
      return commonTlsContextBuilder_;
    }

    private com.google.protobuf.BoolValue requireClientCertificate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> requireClientCertificateBuilder_;
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     * @return Whether the requireClientCertificate field is set.
     */
    public boolean hasRequireClientCertificate() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     * @return The requireClientCertificate.
     */
    public com.google.protobuf.BoolValue getRequireClientCertificate() {
      if (requireClientCertificateBuilder_ == null) {
        return requireClientCertificate_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : requireClientCertificate_;
      } else {
        return requireClientCertificateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    public Builder setRequireClientCertificate(com.google.protobuf.BoolValue value) {
      if (requireClientCertificateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requireClientCertificate_ = value;
      } else {
        requireClientCertificateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    public Builder setRequireClientCertificate(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (requireClientCertificateBuilder_ == null) {
        requireClientCertificate_ = builderForValue.build();
      } else {
        requireClientCertificateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    public Builder mergeRequireClientCertificate(com.google.protobuf.BoolValue value) {
      if (requireClientCertificateBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          requireClientCertificate_ != null &&
          requireClientCertificate_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
          getRequireClientCertificateBuilder().mergeFrom(value);
        } else {
          requireClientCertificate_ = value;
        }
      } else {
        requireClientCertificateBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    public Builder clearRequireClientCertificate() {
      bitField0_ = (bitField0_ & ~0x00000002);
      requireClientCertificate_ = null;
      if (requireClientCertificateBuilder_ != null) {
        requireClientCertificateBuilder_.dispose();
        requireClientCertificateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    public com.google.protobuf.BoolValue.Builder getRequireClientCertificateBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getRequireClientCertificateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getRequireClientCertificateOrBuilder() {
      if (requireClientCertificateBuilder_ != null) {
        return requireClientCertificateBuilder_.getMessageOrBuilder();
      } else {
        return requireClientCertificate_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : requireClientCertificate_;
      }
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid client
     * certificate.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_client_certificate = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getRequireClientCertificateFieldBuilder() {
      if (requireClientCertificateBuilder_ == null) {
        requireClientCertificateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getRequireClientCertificate(),
                getParentForChildren(),
                isClean());
        requireClientCertificate_ = null;
      }
      return requireClientCertificateBuilder_;
    }

    private com.google.protobuf.BoolValue requireSni_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> requireSniBuilder_;
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     * @return Whether the requireSni field is set.
     */
    public boolean hasRequireSni() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     * @return The requireSni.
     */
    public com.google.protobuf.BoolValue getRequireSni() {
      if (requireSniBuilder_ == null) {
        return requireSni_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : requireSni_;
      } else {
        return requireSniBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    public Builder setRequireSni(com.google.protobuf.BoolValue value) {
      if (requireSniBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requireSni_ = value;
      } else {
        requireSniBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    public Builder setRequireSni(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (requireSniBuilder_ == null) {
        requireSni_ = builderForValue.build();
      } else {
        requireSniBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    public Builder mergeRequireSni(com.google.protobuf.BoolValue value) {
      if (requireSniBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          requireSni_ != null &&
          requireSni_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
          getRequireSniBuilder().mergeFrom(value);
        } else {
          requireSni_ = value;
        }
      } else {
        requireSniBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    public Builder clearRequireSni() {
      bitField0_ = (bitField0_ & ~0x00000004);
      requireSni_ = null;
      if (requireSniBuilder_ != null) {
        requireSniBuilder_.dispose();
        requireSniBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    public com.google.protobuf.BoolValue.Builder getRequireSniBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getRequireSniFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getRequireSniOrBuilder() {
      if (requireSniBuilder_ != null) {
        return requireSniBuilder_.getMessageOrBuilder();
      } else {
        return requireSni_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : requireSni_;
      }
    }
    /**
     * <pre>
     * If specified, Envoy will reject connections without a valid and matching SNI.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.google.protobuf.BoolValue require_sni = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getRequireSniFieldBuilder() {
      if (requireSniBuilder_ == null) {
        requireSniBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getRequireSni(),
                getParentForChildren(),
                isClean());
        requireSni_ = null;
      }
      return requireSniBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys, io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.Builder, io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeysOrBuilder> sessionTicketKeysBuilder_;
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     * @return Whether the sessionTicketKeys field is set.
     */
    @java.lang.Override
    public boolean hasSessionTicketKeys() {
      return sessionTicketKeysTypeCase_ == 4;
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     * @return The sessionTicketKeys.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys getSessionTicketKeys() {
      if (sessionTicketKeysBuilder_ == null) {
        if (sessionTicketKeysTypeCase_ == 4) {
          return (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance();
      } else {
        if (sessionTicketKeysTypeCase_ == 4) {
          return sessionTicketKeysBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    public Builder setSessionTicketKeys(io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys value) {
      if (sessionTicketKeysBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sessionTicketKeysType_ = value;
        onChanged();
      } else {
        sessionTicketKeysBuilder_.setMessage(value);
      }
      sessionTicketKeysTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    public Builder setSessionTicketKeys(
        io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.Builder builderForValue) {
      if (sessionTicketKeysBuilder_ == null) {
        sessionTicketKeysType_ = builderForValue.build();
        onChanged();
      } else {
        sessionTicketKeysBuilder_.setMessage(builderForValue.build());
      }
      sessionTicketKeysTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    public Builder mergeSessionTicketKeys(io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys value) {
      if (sessionTicketKeysBuilder_ == null) {
        if (sessionTicketKeysTypeCase_ == 4 &&
            sessionTicketKeysType_ != io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance()) {
          sessionTicketKeysType_ = io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.newBuilder((io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_)
              .mergeFrom(value).buildPartial();
        } else {
          sessionTicketKeysType_ = value;
        }
        onChanged();
      } else {
        if (sessionTicketKeysTypeCase_ == 4) {
          sessionTicketKeysBuilder_.mergeFrom(value);
        } else {
          sessionTicketKeysBuilder_.setMessage(value);
        }
      }
      sessionTicketKeysTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    public Builder clearSessionTicketKeys() {
      if (sessionTicketKeysBuilder_ == null) {
        if (sessionTicketKeysTypeCase_ == 4) {
          sessionTicketKeysTypeCase_ = 0;
          sessionTicketKeysType_ = null;
          onChanged();
        }
      } else {
        if (sessionTicketKeysTypeCase_ == 4) {
          sessionTicketKeysTypeCase_ = 0;
          sessionTicketKeysType_ = null;
        }
        sessionTicketKeysBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.Builder getSessionTicketKeysBuilder() {
      return getSessionTicketKeysFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeysOrBuilder getSessionTicketKeysOrBuilder() {
      if ((sessionTicketKeysTypeCase_ == 4) && (sessionTicketKeysBuilder_ != null)) {
        return sessionTicketKeysBuilder_.getMessageOrBuilder();
      } else {
        if (sessionTicketKeysTypeCase_ == 4) {
          return (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * TLS session ticket key settings.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys, io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.Builder, io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeysOrBuilder> 
        getSessionTicketKeysFieldBuilder() {
      if (sessionTicketKeysBuilder_ == null) {
        if (!(sessionTicketKeysTypeCase_ == 4)) {
          sessionTicketKeysType_ = io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.getDefaultInstance();
        }
        sessionTicketKeysBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys, io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys.Builder, io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeysOrBuilder>(
                (io.envoyproxy.envoy.api.v2.auth.TlsSessionTicketKeys) sessionTicketKeysType_,
                getParentForChildren(),
                isClean());
        sessionTicketKeysType_ = null;
      }
      sessionTicketKeysTypeCase_ = 4;
      onChanged();
      return sessionTicketKeysBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> sessionTicketKeysSdsSecretConfigBuilder_;
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     * @return Whether the sessionTicketKeysSdsSecretConfig field is set.
     */
    @java.lang.Override
    public boolean hasSessionTicketKeysSdsSecretConfig() {
      return sessionTicketKeysTypeCase_ == 5;
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     * @return The sessionTicketKeysSdsSecretConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig getSessionTicketKeysSdsSecretConfig() {
      if (sessionTicketKeysSdsSecretConfigBuilder_ == null) {
        if (sessionTicketKeysTypeCase_ == 5) {
          return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
      } else {
        if (sessionTicketKeysTypeCase_ == 5) {
          return sessionTicketKeysSdsSecretConfigBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    public Builder setSessionTicketKeysSdsSecretConfig(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (sessionTicketKeysSdsSecretConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sessionTicketKeysType_ = value;
        onChanged();
      } else {
        sessionTicketKeysSdsSecretConfigBuilder_.setMessage(value);
      }
      sessionTicketKeysTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    public Builder setSessionTicketKeysSdsSecretConfig(
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder builderForValue) {
      if (sessionTicketKeysSdsSecretConfigBuilder_ == null) {
        sessionTicketKeysType_ = builderForValue.build();
        onChanged();
      } else {
        sessionTicketKeysSdsSecretConfigBuilder_.setMessage(builderForValue.build());
      }
      sessionTicketKeysTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    public Builder mergeSessionTicketKeysSdsSecretConfig(io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig value) {
      if (sessionTicketKeysSdsSecretConfigBuilder_ == null) {
        if (sessionTicketKeysTypeCase_ == 5 &&
            sessionTicketKeysType_ != io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance()) {
          sessionTicketKeysType_ = io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.newBuilder((io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_)
              .mergeFrom(value).buildPartial();
        } else {
          sessionTicketKeysType_ = value;
        }
        onChanged();
      } else {
        if (sessionTicketKeysTypeCase_ == 5) {
          sessionTicketKeysSdsSecretConfigBuilder_.mergeFrom(value);
        } else {
          sessionTicketKeysSdsSecretConfigBuilder_.setMessage(value);
        }
      }
      sessionTicketKeysTypeCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    public Builder clearSessionTicketKeysSdsSecretConfig() {
      if (sessionTicketKeysSdsSecretConfigBuilder_ == null) {
        if (sessionTicketKeysTypeCase_ == 5) {
          sessionTicketKeysTypeCase_ = 0;
          sessionTicketKeysType_ = null;
          onChanged();
        }
      } else {
        if (sessionTicketKeysTypeCase_ == 5) {
          sessionTicketKeysTypeCase_ = 0;
          sessionTicketKeysType_ = null;
        }
        sessionTicketKeysSdsSecretConfigBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder getSessionTicketKeysSdsSecretConfigBuilder() {
      return getSessionTicketKeysSdsSecretConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder getSessionTicketKeysSdsSecretConfigOrBuilder() {
      if ((sessionTicketKeysTypeCase_ == 5) && (sessionTicketKeysSdsSecretConfigBuilder_ != null)) {
        return sessionTicketKeysSdsSecretConfigBuilder_.getMessageOrBuilder();
      } else {
        if (sessionTicketKeysTypeCase_ == 5) {
          return (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_;
        }
        return io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Config for fetching TLS session ticket keys via SDS API.
     * </pre>
     *
     * <code>.envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder> 
        getSessionTicketKeysSdsSecretConfigFieldBuilder() {
      if (sessionTicketKeysSdsSecretConfigBuilder_ == null) {
        if (!(sessionTicketKeysTypeCase_ == 5)) {
          sessionTicketKeysType_ = io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.getDefaultInstance();
        }
        sessionTicketKeysSdsSecretConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.Builder, io.envoyproxy.envoy.api.v2.auth.SdsSecretConfigOrBuilder>(
                (io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig) sessionTicketKeysType_,
                getParentForChildren(),
                isClean());
        sessionTicketKeysType_ = null;
      }
      sessionTicketKeysTypeCase_ = 5;
      onChanged();
      return sessionTicketKeysSdsSecretConfigBuilder_;
    }

    /**
     * <pre>
     * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
     * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
     * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
     * the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys&gt;`
     * or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config&gt;`.
     * If this config is set to false and no keys are explicitly configured, the TLS server will issue
     * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
     * implication that sessions cannot be resumed across hot restarts or on different hosts.
     * </pre>
     *
     * <code>bool disable_stateless_session_resumption = 7;</code>
     * @return Whether the disableStatelessSessionResumption field is set.
     */
    public boolean hasDisableStatelessSessionResumption() {
      return sessionTicketKeysTypeCase_ == 7;
    }
    /**
     * <pre>
     * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
     * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
     * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
     * the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys&gt;`
     * or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config&gt;`.
     * If this config is set to false and no keys are explicitly configured, the TLS server will issue
     * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
     * implication that sessions cannot be resumed across hot restarts or on different hosts.
     * </pre>
     *
     * <code>bool disable_stateless_session_resumption = 7;</code>
     * @return The disableStatelessSessionResumption.
     */
    public boolean getDisableStatelessSessionResumption() {
      if (sessionTicketKeysTypeCase_ == 7) {
        return (java.lang.Boolean) sessionTicketKeysType_;
      }
      return false;
    }
    /**
     * <pre>
     * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
     * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
     * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
     * the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys&gt;`
     * or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config&gt;`.
     * If this config is set to false and no keys are explicitly configured, the TLS server will issue
     * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
     * implication that sessions cannot be resumed across hot restarts or on different hosts.
     * </pre>
     *
     * <code>bool disable_stateless_session_resumption = 7;</code>
     * @param value The disableStatelessSessionResumption to set.
     * @return This builder for chaining.
     */
    public Builder setDisableStatelessSessionResumption(boolean value) {
      
      sessionTicketKeysTypeCase_ = 7;
      sessionTicketKeysType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
     * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
     * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
     * the keys specified through either :ref:`session_ticket_keys &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys&gt;`
     * or :ref:`session_ticket_keys_sds_secret_config &lt;envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config&gt;`.
     * If this config is set to false and no keys are explicitly configured, the TLS server will issue
     * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
     * implication that sessions cannot be resumed across hot restarts or on different hosts.
     * </pre>
     *
     * <code>bool disable_stateless_session_resumption = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisableStatelessSessionResumption() {
      if (sessionTicketKeysTypeCase_ == 7) {
        sessionTicketKeysTypeCase_ = 0;
        sessionTicketKeysType_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.Duration sessionTimeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> sessionTimeoutBuilder_;
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     * @return Whether the sessionTimeout field is set.
     */
    public boolean hasSessionTimeout() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     * @return The sessionTimeout.
     */
    public com.google.protobuf.Duration getSessionTimeout() {
      if (sessionTimeoutBuilder_ == null) {
        return sessionTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : sessionTimeout_;
      } else {
        return sessionTimeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setSessionTimeout(com.google.protobuf.Duration value) {
      if (sessionTimeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sessionTimeout_ = value;
      } else {
        sessionTimeoutBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setSessionTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (sessionTimeoutBuilder_ == null) {
        sessionTimeout_ = builderForValue.build();
      } else {
        sessionTimeoutBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeSessionTimeout(com.google.protobuf.Duration value) {
      if (sessionTimeoutBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          sessionTimeout_ != null &&
          sessionTimeout_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getSessionTimeoutBuilder().mergeFrom(value);
        } else {
          sessionTimeout_ = value;
        }
      } else {
        sessionTimeoutBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder clearSessionTimeout() {
      bitField0_ = (bitField0_ & ~0x00000040);
      sessionTimeout_ = null;
      if (sessionTimeoutBuilder_ != null) {
        sessionTimeoutBuilder_.dispose();
        sessionTimeoutBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getSessionTimeoutBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getSessionTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getSessionTimeoutOrBuilder() {
      if (sessionTimeoutBuilder_ != null) {
        return sessionTimeoutBuilder_.getMessageOrBuilder();
      } else {
        return sessionTimeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : sessionTimeout_;
      }
    }
    /**
     * <pre>
     * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
     * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) &lt;https://tools.ietf.org/html/rfc5077#section-5.6&gt;`_.
     * Only seconds can be specified (fractional seconds are ignored).
     * </pre>
     *
     * <code>.google.protobuf.Duration session_timeout = 6 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getSessionTimeoutFieldBuilder() {
      if (sessionTimeoutBuilder_ == null) {
        sessionTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getSessionTimeout(),
                getParentForChildren(),
                isClean());
        sessionTimeout_ = null;
      }
      return sessionTimeoutBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.api.v2.auth.DownstreamTlsContext)
  }

  // @@protoc_insertion_point(class_scope:envoy.api.v2.auth.DownstreamTlsContext)
  private static final io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext();
  }

  public static io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DownstreamTlsContext>
      PARSER = new com.google.protobuf.AbstractParser<DownstreamTlsContext>() {
    @java.lang.Override
    public DownstreamTlsContext parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DownstreamTlsContext> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DownstreamTlsContext> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

