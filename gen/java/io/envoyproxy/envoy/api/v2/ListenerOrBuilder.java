// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/api/v2/listener.proto

package io.envoyproxy.envoy.api.v2;

public interface ListenerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.api.v2.Listener)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The unique name by which this listener is known. If no name is provided,
   * Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
   * updated or removed via :ref:`LDS &lt;config_listeners_lds&gt;` a unique name must be provided.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The unique name by which this listener is known. If no name is provided,
   * Envoy will allocate an internal UUID for the listener. If the listener is to be dynamically
   * updated or removed via :ref:`LDS &lt;config_listeners_lds&gt;` a unique name must be provided.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The address that the listener should listen on. In general, the address must be unique, though
   * that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
   * Linux as the actual port will be allocated by the OS.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Address address = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the address field is set.
   */
  boolean hasAddress();
  /**
   * <pre>
   * The address that the listener should listen on. In general, the address must be unique, though
   * that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
   * Linux as the actual port will be allocated by the OS.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Address address = 2 [(.validate.rules) = { ... }</code>
   * @return The address.
   */
  io.envoyproxy.envoy.api.v2.core.Address getAddress();
  /**
   * <pre>
   * The address that the listener should listen on. In general, the address must be unique, though
   * that is governed by the bind rules of the OS. E.g., multiple listeners can listen on port 0 on
   * Linux as the actual port will be allocated by the OS.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Address address = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.api.v2.core.AddressOrBuilder getAddressOrBuilder();

  /**
   * <pre>
   * A list of filter chains to consider for this listener. The
   * :ref:`FilterChain &lt;envoy_api_msg_listener.FilterChain&gt;` with the most specific
   * :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` criteria is used on a
   * connection.
   * Example using SNI for filter chain selection can be found in the
   * :ref:`FAQ entry &lt;faq_how_to_setup_sni&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.FilterChain filter_chains = 3;</code>
   */
  java.util.List<io.envoyproxy.envoy.api.v2.listener.FilterChain> 
      getFilterChainsList();
  /**
   * <pre>
   * A list of filter chains to consider for this listener. The
   * :ref:`FilterChain &lt;envoy_api_msg_listener.FilterChain&gt;` with the most specific
   * :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` criteria is used on a
   * connection.
   * Example using SNI for filter chain selection can be found in the
   * :ref:`FAQ entry &lt;faq_how_to_setup_sni&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.FilterChain filter_chains = 3;</code>
   */
  io.envoyproxy.envoy.api.v2.listener.FilterChain getFilterChains(int index);
  /**
   * <pre>
   * A list of filter chains to consider for this listener. The
   * :ref:`FilterChain &lt;envoy_api_msg_listener.FilterChain&gt;` with the most specific
   * :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` criteria is used on a
   * connection.
   * Example using SNI for filter chain selection can be found in the
   * :ref:`FAQ entry &lt;faq_how_to_setup_sni&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.FilterChain filter_chains = 3;</code>
   */
  int getFilterChainsCount();
  /**
   * <pre>
   * A list of filter chains to consider for this listener. The
   * :ref:`FilterChain &lt;envoy_api_msg_listener.FilterChain&gt;` with the most specific
   * :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` criteria is used on a
   * connection.
   * Example using SNI for filter chain selection can be found in the
   * :ref:`FAQ entry &lt;faq_how_to_setup_sni&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.FilterChain filter_chains = 3;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.api.v2.listener.FilterChainOrBuilder> 
      getFilterChainsOrBuilderList();
  /**
   * <pre>
   * A list of filter chains to consider for this listener. The
   * :ref:`FilterChain &lt;envoy_api_msg_listener.FilterChain&gt;` with the most specific
   * :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` criteria is used on a
   * connection.
   * Example using SNI for filter chain selection can be found in the
   * :ref:`FAQ entry &lt;faq_how_to_setup_sni&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.FilterChain filter_chains = 3;</code>
   */
  io.envoyproxy.envoy.api.v2.listener.FilterChainOrBuilder getFilterChainsOrBuilder(
      int index);

  /**
   * <pre>
   * If a connection is redirected using *iptables*, the port on which the proxy
   * receives it might be different from the original destination address. When this flag is set to
   * true, the listener hands off redirected connections to the listener associated with the
   * original destination address. If there is no listener associated with the original destination
   * address, the connection is handled by the listener that receives it. Defaults to false.
   * .. attention::
   *   This field is deprecated. Use :ref:`an original_dst &lt;config_listener_filters_original_dst&gt;`
   *   :ref:`listener filter &lt;envoy_api_field_Listener.listener_filters&gt;` instead.
   *   Note that hand off to another listener is *NOT* performed without this flag. Once
   *   :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` is implemented this flag
   *   will be removed, as filter chain matching can be used to select a filter chain based on the
   *   restored destination address.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue use_original_dst = 4 [deprecated = true];</code>
   * @deprecated envoy.api.v2.Listener.use_original_dst is deprecated.
   *     See envoy/api/v2/listener.proto;l=112
   * @return Whether the useOriginalDst field is set.
   */
  @java.lang.Deprecated boolean hasUseOriginalDst();
  /**
   * <pre>
   * If a connection is redirected using *iptables*, the port on which the proxy
   * receives it might be different from the original destination address. When this flag is set to
   * true, the listener hands off redirected connections to the listener associated with the
   * original destination address. If there is no listener associated with the original destination
   * address, the connection is handled by the listener that receives it. Defaults to false.
   * .. attention::
   *   This field is deprecated. Use :ref:`an original_dst &lt;config_listener_filters_original_dst&gt;`
   *   :ref:`listener filter &lt;envoy_api_field_Listener.listener_filters&gt;` instead.
   *   Note that hand off to another listener is *NOT* performed without this flag. Once
   *   :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` is implemented this flag
   *   will be removed, as filter chain matching can be used to select a filter chain based on the
   *   restored destination address.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue use_original_dst = 4 [deprecated = true];</code>
   * @deprecated envoy.api.v2.Listener.use_original_dst is deprecated.
   *     See envoy/api/v2/listener.proto;l=112
   * @return The useOriginalDst.
   */
  @java.lang.Deprecated com.google.protobuf.BoolValue getUseOriginalDst();
  /**
   * <pre>
   * If a connection is redirected using *iptables*, the port on which the proxy
   * receives it might be different from the original destination address. When this flag is set to
   * true, the listener hands off redirected connections to the listener associated with the
   * original destination address. If there is no listener associated with the original destination
   * address, the connection is handled by the listener that receives it. Defaults to false.
   * .. attention::
   *   This field is deprecated. Use :ref:`an original_dst &lt;config_listener_filters_original_dst&gt;`
   *   :ref:`listener filter &lt;envoy_api_field_Listener.listener_filters&gt;` instead.
   *   Note that hand off to another listener is *NOT* performed without this flag. Once
   *   :ref:`FilterChainMatch &lt;envoy_api_msg_listener.FilterChainMatch&gt;` is implemented this flag
   *   will be removed, as filter chain matching can be used to select a filter chain based on the
   *   restored destination address.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue use_original_dst = 4 [deprecated = true];</code>
   */
  @java.lang.Deprecated com.google.protobuf.BoolValueOrBuilder getUseOriginalDstOrBuilder();

  /**
   * <pre>
   * Soft limit on size of the listener’s new connection read and write buffers.
   * If unspecified, an implementation defined default is applied (1MiB).
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;</code>
   * @return Whether the perConnectionBufferLimitBytes field is set.
   */
  boolean hasPerConnectionBufferLimitBytes();
  /**
   * <pre>
   * Soft limit on size of the listener’s new connection read and write buffers.
   * If unspecified, an implementation defined default is applied (1MiB).
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;</code>
   * @return The perConnectionBufferLimitBytes.
   */
  com.google.protobuf.UInt32Value getPerConnectionBufferLimitBytes();
  /**
   * <pre>
   * Soft limit on size of the listener’s new connection read and write buffers.
   * If unspecified, an implementation defined default is applied (1MiB).
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getPerConnectionBufferLimitBytesOrBuilder();

  /**
   * <pre>
   * Listener metadata.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Metadata metadata = 6;</code>
   * @return Whether the metadata field is set.
   */
  boolean hasMetadata();
  /**
   * <pre>
   * Listener metadata.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Metadata metadata = 6;</code>
   * @return The metadata.
   */
  io.envoyproxy.envoy.api.v2.core.Metadata getMetadata();
  /**
   * <pre>
   * Listener metadata.
   * </pre>
   *
   * <code>.envoy.api.v2.core.Metadata metadata = 6;</code>
   */
  io.envoyproxy.envoy.api.v2.core.MetadataOrBuilder getMetadataOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.DeprecatedV1 deprecated_v1 = 7;</code>
   * @return Whether the deprecatedV1 field is set.
   */
  boolean hasDeprecatedV1();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.DeprecatedV1 deprecated_v1 = 7;</code>
   * @return The deprecatedV1.
   */
  io.envoyproxy.envoy.api.v2.Listener.DeprecatedV1 getDeprecatedV1();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.DeprecatedV1 deprecated_v1 = 7;</code>
   */
  io.envoyproxy.envoy.api.v2.Listener.DeprecatedV1OrBuilder getDeprecatedV1OrBuilder();

  /**
   * <pre>
   * The type of draining to perform at a listener-wide level.
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.DrainType drain_type = 8;</code>
   * @return The enum numeric value on the wire for drainType.
   */
  int getDrainTypeValue();
  /**
   * <pre>
   * The type of draining to perform at a listener-wide level.
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.DrainType drain_type = 8;</code>
   * @return The drainType.
   */
  io.envoyproxy.envoy.api.v2.Listener.DrainType getDrainType();

  /**
   * <pre>
   * Listener filters have the opportunity to manipulate and augment the connection metadata that
   * is used in connection filter chain matching, for example. These filters are run before any in
   * :ref:`filter_chains &lt;envoy_api_field_Listener.filter_chains&gt;`. Order matters as the
   * filters are processed sequentially right after a socket has been accepted by the listener, and
   * before a connection is created.
   * UDP Listener filters can be specified when the protocol in the listener socket address in
   * :ref:`protocol &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`.
   * UDP listeners currently support a single filter.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.ListenerFilter listener_filters = 9;</code>
   */
  java.util.List<io.envoyproxy.envoy.api.v2.listener.ListenerFilter> 
      getListenerFiltersList();
  /**
   * <pre>
   * Listener filters have the opportunity to manipulate and augment the connection metadata that
   * is used in connection filter chain matching, for example. These filters are run before any in
   * :ref:`filter_chains &lt;envoy_api_field_Listener.filter_chains&gt;`. Order matters as the
   * filters are processed sequentially right after a socket has been accepted by the listener, and
   * before a connection is created.
   * UDP Listener filters can be specified when the protocol in the listener socket address in
   * :ref:`protocol &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`.
   * UDP listeners currently support a single filter.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.ListenerFilter listener_filters = 9;</code>
   */
  io.envoyproxy.envoy.api.v2.listener.ListenerFilter getListenerFilters(int index);
  /**
   * <pre>
   * Listener filters have the opportunity to manipulate and augment the connection metadata that
   * is used in connection filter chain matching, for example. These filters are run before any in
   * :ref:`filter_chains &lt;envoy_api_field_Listener.filter_chains&gt;`. Order matters as the
   * filters are processed sequentially right after a socket has been accepted by the listener, and
   * before a connection is created.
   * UDP Listener filters can be specified when the protocol in the listener socket address in
   * :ref:`protocol &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`.
   * UDP listeners currently support a single filter.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.ListenerFilter listener_filters = 9;</code>
   */
  int getListenerFiltersCount();
  /**
   * <pre>
   * Listener filters have the opportunity to manipulate and augment the connection metadata that
   * is used in connection filter chain matching, for example. These filters are run before any in
   * :ref:`filter_chains &lt;envoy_api_field_Listener.filter_chains&gt;`. Order matters as the
   * filters are processed sequentially right after a socket has been accepted by the listener, and
   * before a connection is created.
   * UDP Listener filters can be specified when the protocol in the listener socket address in
   * :ref:`protocol &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`.
   * UDP listeners currently support a single filter.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.ListenerFilter listener_filters = 9;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.api.v2.listener.ListenerFilterOrBuilder> 
      getListenerFiltersOrBuilderList();
  /**
   * <pre>
   * Listener filters have the opportunity to manipulate and augment the connection metadata that
   * is used in connection filter chain matching, for example. These filters are run before any in
   * :ref:`filter_chains &lt;envoy_api_field_Listener.filter_chains&gt;`. Order matters as the
   * filters are processed sequentially right after a socket has been accepted by the listener, and
   * before a connection is created.
   * UDP Listener filters can be specified when the protocol in the listener socket address in
   * :ref:`protocol &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`.
   * UDP listeners currently support a single filter.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.listener.ListenerFilter listener_filters = 9;</code>
   */
  io.envoyproxy.envoy.api.v2.listener.ListenerFilterOrBuilder getListenerFiltersOrBuilder(
      int index);

  /**
   * <pre>
   * The timeout to wait for all listener filters to complete operation. If the timeout is reached,
   * the accepted socket is closed without a connection being created unless
   * `continue_on_listener_filters_timeout` is set to true. Specify 0 to disable the
   * timeout. If not specified, a default timeout of 15s is used.
   * </pre>
   *
   * <code>.google.protobuf.Duration listener_filters_timeout = 15;</code>
   * @return Whether the listenerFiltersTimeout field is set.
   */
  boolean hasListenerFiltersTimeout();
  /**
   * <pre>
   * The timeout to wait for all listener filters to complete operation. If the timeout is reached,
   * the accepted socket is closed without a connection being created unless
   * `continue_on_listener_filters_timeout` is set to true. Specify 0 to disable the
   * timeout. If not specified, a default timeout of 15s is used.
   * </pre>
   *
   * <code>.google.protobuf.Duration listener_filters_timeout = 15;</code>
   * @return The listenerFiltersTimeout.
   */
  com.google.protobuf.Duration getListenerFiltersTimeout();
  /**
   * <pre>
   * The timeout to wait for all listener filters to complete operation. If the timeout is reached,
   * the accepted socket is closed without a connection being created unless
   * `continue_on_listener_filters_timeout` is set to true. Specify 0 to disable the
   * timeout. If not specified, a default timeout of 15s is used.
   * </pre>
   *
   * <code>.google.protobuf.Duration listener_filters_timeout = 15;</code>
   */
  com.google.protobuf.DurationOrBuilder getListenerFiltersTimeoutOrBuilder();

  /**
   * <pre>
   * Whether a connection should be created when listener filters timeout. Default is false.
   * .. attention::
   *   Some listener filters, such as :ref:`Proxy Protocol filter
   *   &lt;config_listener_filters_proxy_protocol&gt;`, should not be used with this option. It will cause
   *   unexpected behavior when a connection is created.
   * </pre>
   *
   * <code>bool continue_on_listener_filters_timeout = 17;</code>
   * @return The continueOnListenerFiltersTimeout.
   */
  boolean getContinueOnListenerFiltersTimeout();

  /**
   * <pre>
   * Whether the listener should be set as a transparent socket.
   * When this flag is set to true, connections can be redirected to the listener using an
   * *iptables* *TPROXY* target, in which case the original source and destination addresses and
   * ports are preserved on accepted connections. This flag should be used in combination with
   * :ref:`an original_dst &lt;config_listener_filters_original_dst&gt;` :ref:`listener filter
   * &lt;envoy_api_field_Listener.listener_filters&gt;` to mark the connections' local addresses as
   * "restored." This can be used to hand off each redirected connection to another listener
   * associated with the connection's destination address. Direct connections to the socket without
   * using *TPROXY* cannot be distinguished from connections redirected using *TPROXY* and are
   * therefore treated as if they were redirected.
   * When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
   * Setting this flag requires Envoy to run with the *CAP_NET_ADMIN* capability.
   * When this flag is not set (default), the socket is not modified, i.e. the transparent option
   * is neither set nor reset.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue transparent = 10;</code>
   * @return Whether the transparent field is set.
   */
  boolean hasTransparent();
  /**
   * <pre>
   * Whether the listener should be set as a transparent socket.
   * When this flag is set to true, connections can be redirected to the listener using an
   * *iptables* *TPROXY* target, in which case the original source and destination addresses and
   * ports are preserved on accepted connections. This flag should be used in combination with
   * :ref:`an original_dst &lt;config_listener_filters_original_dst&gt;` :ref:`listener filter
   * &lt;envoy_api_field_Listener.listener_filters&gt;` to mark the connections' local addresses as
   * "restored." This can be used to hand off each redirected connection to another listener
   * associated with the connection's destination address. Direct connections to the socket without
   * using *TPROXY* cannot be distinguished from connections redirected using *TPROXY* and are
   * therefore treated as if they were redirected.
   * When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
   * Setting this flag requires Envoy to run with the *CAP_NET_ADMIN* capability.
   * When this flag is not set (default), the socket is not modified, i.e. the transparent option
   * is neither set nor reset.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue transparent = 10;</code>
   * @return The transparent.
   */
  com.google.protobuf.BoolValue getTransparent();
  /**
   * <pre>
   * Whether the listener should be set as a transparent socket.
   * When this flag is set to true, connections can be redirected to the listener using an
   * *iptables* *TPROXY* target, in which case the original source and destination addresses and
   * ports are preserved on accepted connections. This flag should be used in combination with
   * :ref:`an original_dst &lt;config_listener_filters_original_dst&gt;` :ref:`listener filter
   * &lt;envoy_api_field_Listener.listener_filters&gt;` to mark the connections' local addresses as
   * "restored." This can be used to hand off each redirected connection to another listener
   * associated with the connection's destination address. Direct connections to the socket without
   * using *TPROXY* cannot be distinguished from connections redirected using *TPROXY* and are
   * therefore treated as if they were redirected.
   * When this flag is set to false, the listener's socket is explicitly reset as non-transparent.
   * Setting this flag requires Envoy to run with the *CAP_NET_ADMIN* capability.
   * When this flag is not set (default), the socket is not modified, i.e. the transparent option
   * is neither set nor reset.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue transparent = 10;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getTransparentOrBuilder();

  /**
   * <pre>
   * Whether the listener should set the *IP_FREEBIND* socket option. When this
   * flag is set to true, listeners can be bound to an IP address that is not
   * configured on the system running Envoy. When this flag is set to false, the
   * option *IP_FREEBIND* is disabled on the socket. When this flag is not set
   * (default), the socket is not modified, i.e. the option is neither enabled
   * nor disabled.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue freebind = 11;</code>
   * @return Whether the freebind field is set.
   */
  boolean hasFreebind();
  /**
   * <pre>
   * Whether the listener should set the *IP_FREEBIND* socket option. When this
   * flag is set to true, listeners can be bound to an IP address that is not
   * configured on the system running Envoy. When this flag is set to false, the
   * option *IP_FREEBIND* is disabled on the socket. When this flag is not set
   * (default), the socket is not modified, i.e. the option is neither enabled
   * nor disabled.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue freebind = 11;</code>
   * @return The freebind.
   */
  com.google.protobuf.BoolValue getFreebind();
  /**
   * <pre>
   * Whether the listener should set the *IP_FREEBIND* socket option. When this
   * flag is set to true, listeners can be bound to an IP address that is not
   * configured on the system running Envoy. When this flag is set to false, the
   * option *IP_FREEBIND* is disabled on the socket. When this flag is not set
   * (default), the socket is not modified, i.e. the option is neither enabled
   * nor disabled.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue freebind = 11;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getFreebindOrBuilder();

  /**
   * <pre>
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.SocketOption socket_options = 13;</code>
   */
  java.util.List<io.envoyproxy.envoy.api.v2.core.SocketOption> 
      getSocketOptionsList();
  /**
   * <pre>
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.SocketOption socket_options = 13;</code>
   */
  io.envoyproxy.envoy.api.v2.core.SocketOption getSocketOptions(int index);
  /**
   * <pre>
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.SocketOption socket_options = 13;</code>
   */
  int getSocketOptionsCount();
  /**
   * <pre>
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.SocketOption socket_options = 13;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.api.v2.core.SocketOptionOrBuilder> 
      getSocketOptionsOrBuilderList();
  /**
   * <pre>
   * Additional socket options that may not be present in Envoy source code or
   * precompiled binaries.
   * </pre>
   *
   * <code>repeated .envoy.api.v2.core.SocketOption socket_options = 13;</code>
   */
  io.envoyproxy.envoy.api.v2.core.SocketOptionOrBuilder getSocketOptionsOrBuilder(
      int index);

  /**
   * <pre>
   * Whether the listener should accept TCP Fast Open (TFO) connections.
   * When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
   * the socket, with a queue length of the specified size
   * (see `details in RFC7413 &lt;https://tools.ietf.org/html/rfc7413#section-5.1&gt;`_).
   * When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
   * When this flag is not set (default), the socket is not modified,
   * i.e. the option is neither enabled nor disabled.
   * On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
   * TCP_FASTOPEN.
   * See `ip-sysctl.txt &lt;https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt&gt;`_.
   * On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
   * To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value tcp_fast_open_queue_length = 12;</code>
   * @return Whether the tcpFastOpenQueueLength field is set.
   */
  boolean hasTcpFastOpenQueueLength();
  /**
   * <pre>
   * Whether the listener should accept TCP Fast Open (TFO) connections.
   * When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
   * the socket, with a queue length of the specified size
   * (see `details in RFC7413 &lt;https://tools.ietf.org/html/rfc7413#section-5.1&gt;`_).
   * When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
   * When this flag is not set (default), the socket is not modified,
   * i.e. the option is neither enabled nor disabled.
   * On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
   * TCP_FASTOPEN.
   * See `ip-sysctl.txt &lt;https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt&gt;`_.
   * On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
   * To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value tcp_fast_open_queue_length = 12;</code>
   * @return The tcpFastOpenQueueLength.
   */
  com.google.protobuf.UInt32Value getTcpFastOpenQueueLength();
  /**
   * <pre>
   * Whether the listener should accept TCP Fast Open (TFO) connections.
   * When this flag is set to a value greater than 0, the option TCP_FASTOPEN is enabled on
   * the socket, with a queue length of the specified size
   * (see `details in RFC7413 &lt;https://tools.ietf.org/html/rfc7413#section-5.1&gt;`_).
   * When this flag is set to 0, the option TCP_FASTOPEN is disabled on the socket.
   * When this flag is not set (default), the socket is not modified,
   * i.e. the option is neither enabled nor disabled.
   * On Linux, the net.ipv4.tcp_fastopen kernel parameter must include flag 0x2 to enable
   * TCP_FASTOPEN.
   * See `ip-sysctl.txt &lt;https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt&gt;`_.
   * On macOS, only values of 0, 1, and unset are valid; other values may result in an error.
   * To set the queue length on macOS, set the net.inet.tcp.fastopen_backlog kernel parameter.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value tcp_fast_open_queue_length = 12;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getTcpFastOpenQueueLengthOrBuilder();

  /**
   * <pre>
   * Specifies the intended direction of the traffic relative to the local Envoy.
   * This property is required on Windows for listeners using the original destination filter,
   * see :ref:`Original Destination &lt;config_listener_filters_original_dst&gt;`.
   * </pre>
   *
   * <code>.envoy.api.v2.core.TrafficDirection traffic_direction = 16;</code>
   * @return The enum numeric value on the wire for trafficDirection.
   */
  int getTrafficDirectionValue();
  /**
   * <pre>
   * Specifies the intended direction of the traffic relative to the local Envoy.
   * This property is required on Windows for listeners using the original destination filter,
   * see :ref:`Original Destination &lt;config_listener_filters_original_dst&gt;`.
   * </pre>
   *
   * <code>.envoy.api.v2.core.TrafficDirection traffic_direction = 16;</code>
   * @return The trafficDirection.
   */
  io.envoyproxy.envoy.api.v2.core.TrafficDirection getTrafficDirection();

  /**
   * <pre>
   * If the protocol in the listener socket address in :ref:`protocol
   * &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`, this field specifies the actual udp
   * listener to create, i.e. :ref:`udp_listener_name
   * &lt;envoy_api_field_listener.UdpListenerConfig.udp_listener_name&gt;` = "raw_udp_listener" for
   * creating a packet-oriented UDP listener. If not present, treat it as "raw_udp_listener".
   * </pre>
   *
   * <code>.envoy.api.v2.listener.UdpListenerConfig udp_listener_config = 18;</code>
   * @return Whether the udpListenerConfig field is set.
   */
  boolean hasUdpListenerConfig();
  /**
   * <pre>
   * If the protocol in the listener socket address in :ref:`protocol
   * &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`, this field specifies the actual udp
   * listener to create, i.e. :ref:`udp_listener_name
   * &lt;envoy_api_field_listener.UdpListenerConfig.udp_listener_name&gt;` = "raw_udp_listener" for
   * creating a packet-oriented UDP listener. If not present, treat it as "raw_udp_listener".
   * </pre>
   *
   * <code>.envoy.api.v2.listener.UdpListenerConfig udp_listener_config = 18;</code>
   * @return The udpListenerConfig.
   */
  io.envoyproxy.envoy.api.v2.listener.UdpListenerConfig getUdpListenerConfig();
  /**
   * <pre>
   * If the protocol in the listener socket address in :ref:`protocol
   * &lt;envoy_api_field_core.SocketAddress.protocol&gt;` is :ref:`UDP
   * &lt;envoy_api_enum_value_core.SocketAddress.Protocol.UDP&gt;`, this field specifies the actual udp
   * listener to create, i.e. :ref:`udp_listener_name
   * &lt;envoy_api_field_listener.UdpListenerConfig.udp_listener_name&gt;` = "raw_udp_listener" for
   * creating a packet-oriented UDP listener. If not present, treat it as "raw_udp_listener".
   * </pre>
   *
   * <code>.envoy.api.v2.listener.UdpListenerConfig udp_listener_config = 18;</code>
   */
  io.envoyproxy.envoy.api.v2.listener.UdpListenerConfigOrBuilder getUdpListenerConfigOrBuilder();

  /**
   * <pre>
   * Used to represent an API listener, which is used in non-proxy clients. The type of API
   * exposed to the non-proxy application depends on the type of API listener.
   * When this field is set, no other field except for :ref:`name&lt;envoy_api_field_Listener.name&gt;`
   * should be set.
   * .. note::
   *  Currently only one ApiListener can be installed; and it can only be done via bootstrap config,
   *  not LDS.
   * [#next-major-version: In the v3 API, instead of this messy approach where the socket
   * listener fields are directly in the top-level Listener message and the API listener types
   * are in the ApiListener message, the socket listener messages should be in their own message,
   * and the top-level Listener should essentially be a oneof that selects between the
   * socket listener and the various types of API listener. That way, a given Listener message
   * can structurally only contain the fields of the relevant type.]
   * </pre>
   *
   * <code>.envoy.config.listener.v2.ApiListener api_listener = 19;</code>
   * @return Whether the apiListener field is set.
   */
  boolean hasApiListener();
  /**
   * <pre>
   * Used to represent an API listener, which is used in non-proxy clients. The type of API
   * exposed to the non-proxy application depends on the type of API listener.
   * When this field is set, no other field except for :ref:`name&lt;envoy_api_field_Listener.name&gt;`
   * should be set.
   * .. note::
   *  Currently only one ApiListener can be installed; and it can only be done via bootstrap config,
   *  not LDS.
   * [#next-major-version: In the v3 API, instead of this messy approach where the socket
   * listener fields are directly in the top-level Listener message and the API listener types
   * are in the ApiListener message, the socket listener messages should be in their own message,
   * and the top-level Listener should essentially be a oneof that selects between the
   * socket listener and the various types of API listener. That way, a given Listener message
   * can structurally only contain the fields of the relevant type.]
   * </pre>
   *
   * <code>.envoy.config.listener.v2.ApiListener api_listener = 19;</code>
   * @return The apiListener.
   */
  io.envoyproxy.envoy.config.listener.v2.ApiListener getApiListener();
  /**
   * <pre>
   * Used to represent an API listener, which is used in non-proxy clients. The type of API
   * exposed to the non-proxy application depends on the type of API listener.
   * When this field is set, no other field except for :ref:`name&lt;envoy_api_field_Listener.name&gt;`
   * should be set.
   * .. note::
   *  Currently only one ApiListener can be installed; and it can only be done via bootstrap config,
   *  not LDS.
   * [#next-major-version: In the v3 API, instead of this messy approach where the socket
   * listener fields are directly in the top-level Listener message and the API listener types
   * are in the ApiListener message, the socket listener messages should be in their own message,
   * and the top-level Listener should essentially be a oneof that selects between the
   * socket listener and the various types of API listener. That way, a given Listener message
   * can structurally only contain the fields of the relevant type.]
   * </pre>
   *
   * <code>.envoy.config.listener.v2.ApiListener api_listener = 19;</code>
   */
  io.envoyproxy.envoy.config.listener.v2.ApiListenerOrBuilder getApiListenerOrBuilder();

  /**
   * <pre>
   * The listener's connection balancer configuration, currently only applicable to TCP listeners.
   * If no configuration is specified, Envoy will not attempt to balance active connections between
   * worker threads.
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.ConnectionBalanceConfig connection_balance_config = 20;</code>
   * @return Whether the connectionBalanceConfig field is set.
   */
  boolean hasConnectionBalanceConfig();
  /**
   * <pre>
   * The listener's connection balancer configuration, currently only applicable to TCP listeners.
   * If no configuration is specified, Envoy will not attempt to balance active connections between
   * worker threads.
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.ConnectionBalanceConfig connection_balance_config = 20;</code>
   * @return The connectionBalanceConfig.
   */
  io.envoyproxy.envoy.api.v2.Listener.ConnectionBalanceConfig getConnectionBalanceConfig();
  /**
   * <pre>
   * The listener's connection balancer configuration, currently only applicable to TCP listeners.
   * If no configuration is specified, Envoy will not attempt to balance active connections between
   * worker threads.
   * </pre>
   *
   * <code>.envoy.api.v2.Listener.ConnectionBalanceConfig connection_balance_config = 20;</code>
   */
  io.envoyproxy.envoy.api.v2.Listener.ConnectionBalanceConfigOrBuilder getConnectionBalanceConfigOrBuilder();

  /**
   * <pre>
   * When this flag is set to true, listeners set the *SO_REUSEPORT* socket option and
   * create one socket for each worker thread. This makes inbound connections
   * distribute among worker threads roughly evenly in cases where there are a high number
   * of connections. When this flag is set to false, all worker threads share one socket.
   * Before Linux v4.19-rc1, new TCP connections may be rejected during hot restart
   * (see `3rd paragraph in 'soreuseport' commit message
   * &lt;https://github.com/torvalds/linux/commit/c617f398edd4db2b8567a28e89&gt;`_).
   * This issue was fixed by `tcp: Avoid TCP syncookie rejected by SO_REUSEPORT socket
   * &lt;https://github.com/torvalds/linux/commit/40a1227ea845a37ab197dd1caffb60b047fa36b1&gt;`_.
   * </pre>
   *
   * <code>bool reuse_port = 21;</code>
   * @return The reusePort.
   */
  boolean getReusePort();

  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by this listener.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 22;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLog> 
      getAccessLogList();
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by this listener.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 22;</code>
   */
  io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLog getAccessLog(int index);
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by this listener.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 22;</code>
   */
  int getAccessLogCount();
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by this listener.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 22;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLogOrBuilder> 
      getAccessLogOrBuilderList();
  /**
   * <pre>
   * Configuration for :ref:`access logs &lt;arch_overview_access_logs&gt;`
   * emitted by this listener.
   * </pre>
   *
   * <code>repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 22;</code>
   */
  io.envoyproxy.envoy.config.filter.accesslog.v2.AccessLogOrBuilder getAccessLogOrBuilder(
      int index);
}
