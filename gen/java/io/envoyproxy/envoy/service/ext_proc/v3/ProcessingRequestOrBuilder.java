// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/ext_proc/v3/external_processor.proto

package io.envoyproxy.envoy.service.ext_proc.v3;

public interface ProcessingRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.service.ext_proc.v3.ProcessingRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specify whether the filter that sent this request is running in synchronous
   * or asynchronous mode. The choice of synchronous or asynchronous mode
   * can be set in the filter configuration, and defaults to false.
   * * A value of ``false`` indicates that the server must respond
   *   to this message by either sending back a matching ProcessingResponse message,
   *   or by closing the stream.
   * * A value of ``true`` indicates that the server must not respond to this
   *   message, although it may still close the stream to indicate that no more messages
   *   are needed.
   * </pre>
   *
   * <code>bool async_mode = 1;</code>
   * @return The asyncMode.
   */
  boolean getAsyncMode();

  /**
   * <pre>
   * Information about the HTTP request headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
   * @return Whether the requestHeaders field is set.
   */
  boolean hasRequestHeaders();
  /**
   * <pre>
   * Information about the HTTP request headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
   * @return The requestHeaders.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders getRequestHeaders();
  /**
   * <pre>
   * Information about the HTTP request headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder getRequestHeadersOrBuilder();

  /**
   * <pre>
   * Information about the HTTP response headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
   * @return Whether the responseHeaders field is set.
   */
  boolean hasResponseHeaders();
  /**
   * <pre>
   * Information about the HTTP response headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
   * @return The responseHeaders.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders getResponseHeaders();
  /**
   * <pre>
   * Information about the HTTP response headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder getResponseHeadersOrBuilder();

  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
   * a BodyResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
   * @return Whether the requestBody field is set.
   */
  boolean hasRequestBody();
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
   * a BodyResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
   * @return The requestBody.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpBody getRequestBody();
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
   * a BodyResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder getRequestBodyOrBuilder();

  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
   * a BodyResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
   * @return Whether the responseBody field is set.
   */
  boolean hasResponseBody();
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
   * a BodyResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
   * @return The responseBody.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpBody getResponseBody();
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
   * a BodyResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder getResponseBodyOrBuilder();

  /**
   * <pre>
   * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
   * @return Whether the requestTrailers field is set.
   */
  boolean hasRequestTrailers();
  /**
   * <pre>
   * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
   * @return The requestTrailers.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers getRequestTrailers();
  /**
   * <pre>
   * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder getRequestTrailersOrBuilder();

  /**
   * <pre>
   * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
   * @return Whether the responseTrailers field is set.
   */
  boolean hasResponseTrailers();
  /**
   * <pre>
   * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
   * @return The responseTrailers.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers getResponseTrailers();
  /**
   * <pre>
   * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder getResponseTrailersOrBuilder();

  public io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.RequestCase getRequestCase();
}
