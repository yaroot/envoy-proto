// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/ext_proc/v3/external_processor.proto

package io.envoyproxy.envoy.service.ext_proc.v3;

/**
 * <pre>
 * This represents the different types of messages that Envoy can send
 * to an external processing server.
 * [#next-free-field: 8]
 * </pre>
 *
 * Protobuf type {@code envoy.service.ext_proc.v3.ProcessingRequest}
 */
public final class ProcessingRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.service.ext_proc.v3.ProcessingRequest)
    ProcessingRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ProcessingRequest.newBuilder() to construct.
  private ProcessingRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ProcessingRequest() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ProcessingRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ProcessingRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            asyncMode_ = input.readBool();
            break;
          }
          case 18: {
            io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder subBuilder = null;
            if (requestCase_ == 2) {
              subBuilder = ((io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 2;
            break;
          }
          case 26: {
            io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder subBuilder = null;
            if (requestCase_ == 3) {
              subBuilder = ((io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 3;
            break;
          }
          case 34: {
            io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder subBuilder = null;
            if (requestCase_ == 4) {
              subBuilder = ((io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 4;
            break;
          }
          case 42: {
            io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder subBuilder = null;
            if (requestCase_ == 5) {
              subBuilder = ((io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 5;
            break;
          }
          case 50: {
            io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder subBuilder = null;
            if (requestCase_ == 6) {
              subBuilder = ((io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 6;
            break;
          }
          case 58: {
            io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder subBuilder = null;
            if (requestCase_ == 7) {
              subBuilder = ((io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_).toBuilder();
            }
            request_ =
                input.readMessage(io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_);
              request_ = subBuilder.buildPartial();
            }
            requestCase_ = 7;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.service.ext_proc.v3.ExternalProcessorProto.internal_static_envoy_service_ext_proc_v3_ProcessingRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.service.ext_proc.v3.ExternalProcessorProto.internal_static_envoy_service_ext_proc_v3_ProcessingRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.class, io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.Builder.class);
  }

  private int requestCase_ = 0;
  private java.lang.Object request_;
  public enum RequestCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    REQUEST_HEADERS(2),
    RESPONSE_HEADERS(3),
    REQUEST_BODY(4),
    RESPONSE_BODY(5),
    REQUEST_TRAILERS(6),
    RESPONSE_TRAILERS(7),
    REQUEST_NOT_SET(0);
    private final int value;
    private RequestCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RequestCase valueOf(int value) {
      return forNumber(value);
    }

    public static RequestCase forNumber(int value) {
      switch (value) {
        case 2: return REQUEST_HEADERS;
        case 3: return RESPONSE_HEADERS;
        case 4: return REQUEST_BODY;
        case 5: return RESPONSE_BODY;
        case 6: return REQUEST_TRAILERS;
        case 7: return RESPONSE_TRAILERS;
        case 0: return REQUEST_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public RequestCase
  getRequestCase() {
    return RequestCase.forNumber(
        requestCase_);
  }

  public static final int ASYNC_MODE_FIELD_NUMBER = 1;
  private boolean asyncMode_;
  /**
   * <pre>
   * Specify whether the filter that sent this request is running in synchronous
   * or asynchronous mode. The choice of synchronous or asynchronous mode
   * can be set in the filter configuration, and defaults to false.
   * * A value of ``false`` indicates that the server must respond
   *   to this message by either sending back a matching ProcessingResponse message,
   *   or by closing the stream.
   * * A value of ``true`` indicates that the server must not respond to this
   *   message, although it may still close the stream to indicate that no more messages
   *   are needed.
   * </pre>
   *
   * <code>bool async_mode = 1;</code>
   * @return The asyncMode.
   */
  @java.lang.Override
  public boolean getAsyncMode() {
    return asyncMode_;
  }

  public static final int REQUEST_HEADERS_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Information about the HTTP request headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
   * @return Whether the requestHeaders field is set.
   */
  @java.lang.Override
  public boolean hasRequestHeaders() {
    return requestCase_ == 2;
  }
  /**
   * <pre>
   * Information about the HTTP request headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
   * @return The requestHeaders.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders getRequestHeaders() {
    if (requestCase_ == 2) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about the HTTP request headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder getRequestHeadersOrBuilder() {
    if (requestCase_ == 2) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
  }

  public static final int RESPONSE_HEADERS_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Information about the HTTP response headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
   * @return Whether the responseHeaders field is set.
   */
  @java.lang.Override
  public boolean hasResponseHeaders() {
    return requestCase_ == 3;
  }
  /**
   * <pre>
   * Information about the HTTP response headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
   * @return The responseHeaders.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders getResponseHeaders() {
    if (requestCase_ == 3) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
  }
  /**
   * <pre>
   * Information about the HTTP response headers, as well as peer info and additional
   * properties. Unless ``async_mode`` is ``true``, the server must send back a
   * HeaderResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder getResponseHeadersOrBuilder() {
    if (requestCase_ == 3) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
  }

  public static final int REQUEST_BODY_FIELD_NUMBER = 4;
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
   * a BodyResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
   * @return Whether the requestBody field is set.
   */
  @java.lang.Override
  public boolean hasRequestBody() {
    return requestCase_ == 4;
  }
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
   * a BodyResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
   * @return The requestBody.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpBody getRequestBody() {
    if (requestCase_ == 4) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
  }
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
   * a BodyResponse message, an ImmediateResponse message, or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder getRequestBodyOrBuilder() {
    if (requestCase_ == 4) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
  }

  public static final int RESPONSE_BODY_FIELD_NUMBER = 5;
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
   * a BodyResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
   * @return Whether the responseBody field is set.
   */
  @java.lang.Override
  public boolean hasResponseBody() {
    return requestCase_ == 5;
  }
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
   * a BodyResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
   * @return The responseBody.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpBody getResponseBody() {
    if (requestCase_ == 5) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
  }
  /**
   * <pre>
   * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
   * a BodyResponse message or close the stream.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder getResponseBodyOrBuilder() {
    if (requestCase_ == 5) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
  }

  public static final int REQUEST_TRAILERS_FIELD_NUMBER = 6;
  /**
   * <pre>
   * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
   * @return Whether the requestTrailers field is set.
   */
  @java.lang.Override
  public boolean hasRequestTrailers() {
    return requestCase_ == 6;
  }
  /**
   * <pre>
   * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
   * @return The requestTrailers.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers getRequestTrailers() {
    if (requestCase_ == 6) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
  }
  /**
   * <pre>
   * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder getRequestTrailersOrBuilder() {
    if (requestCase_ == 6) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
  }

  public static final int RESPONSE_TRAILERS_FIELD_NUMBER = 7;
  /**
   * <pre>
   * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
   * @return Whether the responseTrailers field is set.
   */
  @java.lang.Override
  public boolean hasResponseTrailers() {
    return requestCase_ == 7;
  }
  /**
   * <pre>
   * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
   * @return The responseTrailers.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers getResponseTrailers() {
    if (requestCase_ == 7) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
  }
  /**
   * <pre>
   * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
   * must send back a TrailerResponse message or close the stream.
   * This message is only sent if the trailers processing mode is set to ``SEND``.
   * If there are no trailers on the original downstream request, then this message
   * will only be sent (with empty trailers waiting to be populated) if the
   * processing mode is set before the request headers are sent, such as
   * in the filter configuration.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder getResponseTrailersOrBuilder() {
    if (requestCase_ == 7) {
       return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
    }
    return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (asyncMode_ != false) {
      output.writeBool(1, asyncMode_);
    }
    if (requestCase_ == 2) {
      output.writeMessage(2, (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_);
    }
    if (requestCase_ == 3) {
      output.writeMessage(3, (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_);
    }
    if (requestCase_ == 4) {
      output.writeMessage(4, (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_);
    }
    if (requestCase_ == 5) {
      output.writeMessage(5, (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_);
    }
    if (requestCase_ == 6) {
      output.writeMessage(6, (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_);
    }
    if (requestCase_ == 7) {
      output.writeMessage(7, (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (asyncMode_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, asyncMode_);
    }
    if (requestCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_);
    }
    if (requestCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_);
    }
    if (requestCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_);
    }
    if (requestCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_);
    }
    if (requestCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_);
    }
    if (requestCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest other = (io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest) obj;

    if (getAsyncMode()
        != other.getAsyncMode()) return false;
    if (!getRequestCase().equals(other.getRequestCase())) return false;
    switch (requestCase_) {
      case 2:
        if (!getRequestHeaders()
            .equals(other.getRequestHeaders())) return false;
        break;
      case 3:
        if (!getResponseHeaders()
            .equals(other.getResponseHeaders())) return false;
        break;
      case 4:
        if (!getRequestBody()
            .equals(other.getRequestBody())) return false;
        break;
      case 5:
        if (!getResponseBody()
            .equals(other.getResponseBody())) return false;
        break;
      case 6:
        if (!getRequestTrailers()
            .equals(other.getRequestTrailers())) return false;
        break;
      case 7:
        if (!getResponseTrailers()
            .equals(other.getResponseTrailers())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ASYNC_MODE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAsyncMode());
    switch (requestCase_) {
      case 2:
        hash = (37 * hash) + REQUEST_HEADERS_FIELD_NUMBER;
        hash = (53 * hash) + getRequestHeaders().hashCode();
        break;
      case 3:
        hash = (37 * hash) + RESPONSE_HEADERS_FIELD_NUMBER;
        hash = (53 * hash) + getResponseHeaders().hashCode();
        break;
      case 4:
        hash = (37 * hash) + REQUEST_BODY_FIELD_NUMBER;
        hash = (53 * hash) + getRequestBody().hashCode();
        break;
      case 5:
        hash = (37 * hash) + RESPONSE_BODY_FIELD_NUMBER;
        hash = (53 * hash) + getResponseBody().hashCode();
        break;
      case 6:
        hash = (37 * hash) + REQUEST_TRAILERS_FIELD_NUMBER;
        hash = (53 * hash) + getRequestTrailers().hashCode();
        break;
      case 7:
        hash = (37 * hash) + RESPONSE_TRAILERS_FIELD_NUMBER;
        hash = (53 * hash) + getResponseTrailers().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This represents the different types of messages that Envoy can send
   * to an external processing server.
   * [#next-free-field: 8]
   * </pre>
   *
   * Protobuf type {@code envoy.service.ext_proc.v3.ProcessingRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.service.ext_proc.v3.ProcessingRequest)
      io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.service.ext_proc.v3.ExternalProcessorProto.internal_static_envoy_service_ext_proc_v3_ProcessingRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.service.ext_proc.v3.ExternalProcessorProto.internal_static_envoy_service_ext_proc_v3_ProcessingRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.class, io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      asyncMode_ = false;

      requestCase_ = 0;
      request_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.service.ext_proc.v3.ExternalProcessorProto.internal_static_envoy_service_ext_proc_v3_ProcessingRequest_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest getDefaultInstanceForType() {
      return io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest build() {
      io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest buildPartial() {
      io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest result = new io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest(this);
      result.asyncMode_ = asyncMode_;
      if (requestCase_ == 2) {
        if (requestHeadersBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = requestHeadersBuilder_.build();
        }
      }
      if (requestCase_ == 3) {
        if (responseHeadersBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = responseHeadersBuilder_.build();
        }
      }
      if (requestCase_ == 4) {
        if (requestBodyBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = requestBodyBuilder_.build();
        }
      }
      if (requestCase_ == 5) {
        if (responseBodyBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = responseBodyBuilder_.build();
        }
      }
      if (requestCase_ == 6) {
        if (requestTrailersBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = requestTrailersBuilder_.build();
        }
      }
      if (requestCase_ == 7) {
        if (responseTrailersBuilder_ == null) {
          result.request_ = request_;
        } else {
          result.request_ = responseTrailersBuilder_.build();
        }
      }
      result.requestCase_ = requestCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest) {
        return mergeFrom((io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest other) {
      if (other == io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest.getDefaultInstance()) return this;
      if (other.getAsyncMode() != false) {
        setAsyncMode(other.getAsyncMode());
      }
      switch (other.getRequestCase()) {
        case REQUEST_HEADERS: {
          mergeRequestHeaders(other.getRequestHeaders());
          break;
        }
        case RESPONSE_HEADERS: {
          mergeResponseHeaders(other.getResponseHeaders());
          break;
        }
        case REQUEST_BODY: {
          mergeRequestBody(other.getRequestBody());
          break;
        }
        case RESPONSE_BODY: {
          mergeResponseBody(other.getResponseBody());
          break;
        }
        case REQUEST_TRAILERS: {
          mergeRequestTrailers(other.getRequestTrailers());
          break;
        }
        case RESPONSE_TRAILERS: {
          mergeResponseTrailers(other.getResponseTrailers());
          break;
        }
        case REQUEST_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int requestCase_ = 0;
    private java.lang.Object request_;
    public RequestCase
        getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    public Builder clearRequest() {
      requestCase_ = 0;
      request_ = null;
      onChanged();
      return this;
    }


    private boolean asyncMode_ ;
    /**
     * <pre>
     * Specify whether the filter that sent this request is running in synchronous
     * or asynchronous mode. The choice of synchronous or asynchronous mode
     * can be set in the filter configuration, and defaults to false.
     * * A value of ``false`` indicates that the server must respond
     *   to this message by either sending back a matching ProcessingResponse message,
     *   or by closing the stream.
     * * A value of ``true`` indicates that the server must not respond to this
     *   message, although it may still close the stream to indicate that no more messages
     *   are needed.
     * </pre>
     *
     * <code>bool async_mode = 1;</code>
     * @return The asyncMode.
     */
    @java.lang.Override
    public boolean getAsyncMode() {
      return asyncMode_;
    }
    /**
     * <pre>
     * Specify whether the filter that sent this request is running in synchronous
     * or asynchronous mode. The choice of synchronous or asynchronous mode
     * can be set in the filter configuration, and defaults to false.
     * * A value of ``false`` indicates that the server must respond
     *   to this message by either sending back a matching ProcessingResponse message,
     *   or by closing the stream.
     * * A value of ``true`` indicates that the server must not respond to this
     *   message, although it may still close the stream to indicate that no more messages
     *   are needed.
     * </pre>
     *
     * <code>bool async_mode = 1;</code>
     * @param value The asyncMode to set.
     * @return This builder for chaining.
     */
    public Builder setAsyncMode(boolean value) {
      
      asyncMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify whether the filter that sent this request is running in synchronous
     * or asynchronous mode. The choice of synchronous or asynchronous mode
     * can be set in the filter configuration, and defaults to false.
     * * A value of ``false`` indicates that the server must respond
     *   to this message by either sending back a matching ProcessingResponse message,
     *   or by closing the stream.
     * * A value of ``true`` indicates that the server must not respond to this
     *   message, although it may still close the stream to indicate that no more messages
     *   are needed.
     * </pre>
     *
     * <code>bool async_mode = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearAsyncMode() {
      
      asyncMode_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder> requestHeadersBuilder_;
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     * @return Whether the requestHeaders field is set.
     */
    @java.lang.Override
    public boolean hasRequestHeaders() {
      return requestCase_ == 2;
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     * @return The requestHeaders.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders getRequestHeaders() {
      if (requestHeadersBuilder_ == null) {
        if (requestCase_ == 2) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
      } else {
        if (requestCase_ == 2) {
          return requestHeadersBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    public Builder setRequestHeaders(io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders value) {
      if (requestHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        requestHeadersBuilder_.setMessage(value);
      }
      requestCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    public Builder setRequestHeaders(
        io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder builderForValue) {
      if (requestHeadersBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        requestHeadersBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    public Builder mergeRequestHeaders(io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders value) {
      if (requestHeadersBuilder_ == null) {
        if (requestCase_ == 2 &&
            request_ != io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance()) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.newBuilder((io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 2) {
          requestHeadersBuilder_.mergeFrom(value);
        } else {
          requestHeadersBuilder_.setMessage(value);
        }
      }
      requestCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    public Builder clearRequestHeaders() {
      if (requestHeadersBuilder_ == null) {
        if (requestCase_ == 2) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 2) {
          requestCase_ = 0;
          request_ = null;
        }
        requestHeadersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder getRequestHeadersBuilder() {
      return getRequestHeadersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder getRequestHeadersOrBuilder() {
      if ((requestCase_ == 2) && (requestHeadersBuilder_ != null)) {
        return requestHeadersBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 2) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder> 
        getRequestHeadersFieldBuilder() {
      if (requestHeadersBuilder_ == null) {
        if (!(requestCase_ == 2)) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
        }
        requestHeadersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder>(
                (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 2;
      onChanged();;
      return requestHeadersBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder> responseHeadersBuilder_;
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     * @return Whether the responseHeaders field is set.
     */
    @java.lang.Override
    public boolean hasResponseHeaders() {
      return requestCase_ == 3;
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     * @return The responseHeaders.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders getResponseHeaders() {
      if (responseHeadersBuilder_ == null) {
        if (requestCase_ == 3) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
      } else {
        if (requestCase_ == 3) {
          return responseHeadersBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    public Builder setResponseHeaders(io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders value) {
      if (responseHeadersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        responseHeadersBuilder_.setMessage(value);
      }
      requestCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    public Builder setResponseHeaders(
        io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder builderForValue) {
      if (responseHeadersBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        responseHeadersBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    public Builder mergeResponseHeaders(io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders value) {
      if (responseHeadersBuilder_ == null) {
        if (requestCase_ == 3 &&
            request_ != io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance()) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.newBuilder((io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 3) {
          responseHeadersBuilder_.mergeFrom(value);
        } else {
          responseHeadersBuilder_.setMessage(value);
        }
      }
      requestCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    public Builder clearResponseHeaders() {
      if (responseHeadersBuilder_ == null) {
        if (requestCase_ == 3) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 3) {
          requestCase_ = 0;
          request_ = null;
        }
        responseHeadersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder getResponseHeadersBuilder() {
      return getResponseHeadersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder getResponseHeadersOrBuilder() {
      if ((requestCase_ == 3) && (responseHeadersBuilder_ != null)) {
        return responseHeadersBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 3) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``async_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder> 
        getResponseHeadersFieldBuilder() {
      if (responseHeadersBuilder_ == null) {
        if (!(requestCase_ == 3)) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.getDefaultInstance();
        }
        responseHeadersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpHeadersOrBuilder>(
                (io.envoyproxy.envoy.service.ext_proc.v3.HttpHeaders) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 3;
      onChanged();;
      return responseHeadersBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpBody, io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder> requestBodyBuilder_;
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     * @return Whether the requestBody field is set.
     */
    @java.lang.Override
    public boolean hasRequestBody() {
      return requestCase_ == 4;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     * @return The requestBody.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpBody getRequestBody() {
      if (requestBodyBuilder_ == null) {
        if (requestCase_ == 4) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
      } else {
        if (requestCase_ == 4) {
          return requestBodyBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    public Builder setRequestBody(io.envoyproxy.envoy.service.ext_proc.v3.HttpBody value) {
      if (requestBodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        requestBodyBuilder_.setMessage(value);
      }
      requestCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    public Builder setRequestBody(
        io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder builderForValue) {
      if (requestBodyBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        requestBodyBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    public Builder mergeRequestBody(io.envoyproxy.envoy.service.ext_proc.v3.HttpBody value) {
      if (requestBodyBuilder_ == null) {
        if (requestCase_ == 4 &&
            request_ != io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance()) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.newBuilder((io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 4) {
          requestBodyBuilder_.mergeFrom(value);
        } else {
          requestBodyBuilder_.setMessage(value);
        }
      }
      requestCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    public Builder clearRequestBody() {
      if (requestBodyBuilder_ == null) {
        if (requestCase_ == 4) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 4) {
          requestCase_ = 0;
          request_ = null;
        }
        requestBodyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder getRequestBodyBuilder() {
      return getRequestBodyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder getRequestBodyOrBuilder() {
      if ((requestCase_ == 4) && (requestBodyBuilder_ != null)) {
        return requestBodyBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 4) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody request_body = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpBody, io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder> 
        getRequestBodyFieldBuilder() {
      if (requestBodyBuilder_ == null) {
        if (!(requestCase_ == 4)) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
        }
        requestBodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.service.ext_proc.v3.HttpBody, io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder>(
                (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 4;
      onChanged();;
      return requestBodyBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpBody, io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder> responseBodyBuilder_;
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     * @return Whether the responseBody field is set.
     */
    @java.lang.Override
    public boolean hasResponseBody() {
      return requestCase_ == 5;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     * @return The responseBody.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpBody getResponseBody() {
      if (responseBodyBuilder_ == null) {
        if (requestCase_ == 5) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
      } else {
        if (requestCase_ == 5) {
          return responseBodyBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    public Builder setResponseBody(io.envoyproxy.envoy.service.ext_proc.v3.HttpBody value) {
      if (responseBodyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        responseBodyBuilder_.setMessage(value);
      }
      requestCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    public Builder setResponseBody(
        io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder builderForValue) {
      if (responseBodyBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        responseBodyBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    public Builder mergeResponseBody(io.envoyproxy.envoy.service.ext_proc.v3.HttpBody value) {
      if (responseBodyBuilder_ == null) {
        if (requestCase_ == 5 &&
            request_ != io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance()) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.newBuilder((io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 5) {
          responseBodyBuilder_.mergeFrom(value);
        } else {
          responseBodyBuilder_.setMessage(value);
        }
      }
      requestCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    public Builder clearResponseBody() {
      if (responseBodyBuilder_ == null) {
        if (requestCase_ == 5) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 5) {
          requestCase_ = 0;
          request_ = null;
        }
        responseBodyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder getResponseBodyBuilder() {
      return getResponseBodyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder getResponseBodyOrBuilder() {
      if ((requestCase_ == 5) && (responseBodyBuilder_ != null)) {
        return responseBodyBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 5) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A chunk of the HTTP request body. Unless ``async_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpBody response_body = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpBody, io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder> 
        getResponseBodyFieldBuilder() {
      if (responseBodyBuilder_ == null) {
        if (!(requestCase_ == 5)) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.getDefaultInstance();
        }
        responseBodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.service.ext_proc.v3.HttpBody, io.envoyproxy.envoy.service.ext_proc.v3.HttpBody.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpBodyOrBuilder>(
                (io.envoyproxy.envoy.service.ext_proc.v3.HttpBody) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 5;
      onChanged();;
      return responseBodyBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder> requestTrailersBuilder_;
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     * @return Whether the requestTrailers field is set.
     */
    @java.lang.Override
    public boolean hasRequestTrailers() {
      return requestCase_ == 6;
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     * @return The requestTrailers.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers getRequestTrailers() {
      if (requestTrailersBuilder_ == null) {
        if (requestCase_ == 6) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
      } else {
        if (requestCase_ == 6) {
          return requestTrailersBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    public Builder setRequestTrailers(io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers value) {
      if (requestTrailersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        requestTrailersBuilder_.setMessage(value);
      }
      requestCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    public Builder setRequestTrailers(
        io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder builderForValue) {
      if (requestTrailersBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        requestTrailersBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    public Builder mergeRequestTrailers(io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers value) {
      if (requestTrailersBuilder_ == null) {
        if (requestCase_ == 6 &&
            request_ != io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance()) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.newBuilder((io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 6) {
          requestTrailersBuilder_.mergeFrom(value);
        } else {
          requestTrailersBuilder_.setMessage(value);
        }
      }
      requestCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    public Builder clearRequestTrailers() {
      if (requestTrailersBuilder_ == null) {
        if (requestCase_ == 6) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 6) {
          requestCase_ = 0;
          request_ = null;
        }
        requestTrailersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder getRequestTrailersBuilder() {
      return getRequestTrailersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder getRequestTrailersOrBuilder() {
      if ((requestCase_ == 6) && (requestTrailersBuilder_ != null)) {
        return requestTrailersBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 6) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The HTTP trailers for the request path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder> 
        getRequestTrailersFieldBuilder() {
      if (requestTrailersBuilder_ == null) {
        if (!(requestCase_ == 6)) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
        }
        requestTrailersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder>(
                (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 6;
      onChanged();;
      return requestTrailersBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder> responseTrailersBuilder_;
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     * @return Whether the responseTrailers field is set.
     */
    @java.lang.Override
    public boolean hasResponseTrailers() {
      return requestCase_ == 7;
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     * @return The responseTrailers.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers getResponseTrailers() {
      if (responseTrailersBuilder_ == null) {
        if (requestCase_ == 7) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
      } else {
        if (requestCase_ == 7) {
          return responseTrailersBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    public Builder setResponseTrailers(io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers value) {
      if (responseTrailersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        responseTrailersBuilder_.setMessage(value);
      }
      requestCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    public Builder setResponseTrailers(
        io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder builderForValue) {
      if (responseTrailersBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        responseTrailersBuilder_.setMessage(builderForValue.build());
      }
      requestCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    public Builder mergeResponseTrailers(io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers value) {
      if (responseTrailersBuilder_ == null) {
        if (requestCase_ == 7 &&
            request_ != io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance()) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.newBuilder((io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_)
              .mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        if (requestCase_ == 7) {
          responseTrailersBuilder_.mergeFrom(value);
        } else {
          responseTrailersBuilder_.setMessage(value);
        }
      }
      requestCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    public Builder clearResponseTrailers() {
      if (responseTrailersBuilder_ == null) {
        if (requestCase_ == 7) {
          requestCase_ = 0;
          request_ = null;
          onChanged();
        }
      } else {
        if (requestCase_ == 7) {
          requestCase_ = 0;
          request_ = null;
        }
        responseTrailersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder getResponseTrailersBuilder() {
      return getResponseTrailersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder getResponseTrailersOrBuilder() {
      if ((requestCase_ == 7) && (responseTrailersBuilder_ != null)) {
        return responseTrailersBuilder_.getMessageOrBuilder();
      } else {
        if (requestCase_ == 7) {
          return (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_;
        }
        return io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The HTTP trailers for the response path. Unless ``async_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     * This message is only sent if the trailers processing mode is set to ``SEND``.
     * If there are no trailers on the original downstream request, then this message
     * will only be sent (with empty trailers waiting to be populated) if the
     * processing mode is set before the request headers are sent, such as
     * in the filter configuration.
     * </pre>
     *
     * <code>.envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder> 
        getResponseTrailersFieldBuilder() {
      if (responseTrailersBuilder_ == null) {
        if (!(requestCase_ == 7)) {
          request_ = io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.getDefaultInstance();
        }
        responseTrailersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers.Builder, io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailersOrBuilder>(
                (io.envoyproxy.envoy.service.ext_proc.v3.HttpTrailers) request_,
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      requestCase_ = 7;
      onChanged();;
      return responseTrailersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.service.ext_proc.v3.ProcessingRequest)
  }

  // @@protoc_insertion_point(class_scope:envoy.service.ext_proc.v3.ProcessingRequest)
  private static final io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest();
  }

  public static io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ProcessingRequest>
      PARSER = new com.google.protobuf.AbstractParser<ProcessingRequest>() {
    @java.lang.Override
    public ProcessingRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ProcessingRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ProcessingRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ProcessingRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.service.ext_proc.v3.ProcessingRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

