// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/ext_proc/v3/external_processor.proto

package io.envoyproxy.envoy.service.ext_proc.v3;

public interface CommonResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.service.ext_proc.v3.CommonResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * If set, provide additional direction on how the Envoy proxy should
   * handle the rest of the HTTP filter chain.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.CommonResponse.ResponseStatus status = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for status.
   */
  int getStatusValue();
  /**
   * <pre>
   * If set, provide additional direction on how the Envoy proxy should
   * handle the rest of the HTTP filter chain.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.CommonResponse.ResponseStatus status = 1 [(.validate.rules) = { ... }</code>
   * @return The status.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.CommonResponse.ResponseStatus getStatus();

  /**
   * <pre>
   * Instructions on how to manipulate the headers. When responding to an
   * HttpBody request, header mutations will only take effect if
   * the current processing mode for the body is BUFFERED.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HeaderMutation header_mutation = 2;</code>
   * @return Whether the headerMutation field is set.
   */
  boolean hasHeaderMutation();
  /**
   * <pre>
   * Instructions on how to manipulate the headers. When responding to an
   * HttpBody request, header mutations will only take effect if
   * the current processing mode for the body is BUFFERED.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HeaderMutation header_mutation = 2;</code>
   * @return The headerMutation.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HeaderMutation getHeaderMutation();
  /**
   * <pre>
   * Instructions on how to manipulate the headers. When responding to an
   * HttpBody request, header mutations will only take effect if
   * the current processing mode for the body is BUFFERED.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.HeaderMutation header_mutation = 2;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.HeaderMutationOrBuilder getHeaderMutationOrBuilder();

  /**
   * <pre>
   * Replace the body of the last message sent to the remote server on this
   * stream. If responding to an HttpBody request, simply replace or clear
   * the body chunk that was sent with that request. Body mutations only take
   * effect in response to ``body`` messages and are ignored otherwise.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.BodyMutation body_mutation = 3;</code>
   * @return Whether the bodyMutation field is set.
   */
  boolean hasBodyMutation();
  /**
   * <pre>
   * Replace the body of the last message sent to the remote server on this
   * stream. If responding to an HttpBody request, simply replace or clear
   * the body chunk that was sent with that request. Body mutations only take
   * effect in response to ``body`` messages and are ignored otherwise.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.BodyMutation body_mutation = 3;</code>
   * @return The bodyMutation.
   */
  io.envoyproxy.envoy.service.ext_proc.v3.BodyMutation getBodyMutation();
  /**
   * <pre>
   * Replace the body of the last message sent to the remote server on this
   * stream. If responding to an HttpBody request, simply replace or clear
   * the body chunk that was sent with that request. Body mutations only take
   * effect in response to ``body`` messages and are ignored otherwise.
   * </pre>
   *
   * <code>.envoy.service.ext_proc.v3.BodyMutation body_mutation = 3;</code>
   */
  io.envoyproxy.envoy.service.ext_proc.v3.BodyMutationOrBuilder getBodyMutationOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * Add new trailers to the message. This may be used when responding to either a
   * HttpHeaders or HttpBody message, but only if this message is returned
   * along with the CONTINUE_AND_REPLACE status.
   * </pre>
   *
   * <code>.envoy.config.core.v3.HeaderMap trailers = 4;</code>
   * @return Whether the trailers field is set.
   */
  boolean hasTrailers();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Add new trailers to the message. This may be used when responding to either a
   * HttpHeaders or HttpBody message, but only if this message is returned
   * along with the CONTINUE_AND_REPLACE status.
   * </pre>
   *
   * <code>.envoy.config.core.v3.HeaderMap trailers = 4;</code>
   * @return The trailers.
   */
  io.envoyproxy.envoy.config.core.v3.HeaderMap getTrailers();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Add new trailers to the message. This may be used when responding to either a
   * HttpHeaders or HttpBody message, but only if this message is returned
   * along with the CONTINUE_AND_REPLACE status.
   * </pre>
   *
   * <code>.envoy.config.core.v3.HeaderMap trailers = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderMapOrBuilder getTrailersOrBuilder();

  /**
   * <pre>
   * Clear the route cache for the current request.
   * This is necessary if the remote server
   * modified headers that are used to calculate the route.
   * </pre>
   *
   * <code>bool clear_route_cache = 5;</code>
   * @return The clearRouteCache.
   */
  boolean getClearRouteCache();
}
