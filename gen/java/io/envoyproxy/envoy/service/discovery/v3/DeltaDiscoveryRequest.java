// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/discovery/v3/discovery.proto

package io.envoyproxy.envoy.service.discovery.v3;

/**
 * <pre>
 * DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC
 * endpoint for Delta xDS.
 * With Delta xDS, the DeltaDiscoveryResponses do not need to include a full
 * snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a
 * diff to the state of a xDS client.
 * In Delta XDS there are per-resource versions, which allow tracking state at
 * the resource granularity.
 * An xDS Delta session is always in the context of a gRPC bidirectional
 * stream. This allows the xDS server to keep track of the state of xDS clients
 * connected to it.
 * In Delta xDS the nonce field is required and used to pair
 * DeltaDiscoveryResponse to a DeltaDiscoveryRequest ACK or NACK.
 * Optionally, a response message level system_version_info is present for
 * debugging purposes only.
 * DeltaDiscoveryRequest plays two independent roles. Any DeltaDiscoveryRequest
 * can be either or both of: [1] informing the server of what resources the
 * client has gained/lost interest in (using resource_names_subscribe and
 * resource_names_unsubscribe), or [2] (N)ACKing an earlier resource update from
 * the server (using response_nonce, with presence of error_detail making it a NACK).
 * Additionally, the first message (for a given type_url) of a reconnected gRPC stream
 * has a third role: informing the server of the resources (and their versions)
 * that the client already possesses, using the initial_resource_versions field.
 * As with state-of-the-world, when multiple resource types are multiplexed (ADS),
 * all requests/acknowledgments/updates are logically walled off by type_url:
 * a Cluster ACK exists in a completely separate world from a prior Route NACK.
 * In particular, initial_resource_versions being sent at the "start" of every
 * gRPC stream actually entails a message for each type_url, each with its own
 * initial_resource_versions.
 * [#next-free-field: 10]
 * </pre>
 *
 * Protobuf type {@code envoy.service.discovery.v3.DeltaDiscoveryRequest}
 */
public final class DeltaDiscoveryRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.service.discovery.v3.DeltaDiscoveryRequest)
    DeltaDiscoveryRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DeltaDiscoveryRequest.newBuilder() to construct.
  private DeltaDiscoveryRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DeltaDiscoveryRequest() {
    typeUrl_ = "";
    resourceNamesSubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    resourceNamesUnsubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    resourceLocatorsSubscribe_ = java.util.Collections.emptyList();
    resourceLocatorsUnsubscribe_ = java.util.Collections.emptyList();
    responseNonce_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DeltaDiscoveryRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.service.discovery.v3.DiscoveryProto.internal_static_envoy_service_discovery_v3_DeltaDiscoveryRequest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 5:
        return internalGetInitialResourceVersions();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.service.discovery.v3.DiscoveryProto.internal_static_envoy_service_discovery_v3_DeltaDiscoveryRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.class, io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.Builder.class);
  }

  public static final int NODE_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.core.v3.Node node_;
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   * @return Whether the node field is set.
   */
  @java.lang.Override
  public boolean hasNode() {
    return node_ != null;
  }
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   * @return The node.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.Node getNode() {
    return node_ == null ? io.envoyproxy.envoy.config.core.v3.Node.getDefaultInstance() : node_;
  }
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.NodeOrBuilder getNodeOrBuilder() {
    return node_ == null ? io.envoyproxy.envoy.config.core.v3.Node.getDefaultInstance() : node_;
  }

  public static final int TYPE_URL_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object typeUrl_ = "";
  /**
   * <pre>
   * Type of the resource that is being requested, e.g.
   * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
   * resources are only referenced via ``xds_resource_subscribe`` and
   * ``xds_resources_unsubscribe``.
   * </pre>
   *
   * <code>string type_url = 2;</code>
   * @return The typeUrl.
   */
  @java.lang.Override
  public java.lang.String getTypeUrl() {
    java.lang.Object ref = typeUrl_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      typeUrl_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Type of the resource that is being requested, e.g.
   * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
   * resources are only referenced via ``xds_resource_subscribe`` and
   * ``xds_resources_unsubscribe``.
   * </pre>
   *
   * <code>string type_url = 2;</code>
   * @return The bytes for typeUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTypeUrlBytes() {
    java.lang.Object ref = typeUrl_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      typeUrl_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESOURCE_NAMES_SUBSCRIBE_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList resourceNamesSubscribe_;
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @return A list containing the resourceNamesSubscribe.
   */
  public com.google.protobuf.ProtocolStringList
      getResourceNamesSubscribeList() {
    return resourceNamesSubscribe_;
  }
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @return The count of resourceNamesSubscribe.
   */
  public int getResourceNamesSubscribeCount() {
    return resourceNamesSubscribe_.size();
  }
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @param index The index of the element to return.
   * @return The resourceNamesSubscribe at the given index.
   */
  public java.lang.String getResourceNamesSubscribe(int index) {
    return resourceNamesSubscribe_.get(index);
  }
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the resourceNamesSubscribe at the given index.
   */
  public com.google.protobuf.ByteString
      getResourceNamesSubscribeBytes(int index) {
    return resourceNamesSubscribe_.getByteString(index);
  }

  public static final int RESOURCE_NAMES_UNSUBSCRIBE_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList resourceNamesUnsubscribe_;
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @return A list containing the resourceNamesUnsubscribe.
   */
  public com.google.protobuf.ProtocolStringList
      getResourceNamesUnsubscribeList() {
    return resourceNamesUnsubscribe_;
  }
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @return The count of resourceNamesUnsubscribe.
   */
  public int getResourceNamesUnsubscribeCount() {
    return resourceNamesUnsubscribe_.size();
  }
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @param index The index of the element to return.
   * @return The resourceNamesUnsubscribe at the given index.
   */
  public java.lang.String getResourceNamesUnsubscribe(int index) {
    return resourceNamesUnsubscribe_.get(index);
  }
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the resourceNamesUnsubscribe at the given index.
   */
  public com.google.protobuf.ByteString
      getResourceNamesUnsubscribeBytes(int index) {
    return resourceNamesUnsubscribe_.getByteString(index);
  }

  public static final int RESOURCE_LOCATORS_SUBSCRIBE_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> resourceLocatorsSubscribe_;
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> getResourceLocatorsSubscribeList() {
    return resourceLocatorsSubscribe_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> 
      getResourceLocatorsSubscribeOrBuilderList() {
    return resourceLocatorsSubscribe_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
   */
  @java.lang.Override
  public int getResourceLocatorsSubscribeCount() {
    return resourceLocatorsSubscribe_.size();
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator getResourceLocatorsSubscribe(int index) {
    return resourceLocatorsSubscribe_.get(index);
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder getResourceLocatorsSubscribeOrBuilder(
      int index) {
    return resourceLocatorsSubscribe_.get(index);
  }

  public static final int RESOURCE_LOCATORS_UNSUBSCRIBE_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> resourceLocatorsUnsubscribe_;
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> getResourceLocatorsUnsubscribeList() {
    return resourceLocatorsUnsubscribe_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> 
      getResourceLocatorsUnsubscribeOrBuilderList() {
    return resourceLocatorsUnsubscribe_;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
   */
  @java.lang.Override
  public int getResourceLocatorsUnsubscribeCount() {
    return resourceLocatorsUnsubscribe_.size();
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator getResourceLocatorsUnsubscribe(int index) {
    return resourceLocatorsUnsubscribe_.get(index);
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
   * along with each resource name.
   * Note that it is legal for a request to have some resources listed
   * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
   * </pre>
   *
   * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder getResourceLocatorsUnsubscribeOrBuilder(
      int index) {
    return resourceLocatorsUnsubscribe_.get(index);
  }

  public static final int INITIAL_RESOURCE_VERSIONS_FIELD_NUMBER = 5;
  private static final class InitialResourceVersionsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                io.envoyproxy.envoy.service.discovery.v3.DiscoveryProto.internal_static_envoy_service_discovery_v3_DeltaDiscoveryRequest_InitialResourceVersionsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> initialResourceVersions_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetInitialResourceVersions() {
    if (initialResourceVersions_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          InitialResourceVersionsDefaultEntryHolder.defaultEntry);
    }
    return initialResourceVersions_;
  }
  public int getInitialResourceVersionsCount() {
    return internalGetInitialResourceVersions().getMap().size();
  }
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  @java.lang.Override
  public boolean containsInitialResourceVersions(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetInitialResourceVersions().getMap().containsKey(key);
  }
  /**
   * Use {@link #getInitialResourceVersionsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getInitialResourceVersions() {
    return getInitialResourceVersionsMap();
  }
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getInitialResourceVersionsMap() {
    return internalGetInitialResourceVersions().getMap();
  }
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  @java.lang.Override
  public /* nullable */
java.lang.String getInitialResourceVersionsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetInitialResourceVersions().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  @java.lang.Override
  public java.lang.String getInitialResourceVersionsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetInitialResourceVersions().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int RESPONSE_NONCE_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private volatile java.lang.Object responseNonce_ = "";
  /**
   * <pre>
   * When the DeltaDiscoveryRequest is a ACK or NACK message in response
   * to a previous DeltaDiscoveryResponse, the response_nonce must be the
   * nonce in the DeltaDiscoveryResponse.
   * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
   * </pre>
   *
   * <code>string response_nonce = 6;</code>
   * @return The responseNonce.
   */
  @java.lang.Override
  public java.lang.String getResponseNonce() {
    java.lang.Object ref = responseNonce_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      responseNonce_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * When the DeltaDiscoveryRequest is a ACK or NACK message in response
   * to a previous DeltaDiscoveryResponse, the response_nonce must be the
   * nonce in the DeltaDiscoveryResponse.
   * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
   * </pre>
   *
   * <code>string response_nonce = 6;</code>
   * @return The bytes for responseNonce.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getResponseNonceBytes() {
    java.lang.Object ref = responseNonce_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      responseNonce_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ERROR_DETAIL_FIELD_NUMBER = 7;
  private com.google.rpc.Status errorDetail_;
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The ``message`` field in ``error_details``
   * provides the Envoy internal exception related to the failure.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 7;</code>
   * @return Whether the errorDetail field is set.
   */
  @java.lang.Override
  public boolean hasErrorDetail() {
    return errorDetail_ != null;
  }
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The ``message`` field in ``error_details``
   * provides the Envoy internal exception related to the failure.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 7;</code>
   * @return The errorDetail.
   */
  @java.lang.Override
  public com.google.rpc.Status getErrorDetail() {
    return errorDetail_ == null ? com.google.rpc.Status.getDefaultInstance() : errorDetail_;
  }
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The ``message`` field in ``error_details``
   * provides the Envoy internal exception related to the failure.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 7;</code>
   */
  @java.lang.Override
  public com.google.rpc.StatusOrBuilder getErrorDetailOrBuilder() {
    return errorDetail_ == null ? com.google.rpc.Status.getDefaultInstance() : errorDetail_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (node_ != null) {
      output.writeMessage(1, getNode());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(typeUrl_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, typeUrl_);
    }
    for (int i = 0; i < resourceNamesSubscribe_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, resourceNamesSubscribe_.getRaw(i));
    }
    for (int i = 0; i < resourceNamesUnsubscribe_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, resourceNamesUnsubscribe_.getRaw(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetInitialResourceVersions(),
        InitialResourceVersionsDefaultEntryHolder.defaultEntry,
        5);
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(responseNonce_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, responseNonce_);
    }
    if (errorDetail_ != null) {
      output.writeMessage(7, getErrorDetail());
    }
    for (int i = 0; i < resourceLocatorsSubscribe_.size(); i++) {
      output.writeMessage(8, resourceLocatorsSubscribe_.get(i));
    }
    for (int i = 0; i < resourceLocatorsUnsubscribe_.size(); i++) {
      output.writeMessage(9, resourceLocatorsUnsubscribe_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (node_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getNode());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(typeUrl_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, typeUrl_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < resourceNamesSubscribe_.size(); i++) {
        dataSize += computeStringSizeNoTag(resourceNamesSubscribe_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getResourceNamesSubscribeList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < resourceNamesUnsubscribe_.size(); i++) {
        dataSize += computeStringSizeNoTag(resourceNamesUnsubscribe_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getResourceNamesUnsubscribeList().size();
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetInitialResourceVersions().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      initialResourceVersions__ = InitialResourceVersionsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, initialResourceVersions__);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(responseNonce_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, responseNonce_);
    }
    if (errorDetail_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getErrorDetail());
    }
    for (int i = 0; i < resourceLocatorsSubscribe_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, resourceLocatorsSubscribe_.get(i));
    }
    for (int i = 0; i < resourceLocatorsUnsubscribe_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, resourceLocatorsUnsubscribe_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest other = (io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest) obj;

    if (hasNode() != other.hasNode()) return false;
    if (hasNode()) {
      if (!getNode()
          .equals(other.getNode())) return false;
    }
    if (!getTypeUrl()
        .equals(other.getTypeUrl())) return false;
    if (!getResourceNamesSubscribeList()
        .equals(other.getResourceNamesSubscribeList())) return false;
    if (!getResourceNamesUnsubscribeList()
        .equals(other.getResourceNamesUnsubscribeList())) return false;
    if (!getResourceLocatorsSubscribeList()
        .equals(other.getResourceLocatorsSubscribeList())) return false;
    if (!getResourceLocatorsUnsubscribeList()
        .equals(other.getResourceLocatorsUnsubscribeList())) return false;
    if (!internalGetInitialResourceVersions().equals(
        other.internalGetInitialResourceVersions())) return false;
    if (!getResponseNonce()
        .equals(other.getResponseNonce())) return false;
    if (hasErrorDetail() != other.hasErrorDetail()) return false;
    if (hasErrorDetail()) {
      if (!getErrorDetail()
          .equals(other.getErrorDetail())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNode()) {
      hash = (37 * hash) + NODE_FIELD_NUMBER;
      hash = (53 * hash) + getNode().hashCode();
    }
    hash = (37 * hash) + TYPE_URL_FIELD_NUMBER;
    hash = (53 * hash) + getTypeUrl().hashCode();
    if (getResourceNamesSubscribeCount() > 0) {
      hash = (37 * hash) + RESOURCE_NAMES_SUBSCRIBE_FIELD_NUMBER;
      hash = (53 * hash) + getResourceNamesSubscribeList().hashCode();
    }
    if (getResourceNamesUnsubscribeCount() > 0) {
      hash = (37 * hash) + RESOURCE_NAMES_UNSUBSCRIBE_FIELD_NUMBER;
      hash = (53 * hash) + getResourceNamesUnsubscribeList().hashCode();
    }
    if (getResourceLocatorsSubscribeCount() > 0) {
      hash = (37 * hash) + RESOURCE_LOCATORS_SUBSCRIBE_FIELD_NUMBER;
      hash = (53 * hash) + getResourceLocatorsSubscribeList().hashCode();
    }
    if (getResourceLocatorsUnsubscribeCount() > 0) {
      hash = (37 * hash) + RESOURCE_LOCATORS_UNSUBSCRIBE_FIELD_NUMBER;
      hash = (53 * hash) + getResourceLocatorsUnsubscribeList().hashCode();
    }
    if (!internalGetInitialResourceVersions().getMap().isEmpty()) {
      hash = (37 * hash) + INITIAL_RESOURCE_VERSIONS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetInitialResourceVersions().hashCode();
    }
    hash = (37 * hash) + RESPONSE_NONCE_FIELD_NUMBER;
    hash = (53 * hash) + getResponseNonce().hashCode();
    if (hasErrorDetail()) {
      hash = (37 * hash) + ERROR_DETAIL_FIELD_NUMBER;
      hash = (53 * hash) + getErrorDetail().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC
   * endpoint for Delta xDS.
   * With Delta xDS, the DeltaDiscoveryResponses do not need to include a full
   * snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a
   * diff to the state of a xDS client.
   * In Delta XDS there are per-resource versions, which allow tracking state at
   * the resource granularity.
   * An xDS Delta session is always in the context of a gRPC bidirectional
   * stream. This allows the xDS server to keep track of the state of xDS clients
   * connected to it.
   * In Delta xDS the nonce field is required and used to pair
   * DeltaDiscoveryResponse to a DeltaDiscoveryRequest ACK or NACK.
   * Optionally, a response message level system_version_info is present for
   * debugging purposes only.
   * DeltaDiscoveryRequest plays two independent roles. Any DeltaDiscoveryRequest
   * can be either or both of: [1] informing the server of what resources the
   * client has gained/lost interest in (using resource_names_subscribe and
   * resource_names_unsubscribe), or [2] (N)ACKing an earlier resource update from
   * the server (using response_nonce, with presence of error_detail making it a NACK).
   * Additionally, the first message (for a given type_url) of a reconnected gRPC stream
   * has a third role: informing the server of the resources (and their versions)
   * that the client already possesses, using the initial_resource_versions field.
   * As with state-of-the-world, when multiple resource types are multiplexed (ADS),
   * all requests/acknowledgments/updates are logically walled off by type_url:
   * a Cluster ACK exists in a completely separate world from a prior Route NACK.
   * In particular, initial_resource_versions being sent at the "start" of every
   * gRPC stream actually entails a message for each type_url, each with its own
   * initial_resource_versions.
   * [#next-free-field: 10]
   * </pre>
   *
   * Protobuf type {@code envoy.service.discovery.v3.DeltaDiscoveryRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.service.discovery.v3.DeltaDiscoveryRequest)
      io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.service.discovery.v3.DiscoveryProto.internal_static_envoy_service_discovery_v3_DeltaDiscoveryRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetInitialResourceVersions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetMutableInitialResourceVersions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.service.discovery.v3.DiscoveryProto.internal_static_envoy_service_discovery_v3_DeltaDiscoveryRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.class, io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      node_ = null;
      if (nodeBuilder_ != null) {
        nodeBuilder_.dispose();
        nodeBuilder_ = null;
      }
      typeUrl_ = "";
      resourceNamesSubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      resourceNamesUnsubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      if (resourceLocatorsSubscribeBuilder_ == null) {
        resourceLocatorsSubscribe_ = java.util.Collections.emptyList();
      } else {
        resourceLocatorsSubscribe_ = null;
        resourceLocatorsSubscribeBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        resourceLocatorsUnsubscribe_ = java.util.Collections.emptyList();
      } else {
        resourceLocatorsUnsubscribe_ = null;
        resourceLocatorsUnsubscribeBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      internalGetMutableInitialResourceVersions().clear();
      responseNonce_ = "";
      errorDetail_ = null;
      if (errorDetailBuilder_ != null) {
        errorDetailBuilder_.dispose();
        errorDetailBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.service.discovery.v3.DiscoveryProto.internal_static_envoy_service_discovery_v3_DeltaDiscoveryRequest_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest getDefaultInstanceForType() {
      return io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest build() {
      io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest buildPartial() {
      io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest result = new io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest result) {
      if (((bitField0_ & 0x00000004) != 0)) {
        resourceNamesSubscribe_ = resourceNamesSubscribe_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.resourceNamesSubscribe_ = resourceNamesSubscribe_;
      if (((bitField0_ & 0x00000008) != 0)) {
        resourceNamesUnsubscribe_ = resourceNamesUnsubscribe_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.resourceNamesUnsubscribe_ = resourceNamesUnsubscribe_;
      if (resourceLocatorsSubscribeBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          resourceLocatorsSubscribe_ = java.util.Collections.unmodifiableList(resourceLocatorsSubscribe_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.resourceLocatorsSubscribe_ = resourceLocatorsSubscribe_;
      } else {
        result.resourceLocatorsSubscribe_ = resourceLocatorsSubscribeBuilder_.build();
      }
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          resourceLocatorsUnsubscribe_ = java.util.Collections.unmodifiableList(resourceLocatorsUnsubscribe_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.resourceLocatorsUnsubscribe_ = resourceLocatorsUnsubscribe_;
      } else {
        result.resourceLocatorsUnsubscribe_ = resourceLocatorsUnsubscribeBuilder_.build();
      }
    }

    private void buildPartial0(io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.node_ = nodeBuilder_ == null
            ? node_
            : nodeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.typeUrl_ = typeUrl_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.initialResourceVersions_ = internalGetInitialResourceVersions();
        result.initialResourceVersions_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.responseNonce_ = responseNonce_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.errorDetail_ = errorDetailBuilder_ == null
            ? errorDetail_
            : errorDetailBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest) {
        return mergeFrom((io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest other) {
      if (other == io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest.getDefaultInstance()) return this;
      if (other.hasNode()) {
        mergeNode(other.getNode());
      }
      if (!other.getTypeUrl().isEmpty()) {
        typeUrl_ = other.typeUrl_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.resourceNamesSubscribe_.isEmpty()) {
        if (resourceNamesSubscribe_.isEmpty()) {
          resourceNamesSubscribe_ = other.resourceNamesSubscribe_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureResourceNamesSubscribeIsMutable();
          resourceNamesSubscribe_.addAll(other.resourceNamesSubscribe_);
        }
        onChanged();
      }
      if (!other.resourceNamesUnsubscribe_.isEmpty()) {
        if (resourceNamesUnsubscribe_.isEmpty()) {
          resourceNamesUnsubscribe_ = other.resourceNamesUnsubscribe_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureResourceNamesUnsubscribeIsMutable();
          resourceNamesUnsubscribe_.addAll(other.resourceNamesUnsubscribe_);
        }
        onChanged();
      }
      if (resourceLocatorsSubscribeBuilder_ == null) {
        if (!other.resourceLocatorsSubscribe_.isEmpty()) {
          if (resourceLocatorsSubscribe_.isEmpty()) {
            resourceLocatorsSubscribe_ = other.resourceLocatorsSubscribe_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureResourceLocatorsSubscribeIsMutable();
            resourceLocatorsSubscribe_.addAll(other.resourceLocatorsSubscribe_);
          }
          onChanged();
        }
      } else {
        if (!other.resourceLocatorsSubscribe_.isEmpty()) {
          if (resourceLocatorsSubscribeBuilder_.isEmpty()) {
            resourceLocatorsSubscribeBuilder_.dispose();
            resourceLocatorsSubscribeBuilder_ = null;
            resourceLocatorsSubscribe_ = other.resourceLocatorsSubscribe_;
            bitField0_ = (bitField0_ & ~0x00000010);
            resourceLocatorsSubscribeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getResourceLocatorsSubscribeFieldBuilder() : null;
          } else {
            resourceLocatorsSubscribeBuilder_.addAllMessages(other.resourceLocatorsSubscribe_);
          }
        }
      }
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        if (!other.resourceLocatorsUnsubscribe_.isEmpty()) {
          if (resourceLocatorsUnsubscribe_.isEmpty()) {
            resourceLocatorsUnsubscribe_ = other.resourceLocatorsUnsubscribe_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureResourceLocatorsUnsubscribeIsMutable();
            resourceLocatorsUnsubscribe_.addAll(other.resourceLocatorsUnsubscribe_);
          }
          onChanged();
        }
      } else {
        if (!other.resourceLocatorsUnsubscribe_.isEmpty()) {
          if (resourceLocatorsUnsubscribeBuilder_.isEmpty()) {
            resourceLocatorsUnsubscribeBuilder_.dispose();
            resourceLocatorsUnsubscribeBuilder_ = null;
            resourceLocatorsUnsubscribe_ = other.resourceLocatorsUnsubscribe_;
            bitField0_ = (bitField0_ & ~0x00000020);
            resourceLocatorsUnsubscribeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getResourceLocatorsUnsubscribeFieldBuilder() : null;
          } else {
            resourceLocatorsUnsubscribeBuilder_.addAllMessages(other.resourceLocatorsUnsubscribe_);
          }
        }
      }
      internalGetMutableInitialResourceVersions().mergeFrom(
          other.internalGetInitialResourceVersions());
      bitField0_ |= 0x00000040;
      if (!other.getResponseNonce().isEmpty()) {
        responseNonce_ = other.responseNonce_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      if (other.hasErrorDetail()) {
        mergeErrorDetail(other.getErrorDetail());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getNodeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              typeUrl_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureResourceNamesSubscribeIsMutable();
              resourceNamesSubscribe_.add(s);
              break;
            } // case 26
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureResourceNamesUnsubscribeIsMutable();
              resourceNamesUnsubscribe_.add(s);
              break;
            } // case 34
            case 42: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              initialResourceVersions__ = input.readMessage(
                  InitialResourceVersionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableInitialResourceVersions().getMutableMap().put(
                  initialResourceVersions__.getKey(), initialResourceVersions__.getValue());
              bitField0_ |= 0x00000040;
              break;
            } // case 42
            case 50: {
              responseNonce_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000080;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getErrorDetailFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000100;
              break;
            } // case 58
            case 66: {
              io.envoyproxy.envoy.service.discovery.v3.ResourceLocator m =
                  input.readMessage(
                      io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.parser(),
                      extensionRegistry);
              if (resourceLocatorsSubscribeBuilder_ == null) {
                ensureResourceLocatorsSubscribeIsMutable();
                resourceLocatorsSubscribe_.add(m);
              } else {
                resourceLocatorsSubscribeBuilder_.addMessage(m);
              }
              break;
            } // case 66
            case 74: {
              io.envoyproxy.envoy.service.discovery.v3.ResourceLocator m =
                  input.readMessage(
                      io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.parser(),
                      extensionRegistry);
              if (resourceLocatorsUnsubscribeBuilder_ == null) {
                ensureResourceLocatorsUnsubscribeIsMutable();
                resourceLocatorsUnsubscribe_.add(m);
              } else {
                resourceLocatorsUnsubscribeBuilder_.addMessage(m);
              }
              break;
            } // case 74
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.config.core.v3.Node node_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.Node, io.envoyproxy.envoy.config.core.v3.Node.Builder, io.envoyproxy.envoy.config.core.v3.NodeOrBuilder> nodeBuilder_;
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     * @return Whether the node field is set.
     */
    public boolean hasNode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     * @return The node.
     */
    public io.envoyproxy.envoy.config.core.v3.Node getNode() {
      if (nodeBuilder_ == null) {
        return node_ == null ? io.envoyproxy.envoy.config.core.v3.Node.getDefaultInstance() : node_;
      } else {
        return nodeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    public Builder setNode(io.envoyproxy.envoy.config.core.v3.Node value) {
      if (nodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        node_ = value;
      } else {
        nodeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    public Builder setNode(
        io.envoyproxy.envoy.config.core.v3.Node.Builder builderForValue) {
      if (nodeBuilder_ == null) {
        node_ = builderForValue.build();
      } else {
        nodeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    public Builder mergeNode(io.envoyproxy.envoy.config.core.v3.Node value) {
      if (nodeBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          node_ != null &&
          node_ != io.envoyproxy.envoy.config.core.v3.Node.getDefaultInstance()) {
          getNodeBuilder().mergeFrom(value);
        } else {
          node_ = value;
        }
      } else {
        nodeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    public Builder clearNode() {
      bitField0_ = (bitField0_ & ~0x00000001);
      node_ = null;
      if (nodeBuilder_ != null) {
        nodeBuilder_.dispose();
        nodeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.Node.Builder getNodeBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.NodeOrBuilder getNodeOrBuilder() {
      if (nodeBuilder_ != null) {
        return nodeBuilder_.getMessageOrBuilder();
      } else {
        return node_ == null ?
            io.envoyproxy.envoy.config.core.v3.Node.getDefaultInstance() : node_;
      }
    }
    /**
     * <pre>
     * The node making the request.
     * </pre>
     *
     * <code>.envoy.config.core.v3.Node node = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.Node, io.envoyproxy.envoy.config.core.v3.Node.Builder, io.envoyproxy.envoy.config.core.v3.NodeOrBuilder> 
        getNodeFieldBuilder() {
      if (nodeBuilder_ == null) {
        nodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.Node, io.envoyproxy.envoy.config.core.v3.Node.Builder, io.envoyproxy.envoy.config.core.v3.NodeOrBuilder>(
                getNode(),
                getParentForChildren(),
                isClean());
        node_ = null;
      }
      return nodeBuilder_;
    }

    private java.lang.Object typeUrl_ = "";
    /**
     * <pre>
     * Type of the resource that is being requested, e.g.
     * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
     * resources are only referenced via ``xds_resource_subscribe`` and
     * ``xds_resources_unsubscribe``.
     * </pre>
     *
     * <code>string type_url = 2;</code>
     * @return The typeUrl.
     */
    public java.lang.String getTypeUrl() {
      java.lang.Object ref = typeUrl_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        typeUrl_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Type of the resource that is being requested, e.g.
     * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
     * resources are only referenced via ``xds_resource_subscribe`` and
     * ``xds_resources_unsubscribe``.
     * </pre>
     *
     * <code>string type_url = 2;</code>
     * @return The bytes for typeUrl.
     */
    public com.google.protobuf.ByteString
        getTypeUrlBytes() {
      java.lang.Object ref = typeUrl_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        typeUrl_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Type of the resource that is being requested, e.g.
     * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
     * resources are only referenced via ``xds_resource_subscribe`` and
     * ``xds_resources_unsubscribe``.
     * </pre>
     *
     * <code>string type_url = 2;</code>
     * @param value The typeUrl to set.
     * @return This builder for chaining.
     */
    public Builder setTypeUrl(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      typeUrl_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of the resource that is being requested, e.g.
     * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
     * resources are only referenced via ``xds_resource_subscribe`` and
     * ``xds_resources_unsubscribe``.
     * </pre>
     *
     * <code>string type_url = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTypeUrl() {
      typeUrl_ = getDefaultInstance().getTypeUrl();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of the resource that is being requested, e.g.
     * ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
     * resources are only referenced via ``xds_resource_subscribe`` and
     * ``xds_resources_unsubscribe``.
     * </pre>
     *
     * <code>string type_url = 2;</code>
     * @param value The bytes for typeUrl to set.
     * @return This builder for chaining.
     */
    public Builder setTypeUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      typeUrl_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList resourceNamesSubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureResourceNamesSubscribeIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        resourceNamesSubscribe_ = new com.google.protobuf.LazyStringArrayList(resourceNamesSubscribe_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @return A list containing the resourceNamesSubscribe.
     */
    public com.google.protobuf.ProtocolStringList
        getResourceNamesSubscribeList() {
      return resourceNamesSubscribe_.getUnmodifiableView();
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @return The count of resourceNamesSubscribe.
     */
    public int getResourceNamesSubscribeCount() {
      return resourceNamesSubscribe_.size();
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @param index The index of the element to return.
     * @return The resourceNamesSubscribe at the given index.
     */
    public java.lang.String getResourceNamesSubscribe(int index) {
      return resourceNamesSubscribe_.get(index);
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the resourceNamesSubscribe at the given index.
     */
    public com.google.protobuf.ByteString
        getResourceNamesSubscribeBytes(int index) {
      return resourceNamesSubscribe_.getByteString(index);
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @param index The index to set the value at.
     * @param value The resourceNamesSubscribe to set.
     * @return This builder for chaining.
     */
    public Builder setResourceNamesSubscribe(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureResourceNamesSubscribeIsMutable();
      resourceNamesSubscribe_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @param value The resourceNamesSubscribe to add.
     * @return This builder for chaining.
     */
    public Builder addResourceNamesSubscribe(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureResourceNamesSubscribeIsMutable();
      resourceNamesSubscribe_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @param values The resourceNamesSubscribe to add.
     * @return This builder for chaining.
     */
    public Builder addAllResourceNamesSubscribe(
        java.lang.Iterable<java.lang.String> values) {
      ensureResourceNamesSubscribeIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, resourceNamesSubscribe_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearResourceNamesSubscribe() {
      resourceNamesSubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DeltaDiscoveryRequests allow the client to add or remove individual
     * resources to the set of tracked resources in the context of a stream.
     * All resource names in the resource_names_subscribe list are added to the
     * set of tracked resources and all resource names in the resource_names_unsubscribe
     * list are removed from the set of tracked resources.
     * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
     * resource_names_unsubscribe list simply means that no resources are to be
     * added or removed to the resource list.
     * *Like* state-of-the-world xDS, the server must send updates for all tracked
     * resources, but can also send updates for resources the client has not subscribed to.
     * NOTE: the server must respond with all resources listed in resource_names_subscribe,
     * even if it believes the client has the most recent version of them. The reason:
     * the client may have dropped them, but then regained interest before it had a chance
     * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
     * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
     * and initial_resource_versions.
     * A list of Resource names to add to the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_subscribe = 3;</code>
     * @param value The bytes of the resourceNamesSubscribe to add.
     * @return This builder for chaining.
     */
    public Builder addResourceNamesSubscribeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureResourceNamesSubscribeIsMutable();
      resourceNamesSubscribe_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList resourceNamesUnsubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureResourceNamesUnsubscribeIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        resourceNamesUnsubscribe_ = new com.google.protobuf.LazyStringArrayList(resourceNamesUnsubscribe_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @return A list containing the resourceNamesUnsubscribe.
     */
    public com.google.protobuf.ProtocolStringList
        getResourceNamesUnsubscribeList() {
      return resourceNamesUnsubscribe_.getUnmodifiableView();
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @return The count of resourceNamesUnsubscribe.
     */
    public int getResourceNamesUnsubscribeCount() {
      return resourceNamesUnsubscribe_.size();
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @param index The index of the element to return.
     * @return The resourceNamesUnsubscribe at the given index.
     */
    public java.lang.String getResourceNamesUnsubscribe(int index) {
      return resourceNamesUnsubscribe_.get(index);
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the resourceNamesUnsubscribe at the given index.
     */
    public com.google.protobuf.ByteString
        getResourceNamesUnsubscribeBytes(int index) {
      return resourceNamesUnsubscribe_.getByteString(index);
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @param index The index to set the value at.
     * @param value The resourceNamesUnsubscribe to set.
     * @return This builder for chaining.
     */
    public Builder setResourceNamesUnsubscribe(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureResourceNamesUnsubscribeIsMutable();
      resourceNamesUnsubscribe_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @param value The resourceNamesUnsubscribe to add.
     * @return This builder for chaining.
     */
    public Builder addResourceNamesUnsubscribe(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureResourceNamesUnsubscribeIsMutable();
      resourceNamesUnsubscribe_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @param values The resourceNamesUnsubscribe to add.
     * @return This builder for chaining.
     */
    public Builder addAllResourceNamesUnsubscribe(
        java.lang.Iterable<java.lang.String> values) {
      ensureResourceNamesUnsubscribeIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, resourceNamesUnsubscribe_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearResourceNamesUnsubscribe() {
      resourceNamesUnsubscribe_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of Resource names to remove from the list of tracked resources.
     * </pre>
     *
     * <code>repeated string resource_names_unsubscribe = 4;</code>
     * @param value The bytes of the resourceNamesUnsubscribe to add.
     * @return This builder for chaining.
     */
    public Builder addResourceNamesUnsubscribeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureResourceNamesUnsubscribeIsMutable();
      resourceNamesUnsubscribe_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> resourceLocatorsSubscribe_ =
      java.util.Collections.emptyList();
    private void ensureResourceLocatorsSubscribeIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        resourceLocatorsSubscribe_ = new java.util.ArrayList<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator>(resourceLocatorsSubscribe_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.service.discovery.v3.ResourceLocator, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder, io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> resourceLocatorsSubscribeBuilder_;

    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> getResourceLocatorsSubscribeList() {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(resourceLocatorsSubscribe_);
      } else {
        return resourceLocatorsSubscribeBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public int getResourceLocatorsSubscribeCount() {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        return resourceLocatorsSubscribe_.size();
      } else {
        return resourceLocatorsSubscribeBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator getResourceLocatorsSubscribe(int index) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        return resourceLocatorsSubscribe_.get(index);
      } else {
        return resourceLocatorsSubscribeBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder setResourceLocatorsSubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator value) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.set(index, value);
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder setResourceLocatorsSubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder builderForValue) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.set(index, builderForValue.build());
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder addResourceLocatorsSubscribe(io.envoyproxy.envoy.service.discovery.v3.ResourceLocator value) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.add(value);
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder addResourceLocatorsSubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator value) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.add(index, value);
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder addResourceLocatorsSubscribe(
        io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder builderForValue) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.add(builderForValue.build());
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder addResourceLocatorsSubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder builderForValue) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.add(index, builderForValue.build());
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder addAllResourceLocatorsSubscribe(
        java.lang.Iterable<? extends io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> values) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        ensureResourceLocatorsSubscribeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, resourceLocatorsSubscribe_);
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder clearResourceLocatorsSubscribe() {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        resourceLocatorsSubscribe_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public Builder removeResourceLocatorsSubscribe(int index) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        ensureResourceLocatorsSubscribeIsMutable();
        resourceLocatorsSubscribe_.remove(index);
        onChanged();
      } else {
        resourceLocatorsSubscribeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder getResourceLocatorsSubscribeBuilder(
        int index) {
      return getResourceLocatorsSubscribeFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder getResourceLocatorsSubscribeOrBuilder(
        int index) {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        return resourceLocatorsSubscribe_.get(index);  } else {
        return resourceLocatorsSubscribeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> 
         getResourceLocatorsSubscribeOrBuilderList() {
      if (resourceLocatorsSubscribeBuilder_ != null) {
        return resourceLocatorsSubscribeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(resourceLocatorsSubscribe_);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder addResourceLocatorsSubscribeBuilder() {
      return getResourceLocatorsSubscribeFieldBuilder().addBuilder(
          io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.getDefaultInstance());
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder addResourceLocatorsSubscribeBuilder(
        int index) {
      return getResourceLocatorsSubscribeFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.getDefaultInstance());
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_subscribe = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder> 
         getResourceLocatorsSubscribeBuilderList() {
      return getResourceLocatorsSubscribeFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.service.discovery.v3.ResourceLocator, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder, io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> 
        getResourceLocatorsSubscribeFieldBuilder() {
      if (resourceLocatorsSubscribeBuilder_ == null) {
        resourceLocatorsSubscribeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.service.discovery.v3.ResourceLocator, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder, io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder>(
                resourceLocatorsSubscribe_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        resourceLocatorsSubscribe_ = null;
      }
      return resourceLocatorsSubscribeBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> resourceLocatorsUnsubscribe_ =
      java.util.Collections.emptyList();
    private void ensureResourceLocatorsUnsubscribeIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        resourceLocatorsUnsubscribe_ = new java.util.ArrayList<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator>(resourceLocatorsUnsubscribe_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.service.discovery.v3.ResourceLocator, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder, io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> resourceLocatorsUnsubscribeBuilder_;

    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> getResourceLocatorsUnsubscribeList() {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(resourceLocatorsUnsubscribe_);
      } else {
        return resourceLocatorsUnsubscribeBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public int getResourceLocatorsUnsubscribeCount() {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        return resourceLocatorsUnsubscribe_.size();
      } else {
        return resourceLocatorsUnsubscribeBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator getResourceLocatorsUnsubscribe(int index) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        return resourceLocatorsUnsubscribe_.get(index);
      } else {
        return resourceLocatorsUnsubscribeBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder setResourceLocatorsUnsubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator value) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.set(index, value);
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder setResourceLocatorsUnsubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder builderForValue) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.set(index, builderForValue.build());
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder addResourceLocatorsUnsubscribe(io.envoyproxy.envoy.service.discovery.v3.ResourceLocator value) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.add(value);
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder addResourceLocatorsUnsubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator value) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.add(index, value);
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder addResourceLocatorsUnsubscribe(
        io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder builderForValue) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.add(builderForValue.build());
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder addResourceLocatorsUnsubscribe(
        int index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder builderForValue) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.add(index, builderForValue.build());
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder addAllResourceLocatorsUnsubscribe(
        java.lang.Iterable<? extends io.envoyproxy.envoy.service.discovery.v3.ResourceLocator> values) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        ensureResourceLocatorsUnsubscribeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, resourceLocatorsUnsubscribe_);
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder clearResourceLocatorsUnsubscribe() {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        resourceLocatorsUnsubscribe_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public Builder removeResourceLocatorsUnsubscribe(int index) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        ensureResourceLocatorsUnsubscribeIsMutable();
        resourceLocatorsUnsubscribe_.remove(index);
        onChanged();
      } else {
        resourceLocatorsUnsubscribeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder getResourceLocatorsUnsubscribeBuilder(
        int index) {
      return getResourceLocatorsUnsubscribeFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder getResourceLocatorsUnsubscribeOrBuilder(
        int index) {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        return resourceLocatorsUnsubscribe_.get(index);  } else {
        return resourceLocatorsUnsubscribeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> 
         getResourceLocatorsUnsubscribeOrBuilderList() {
      if (resourceLocatorsUnsubscribeBuilder_ != null) {
        return resourceLocatorsUnsubscribeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(resourceLocatorsUnsubscribe_);
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder addResourceLocatorsUnsubscribeBuilder() {
      return getResourceLocatorsUnsubscribeFieldBuilder().addBuilder(
          io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.getDefaultInstance());
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder addResourceLocatorsUnsubscribeBuilder(
        int index) {
      return getResourceLocatorsUnsubscribeFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.getDefaultInstance());
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
     * along with each resource name.
     * Note that it is legal for a request to have some resources listed
     * in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
     * </pre>
     *
     * <code>repeated .envoy.service.discovery.v3.ResourceLocator resource_locators_unsubscribe = 9;</code>
     */
    public java.util.List<io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder> 
         getResourceLocatorsUnsubscribeBuilderList() {
      return getResourceLocatorsUnsubscribeFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.service.discovery.v3.ResourceLocator, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder, io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder> 
        getResourceLocatorsUnsubscribeFieldBuilder() {
      if (resourceLocatorsUnsubscribeBuilder_ == null) {
        resourceLocatorsUnsubscribeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.service.discovery.v3.ResourceLocator, io.envoyproxy.envoy.service.discovery.v3.ResourceLocator.Builder, io.envoyproxy.envoy.service.discovery.v3.ResourceLocatorOrBuilder>(
                resourceLocatorsUnsubscribe_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        resourceLocatorsUnsubscribe_ = null;
      }
      return resourceLocatorsUnsubscribeBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> initialResourceVersions_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetInitialResourceVersions() {
      if (initialResourceVersions_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            InitialResourceVersionsDefaultEntryHolder.defaultEntry);
      }
      return initialResourceVersions_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableInitialResourceVersions() {
      if (initialResourceVersions_ == null) {
        initialResourceVersions_ = com.google.protobuf.MapField.newMapField(
            InitialResourceVersionsDefaultEntryHolder.defaultEntry);
      }
      if (!initialResourceVersions_.isMutable()) {
        initialResourceVersions_ = initialResourceVersions_.copy();
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return initialResourceVersions_;
    }
    public int getInitialResourceVersionsCount() {
      return internalGetInitialResourceVersions().getMap().size();
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    @java.lang.Override
    public boolean containsInitialResourceVersions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetInitialResourceVersions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInitialResourceVersionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getInitialResourceVersions() {
      return getInitialResourceVersionsMap();
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getInitialResourceVersionsMap() {
      return internalGetInitialResourceVersions().getMap();
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getInitialResourceVersionsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetInitialResourceVersions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    @java.lang.Override
    public java.lang.String getInitialResourceVersionsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetInitialResourceVersions().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearInitialResourceVersions() {
      bitField0_ = (bitField0_ & ~0x00000040);
      internalGetMutableInitialResourceVersions().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    public Builder removeInitialResourceVersions(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableInitialResourceVersions().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
        getMutableInitialResourceVersions() {
      bitField0_ |= 0x00000040;
      return internalGetMutableInitialResourceVersions().getMutableMap();
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    public Builder putInitialResourceVersions(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableInitialResourceVersions().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000040;
      return this;
    }
    /**
     * <pre>
     * Informs the server of the versions of the resources the xDS client knows of, to enable the
     * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
     * It will not be populated: [1] in the very first stream of a session, since the client will
     * not yet have any resources,  [2] in any message after the first in a stream (for a given
     * type_url), since the server will already be correctly tracking the client's state.
     * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
     * The map's keys are names of xDS resources known to the xDS client.
     * The map's values are opaque resource versions.
     * </pre>
     *
     * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
     */
    public Builder putAllInitialResourceVersions(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableInitialResourceVersions().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000040;
      return this;
    }

    private java.lang.Object responseNonce_ = "";
    /**
     * <pre>
     * When the DeltaDiscoveryRequest is a ACK or NACK message in response
     * to a previous DeltaDiscoveryResponse, the response_nonce must be the
     * nonce in the DeltaDiscoveryResponse.
     * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
     * </pre>
     *
     * <code>string response_nonce = 6;</code>
     * @return The responseNonce.
     */
    public java.lang.String getResponseNonce() {
      java.lang.Object ref = responseNonce_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        responseNonce_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * When the DeltaDiscoveryRequest is a ACK or NACK message in response
     * to a previous DeltaDiscoveryResponse, the response_nonce must be the
     * nonce in the DeltaDiscoveryResponse.
     * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
     * </pre>
     *
     * <code>string response_nonce = 6;</code>
     * @return The bytes for responseNonce.
     */
    public com.google.protobuf.ByteString
        getResponseNonceBytes() {
      java.lang.Object ref = responseNonce_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        responseNonce_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * When the DeltaDiscoveryRequest is a ACK or NACK message in response
     * to a previous DeltaDiscoveryResponse, the response_nonce must be the
     * nonce in the DeltaDiscoveryResponse.
     * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
     * </pre>
     *
     * <code>string response_nonce = 6;</code>
     * @param value The responseNonce to set.
     * @return This builder for chaining.
     */
    public Builder setResponseNonce(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      responseNonce_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the DeltaDiscoveryRequest is a ACK or NACK message in response
     * to a previous DeltaDiscoveryResponse, the response_nonce must be the
     * nonce in the DeltaDiscoveryResponse.
     * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
     * </pre>
     *
     * <code>string response_nonce = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearResponseNonce() {
      responseNonce_ = getDefaultInstance().getResponseNonce();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the DeltaDiscoveryRequest is a ACK or NACK message in response
     * to a previous DeltaDiscoveryResponse, the response_nonce must be the
     * nonce in the DeltaDiscoveryResponse.
     * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
     * </pre>
     *
     * <code>string response_nonce = 6;</code>
     * @param value The bytes for responseNonce to set.
     * @return This builder for chaining.
     */
    public Builder setResponseNonceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      responseNonce_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private com.google.rpc.Status errorDetail_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> errorDetailBuilder_;
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     * @return Whether the errorDetail field is set.
     */
    public boolean hasErrorDetail() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     * @return The errorDetail.
     */
    public com.google.rpc.Status getErrorDetail() {
      if (errorDetailBuilder_ == null) {
        return errorDetail_ == null ? com.google.rpc.Status.getDefaultInstance() : errorDetail_;
      } else {
        return errorDetailBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    public Builder setErrorDetail(com.google.rpc.Status value) {
      if (errorDetailBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        errorDetail_ = value;
      } else {
        errorDetailBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    public Builder setErrorDetail(
        com.google.rpc.Status.Builder builderForValue) {
      if (errorDetailBuilder_ == null) {
        errorDetail_ = builderForValue.build();
      } else {
        errorDetailBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    public Builder mergeErrorDetail(com.google.rpc.Status value) {
      if (errorDetailBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0) &&
          errorDetail_ != null &&
          errorDetail_ != com.google.rpc.Status.getDefaultInstance()) {
          getErrorDetailBuilder().mergeFrom(value);
        } else {
          errorDetail_ = value;
        }
      } else {
        errorDetailBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    public Builder clearErrorDetail() {
      bitField0_ = (bitField0_ & ~0x00000100);
      errorDetail_ = null;
      if (errorDetailBuilder_ != null) {
        errorDetailBuilder_.dispose();
        errorDetailBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    public com.google.rpc.Status.Builder getErrorDetailBuilder() {
      bitField0_ |= 0x00000100;
      onChanged();
      return getErrorDetailFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    public com.google.rpc.StatusOrBuilder getErrorDetailOrBuilder() {
      if (errorDetailBuilder_ != null) {
        return errorDetailBuilder_.getMessageOrBuilder();
      } else {
        return errorDetail_ == null ?
            com.google.rpc.Status.getDefaultInstance() : errorDetail_;
      }
    }
    /**
     * <pre>
     * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
     * failed to update configuration. The ``message`` field in ``error_details``
     * provides the Envoy internal exception related to the failure.
     * </pre>
     *
     * <code>.google.rpc.Status error_detail = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder> 
        getErrorDetailFieldBuilder() {
      if (errorDetailBuilder_ == null) {
        errorDetailBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.rpc.Status, com.google.rpc.Status.Builder, com.google.rpc.StatusOrBuilder>(
                getErrorDetail(),
                getParentForChildren(),
                isClean());
        errorDetail_ = null;
      }
      return errorDetailBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.service.discovery.v3.DeltaDiscoveryRequest)
  }

  // @@protoc_insertion_point(class_scope:envoy.service.discovery.v3.DeltaDiscoveryRequest)
  private static final io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest();
  }

  public static io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DeltaDiscoveryRequest>
      PARSER = new com.google.protobuf.AbstractParser<DeltaDiscoveryRequest>() {
    @java.lang.Override
    public DeltaDiscoveryRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DeltaDiscoveryRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DeltaDiscoveryRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.service.discovery.v3.DeltaDiscoveryRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

