// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/maps/fleetengine/v1/traffic.proto

package google.maps.fleetengine.v1;

/**
 * <pre>
 * Traffic density along a Vehicle's path.
 * </pre>
 *
 * Protobuf type {@code maps.fleetengine.v1.ConsumableTrafficPolyline}
 */
public final class ConsumableTrafficPolyline extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:maps.fleetengine.v1.ConsumableTrafficPolyline)
    ConsumableTrafficPolylineOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConsumableTrafficPolyline.newBuilder() to construct.
  private ConsumableTrafficPolyline(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConsumableTrafficPolyline() {
    speedReadingInterval_ = java.util.Collections.emptyList();
    encodedPathToWaypoint_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConsumableTrafficPolyline();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConsumableTrafficPolyline(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              speedReadingInterval_ = new java.util.ArrayList<google.maps.fleetengine.v1.SpeedReadingInterval>();
              mutable_bitField0_ |= 0x00000001;
            }
            speedReadingInterval_.add(
                input.readMessage(google.maps.fleetengine.v1.SpeedReadingInterval.parser(), extensionRegistry));
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            encodedPathToWaypoint_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        speedReadingInterval_ = java.util.Collections.unmodifiableList(speedReadingInterval_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return google.maps.fleetengine.v1.TrafficProto.internal_static_maps_fleetengine_v1_ConsumableTrafficPolyline_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return google.maps.fleetengine.v1.TrafficProto.internal_static_maps_fleetengine_v1_ConsumableTrafficPolyline_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            google.maps.fleetengine.v1.ConsumableTrafficPolyline.class, google.maps.fleetengine.v1.ConsumableTrafficPolyline.Builder.class);
  }

  public static final int SPEED_READING_INTERVAL_FIELD_NUMBER = 1;
  private java.util.List<google.maps.fleetengine.v1.SpeedReadingInterval> speedReadingInterval_;
  /**
   * <pre>
   * Traffic speed along the path from the previous waypoint to the current
   * waypoint.
   * </pre>
   *
   * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
   */
  @java.lang.Override
  public java.util.List<google.maps.fleetengine.v1.SpeedReadingInterval> getSpeedReadingIntervalList() {
    return speedReadingInterval_;
  }
  /**
   * <pre>
   * Traffic speed along the path from the previous waypoint to the current
   * waypoint.
   * </pre>
   *
   * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder> 
      getSpeedReadingIntervalOrBuilderList() {
    return speedReadingInterval_;
  }
  /**
   * <pre>
   * Traffic speed along the path from the previous waypoint to the current
   * waypoint.
   * </pre>
   *
   * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
   */
  @java.lang.Override
  public int getSpeedReadingIntervalCount() {
    return speedReadingInterval_.size();
  }
  /**
   * <pre>
   * Traffic speed along the path from the previous waypoint to the current
   * waypoint.
   * </pre>
   *
   * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
   */
  @java.lang.Override
  public google.maps.fleetengine.v1.SpeedReadingInterval getSpeedReadingInterval(int index) {
    return speedReadingInterval_.get(index);
  }
  /**
   * <pre>
   * Traffic speed along the path from the previous waypoint to the current
   * waypoint.
   * </pre>
   *
   * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
   */
  @java.lang.Override
  public google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder getSpeedReadingIntervalOrBuilder(
      int index) {
    return speedReadingInterval_.get(index);
  }

  public static final int ENCODED_PATH_TO_WAYPOINT_FIELD_NUMBER = 2;
  private volatile java.lang.Object encodedPathToWaypoint_;
  /**
   * <pre>
   * The path the driver is taking from the previous waypoint to the current
   * waypoint. This path has landmarks in it so clients can show traffic markers
   * along the path (see `speed_reading_interval`).  Decoding is not yet
   * supported.
   * </pre>
   *
   * <code>string encoded_path_to_waypoint = 2;</code>
   * @return The encodedPathToWaypoint.
   */
  @java.lang.Override
  public java.lang.String getEncodedPathToWaypoint() {
    java.lang.Object ref = encodedPathToWaypoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      encodedPathToWaypoint_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The path the driver is taking from the previous waypoint to the current
   * waypoint. This path has landmarks in it so clients can show traffic markers
   * along the path (see `speed_reading_interval`).  Decoding is not yet
   * supported.
   * </pre>
   *
   * <code>string encoded_path_to_waypoint = 2;</code>
   * @return The bytes for encodedPathToWaypoint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getEncodedPathToWaypointBytes() {
    java.lang.Object ref = encodedPathToWaypoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      encodedPathToWaypoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < speedReadingInterval_.size(); i++) {
      output.writeMessage(1, speedReadingInterval_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(encodedPathToWaypoint_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, encodedPathToWaypoint_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < speedReadingInterval_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, speedReadingInterval_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(encodedPathToWaypoint_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, encodedPathToWaypoint_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof google.maps.fleetengine.v1.ConsumableTrafficPolyline)) {
      return super.equals(obj);
    }
    google.maps.fleetengine.v1.ConsumableTrafficPolyline other = (google.maps.fleetengine.v1.ConsumableTrafficPolyline) obj;

    if (!getSpeedReadingIntervalList()
        .equals(other.getSpeedReadingIntervalList())) return false;
    if (!getEncodedPathToWaypoint()
        .equals(other.getEncodedPathToWaypoint())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getSpeedReadingIntervalCount() > 0) {
      hash = (37 * hash) + SPEED_READING_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getSpeedReadingIntervalList().hashCode();
    }
    hash = (37 * hash) + ENCODED_PATH_TO_WAYPOINT_FIELD_NUMBER;
    hash = (53 * hash) + getEncodedPathToWaypoint().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(google.maps.fleetengine.v1.ConsumableTrafficPolyline prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Traffic density along a Vehicle's path.
   * </pre>
   *
   * Protobuf type {@code maps.fleetengine.v1.ConsumableTrafficPolyline}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:maps.fleetengine.v1.ConsumableTrafficPolyline)
      google.maps.fleetengine.v1.ConsumableTrafficPolylineOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return google.maps.fleetengine.v1.TrafficProto.internal_static_maps_fleetengine_v1_ConsumableTrafficPolyline_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return google.maps.fleetengine.v1.TrafficProto.internal_static_maps_fleetengine_v1_ConsumableTrafficPolyline_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              google.maps.fleetengine.v1.ConsumableTrafficPolyline.class, google.maps.fleetengine.v1.ConsumableTrafficPolyline.Builder.class);
    }

    // Construct using google.maps.fleetengine.v1.ConsumableTrafficPolyline.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSpeedReadingIntervalFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (speedReadingIntervalBuilder_ == null) {
        speedReadingInterval_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        speedReadingIntervalBuilder_.clear();
      }
      encodedPathToWaypoint_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return google.maps.fleetengine.v1.TrafficProto.internal_static_maps_fleetengine_v1_ConsumableTrafficPolyline_descriptor;
    }

    @java.lang.Override
    public google.maps.fleetengine.v1.ConsumableTrafficPolyline getDefaultInstanceForType() {
      return google.maps.fleetengine.v1.ConsumableTrafficPolyline.getDefaultInstance();
    }

    @java.lang.Override
    public google.maps.fleetengine.v1.ConsumableTrafficPolyline build() {
      google.maps.fleetengine.v1.ConsumableTrafficPolyline result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public google.maps.fleetengine.v1.ConsumableTrafficPolyline buildPartial() {
      google.maps.fleetengine.v1.ConsumableTrafficPolyline result = new google.maps.fleetengine.v1.ConsumableTrafficPolyline(this);
      int from_bitField0_ = bitField0_;
      if (speedReadingIntervalBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          speedReadingInterval_ = java.util.Collections.unmodifiableList(speedReadingInterval_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.speedReadingInterval_ = speedReadingInterval_;
      } else {
        result.speedReadingInterval_ = speedReadingIntervalBuilder_.build();
      }
      result.encodedPathToWaypoint_ = encodedPathToWaypoint_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof google.maps.fleetengine.v1.ConsumableTrafficPolyline) {
        return mergeFrom((google.maps.fleetengine.v1.ConsumableTrafficPolyline)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(google.maps.fleetengine.v1.ConsumableTrafficPolyline other) {
      if (other == google.maps.fleetengine.v1.ConsumableTrafficPolyline.getDefaultInstance()) return this;
      if (speedReadingIntervalBuilder_ == null) {
        if (!other.speedReadingInterval_.isEmpty()) {
          if (speedReadingInterval_.isEmpty()) {
            speedReadingInterval_ = other.speedReadingInterval_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSpeedReadingIntervalIsMutable();
            speedReadingInterval_.addAll(other.speedReadingInterval_);
          }
          onChanged();
        }
      } else {
        if (!other.speedReadingInterval_.isEmpty()) {
          if (speedReadingIntervalBuilder_.isEmpty()) {
            speedReadingIntervalBuilder_.dispose();
            speedReadingIntervalBuilder_ = null;
            speedReadingInterval_ = other.speedReadingInterval_;
            bitField0_ = (bitField0_ & ~0x00000001);
            speedReadingIntervalBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSpeedReadingIntervalFieldBuilder() : null;
          } else {
            speedReadingIntervalBuilder_.addAllMessages(other.speedReadingInterval_);
          }
        }
      }
      if (!other.getEncodedPathToWaypoint().isEmpty()) {
        encodedPathToWaypoint_ = other.encodedPathToWaypoint_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      google.maps.fleetengine.v1.ConsumableTrafficPolyline parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (google.maps.fleetengine.v1.ConsumableTrafficPolyline) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<google.maps.fleetengine.v1.SpeedReadingInterval> speedReadingInterval_ =
      java.util.Collections.emptyList();
    private void ensureSpeedReadingIntervalIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        speedReadingInterval_ = new java.util.ArrayList<google.maps.fleetengine.v1.SpeedReadingInterval>(speedReadingInterval_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        google.maps.fleetengine.v1.SpeedReadingInterval, google.maps.fleetengine.v1.SpeedReadingInterval.Builder, google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder> speedReadingIntervalBuilder_;

    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public java.util.List<google.maps.fleetengine.v1.SpeedReadingInterval> getSpeedReadingIntervalList() {
      if (speedReadingIntervalBuilder_ == null) {
        return java.util.Collections.unmodifiableList(speedReadingInterval_);
      } else {
        return speedReadingIntervalBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public int getSpeedReadingIntervalCount() {
      if (speedReadingIntervalBuilder_ == null) {
        return speedReadingInterval_.size();
      } else {
        return speedReadingIntervalBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public google.maps.fleetengine.v1.SpeedReadingInterval getSpeedReadingInterval(int index) {
      if (speedReadingIntervalBuilder_ == null) {
        return speedReadingInterval_.get(index);
      } else {
        return speedReadingIntervalBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder setSpeedReadingInterval(
        int index, google.maps.fleetengine.v1.SpeedReadingInterval value) {
      if (speedReadingIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.set(index, value);
        onChanged();
      } else {
        speedReadingIntervalBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder setSpeedReadingInterval(
        int index, google.maps.fleetengine.v1.SpeedReadingInterval.Builder builderForValue) {
      if (speedReadingIntervalBuilder_ == null) {
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.set(index, builderForValue.build());
        onChanged();
      } else {
        speedReadingIntervalBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder addSpeedReadingInterval(google.maps.fleetengine.v1.SpeedReadingInterval value) {
      if (speedReadingIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.add(value);
        onChanged();
      } else {
        speedReadingIntervalBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder addSpeedReadingInterval(
        int index, google.maps.fleetengine.v1.SpeedReadingInterval value) {
      if (speedReadingIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.add(index, value);
        onChanged();
      } else {
        speedReadingIntervalBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder addSpeedReadingInterval(
        google.maps.fleetengine.v1.SpeedReadingInterval.Builder builderForValue) {
      if (speedReadingIntervalBuilder_ == null) {
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.add(builderForValue.build());
        onChanged();
      } else {
        speedReadingIntervalBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder addSpeedReadingInterval(
        int index, google.maps.fleetengine.v1.SpeedReadingInterval.Builder builderForValue) {
      if (speedReadingIntervalBuilder_ == null) {
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.add(index, builderForValue.build());
        onChanged();
      } else {
        speedReadingIntervalBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder addAllSpeedReadingInterval(
        java.lang.Iterable<? extends google.maps.fleetengine.v1.SpeedReadingInterval> values) {
      if (speedReadingIntervalBuilder_ == null) {
        ensureSpeedReadingIntervalIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, speedReadingInterval_);
        onChanged();
      } else {
        speedReadingIntervalBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder clearSpeedReadingInterval() {
      if (speedReadingIntervalBuilder_ == null) {
        speedReadingInterval_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        speedReadingIntervalBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public Builder removeSpeedReadingInterval(int index) {
      if (speedReadingIntervalBuilder_ == null) {
        ensureSpeedReadingIntervalIsMutable();
        speedReadingInterval_.remove(index);
        onChanged();
      } else {
        speedReadingIntervalBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public google.maps.fleetengine.v1.SpeedReadingInterval.Builder getSpeedReadingIntervalBuilder(
        int index) {
      return getSpeedReadingIntervalFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder getSpeedReadingIntervalOrBuilder(
        int index) {
      if (speedReadingIntervalBuilder_ == null) {
        return speedReadingInterval_.get(index);  } else {
        return speedReadingIntervalBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public java.util.List<? extends google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder> 
         getSpeedReadingIntervalOrBuilderList() {
      if (speedReadingIntervalBuilder_ != null) {
        return speedReadingIntervalBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(speedReadingInterval_);
      }
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public google.maps.fleetengine.v1.SpeedReadingInterval.Builder addSpeedReadingIntervalBuilder() {
      return getSpeedReadingIntervalFieldBuilder().addBuilder(
          google.maps.fleetengine.v1.SpeedReadingInterval.getDefaultInstance());
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public google.maps.fleetengine.v1.SpeedReadingInterval.Builder addSpeedReadingIntervalBuilder(
        int index) {
      return getSpeedReadingIntervalFieldBuilder().addBuilder(
          index, google.maps.fleetengine.v1.SpeedReadingInterval.getDefaultInstance());
    }
    /**
     * <pre>
     * Traffic speed along the path from the previous waypoint to the current
     * waypoint.
     * </pre>
     *
     * <code>repeated .maps.fleetengine.v1.SpeedReadingInterval speed_reading_interval = 1;</code>
     */
    public java.util.List<google.maps.fleetengine.v1.SpeedReadingInterval.Builder> 
         getSpeedReadingIntervalBuilderList() {
      return getSpeedReadingIntervalFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        google.maps.fleetengine.v1.SpeedReadingInterval, google.maps.fleetengine.v1.SpeedReadingInterval.Builder, google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder> 
        getSpeedReadingIntervalFieldBuilder() {
      if (speedReadingIntervalBuilder_ == null) {
        speedReadingIntervalBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            google.maps.fleetengine.v1.SpeedReadingInterval, google.maps.fleetengine.v1.SpeedReadingInterval.Builder, google.maps.fleetengine.v1.SpeedReadingIntervalOrBuilder>(
                speedReadingInterval_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        speedReadingInterval_ = null;
      }
      return speedReadingIntervalBuilder_;
    }

    private java.lang.Object encodedPathToWaypoint_ = "";
    /**
     * <pre>
     * The path the driver is taking from the previous waypoint to the current
     * waypoint. This path has landmarks in it so clients can show traffic markers
     * along the path (see `speed_reading_interval`).  Decoding is not yet
     * supported.
     * </pre>
     *
     * <code>string encoded_path_to_waypoint = 2;</code>
     * @return The encodedPathToWaypoint.
     */
    public java.lang.String getEncodedPathToWaypoint() {
      java.lang.Object ref = encodedPathToWaypoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        encodedPathToWaypoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The path the driver is taking from the previous waypoint to the current
     * waypoint. This path has landmarks in it so clients can show traffic markers
     * along the path (see `speed_reading_interval`).  Decoding is not yet
     * supported.
     * </pre>
     *
     * <code>string encoded_path_to_waypoint = 2;</code>
     * @return The bytes for encodedPathToWaypoint.
     */
    public com.google.protobuf.ByteString
        getEncodedPathToWaypointBytes() {
      java.lang.Object ref = encodedPathToWaypoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        encodedPathToWaypoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The path the driver is taking from the previous waypoint to the current
     * waypoint. This path has landmarks in it so clients can show traffic markers
     * along the path (see `speed_reading_interval`).  Decoding is not yet
     * supported.
     * </pre>
     *
     * <code>string encoded_path_to_waypoint = 2;</code>
     * @param value The encodedPathToWaypoint to set.
     * @return This builder for chaining.
     */
    public Builder setEncodedPathToWaypoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      encodedPathToWaypoint_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The path the driver is taking from the previous waypoint to the current
     * waypoint. This path has landmarks in it so clients can show traffic markers
     * along the path (see `speed_reading_interval`).  Decoding is not yet
     * supported.
     * </pre>
     *
     * <code>string encoded_path_to_waypoint = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearEncodedPathToWaypoint() {
      
      encodedPathToWaypoint_ = getDefaultInstance().getEncodedPathToWaypoint();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The path the driver is taking from the previous waypoint to the current
     * waypoint. This path has landmarks in it so clients can show traffic markers
     * along the path (see `speed_reading_interval`).  Decoding is not yet
     * supported.
     * </pre>
     *
     * <code>string encoded_path_to_waypoint = 2;</code>
     * @param value The bytes for encodedPathToWaypoint to set.
     * @return This builder for chaining.
     */
    public Builder setEncodedPathToWaypointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      encodedPathToWaypoint_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:maps.fleetengine.v1.ConsumableTrafficPolyline)
  }

  // @@protoc_insertion_point(class_scope:maps.fleetengine.v1.ConsumableTrafficPolyline)
  private static final google.maps.fleetengine.v1.ConsumableTrafficPolyline DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new google.maps.fleetengine.v1.ConsumableTrafficPolyline();
  }

  public static google.maps.fleetengine.v1.ConsumableTrafficPolyline getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConsumableTrafficPolyline>
      PARSER = new com.google.protobuf.AbstractParser<ConsumableTrafficPolyline>() {
    @java.lang.Override
    public ConsumableTrafficPolyline parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConsumableTrafficPolyline(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConsumableTrafficPolyline> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConsumableTrafficPolyline> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public google.maps.fleetengine.v1.ConsumableTrafficPolyline getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

